
My_Spi_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006404  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  08006590  08006590  00016590  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006768  08006768  00020184  2**0
                  CONTENTS
  4 .ARM          00000008  08006768  08006768  00016768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006770  08006770  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006770  08006770  00016770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006774  08006774  00016774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  08006778  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020184  2**0
                  CONTENTS
 10 .bss          00000514  20000184  20000184  00020184  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000698  20000698  00020184  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 13 .debug_info   000155f0  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000036ae  00000000  00000000  000357a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000db0  00000000  00000000  00038e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000be8  00000000  00000000  00039c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023c64  00000000  00000000  0003a7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012fca  00000000  00000000  0005e454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c970c  00000000  00000000  0007141e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013ab2a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000037a4  00000000  00000000  0013ab80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000184 	.word	0x20000184
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006574 	.word	0x08006574

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000188 	.word	0x20000188
 80001c4:	08006574 	.word	0x08006574

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2uiz>:
 8000a74:	004a      	lsls	r2, r1, #1
 8000a76:	d211      	bcs.n	8000a9c <__aeabi_d2uiz+0x28>
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d211      	bcs.n	8000aa2 <__aeabi_d2uiz+0x2e>
 8000a7e:	d50d      	bpl.n	8000a9c <__aeabi_d2uiz+0x28>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d40e      	bmi.n	8000aa8 <__aeabi_d2uiz+0x34>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d102      	bne.n	8000aae <__aeabi_d2uiz+0x3a>
 8000aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aac:	4770      	bx	lr
 8000aae:	f04f 0000 	mov.w	r0, #0
 8000ab2:	4770      	bx	lr

08000ab4 <__aeabi_uldivmod>:
 8000ab4:	b953      	cbnz	r3, 8000acc <__aeabi_uldivmod+0x18>
 8000ab6:	b94a      	cbnz	r2, 8000acc <__aeabi_uldivmod+0x18>
 8000ab8:	2900      	cmp	r1, #0
 8000aba:	bf08      	it	eq
 8000abc:	2800      	cmpeq	r0, #0
 8000abe:	bf1c      	itt	ne
 8000ac0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ac4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac8:	f000 b96e 	b.w	8000da8 <__aeabi_idiv0>
 8000acc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ad4:	f000 f806 	bl	8000ae4 <__udivmoddi4>
 8000ad8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000adc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae0:	b004      	add	sp, #16
 8000ae2:	4770      	bx	lr

08000ae4 <__udivmoddi4>:
 8000ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae8:	9d08      	ldr	r5, [sp, #32]
 8000aea:	4604      	mov	r4, r0
 8000aec:	468c      	mov	ip, r1
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	f040 8083 	bne.w	8000bfa <__udivmoddi4+0x116>
 8000af4:	428a      	cmp	r2, r1
 8000af6:	4617      	mov	r7, r2
 8000af8:	d947      	bls.n	8000b8a <__udivmoddi4+0xa6>
 8000afa:	fab2 f282 	clz	r2, r2
 8000afe:	b142      	cbz	r2, 8000b12 <__udivmoddi4+0x2e>
 8000b00:	f1c2 0020 	rsb	r0, r2, #32
 8000b04:	fa24 f000 	lsr.w	r0, r4, r0
 8000b08:	4091      	lsls	r1, r2
 8000b0a:	4097      	lsls	r7, r2
 8000b0c:	ea40 0c01 	orr.w	ip, r0, r1
 8000b10:	4094      	lsls	r4, r2
 8000b12:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b16:	0c23      	lsrs	r3, r4, #16
 8000b18:	fbbc f6f8 	udiv	r6, ip, r8
 8000b1c:	fa1f fe87 	uxth.w	lr, r7
 8000b20:	fb08 c116 	mls	r1, r8, r6, ip
 8000b24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b28:	fb06 f10e 	mul.w	r1, r6, lr
 8000b2c:	4299      	cmp	r1, r3
 8000b2e:	d909      	bls.n	8000b44 <__udivmoddi4+0x60>
 8000b30:	18fb      	adds	r3, r7, r3
 8000b32:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b36:	f080 8119 	bcs.w	8000d6c <__udivmoddi4+0x288>
 8000b3a:	4299      	cmp	r1, r3
 8000b3c:	f240 8116 	bls.w	8000d6c <__udivmoddi4+0x288>
 8000b40:	3e02      	subs	r6, #2
 8000b42:	443b      	add	r3, r7
 8000b44:	1a5b      	subs	r3, r3, r1
 8000b46:	b2a4      	uxth	r4, r4
 8000b48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b4c:	fb08 3310 	mls	r3, r8, r0, r3
 8000b50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b58:	45a6      	cmp	lr, r4
 8000b5a:	d909      	bls.n	8000b70 <__udivmoddi4+0x8c>
 8000b5c:	193c      	adds	r4, r7, r4
 8000b5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b62:	f080 8105 	bcs.w	8000d70 <__udivmoddi4+0x28c>
 8000b66:	45a6      	cmp	lr, r4
 8000b68:	f240 8102 	bls.w	8000d70 <__udivmoddi4+0x28c>
 8000b6c:	3802      	subs	r0, #2
 8000b6e:	443c      	add	r4, r7
 8000b70:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b74:	eba4 040e 	sub.w	r4, r4, lr
 8000b78:	2600      	movs	r6, #0
 8000b7a:	b11d      	cbz	r5, 8000b84 <__udivmoddi4+0xa0>
 8000b7c:	40d4      	lsrs	r4, r2
 8000b7e:	2300      	movs	r3, #0
 8000b80:	e9c5 4300 	strd	r4, r3, [r5]
 8000b84:	4631      	mov	r1, r6
 8000b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b8a:	b902      	cbnz	r2, 8000b8e <__udivmoddi4+0xaa>
 8000b8c:	deff      	udf	#255	; 0xff
 8000b8e:	fab2 f282 	clz	r2, r2
 8000b92:	2a00      	cmp	r2, #0
 8000b94:	d150      	bne.n	8000c38 <__udivmoddi4+0x154>
 8000b96:	1bcb      	subs	r3, r1, r7
 8000b98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b9c:	fa1f f887 	uxth.w	r8, r7
 8000ba0:	2601      	movs	r6, #1
 8000ba2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000ba6:	0c21      	lsrs	r1, r4, #16
 8000ba8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bb0:	fb08 f30c 	mul.w	r3, r8, ip
 8000bb4:	428b      	cmp	r3, r1
 8000bb6:	d907      	bls.n	8000bc8 <__udivmoddi4+0xe4>
 8000bb8:	1879      	adds	r1, r7, r1
 8000bba:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0xe2>
 8000bc0:	428b      	cmp	r3, r1
 8000bc2:	f200 80e9 	bhi.w	8000d98 <__udivmoddi4+0x2b4>
 8000bc6:	4684      	mov	ip, r0
 8000bc8:	1ac9      	subs	r1, r1, r3
 8000bca:	b2a3      	uxth	r3, r4
 8000bcc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bd0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bd4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000bd8:	fb08 f800 	mul.w	r8, r8, r0
 8000bdc:	45a0      	cmp	r8, r4
 8000bde:	d907      	bls.n	8000bf0 <__udivmoddi4+0x10c>
 8000be0:	193c      	adds	r4, r7, r4
 8000be2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x10a>
 8000be8:	45a0      	cmp	r8, r4
 8000bea:	f200 80d9 	bhi.w	8000da0 <__udivmoddi4+0x2bc>
 8000bee:	4618      	mov	r0, r3
 8000bf0:	eba4 0408 	sub.w	r4, r4, r8
 8000bf4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bf8:	e7bf      	b.n	8000b7a <__udivmoddi4+0x96>
 8000bfa:	428b      	cmp	r3, r1
 8000bfc:	d909      	bls.n	8000c12 <__udivmoddi4+0x12e>
 8000bfe:	2d00      	cmp	r5, #0
 8000c00:	f000 80b1 	beq.w	8000d66 <__udivmoddi4+0x282>
 8000c04:	2600      	movs	r6, #0
 8000c06:	e9c5 0100 	strd	r0, r1, [r5]
 8000c0a:	4630      	mov	r0, r6
 8000c0c:	4631      	mov	r1, r6
 8000c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c12:	fab3 f683 	clz	r6, r3
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	d14a      	bne.n	8000cb0 <__udivmoddi4+0x1cc>
 8000c1a:	428b      	cmp	r3, r1
 8000c1c:	d302      	bcc.n	8000c24 <__udivmoddi4+0x140>
 8000c1e:	4282      	cmp	r2, r0
 8000c20:	f200 80b8 	bhi.w	8000d94 <__udivmoddi4+0x2b0>
 8000c24:	1a84      	subs	r4, r0, r2
 8000c26:	eb61 0103 	sbc.w	r1, r1, r3
 8000c2a:	2001      	movs	r0, #1
 8000c2c:	468c      	mov	ip, r1
 8000c2e:	2d00      	cmp	r5, #0
 8000c30:	d0a8      	beq.n	8000b84 <__udivmoddi4+0xa0>
 8000c32:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c36:	e7a5      	b.n	8000b84 <__udivmoddi4+0xa0>
 8000c38:	f1c2 0320 	rsb	r3, r2, #32
 8000c3c:	fa20 f603 	lsr.w	r6, r0, r3
 8000c40:	4097      	lsls	r7, r2
 8000c42:	fa01 f002 	lsl.w	r0, r1, r2
 8000c46:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4a:	40d9      	lsrs	r1, r3
 8000c4c:	4330      	orrs	r0, r6
 8000c4e:	0c03      	lsrs	r3, r0, #16
 8000c50:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c54:	fa1f f887 	uxth.w	r8, r7
 8000c58:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c60:	fb06 f108 	mul.w	r1, r6, r8
 8000c64:	4299      	cmp	r1, r3
 8000c66:	fa04 f402 	lsl.w	r4, r4, r2
 8000c6a:	d909      	bls.n	8000c80 <__udivmoddi4+0x19c>
 8000c6c:	18fb      	adds	r3, r7, r3
 8000c6e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c72:	f080 808d 	bcs.w	8000d90 <__udivmoddi4+0x2ac>
 8000c76:	4299      	cmp	r1, r3
 8000c78:	f240 808a 	bls.w	8000d90 <__udivmoddi4+0x2ac>
 8000c7c:	3e02      	subs	r6, #2
 8000c7e:	443b      	add	r3, r7
 8000c80:	1a5b      	subs	r3, r3, r1
 8000c82:	b281      	uxth	r1, r0
 8000c84:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c88:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c8c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c90:	fb00 f308 	mul.w	r3, r0, r8
 8000c94:	428b      	cmp	r3, r1
 8000c96:	d907      	bls.n	8000ca8 <__udivmoddi4+0x1c4>
 8000c98:	1879      	adds	r1, r7, r1
 8000c9a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c9e:	d273      	bcs.n	8000d88 <__udivmoddi4+0x2a4>
 8000ca0:	428b      	cmp	r3, r1
 8000ca2:	d971      	bls.n	8000d88 <__udivmoddi4+0x2a4>
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	4439      	add	r1, r7
 8000ca8:	1acb      	subs	r3, r1, r3
 8000caa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cae:	e778      	b.n	8000ba2 <__udivmoddi4+0xbe>
 8000cb0:	f1c6 0c20 	rsb	ip, r6, #32
 8000cb4:	fa03 f406 	lsl.w	r4, r3, r6
 8000cb8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cbc:	431c      	orrs	r4, r3
 8000cbe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cc2:	fa01 f306 	lsl.w	r3, r1, r6
 8000cc6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cca:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cce:	431f      	orrs	r7, r3
 8000cd0:	0c3b      	lsrs	r3, r7, #16
 8000cd2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cd6:	fa1f f884 	uxth.w	r8, r4
 8000cda:	fb0e 1119 	mls	r1, lr, r9, r1
 8000cde:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ce2:	fb09 fa08 	mul.w	sl, r9, r8
 8000ce6:	458a      	cmp	sl, r1
 8000ce8:	fa02 f206 	lsl.w	r2, r2, r6
 8000cec:	fa00 f306 	lsl.w	r3, r0, r6
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x220>
 8000cf2:	1861      	adds	r1, r4, r1
 8000cf4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cf8:	d248      	bcs.n	8000d8c <__udivmoddi4+0x2a8>
 8000cfa:	458a      	cmp	sl, r1
 8000cfc:	d946      	bls.n	8000d8c <__udivmoddi4+0x2a8>
 8000cfe:	f1a9 0902 	sub.w	r9, r9, #2
 8000d02:	4421      	add	r1, r4
 8000d04:	eba1 010a 	sub.w	r1, r1, sl
 8000d08:	b2bf      	uxth	r7, r7
 8000d0a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d0e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d12:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d16:	fb00 f808 	mul.w	r8, r0, r8
 8000d1a:	45b8      	cmp	r8, r7
 8000d1c:	d907      	bls.n	8000d2e <__udivmoddi4+0x24a>
 8000d1e:	19e7      	adds	r7, r4, r7
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d22e      	bcs.n	8000d84 <__udivmoddi4+0x2a0>
 8000d26:	45b8      	cmp	r8, r7
 8000d28:	d92c      	bls.n	8000d84 <__udivmoddi4+0x2a0>
 8000d2a:	3802      	subs	r0, #2
 8000d2c:	4427      	add	r7, r4
 8000d2e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d32:	eba7 0708 	sub.w	r7, r7, r8
 8000d36:	fba0 8902 	umull	r8, r9, r0, r2
 8000d3a:	454f      	cmp	r7, r9
 8000d3c:	46c6      	mov	lr, r8
 8000d3e:	4649      	mov	r1, r9
 8000d40:	d31a      	bcc.n	8000d78 <__udivmoddi4+0x294>
 8000d42:	d017      	beq.n	8000d74 <__udivmoddi4+0x290>
 8000d44:	b15d      	cbz	r5, 8000d5e <__udivmoddi4+0x27a>
 8000d46:	ebb3 020e 	subs.w	r2, r3, lr
 8000d4a:	eb67 0701 	sbc.w	r7, r7, r1
 8000d4e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d52:	40f2      	lsrs	r2, r6
 8000d54:	ea4c 0202 	orr.w	r2, ip, r2
 8000d58:	40f7      	lsrs	r7, r6
 8000d5a:	e9c5 2700 	strd	r2, r7, [r5]
 8000d5e:	2600      	movs	r6, #0
 8000d60:	4631      	mov	r1, r6
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	462e      	mov	r6, r5
 8000d68:	4628      	mov	r0, r5
 8000d6a:	e70b      	b.n	8000b84 <__udivmoddi4+0xa0>
 8000d6c:	4606      	mov	r6, r0
 8000d6e:	e6e9      	b.n	8000b44 <__udivmoddi4+0x60>
 8000d70:	4618      	mov	r0, r3
 8000d72:	e6fd      	b.n	8000b70 <__udivmoddi4+0x8c>
 8000d74:	4543      	cmp	r3, r8
 8000d76:	d2e5      	bcs.n	8000d44 <__udivmoddi4+0x260>
 8000d78:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d7c:	eb69 0104 	sbc.w	r1, r9, r4
 8000d80:	3801      	subs	r0, #1
 8000d82:	e7df      	b.n	8000d44 <__udivmoddi4+0x260>
 8000d84:	4608      	mov	r0, r1
 8000d86:	e7d2      	b.n	8000d2e <__udivmoddi4+0x24a>
 8000d88:	4660      	mov	r0, ip
 8000d8a:	e78d      	b.n	8000ca8 <__udivmoddi4+0x1c4>
 8000d8c:	4681      	mov	r9, r0
 8000d8e:	e7b9      	b.n	8000d04 <__udivmoddi4+0x220>
 8000d90:	4666      	mov	r6, ip
 8000d92:	e775      	b.n	8000c80 <__udivmoddi4+0x19c>
 8000d94:	4630      	mov	r0, r6
 8000d96:	e74a      	b.n	8000c2e <__udivmoddi4+0x14a>
 8000d98:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d9c:	4439      	add	r1, r7
 8000d9e:	e713      	b.n	8000bc8 <__udivmoddi4+0xe4>
 8000da0:	3802      	subs	r0, #2
 8000da2:	443c      	add	r4, r7
 8000da4:	e724      	b.n	8000bf0 <__udivmoddi4+0x10c>
 8000da6:	bf00      	nop

08000da8 <__aeabi_idiv0>:
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop

08000dac <DataDecode>:
		ret = E_OK;
	}
	return ret;
}
static Std_ReturnType DataDecode(uint8_t *srdata,uint8_t *desdata,User_ID user_id)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b087      	sub	sp, #28
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	4613      	mov	r3, r2
 8000db8:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType ret = E_NOT_OK;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	75fb      	strb	r3, [r7, #23]
	uint8_t id = 0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	757b      	strb	r3, [r7, #21]
	uint16_t u16len = 0;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	827b      	strh	r3, [r7, #18]
	id = srdata[POS_USER_ID]^srdata[POS_RANDOMKEY];
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	3305      	adds	r3, #5
 8000dca:	781a      	ldrb	r2, [r3, #0]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	3304      	adds	r3, #4
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	4053      	eors	r3, r2
 8000dd4:	757b      	strb	r3, [r7, #21]
	u16len = srdata[0] ^srdata[POS_RANDOMKEY];
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	781a      	ldrb	r2, [r3, #0]
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	3304      	adds	r3, #4
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	4053      	eors	r3, r2
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	827b      	strh	r3, [r7, #18]

	if(u16len > 0 && srdata !=NULL && desdata != NULL && u16len > LORA_BUFFER_LENGHT - 5  )
 8000de6:	8a7b      	ldrh	r3, [r7, #18]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d00a      	beq.n	8000e02 <DataDecode+0x56>
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d007      	beq.n	8000e02 <DataDecode+0x56>
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d004      	beq.n	8000e02 <DataDecode+0x56>
 8000df8:	8a7b      	ldrh	r3, [r7, #18]
 8000dfa:	2b13      	cmp	r3, #19
 8000dfc:	d901      	bls.n	8000e02 <DataDecode+0x56>
	{
		return E_NOT_OK;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e01f      	b.n	8000e42 <DataDecode+0x96>
	}
	else
	{
		if( id == user_id)
 8000e02:	7d7a      	ldrb	r2, [r7, #21]
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	429a      	cmp	r2, r3
 8000e08:	d11a      	bne.n	8000e40 <DataDecode+0x94>
		{
			for(uint8_t ByteCount = 0; ByteCount < u16len - FIX_BYTE_NUMBER ; ByteCount++)
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	75bb      	strb	r3, [r7, #22]
 8000e0e:	e010      	b.n	8000e32 <DataDecode+0x86>
			{
				desdata[ByteCount]  = (uint8_t)(srdata[ByteCount+DATA_PACKET_BEGIN] ^ srdata[POS_RANDOMKEY]);
 8000e10:	7dbb      	ldrb	r3, [r7, #22]
 8000e12:	3306      	adds	r3, #6
 8000e14:	68fa      	ldr	r2, [r7, #12]
 8000e16:	4413      	add	r3, r2
 8000e18:	7819      	ldrb	r1, [r3, #0]
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	3304      	adds	r3, #4
 8000e1e:	781a      	ldrb	r2, [r3, #0]
 8000e20:	7dbb      	ldrb	r3, [r7, #22]
 8000e22:	68b8      	ldr	r0, [r7, #8]
 8000e24:	4403      	add	r3, r0
 8000e26:	404a      	eors	r2, r1
 8000e28:	b2d2      	uxtb	r2, r2
 8000e2a:	701a      	strb	r2, [r3, #0]
			for(uint8_t ByteCount = 0; ByteCount < u16len - FIX_BYTE_NUMBER ; ByteCount++)
 8000e2c:	7dbb      	ldrb	r3, [r7, #22]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	75bb      	strb	r3, [r7, #22]
 8000e32:	7dba      	ldrb	r2, [r7, #22]
 8000e34:	8a7b      	ldrh	r3, [r7, #18]
 8000e36:	3b05      	subs	r3, #5
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	dbe9      	blt.n	8000e10 <DataDecode+0x64>
			}
			ret = E_OK;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	75fb      	strb	r3, [r7, #23]
		}
	}
	return ret;
 8000e40:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	371c      	adds	r7, #28
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
	...

08000e50 <OnTxDone>:
		HAL_Delay(1);
	}
}

void OnTxDone( void )
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
	User_Uart_AsyncTransmit(USER_UART_CHANNEL_USART1, (uint8_t*)"TxDone\n", strlen("TxDone\n"));
 8000e54:	2207      	movs	r2, #7
 8000e56:	4905      	ldr	r1, [pc, #20]	; (8000e6c <OnTxDone+0x1c>)
 8000e58:	2004      	movs	r0, #4
 8000e5a:	f002 ff17 	bl	8003c8c <User_Uart_AsyncTransmit>
	Radio.Rx( RX_TIMEOUT_VALUE );
 8000e5e:	4b04      	ldr	r3, [pc, #16]	; (8000e70 <OnTxDone+0x20>)
 8000e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e62:	f242 7010 	movw	r0, #10000	; 0x2710
 8000e66:	4798      	blx	r3
}
 8000e68:	bf00      	nop
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	0800659c 	.word	0x0800659c
 8000e70:	080065dc 	.word	0x080065dc

08000e74 <OnRxDone>:
void OnRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	4608      	mov	r0, r1
 8000e7e:	4611      	mov	r1, r2
 8000e80:	461a      	mov	r2, r3
 8000e82:	4603      	mov	r3, r0
 8000e84:	817b      	strh	r3, [r7, #10]
 8000e86:	460b      	mov	r3, r1
 8000e88:	813b      	strh	r3, [r7, #8]
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	71fb      	strb	r3, [r7, #7]
	uint16_t size1 = size;
 8000e8e:	897b      	ldrh	r3, [r7, #10]
 8000e90:	82fb      	strh	r3, [r7, #22]
	int16_t rssi1 = rssi;
 8000e92:	893b      	ldrh	r3, [r7, #8]
 8000e94:	82bb      	strh	r3, [r7, #20]
	int8_t snr1 = snr;
 8000e96:	79fb      	ldrb	r3, [r7, #7]
 8000e98:	74fb      	strb	r3, [r7, #19]
	Radio.Standby();
 8000e9a:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <OnRxDone+0x40>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	4798      	blx	r3
	DataDecode(payload, DataBuffer.RxBuffer, User_Gateway);
 8000ea0:	22ff      	movs	r2, #255	; 0xff
 8000ea2:	4905      	ldr	r1, [pc, #20]	; (8000eb8 <OnRxDone+0x44>)
 8000ea4:	68f8      	ldr	r0, [r7, #12]
 8000ea6:	f7ff ff81 	bl	8000dac <DataDecode>
}
 8000eaa:	bf00      	nop
 8000eac:	3718      	adds	r7, #24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	080065dc 	.word	0x080065dc
 8000eb8:	20000470 	.word	0x20000470

08000ebc <OnRxTimeout>:
void OnRxTimeout( void )
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
	//static uint16_t RxCount =  0;
	Radio.Rx( RX_TIMEOUT_VALUE );
 8000ec0:	4b03      	ldr	r3, [pc, #12]	; (8000ed0 <OnRxTimeout+0x14>)
 8000ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ec4:	f242 7010 	movw	r0, #10000	; 0x2710
 8000ec8:	4798      	blx	r3
}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	080065dc 	.word	0x080065dc

08000ed4 <OnCaDDetectted>:

void OnCaDDetectted(bool channelActivityDetected )
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	71fb      	strb	r3, [r7, #7]
	if(channelActivityDetected)
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d004      	beq.n	8000eee <OnCaDDetectted+0x1a>
	{
		Radio.Rx( RX_TIMEOUT_VALUE );
 8000ee4:	4b04      	ldr	r3, [pc, #16]	; (8000ef8 <OnCaDDetectted+0x24>)
 8000ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ee8:	f242 7010 	movw	r0, #10000	; 0x2710
 8000eec:	4798      	blx	r3
	}
}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	080065dc 	.word	0x080065dc

08000efc <App_TestMain>:
void App_TestMain()
{
 8000efc:	b590      	push	{r4, r7, lr}
 8000efe:	b093      	sub	sp, #76	; 0x4c
 8000f00:	af0a      	add	r7, sp, #40	; 0x28
	uint32_t count =  0;
 8000f02:	2300      	movs	r3, #0
 8000f04:	61fb      	str	r3, [r7, #28]
	User_Uart_Init(&User_Uart_ConfigPtr);
 8000f06:	483b      	ldr	r0, [pc, #236]	; (8000ff4 <App_TestMain+0xf8>)
 8000f08:	f002 fe22 	bl	8003b50 <User_Uart_Init>
	RadioEvents_t RadioEvents = {
 8000f0c:	463b      	mov	r3, r7
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	605a      	str	r2, [r3, #4]
 8000f14:	609a      	str	r2, [r3, #8]
 8000f16:	60da      	str	r2, [r3, #12]
 8000f18:	611a      	str	r2, [r3, #16]
 8000f1a:	615a      	str	r2, [r3, #20]
 8000f1c:	619a      	str	r2, [r3, #24]
 8000f1e:	4b36      	ldr	r3, [pc, #216]	; (8000ff8 <App_TestMain+0xfc>)
 8000f20:	603b      	str	r3, [r7, #0]
 8000f22:	4b36      	ldr	r3, [pc, #216]	; (8000ffc <App_TestMain+0x100>)
 8000f24:	60bb      	str	r3, [r7, #8]
 8000f26:	4b36      	ldr	r3, [pc, #216]	; (8001000 <App_TestMain+0x104>)
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	4b36      	ldr	r3, [pc, #216]	; (8001004 <App_TestMain+0x108>)
 8000f2c:	61bb      	str	r3, [r7, #24]
		.RxError = NULL,
		.CadDone = OnCaDDetectted
	};
	// Config LoRa Module

	Radio.Init( &RadioEvents );
 8000f2e:	4b36      	ldr	r3, [pc, #216]	; (8001008 <App_TestMain+0x10c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	463a      	mov	r2, r7
 8000f34:	4610      	mov	r0, r2
 8000f36:	4798      	blx	r3
	Radio.SetChannel( RF_FREQUENCY );
 8000f38:	4b33      	ldr	r3, [pc, #204]	; (8001008 <App_TestMain+0x10c>)
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	4833      	ldr	r0, [pc, #204]	; (800100c <App_TestMain+0x110>)
 8000f3e:	4798      	blx	r3
	Radio.SetTxConfig( MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 8000f40:	4b31      	ldr	r3, [pc, #196]	; (8001008 <App_TestMain+0x10c>)
 8000f42:	69dc      	ldr	r4, [r3, #28]
 8000f44:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000f48:	9308      	str	r3, [sp, #32]
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	9307      	str	r3, [sp, #28]
 8000f4e:	2300      	movs	r3, #0
 8000f50:	9306      	str	r3, [sp, #24]
 8000f52:	2300      	movs	r3, #0
 8000f54:	9305      	str	r3, [sp, #20]
 8000f56:	2301      	movs	r3, #1
 8000f58:	9304      	str	r3, [sp, #16]
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	9303      	str	r3, [sp, #12]
 8000f5e:	2308      	movs	r3, #8
 8000f60:	9302      	str	r3, [sp, #8]
 8000f62:	2302      	movs	r3, #2
 8000f64:	9301      	str	r3, [sp, #4]
 8000f66:	230b      	movs	r3, #11
 8000f68:	9300      	str	r3, [sp, #0]
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2116      	movs	r1, #22
 8000f70:	2001      	movs	r0, #1
 8000f72:	47a0      	blx	r4
                     LORA_SPREADING_FACTOR, LORA_CODINGRATE,
                     LORA_PREAMBLE_LENGTH, LORA_FIX_LENGTH_PAYLOAD_ON,
                     true, 0, 0, LORA_IQ_INVERSION_ON, 3000 );
	Radio.SetRxConfig( MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 8000f74:	4b24      	ldr	r3, [pc, #144]	; (8001008 <App_TestMain+0x10c>)
 8000f76:	699c      	ldr	r4, [r3, #24]
 8000f78:	2300      	movs	r3, #0
 8000f7a:	9309      	str	r3, [sp, #36]	; 0x24
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	9308      	str	r3, [sp, #32]
 8000f80:	2300      	movs	r3, #0
 8000f82:	9307      	str	r3, [sp, #28]
 8000f84:	2300      	movs	r3, #0
 8000f86:	9306      	str	r3, [sp, #24]
 8000f88:	2301      	movs	r3, #1
 8000f8a:	9305      	str	r3, [sp, #20]
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	9304      	str	r3, [sp, #16]
 8000f90:	2300      	movs	r3, #0
 8000f92:	9303      	str	r3, [sp, #12]
 8000f94:	2300      	movs	r3, #0
 8000f96:	9302      	str	r3, [sp, #8]
 8000f98:	2308      	movs	r3, #8
 8000f9a:	9301      	str	r3, [sp, #4]
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	9300      	str	r3, [sp, #0]
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	220b      	movs	r2, #11
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	2001      	movs	r0, #1
 8000fa8:	47a0      	blx	r4
                     LORA_CODINGRATE, 0, LORA_PREAMBLE_LENGTH,
                     LORA_SYMBOL_TIMEOUT, LORA_FIX_LENGTH_PAYLOAD_ON,
                     0, true, 0, 0, LORA_IQ_INVERSION_ON, false );
	SessionID = SESSION_DEFAULT;
 8000faa:	4b19      	ldr	r3, [pc, #100]	; (8001010 <App_TestMain+0x114>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	701a      	strb	r2, [r3, #0]
	Init_Timer(&Timer2_Cfg);
 8000fb0:	4818      	ldr	r0, [pc, #96]	; (8001014 <App_TestMain+0x118>)
 8000fb2:	f002 fa09 	bl	80033c8 <Init_Timer>
	Tim_AddEvent(TIMER2_HW,LoRa_IRQHandle);
 8000fb6:	4918      	ldr	r1, [pc, #96]	; (8001018 <App_TestMain+0x11c>)
 8000fb8:	2002      	movs	r0, #2
 8000fba:	f002 fd17 	bl	80039ec <Tim_AddEvent>
	Tim_AddEvent(TIMER2_HW,Message_Handle);
 8000fbe:	4917      	ldr	r1, [pc, #92]	; (800101c <App_TestMain+0x120>)
 8000fc0:	2002      	movs	r0, #2
 8000fc2:	f002 fd13 	bl	80039ec <Tim_AddEvent>
	SX126xSetCadParams(0x02, 24, 11, LORA_CAD_ONLY, 00);
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	2300      	movs	r3, #0
 8000fcc:	220b      	movs	r2, #11
 8000fce:	2118      	movs	r1, #24
 8000fd0:	2002      	movs	r0, #2
 8000fd2:	f002 f8f7 	bl	80031c4 <SX126xSetCadParams>
	while(1)
	{
		//Session_Current[SessionID]();
		if(count++ > 300)
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	1c5a      	adds	r2, r3, #1
 8000fda:	61fa      	str	r2, [r7, #28]
 8000fdc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000fe0:	d904      	bls.n	8000fec <App_TestMain+0xf0>
		{
			count = 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61fb      	str	r3, [r7, #28]
			Radio.StartCad();
 8000fe6:	4b08      	ldr	r3, [pc, #32]	; (8001008 <App_TestMain+0x10c>)
 8000fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fea:	4798      	blx	r3

		}
		HAL_Delay(1);
 8000fec:	2001      	movs	r0, #1
 8000fee:	f003 fe0b 	bl	8004c08 <HAL_Delay>
		if(count++ > 300)
 8000ff2:	e7f0      	b.n	8000fd6 <App_TestMain+0xda>
 8000ff4:	200000fc 	.word	0x200000fc
 8000ff8:	08000e51 	.word	0x08000e51
 8000ffc:	08000e75 	.word	0x08000e75
 8001000:	08000ebd 	.word	0x08000ebd
 8001004:	08000ed5 	.word	0x08000ed5
 8001008:	080065dc 	.word	0x080065dc
 800100c:	19de5080 	.word	0x19de5080
 8001010:	200001a0 	.word	0x200001a0
 8001014:	200000f4 	.word	0x200000f4
 8001018:	08001021 	.word	0x08001021
 800101c:	08001035 	.word	0x08001035

08001020 <LoRa_IRQHandle>:
	}
}
void LoRa_IRQHandle()
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
	Radio.IrqProcess();
 8001024:	4b02      	ldr	r3, [pc, #8]	; (8001030 <LoRa_IRQHandle+0x10>)
 8001026:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001028:	4798      	blx	r3
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	080065dc 	.word	0x080065dc

08001034 <Message_Handle>:
void Message_Handle()
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
	if(strncmp(DataBuffer.RxBuffer,"PONG",DATAMESSAGE_LENGHT) == 0)
 8001038:	4b0d      	ldr	r3, [pc, #52]	; (8001070 <Message_Handle+0x3c>)
 800103a:	7e1a      	ldrb	r2, [r3, #24]
 800103c:	4b0d      	ldr	r3, [pc, #52]	; (8001074 <Message_Handle+0x40>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	2b00      	cmp	r3, #0
 8001044:	d112      	bne.n	800106c <Message_Handle+0x38>
	{
		DataBuffer.RxBuffer[0] = 0;
 8001046:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <Message_Handle+0x3c>)
 8001048:	2200      	movs	r2, #0
 800104a:	761a      	strb	r2, [r3, #24]
		User_Uart_AsyncTransmit(USER_UART_CHANNEL_USART1,RX_Buffer,4);
 800104c:	2204      	movs	r2, #4
 800104e:	490a      	ldr	r1, [pc, #40]	; (8001078 <Message_Handle+0x44>)
 8001050:	2004      	movs	r0, #4
 8001052:	f002 fe1b 	bl	8003c8c <User_Uart_AsyncTransmit>
		User_Uart_AsyncTransmit(USER_UART_CHANNEL_USART1,(uint8_t*)"\n",2);
 8001056:	2202      	movs	r2, #2
 8001058:	4908      	ldr	r1, [pc, #32]	; (800107c <Message_Handle+0x48>)
 800105a:	2004      	movs	r0, #4
 800105c:	f002 fe16 	bl	8003c8c <User_Uart_AsyncTransmit>
		ReceiveMessageID = PONG_MESSAGE_R;
 8001060:	4b07      	ldr	r3, [pc, #28]	; (8001080 <Message_Handle+0x4c>)
 8001062:	2202      	movs	r2, #2
 8001064:	701a      	strb	r2, [r3, #0]
		SessionID = SESSION_RESPONSE;
 8001066:	4b07      	ldr	r3, [pc, #28]	; (8001084 <Message_Handle+0x50>)
 8001068:	2201      	movs	r2, #1
 800106a:	701a      	strb	r2, [r3, #0]
	}
}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20000458 	.word	0x20000458
 8001074:	080065a4 	.word	0x080065a4
 8001078:	20000418 	.word	0x20000418
 800107c:	080065ac 	.word	0x080065ac
 8001080:	200001a1 	.word	0x200001a1
 8001084:	200001a0 	.word	0x200001a0

08001088 <MX_GPIO_Init>:
     PB10   ------> SPI2_SCK
     PB6   ------> USART1_TX
     PB7   ------> USART1_RX
*/
void MX_GPIO_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08a      	sub	sp, #40	; 0x28
 800108c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108e:	f107 0314 	add.w	r3, r7, #20
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	60da      	str	r2, [r3, #12]
 800109c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	613b      	str	r3, [r7, #16]
 80010a2:	4b66      	ldr	r3, [pc, #408]	; (800123c <MX_GPIO_Init+0x1b4>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	4a65      	ldr	r2, [pc, #404]	; (800123c <MX_GPIO_Init+0x1b4>)
 80010a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010ac:	6313      	str	r3, [r2, #48]	; 0x30
 80010ae:	4b63      	ldr	r3, [pc, #396]	; (800123c <MX_GPIO_Init+0x1b4>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010b6:	613b      	str	r3, [r7, #16]
 80010b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	4b5f      	ldr	r3, [pc, #380]	; (800123c <MX_GPIO_Init+0x1b4>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	4a5e      	ldr	r2, [pc, #376]	; (800123c <MX_GPIO_Init+0x1b4>)
 80010c4:	f043 0304 	orr.w	r3, r3, #4
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ca:	4b5c      	ldr	r3, [pc, #368]	; (800123c <MX_GPIO_Init+0x1b4>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	f003 0304 	and.w	r3, r3, #4
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	60bb      	str	r3, [r7, #8]
 80010da:	4b58      	ldr	r3, [pc, #352]	; (800123c <MX_GPIO_Init+0x1b4>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	4a57      	ldr	r2, [pc, #348]	; (800123c <MX_GPIO_Init+0x1b4>)
 80010e0:	f043 0301 	orr.w	r3, r3, #1
 80010e4:	6313      	str	r3, [r2, #48]	; 0x30
 80010e6:	4b55      	ldr	r3, [pc, #340]	; (800123c <MX_GPIO_Init+0x1b4>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	60bb      	str	r3, [r7, #8]
 80010f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	607b      	str	r3, [r7, #4]
 80010f6:	4b51      	ldr	r3, [pc, #324]	; (800123c <MX_GPIO_Init+0x1b4>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	4a50      	ldr	r2, [pc, #320]	; (800123c <MX_GPIO_Init+0x1b4>)
 80010fc:	f043 0302 	orr.w	r3, r3, #2
 8001100:	6313      	str	r3, [r2, #48]	; 0x30
 8001102:	4b4e      	ldr	r3, [pc, #312]	; (800123c <MX_GPIO_Init+0x1b4>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	f003 0302 	and.w	r3, r3, #2
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	603b      	str	r3, [r7, #0]
 8001112:	4b4a      	ldr	r3, [pc, #296]	; (800123c <MX_GPIO_Init+0x1b4>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	4a49      	ldr	r2, [pc, #292]	; (800123c <MX_GPIO_Init+0x1b4>)
 8001118:	f043 0308 	orr.w	r3, r3, #8
 800111c:	6313      	str	r3, [r2, #48]	; 0x30
 800111e:	4b47      	ldr	r3, [pc, #284]	; (800123c <MX_GPIO_Init+0x1b4>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	f003 0308 	and.w	r3, r3, #8
 8001126:	603b      	str	r3, [r7, #0]
 8001128:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CSS_Pin_GPIO_Port, SPI_CSS_Pin_Pin, GPIO_PIN_RESET);
 800112a:	2200      	movs	r2, #0
 800112c:	2110      	movs	r1, #16
 800112e:	4844      	ldr	r0, [pc, #272]	; (8001240 <MX_GPIO_Init+0x1b8>)
 8001130:	f004 f854 	bl	80051dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SX1278_RST_PIN_INDEX_GPIO_Port, SX1278_RST_PIN_INDEX_Pin, GPIO_PIN_SET);
 8001134:	2201      	movs	r2, #1
 8001136:	2102      	movs	r1, #2
 8001138:	4842      	ldr	r0, [pc, #264]	; (8001244 <MX_GPIO_Init+0x1bc>)
 800113a:	f004 f84f 	bl	80051dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800113e:	2200      	movs	r2, #0
 8001140:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001144:	4840      	ldr	r0, [pc, #256]	; (8001248 <MX_GPIO_Init+0x1c0>)
 8001146:	f004 f849 	bl	80051dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800114a:	230c      	movs	r3, #12
 800114c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114e:	2302      	movs	r3, #2
 8001150:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001156:	2303      	movs	r3, #3
 8001158:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800115a:	2305      	movs	r3, #5
 800115c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800115e:	f107 0314 	add.w	r3, r7, #20
 8001162:	4619      	mov	r1, r3
 8001164:	4839      	ldr	r0, [pc, #228]	; (800124c <MX_GPIO_Init+0x1c4>)
 8001166:	f003 fe85 	bl	8004e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800116a:	2301      	movs	r3, #1
 800116c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800116e:	2300      	movs	r3, #0
 8001170:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001176:	f107 0314 	add.w	r3, r7, #20
 800117a:	4619      	mov	r1, r3
 800117c:	4830      	ldr	r0, [pc, #192]	; (8001240 <MX_GPIO_Init+0x1b8>)
 800117e:	f003 fe79 	bl	8004e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CSS_Pin_Pin;
 8001182:	2310      	movs	r3, #16
 8001184:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001186:	2301      	movs	r3, #1
 8001188:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800118e:	2302      	movs	r3, #2
 8001190:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CSS_Pin_GPIO_Port, &GPIO_InitStruct);
 8001192:	f107 0314 	add.w	r3, r7, #20
 8001196:	4619      	mov	r1, r3
 8001198:	4829      	ldr	r0, [pc, #164]	; (8001240 <MX_GPIO_Init+0x1b8>)
 800119a:	f003 fe6b 	bl	8004e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800119e:	2305      	movs	r3, #5
 80011a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011aa:	f107 0314 	add.w	r3, r7, #20
 80011ae:	4619      	mov	r1, r3
 80011b0:	4824      	ldr	r0, [pc, #144]	; (8001244 <MX_GPIO_Init+0x1bc>)
 80011b2:	f003 fe5f 	bl	8004e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SX1278_RST_PIN_INDEX_Pin;
 80011b6:	2302      	movs	r3, #2
 80011b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ba:	2301      	movs	r3, #1
 80011bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80011c2:	2301      	movs	r3, #1
 80011c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SX1278_RST_PIN_INDEX_GPIO_Port, &GPIO_InitStruct);
 80011c6:	f107 0314 	add.w	r3, r7, #20
 80011ca:	4619      	mov	r1, r3
 80011cc:	481d      	ldr	r0, [pc, #116]	; (8001244 <MX_GPIO_Init+0x1bc>)
 80011ce:	f003 fe51 	bl	8004e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d8:	2302      	movs	r3, #2
 80011da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e0:	2303      	movs	r3, #3
 80011e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011e4:	2305      	movs	r3, #5
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	4619      	mov	r1, r3
 80011ee:	4815      	ldr	r0, [pc, #84]	; (8001244 <MX_GPIO_Init+0x1bc>)
 80011f0:	f003 fe40 	bl	8004e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80011f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fa:	2301      	movs	r3, #1
 80011fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001202:	2300      	movs	r3, #0
 8001204:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001206:	f107 0314 	add.w	r3, r7, #20
 800120a:	4619      	mov	r1, r3
 800120c:	480e      	ldr	r0, [pc, #56]	; (8001248 <MX_GPIO_Init+0x1c0>)
 800120e:	f003 fe31 	bl	8004e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001212:	23c0      	movs	r3, #192	; 0xc0
 8001214:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001216:	2302      	movs	r3, #2
 8001218:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121e:	2303      	movs	r3, #3
 8001220:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001222:	2307      	movs	r3, #7
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001226:	f107 0314 	add.w	r3, r7, #20
 800122a:	4619      	mov	r1, r3
 800122c:	4805      	ldr	r0, [pc, #20]	; (8001244 <MX_GPIO_Init+0x1bc>)
 800122e:	f003 fe21 	bl	8004e74 <HAL_GPIO_Init>

}
 8001232:	bf00      	nop
 8001234:	3728      	adds	r7, #40	; 0x28
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40023800 	.word	0x40023800
 8001240:	40020000 	.word	0x40020000
 8001244:	40020400 	.word	0x40020400
 8001248:	40020c00 	.word	0x40020c00
 800124c:	40020800 	.word	0x40020800

08001250 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001254:	f003 fc66 	bl	8004b24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001258:	f000 f80a 	bl	8001270 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800125c:	f7ff ff14 	bl	8001088 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001260:	f000 f8ac 	bl	80013bc <MX_SPI1_Init>
  MX_RNG_Init();
 8001264:	f000 f874 	bl	8001350 <MX_RNG_Init>



  while (1)
  {
	 App_TestMain();
 8001268:	f7ff fe48 	bl	8000efc <App_TestMain>
 800126c:	e7fc      	b.n	8001268 <main+0x18>
	...

08001270 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b094      	sub	sp, #80	; 0x50
 8001274:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001276:	f107 0320 	add.w	r3, r7, #32
 800127a:	2230      	movs	r2, #48	; 0x30
 800127c:	2100      	movs	r1, #0
 800127e:	4618      	mov	r0, r3
 8001280:	f004 ff58 	bl	8006134 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001284:	f107 030c 	add.w	r3, r7, #12
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001294:	2300      	movs	r3, #0
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	4b28      	ldr	r3, [pc, #160]	; (800133c <SystemClock_Config+0xcc>)
 800129a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129c:	4a27      	ldr	r2, [pc, #156]	; (800133c <SystemClock_Config+0xcc>)
 800129e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a2:	6413      	str	r3, [r2, #64]	; 0x40
 80012a4:	4b25      	ldr	r3, [pc, #148]	; (800133c <SystemClock_Config+0xcc>)
 80012a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ac:	60bb      	str	r3, [r7, #8]
 80012ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012b0:	2300      	movs	r3, #0
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	4b22      	ldr	r3, [pc, #136]	; (8001340 <SystemClock_Config+0xd0>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a21      	ldr	r2, [pc, #132]	; (8001340 <SystemClock_Config+0xd0>)
 80012ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012be:	6013      	str	r3, [r2, #0]
 80012c0:	4b1f      	ldr	r3, [pc, #124]	; (8001340 <SystemClock_Config+0xd0>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012c8:	607b      	str	r3, [r7, #4]
 80012ca:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012cc:	2301      	movs	r3, #1
 80012ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012d6:	2302      	movs	r3, #2
 80012d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012e0:	2304      	movs	r3, #4
 80012e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80012e4:	23a8      	movs	r3, #168	; 0xa8
 80012e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012e8:	2302      	movs	r3, #2
 80012ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80012ec:	2307      	movs	r3, #7
 80012ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f0:	f107 0320 	add.w	r3, r7, #32
 80012f4:	4618      	mov	r0, r3
 80012f6:	f003 ff8b 	bl	8005210 <HAL_RCC_OscConfig>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001300:	f000 f820 	bl	8001344 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001304:	230f      	movs	r3, #15
 8001306:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001308:	2302      	movs	r3, #2
 800130a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001310:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001314:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001316:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800131a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800131c:	f107 030c 	add.w	r3, r7, #12
 8001320:	2105      	movs	r1, #5
 8001322:	4618      	mov	r0, r3
 8001324:	f004 f9ec 	bl	8005700 <HAL_RCC_ClockConfig>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800132e:	f000 f809 	bl	8001344 <Error_Handler>
  }
}
 8001332:	bf00      	nop
 8001334:	3750      	adds	r7, #80	; 0x50
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40023800 	.word	0x40023800
 8001340:	40007000 	.word	0x40007000

08001344 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001348:	b672      	cpsid	i
}
 800134a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800134c:	e7fe      	b.n	800134c <Error_Handler+0x8>
	...

08001350 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <MX_RNG_Init+0x20>)
 8001356:	4a07      	ldr	r2, [pc, #28]	; (8001374 <MX_RNG_Init+0x24>)
 8001358:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800135a:	4805      	ldr	r0, [pc, #20]	; (8001370 <MX_RNG_Init+0x20>)
 800135c:	f004 fb98 	bl	8005a90 <HAL_RNG_Init>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001366:	f7ff ffed 	bl	8001344 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	200004cc 	.word	0x200004cc
 8001374:	50060800 	.word	0x50060800

08001378 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a0b      	ldr	r2, [pc, #44]	; (80013b4 <HAL_RNG_MspInit+0x3c>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d10d      	bne.n	80013a6 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	4b0a      	ldr	r3, [pc, #40]	; (80013b8 <HAL_RNG_MspInit+0x40>)
 8001390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001392:	4a09      	ldr	r2, [pc, #36]	; (80013b8 <HAL_RNG_MspInit+0x40>)
 8001394:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001398:	6353      	str	r3, [r2, #52]	; 0x34
 800139a:	4b07      	ldr	r3, [pc, #28]	; (80013b8 <HAL_RNG_MspInit+0x40>)
 800139c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800139e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 80013a6:	bf00      	nop
 80013a8:	3714      	adds	r7, #20
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	50060800 	.word	0x50060800
 80013b8:	40023800 	.word	0x40023800

080013bc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80013c0:	4b17      	ldr	r3, [pc, #92]	; (8001420 <MX_SPI1_Init+0x64>)
 80013c2:	4a18      	ldr	r2, [pc, #96]	; (8001424 <MX_SPI1_Init+0x68>)
 80013c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013c6:	4b16      	ldr	r3, [pc, #88]	; (8001420 <MX_SPI1_Init+0x64>)
 80013c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013ce:	4b14      	ldr	r3, [pc, #80]	; (8001420 <MX_SPI1_Init+0x64>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013d4:	4b12      	ldr	r3, [pc, #72]	; (8001420 <MX_SPI1_Init+0x64>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013da:	4b11      	ldr	r3, [pc, #68]	; (8001420 <MX_SPI1_Init+0x64>)
 80013dc:	2200      	movs	r2, #0
 80013de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013e0:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <MX_SPI1_Init+0x64>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013e6:	4b0e      	ldr	r3, [pc, #56]	; (8001420 <MX_SPI1_Init+0x64>)
 80013e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80013ee:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <MX_SPI1_Init+0x64>)
 80013f0:	2228      	movs	r2, #40	; 0x28
 80013f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013f4:	4b0a      	ldr	r3, [pc, #40]	; (8001420 <MX_SPI1_Init+0x64>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013fa:	4b09      	ldr	r3, [pc, #36]	; (8001420 <MX_SPI1_Init+0x64>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001400:	4b07      	ldr	r3, [pc, #28]	; (8001420 <MX_SPI1_Init+0x64>)
 8001402:	2200      	movs	r2, #0
 8001404:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001406:	4b06      	ldr	r3, [pc, #24]	; (8001420 <MX_SPI1_Init+0x64>)
 8001408:	220a      	movs	r2, #10
 800140a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800140c:	4804      	ldr	r0, [pc, #16]	; (8001420 <MX_SPI1_Init+0x64>)
 800140e:	f004 fb69 	bl	8005ae4 <HAL_SPI_Init>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001418:	f7ff ff94 	bl	8001344 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800141c:	bf00      	nop
 800141e:	bd80      	pop	{r7, pc}
 8001420:	200004dc 	.word	0x200004dc
 8001424:	40013000 	.word	0x40013000

08001428 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08a      	sub	sp, #40	; 0x28
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001430:	f107 0314 	add.w	r3, r7, #20
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a19      	ldr	r2, [pc, #100]	; (80014ac <HAL_SPI_MspInit+0x84>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d12b      	bne.n	80014a2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	613b      	str	r3, [r7, #16]
 800144e:	4b18      	ldr	r3, [pc, #96]	; (80014b0 <HAL_SPI_MspInit+0x88>)
 8001450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001452:	4a17      	ldr	r2, [pc, #92]	; (80014b0 <HAL_SPI_MspInit+0x88>)
 8001454:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001458:	6453      	str	r3, [r2, #68]	; 0x44
 800145a:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <HAL_SPI_MspInit+0x88>)
 800145c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001462:	613b      	str	r3, [r7, #16]
 8001464:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <HAL_SPI_MspInit+0x88>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	4a10      	ldr	r2, [pc, #64]	; (80014b0 <HAL_SPI_MspInit+0x88>)
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	6313      	str	r3, [r2, #48]	; 0x30
 8001476:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <HAL_SPI_MspInit+0x88>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001482:	23e0      	movs	r3, #224	; 0xe0
 8001484:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001486:	2302      	movs	r3, #2
 8001488:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148e:	2303      	movs	r3, #3
 8001490:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001492:	2305      	movs	r3, #5
 8001494:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001496:	f107 0314 	add.w	r3, r7, #20
 800149a:	4619      	mov	r1, r3
 800149c:	4805      	ldr	r0, [pc, #20]	; (80014b4 <HAL_SPI_MspInit+0x8c>)
 800149e:	f003 fce9 	bl	8004e74 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80014a2:	bf00      	nop
 80014a4:	3728      	adds	r7, #40	; 0x28
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40013000 	.word	0x40013000
 80014b0:	40023800 	.word	0x40023800
 80014b4:	40020000 	.word	0x40020000

080014b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	607b      	str	r3, [r7, #4]
 80014c2:	4b10      	ldr	r3, [pc, #64]	; (8001504 <HAL_MspInit+0x4c>)
 80014c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c6:	4a0f      	ldr	r2, [pc, #60]	; (8001504 <HAL_MspInit+0x4c>)
 80014c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014cc:	6453      	str	r3, [r2, #68]	; 0x44
 80014ce:	4b0d      	ldr	r3, [pc, #52]	; (8001504 <HAL_MspInit+0x4c>)
 80014d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014d6:	607b      	str	r3, [r7, #4]
 80014d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	603b      	str	r3, [r7, #0]
 80014de:	4b09      	ldr	r3, [pc, #36]	; (8001504 <HAL_MspInit+0x4c>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e2:	4a08      	ldr	r2, [pc, #32]	; (8001504 <HAL_MspInit+0x4c>)
 80014e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ea:	4b06      	ldr	r3, [pc, #24]	; (8001504 <HAL_MspInit+0x4c>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f2:	603b      	str	r3, [r7, #0]
 80014f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	40023800 	.word	0x40023800

08001508 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800150c:	e7fe      	b.n	800150c <NMI_Handler+0x4>

0800150e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001512:	e7fe      	b.n	8001512 <HardFault_Handler+0x4>

08001514 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001518:	e7fe      	b.n	8001518 <MemManage_Handler+0x4>

0800151a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800151a:	b480      	push	{r7}
 800151c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800151e:	e7fe      	b.n	800151e <BusFault_Handler+0x4>

08001520 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001524:	e7fe      	b.n	8001524 <UsageFault_Handler+0x4>

08001526 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001526:	b480      	push	{r7}
 8001528:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001554:	f003 fb38 	bl	8004bc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001558:	bf00      	nop
 800155a:	bd80      	pop	{r7, pc}

0800155c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001564:	4a14      	ldr	r2, [pc, #80]	; (80015b8 <_sbrk+0x5c>)
 8001566:	4b15      	ldr	r3, [pc, #84]	; (80015bc <_sbrk+0x60>)
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001570:	4b13      	ldr	r3, [pc, #76]	; (80015c0 <_sbrk+0x64>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d102      	bne.n	800157e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001578:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <_sbrk+0x64>)
 800157a:	4a12      	ldr	r2, [pc, #72]	; (80015c4 <_sbrk+0x68>)
 800157c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800157e:	4b10      	ldr	r3, [pc, #64]	; (80015c0 <_sbrk+0x64>)
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4413      	add	r3, r2
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	429a      	cmp	r2, r3
 800158a:	d207      	bcs.n	800159c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800158c:	f004 fda8 	bl	80060e0 <__errno>
 8001590:	4603      	mov	r3, r0
 8001592:	220c      	movs	r2, #12
 8001594:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001596:	f04f 33ff 	mov.w	r3, #4294967295
 800159a:	e009      	b.n	80015b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800159c:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <_sbrk+0x64>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015a2:	4b07      	ldr	r3, [pc, #28]	; (80015c0 <_sbrk+0x64>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4413      	add	r3, r2
 80015aa:	4a05      	ldr	r2, [pc, #20]	; (80015c0 <_sbrk+0x64>)
 80015ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ae:	68fb      	ldr	r3, [r7, #12]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3718      	adds	r7, #24
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	20020000 	.word	0x20020000
 80015bc:	00000400 	.word	0x00000400
 80015c0:	200001a4 	.word	0x200001a4
 80015c4:	20000698 	.word	0x20000698

080015c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015cc:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <SystemInit+0x20>)
 80015ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015d2:	4a05      	ldr	r2, [pc, #20]	; (80015e8 <SystemInit+0x20>)
 80015d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	e000ed00 	.word	0xe000ed00

080015ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80015ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001624 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015f0:	480d      	ldr	r0, [pc, #52]	; (8001628 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015f2:	490e      	ldr	r1, [pc, #56]	; (800162c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015f4:	4a0e      	ldr	r2, [pc, #56]	; (8001630 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015f8:	e002      	b.n	8001600 <LoopCopyDataInit>

080015fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015fe:	3304      	adds	r3, #4

08001600 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001600:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001602:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001604:	d3f9      	bcc.n	80015fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001606:	4a0b      	ldr	r2, [pc, #44]	; (8001634 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001608:	4c0b      	ldr	r4, [pc, #44]	; (8001638 <LoopFillZerobss+0x26>)
  movs r3, #0
 800160a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800160c:	e001      	b.n	8001612 <LoopFillZerobss>

0800160e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800160e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001610:	3204      	adds	r2, #4

08001612 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001612:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001614:	d3fb      	bcc.n	800160e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001616:	f7ff ffd7 	bl	80015c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800161a:	f004 fd67 	bl	80060ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800161e:	f7ff fe17 	bl	8001250 <main>
  bx  lr    
 8001622:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001624:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001628:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800162c:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8001630:	08006778 	.word	0x08006778
  ldr r2, =_sbss
 8001634:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8001638:	20000698 	.word	0x20000698

0800163c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800163c:	e7fe      	b.n	800163c <ADC_IRQHandler>

0800163e <DelayMs>:

#include "my_delay.h"

void DelayMs(uint32_t delayMS){
 800163e:	b580      	push	{r7, lr}
 8001640:	b082      	sub	sp, #8
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
	HAL_Delay(1000*delayMS);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800164c:	fb02 f303 	mul.w	r3, r2, r3
 8001650:	4618      	mov	r0, r3
 8001652:	f003 fad9 	bl	8004c08 <HAL_Delay>
}
 8001656:	bf00      	nop
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
	...

08001660 <RadioGetFskBandwidthRegValue>:
 *
 * \param [IN] bandwidth Bandwidth value in Hz
 * \retval regValue Bandwidth register value.
 */
static uint8_t RadioGetFskBandwidthRegValue( uint32_t bandwidth )
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <RadioGetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 800166e:	231f      	movs	r3, #31
 8001670:	e01f      	b.n	80016b2 <RadioGetFskBandwidthRegValue+0x52>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8001672:	2300      	movs	r3, #0
 8001674:	73fb      	strb	r3, [r7, #15]
 8001676:	e018      	b.n	80016aa <RadioGetFskBandwidthRegValue+0x4a>
    {
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 8001678:	7bfb      	ldrb	r3, [r7, #15]
 800167a:	4a11      	ldr	r2, [pc, #68]	; (80016c0 <RadioGetFskBandwidthRegValue+0x60>)
 800167c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	429a      	cmp	r2, r3
 8001684:	d30e      	bcc.n	80016a4 <RadioGetFskBandwidthRegValue+0x44>
 8001686:	7bfb      	ldrb	r3, [r7, #15]
 8001688:	3301      	adds	r3, #1
 800168a:	4a0d      	ldr	r2, [pc, #52]	; (80016c0 <RadioGetFskBandwidthRegValue+0x60>)
 800168c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	429a      	cmp	r2, r3
 8001694:	d206      	bcs.n	80016a4 <RadioGetFskBandwidthRegValue+0x44>
        {
            return FskBandwidths[i+1].RegValue;
 8001696:	7bfb      	ldrb	r3, [r7, #15]
 8001698:	3301      	adds	r3, #1
 800169a:	4a09      	ldr	r2, [pc, #36]	; (80016c0 <RadioGetFskBandwidthRegValue+0x60>)
 800169c:	00db      	lsls	r3, r3, #3
 800169e:	4413      	add	r3, r2
 80016a0:	791b      	ldrb	r3, [r3, #4]
 80016a2:	e006      	b.n	80016b2 <RadioGetFskBandwidthRegValue+0x52>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 80016a4:	7bfb      	ldrb	r3, [r7, #15]
 80016a6:	3301      	adds	r3, #1
 80016a8:	73fb      	strb	r3, [r7, #15]
 80016aa:	7bfb      	ldrb	r3, [r7, #15]
 80016ac:	2b14      	cmp	r3, #20
 80016ae:	d9e3      	bls.n	8001678 <RadioGetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 80016b0:	e7fe      	b.n	80016b0 <RadioGetFskBandwidthRegValue+0x50>
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3714      	adds	r7, #20
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	08006648 	.word	0x08006648

080016c4 <RadioInit>:

void RadioInit( RadioEvents_t *events )
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 80016cc:	4a11      	ldr	r2, [pc, #68]	; (8001714 <RadioInit+0x50>)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6013      	str	r3, [r2, #0]
    
    SX126xInit( RadioOnDioIrq );
 80016d2:	4811      	ldr	r0, [pc, #68]	; (8001718 <RadioInit+0x54>)
 80016d4:	f001 f8be 	bl	8002854 <SX126xInit>
    SX126xSetStandby( STDBY_RC );
 80016d8:	2000      	movs	r0, #0
 80016da:	f001 f9d1 	bl	8002a80 <SX126xSetStandby>
    SX126xSetRegulatorMode( USE_DCDC );
 80016de:	2001      	movs	r0, #1
 80016e0:	f001 faaf 	bl	8002c42 <SX126xSetRegulatorMode>
    
    SX126xSetBufferBaseAddress( 0x00, 0x00 );
 80016e4:	2100      	movs	r1, #0
 80016e6:	2000      	movs	r0, #0
 80016e8:	f001 fd9e 	bl	8003228 <SX126xSetBufferBaseAddress>
    SX126xSetTxParams( 0, RADIO_RAMP_200_US );
 80016ec:	2104      	movs	r1, #4
 80016ee:	2000      	movs	r0, #0
 80016f0:	f001 fbe4 	bl	8002ebc <SX126xSetTxParams>
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80016f4:	2300      	movs	r3, #0
 80016f6:	2200      	movs	r2, #0
 80016f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80016fc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001700:	f001 fb16 	bl	8002d30 <SX126xSetDioIrqParams>
    
    //Initialize driver timeout timers
    //TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
    //TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
    
    IrqFired = false;
 8001704:	4b05      	ldr	r3, [pc, #20]	; (800171c <RadioInit+0x58>)
 8001706:	2200      	movs	r2, #0
 8001708:	701a      	strb	r2, [r3, #0]
}
 800170a:	bf00      	nop
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	200001b8 	.word	0x200001b8
 8001718:	0800224d 	.word	0x0800224d
 800171c:	200001b0 	.word	0x200001b0

08001720 <RadioGetStatus>:

RadioState_t RadioGetStatus( void )
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
    switch( SX126xGetOperatingMode( ) )
 8001724:	f001 f8ae 	bl	8002884 <SX126xGetOperatingMode>
 8001728:	4603      	mov	r3, r0
 800172a:	2b05      	cmp	r3, #5
 800172c:	d007      	beq.n	800173e <RadioGetStatus+0x1e>
 800172e:	2b05      	cmp	r3, #5
 8001730:	dc09      	bgt.n	8001746 <RadioGetStatus+0x26>
 8001732:	2b03      	cmp	r3, #3
 8001734:	d005      	beq.n	8001742 <RadioGetStatus+0x22>
 8001736:	2b04      	cmp	r3, #4
 8001738:	d105      	bne.n	8001746 <RadioGetStatus+0x26>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 800173a:	2302      	movs	r3, #2
 800173c:	e004      	b.n	8001748 <RadioGetStatus+0x28>
        case MODE_RX:
            return RF_RX_RUNNING;
 800173e:	2301      	movs	r3, #1
 8001740:	e002      	b.n	8001748 <RadioGetStatus+0x28>
        case RF_CAD:
            return RF_CAD;
 8001742:	2303      	movs	r3, #3
 8001744:	e000      	b.n	8001748 <RadioGetStatus+0x28>
        default:
            return RF_IDLE;
 8001746:	2300      	movs	r3, #0
    }
}
 8001748:	4618      	mov	r0, r3
 800174a:	bd80      	pop	{r7, pc}

0800174c <RadioSetModem>:

void RadioSetModem( RadioModems_t modem )
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	71fb      	strb	r3, [r7, #7]
    switch( modem )
 8001756:	79fb      	ldrb	r3, [r7, #7]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d006      	beq.n	800176a <RadioSetModem+0x1e>
    {
    default:
    case MODEM_FSK:
        SX126xSetPacketType( PACKET_TYPE_GFSK );
 800175c:	2000      	movs	r0, #0
 800175e:	f001 fb8d 	bl	8002e7c <SX126xSetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        RadioPublicNetwork.Current = false;
 8001762:	4b0d      	ldr	r3, [pc, #52]	; (8001798 <RadioSetModem+0x4c>)
 8001764:	2200      	movs	r2, #0
 8001766:	705a      	strb	r2, [r3, #1]
        break;
 8001768:	e012      	b.n	8001790 <RadioSetModem+0x44>
    case MODEM_LORA:
        SX126xSetPacketType( PACKET_TYPE_LORA );
 800176a:	2001      	movs	r0, #1
 800176c:	f001 fb86 	bl	8002e7c <SX126xSetPacketType>
        // Public/Private network register is reset when switching modems
        if( RadioPublicNetwork.Current != RadioPublicNetwork.Previous )
 8001770:	4b09      	ldr	r3, [pc, #36]	; (8001798 <RadioSetModem+0x4c>)
 8001772:	785a      	ldrb	r2, [r3, #1]
 8001774:	4b08      	ldr	r3, [pc, #32]	; (8001798 <RadioSetModem+0x4c>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	429a      	cmp	r2, r3
 800177a:	d008      	beq.n	800178e <RadioSetModem+0x42>
        {
            RadioPublicNetwork.Current = RadioPublicNetwork.Previous;
 800177c:	4b06      	ldr	r3, [pc, #24]	; (8001798 <RadioSetModem+0x4c>)
 800177e:	781a      	ldrb	r2, [r3, #0]
 8001780:	4b05      	ldr	r3, [pc, #20]	; (8001798 <RadioSetModem+0x4c>)
 8001782:	705a      	strb	r2, [r3, #1]
            RadioSetPublicNetwork( RadioPublicNetwork.Current );
 8001784:	4b04      	ldr	r3, [pc, #16]	; (8001798 <RadioSetModem+0x4c>)
 8001786:	785b      	ldrb	r3, [r3, #1]
 8001788:	4618      	mov	r0, r3
 800178a:	f000 fd29 	bl	80021e0 <RadioSetPublicNetwork>
        }
        break;
 800178e:	bf00      	nop
    }
}
 8001790:	bf00      	nop
 8001792:	3708      	adds	r7, #8
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	200001b4 	.word	0x200001b4

0800179c <RadioSetChannel>:

void RadioSetChannel( uint32_t freq )
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
    SX126xSetRfFrequency( freq );
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f001 fb23 	bl	8002df0 <SX126xSetRfFrequency>
}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <RadioIsChannelFree>:

bool RadioIsChannelFree( RadioModems_t modem, uint32_t freq, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b086      	sub	sp, #24
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607b      	str	r3, [r7, #4]
 80017bc:	4603      	mov	r3, r0
 80017be:	73fb      	strb	r3, [r7, #15]
 80017c0:	4613      	mov	r3, r2
 80017c2:	81bb      	strh	r3, [r7, #12]
    bool status = true;
 80017c4:	2301      	movs	r3, #1
 80017c6:	75fb      	strb	r3, [r7, #23]
   // int16_t rssi = 0;
   // uint32_t carrierSenseTime = 0;

    RadioSetModem( modem );
 80017c8:	7bfb      	ldrb	r3, [r7, #15]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff ffbe 	bl	800174c <RadioSetModem>

    RadioSetChannel( freq );
 80017d0:	68b8      	ldr	r0, [r7, #8]
 80017d2:	f7ff ffe3 	bl	800179c <RadioSetChannel>

    RadioRx( 0 );
 80017d6:	2000      	movs	r0, #0
 80017d8:	f000 fc16 	bl	8002008 <RadioRx>

    DelayMs( 1 );
 80017dc:	2001      	movs	r0, #1
 80017de:	f7ff ff2e 	bl	800163e <DelayMs>
//        {
//            status = false;
//            break;
//        }
//    }
    RadioSleep( );
 80017e2:	f000 fbf7 	bl	8001fd4 <RadioSleep>
    return status;
 80017e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3718      	adds	r7, #24
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <RadioRandom>:

uint32_t RadioRandom( void )
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
    uint8_t i;
    uint32_t rnd = 0;
 80017f6:	2300      	movs	r3, #0
 80017f8:	603b      	str	r3, [r7, #0]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    RadioSetModem( MODEM_LORA );
 80017fa:	2001      	movs	r0, #1
 80017fc:	f7ff ffa6 	bl	800174c <RadioSetModem>

    // Set radio in continuous reception
    SX126xSetRx( 0 );
 8001800:	2000      	movs	r0, #0
 8001802:	f001 f979 	bl	8002af8 <SX126xSetRx>

    for( i = 0; i < 32; i++ )
 8001806:	2300      	movs	r3, #0
 8001808:	71fb      	strb	r3, [r7, #7]
 800180a:	e011      	b.n	8001830 <RadioRandom+0x40>
    {
        DelayMs( 1 );
 800180c:	2001      	movs	r0, #1
 800180e:	f7ff ff16 	bl	800163e <DelayMs>
        // Unfiltered RSSI value reading. Only takes the LSB value
        rnd |= ( ( uint32_t )SX126xGetRssiInst( ) & 0x01 ) << i;
 8001812:	f001 fd20 	bl	8003256 <SX126xGetRssiInst>
 8001816:	4603      	mov	r3, r0
 8001818:	b2db      	uxtb	r3, r3
 800181a:	f003 0201 	and.w	r2, r3, #1
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	683a      	ldr	r2, [r7, #0]
 8001826:	4313      	orrs	r3, r2
 8001828:	603b      	str	r3, [r7, #0]
    for( i = 0; i < 32; i++ )
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	3301      	adds	r3, #1
 800182e:	71fb      	strb	r3, [r7, #7]
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	2b1f      	cmp	r3, #31
 8001834:	d9ea      	bls.n	800180c <RadioRandom+0x1c>
    }

    RadioSleep( );
 8001836:	f000 fbcd 	bl	8001fd4 <RadioSleep>

    return rnd;
 800183a:	683b      	ldr	r3, [r7, #0]
}
 800183c:	4618      	mov	r0, r3
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <RadioSetRxConfig>:
                         uint32_t bandwidthAfc, uint16_t preambleLen,
                         uint16_t symbTimeout, bool fixLen,
                         uint8_t payloadLen,
                         bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                         bool iqInverted, bool rxContinuous )
{
 8001844:	b5b0      	push	{r4, r5, r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	60b9      	str	r1, [r7, #8]
 800184c:	607a      	str	r2, [r7, #4]
 800184e:	461a      	mov	r2, r3
 8001850:	4603      	mov	r3, r0
 8001852:	73fb      	strb	r3, [r7, #15]
 8001854:	4613      	mov	r3, r2
 8001856:	73bb      	strb	r3, [r7, #14]
	uint8_t syncWordByte[] ={ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8001858:	4a92      	ldr	r2, [pc, #584]	; (8001aa4 <RadioSetRxConfig+0x260>)
 800185a:	f107 0310 	add.w	r3, r7, #16
 800185e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001862:	e883 0003 	stmia.w	r3, {r0, r1}
	
    RxContinuous = rxContinuous;
 8001866:	4a90      	ldr	r2, [pc, #576]	; (8001aa8 <RadioSetRxConfig+0x264>)
 8001868:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800186c:	7013      	strb	r3, [r2, #0]

    if( fixLen == true )
 800186e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001872:	2b00      	cmp	r3, #0
 8001874:	d004      	beq.n	8001880 <RadioSetRxConfig+0x3c>
    {
        MaxPayloadLength = payloadLen;
 8001876:	4a8d      	ldr	r2, [pc, #564]	; (8001aac <RadioSetRxConfig+0x268>)
 8001878:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800187c:	7013      	strb	r3, [r2, #0]
 800187e:	e002      	b.n	8001886 <RadioSetRxConfig+0x42>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8001880:	4b8a      	ldr	r3, [pc, #552]	; (8001aac <RadioSetRxConfig+0x268>)
 8001882:	22ff      	movs	r2, #255	; 0xff
 8001884:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8001886:	7bfb      	ldrb	r3, [r7, #15]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d003      	beq.n	8001894 <RadioSetRxConfig+0x50>
 800188c:	2b01      	cmp	r3, #1
 800188e:	f000 8090 	beq.w	80019b2 <RadioSetRxConfig+0x16e>
            // Timeout Max, Timeout handled directly in SetRx function
             RxTimeout = 0xFFFF;

            break;
    }
}
 8001892:	e103      	b.n	8001a9c <RadioSetRxConfig+0x258>
            SX126xSetStopRxTimerOnPreambleDetect( false );
 8001894:	2000      	movs	r0, #0
 8001896:	f001 f9b6 	bl	8002c06 <SX126xSetStopRxTimerOnPreambleDetect>
            SX126x.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800189a:	4b85      	ldr	r3, [pc, #532]	; (8001ab0 <RadioSetRxConfig+0x26c>)
 800189c:	2200      	movs	r2, #0
 800189e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            SX126x.ModulationParams.Params.Gfsk.BitRate = datarate;
 80018a2:	4a83      	ldr	r2, [pc, #524]	; (8001ab0 <RadioSetRxConfig+0x26c>)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	62d3      	str	r3, [r2, #44]	; 0x2c
            SX126x.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80018a8:	4b81      	ldr	r3, [pc, #516]	; (8001ab0 <RadioSetRxConfig+0x26c>)
 80018aa:	220b      	movs	r2, #11
 80018ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            SX126x.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue( bandwidth );
 80018b0:	68b8      	ldr	r0, [r7, #8]
 80018b2:	f7ff fed5 	bl	8001660 <RadioGetFskBandwidthRegValue>
 80018b6:	4603      	mov	r3, r0
 80018b8:	461a      	mov	r2, r3
 80018ba:	4b7d      	ldr	r3, [pc, #500]	; (8001ab0 <RadioSetRxConfig+0x26c>)
 80018bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            SX126x.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80018c0:	4b7b      	ldr	r3, [pc, #492]	; (8001ab0 <RadioSetRxConfig+0x26c>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	701a      	strb	r2, [r3, #0]
            SX126x.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80018c6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80018c8:	00db      	lsls	r3, r3, #3
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	4b78      	ldr	r3, [pc, #480]	; (8001ab0 <RadioSetRxConfig+0x26c>)
 80018ce:	805a      	strh	r2, [r3, #2]
            SX126x.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80018d0:	4b77      	ldr	r3, [pc, #476]	; (8001ab0 <RadioSetRxConfig+0x26c>)
 80018d2:	2204      	movs	r2, #4
 80018d4:	711a      	strb	r2, [r3, #4]
            SX126x.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 80018d6:	4b76      	ldr	r3, [pc, #472]	; (8001ab0 <RadioSetRxConfig+0x26c>)
 80018d8:	2218      	movs	r2, #24
 80018da:	715a      	strb	r2, [r3, #5]
            SX126x.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80018dc:	4b74      	ldr	r3, [pc, #464]	; (8001ab0 <RadioSetRxConfig+0x26c>)
 80018de:	2200      	movs	r2, #0
 80018e0:	719a      	strb	r2, [r3, #6]
            SX126x.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80018e2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80018e6:	f083 0301 	eor.w	r3, r3, #1
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	461a      	mov	r2, r3
 80018ee:	4b70      	ldr	r3, [pc, #448]	; (8001ab0 <RadioSetRxConfig+0x26c>)
 80018f0:	71da      	strb	r2, [r3, #7]
            SX126x.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80018f2:	4b6e      	ldr	r3, [pc, #440]	; (8001aac <RadioSetRxConfig+0x268>)
 80018f4:	781a      	ldrb	r2, [r3, #0]
 80018f6:	4b6e      	ldr	r3, [pc, #440]	; (8001ab0 <RadioSetRxConfig+0x26c>)
 80018f8:	721a      	strb	r2, [r3, #8]
            if( crcOn == true )
 80018fa:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d003      	beq.n	800190a <RadioSetRxConfig+0xc6>
                SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8001902:	4b6b      	ldr	r3, [pc, #428]	; (8001ab0 <RadioSetRxConfig+0x26c>)
 8001904:	22f2      	movs	r2, #242	; 0xf2
 8001906:	725a      	strb	r2, [r3, #9]
 8001908:	e002      	b.n	8001910 <RadioSetRxConfig+0xcc>
                SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800190a:	4b69      	ldr	r3, [pc, #420]	; (8001ab0 <RadioSetRxConfig+0x26c>)
 800190c:	2201      	movs	r2, #1
 800190e:	725a      	strb	r2, [r3, #9]
            SX126x.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8001910:	4b67      	ldr	r3, [pc, #412]	; (8001ab0 <RadioSetRxConfig+0x26c>)
 8001912:	2200      	movs	r2, #0
 8001914:	729a      	strb	r2, [r3, #10]
            RadioStandby( );
 8001916:	f000 fb70 	bl	8001ffa <RadioStandby>
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800191a:	4b65      	ldr	r3, [pc, #404]	; (8001ab0 <RadioSetRxConfig+0x26c>)
 800191c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001920:	2b00      	cmp	r3, #0
 8001922:	bf14      	ite	ne
 8001924:	2301      	movne	r3, #1
 8001926:	2300      	moveq	r3, #0
 8001928:	b2db      	uxtb	r3, r3
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff ff0e 	bl	800174c <RadioSetModem>
            SX126xSetModulationParams( &SX126x.ModulationParams );
 8001930:	4860      	ldr	r0, [pc, #384]	; (8001ab4 <RadioSetRxConfig+0x270>)
 8001932:	f001 fb21 	bl	8002f78 <SX126xSetModulationParams>
            SX126xSetPacketParams( &SX126x.PacketParams );
 8001936:	485e      	ldr	r0, [pc, #376]	; (8001ab0 <RadioSetRxConfig+0x26c>)
 8001938:	f001 fbbc 	bl	80030b4 <SX126xSetPacketParams>
            SX126xSetSyncWord( syncWordByte );
 800193c:	f107 0310 	add.w	r3, r7, #16
 8001940:	4618      	mov	r0, r3
 8001942:	f001 f804 	bl	800294e <SX126xSetSyncWord>
            SX126xSetWhiteningSeed( 0x01FF );
 8001946:	f240 10ff 	movw	r0, #511	; 0x1ff
 800194a:	f001 f84f 	bl	80029ec <SX126xSetWhiteningSeed>
            RxTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 800194e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001950:	4618      	mov	r0, r3
 8001952:	f7fe fd8b 	bl	800046c <__aeabi_i2d>
 8001956:	4604      	mov	r4, r0
 8001958:	460d      	mov	r5, r1
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f7fe fd76 	bl	800044c <__aeabi_ui2d>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	f04f 0000 	mov.w	r0, #0
 8001968:	4953      	ldr	r1, [pc, #332]	; (8001ab8 <RadioSetRxConfig+0x274>)
 800196a:	f7fe ff13 	bl	8000794 <__aeabi_ddiv>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	4610      	mov	r0, r2
 8001974:	4619      	mov	r1, r3
 8001976:	f04f 0200 	mov.w	r2, #0
 800197a:	4b50      	ldr	r3, [pc, #320]	; (8001abc <RadioSetRxConfig+0x278>)
 800197c:	f7fe fde0 	bl	8000540 <__aeabi_dmul>
 8001980:	4602      	mov	r2, r0
 8001982:	460b      	mov	r3, r1
 8001984:	4620      	mov	r0, r4
 8001986:	4629      	mov	r1, r5
 8001988:	f7fe fdda 	bl	8000540 <__aeabi_dmul>
 800198c:	4602      	mov	r2, r0
 800198e:	460b      	mov	r3, r1
 8001990:	4610      	mov	r0, r2
 8001992:	4619      	mov	r1, r3
 8001994:	f04f 0200 	mov.w	r2, #0
 8001998:	4b49      	ldr	r3, [pc, #292]	; (8001ac0 <RadioSetRxConfig+0x27c>)
 800199a:	f7fe fdd1 	bl	8000540 <__aeabi_dmul>
 800199e:	4602      	mov	r2, r0
 80019a0:	460b      	mov	r3, r1
 80019a2:	4610      	mov	r0, r2
 80019a4:	4619      	mov	r1, r3
 80019a6:	f7ff f865 	bl	8000a74 <__aeabi_d2uiz>
 80019aa:	4603      	mov	r3, r0
 80019ac:	4a45      	ldr	r2, [pc, #276]	; (8001ac4 <RadioSetRxConfig+0x280>)
 80019ae:	6013      	str	r3, [r2, #0]
            break;
 80019b0:	e074      	b.n	8001a9c <RadioSetRxConfig+0x258>
            SX126xSetStopRxTimerOnPreambleDetect( false );
 80019b2:	2000      	movs	r0, #0
 80019b4:	f001 f927 	bl	8002c06 <SX126xSetStopRxTimerOnPreambleDetect>
            SX126xSetLoRaSymbNumTimeout( symbTimeout );
 80019b8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	4618      	mov	r0, r3
 80019be:	f001 f931 	bl	8002c24 <SX126xSetLoRaSymbNumTimeout>
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80019c2:	4b3b      	ldr	r3, [pc, #236]	; (8001ab0 <RadioSetRxConfig+0x26c>)
 80019c4:	2201      	movs	r2, #1
 80019c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            SX126x.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	b2da      	uxtb	r2, r3
 80019ce:	4b38      	ldr	r3, [pc, #224]	; (8001ab0 <RadioSetRxConfig+0x26c>)
 80019d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SX126x.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 80019d4:	4a3c      	ldr	r2, [pc, #240]	; (8001ac8 <RadioSetRxConfig+0x284>)
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	4413      	add	r3, r2
 80019da:	781a      	ldrb	r2, [r3, #0]
 80019dc:	4b34      	ldr	r3, [pc, #208]	; (8001ab0 <RadioSetRxConfig+0x26c>)
 80019de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            SX126x.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 80019e2:	4a33      	ldr	r2, [pc, #204]	; (8001ab0 <RadioSetRxConfig+0x26c>)
 80019e4:	7bbb      	ldrb	r3, [r7, #14]
 80019e6:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d105      	bne.n	80019fc <RadioSetRxConfig+0x1b8>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2b0b      	cmp	r3, #11
 80019f4:	d008      	beq.n	8001a08 <RadioSetRxConfig+0x1c4>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2b0c      	cmp	r3, #12
 80019fa:	d005      	beq.n	8001a08 <RadioSetRxConfig+0x1c4>
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d107      	bne.n	8001a12 <RadioSetRxConfig+0x1ce>
            ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2b0c      	cmp	r3, #12
 8001a06:	d104      	bne.n	8001a12 <RadioSetRxConfig+0x1ce>
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8001a08:	4b29      	ldr	r3, [pc, #164]	; (8001ab0 <RadioSetRxConfig+0x26c>)
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8001a10:	e003      	b.n	8001a1a <RadioSetRxConfig+0x1d6>
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8001a12:	4b27      	ldr	r3, [pc, #156]	; (8001ab0 <RadioSetRxConfig+0x26c>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
            SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 8001a1a:	4b25      	ldr	r3, [pc, #148]	; (8001ab0 <RadioSetRxConfig+0x26c>)
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	701a      	strb	r2, [r3, #0]
            if( ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8001a20:	4b23      	ldr	r3, [pc, #140]	; (8001ab0 <RadioSetRxConfig+0x26c>)
 8001a22:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a26:	2b05      	cmp	r3, #5
 8001a28:	d004      	beq.n	8001a34 <RadioSetRxConfig+0x1f0>
                ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8001a2a:	4b21      	ldr	r3, [pc, #132]	; (8001ab0 <RadioSetRxConfig+0x26c>)
 8001a2c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
            if( ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8001a30:	2b06      	cmp	r3, #6
 8001a32:	d10a      	bne.n	8001a4a <RadioSetRxConfig+0x206>
                if( preambleLen < 12 )
 8001a34:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001a36:	2b0b      	cmp	r3, #11
 8001a38:	d803      	bhi.n	8001a42 <RadioSetRxConfig+0x1fe>
                    SX126x.PacketParams.Params.LoRa.PreambleLength = 12;
 8001a3a:	4b1d      	ldr	r3, [pc, #116]	; (8001ab0 <RadioSetRxConfig+0x26c>)
 8001a3c:	220c      	movs	r2, #12
 8001a3e:	819a      	strh	r2, [r3, #12]
                if( preambleLen < 12 )
 8001a40:	e006      	b.n	8001a50 <RadioSetRxConfig+0x20c>
                    SX126x.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8001a42:	4a1b      	ldr	r2, [pc, #108]	; (8001ab0 <RadioSetRxConfig+0x26c>)
 8001a44:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001a46:	8193      	strh	r3, [r2, #12]
                if( preambleLen < 12 )
 8001a48:	e002      	b.n	8001a50 <RadioSetRxConfig+0x20c>
                SX126x.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8001a4a:	4a19      	ldr	r2, [pc, #100]	; (8001ab0 <RadioSetRxConfig+0x26c>)
 8001a4c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001a4e:	8193      	strh	r3, [r2, #12]
            SX126x.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8001a50:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8001a54:	4b16      	ldr	r3, [pc, #88]	; (8001ab0 <RadioSetRxConfig+0x26c>)
 8001a56:	739a      	strb	r2, [r3, #14]
            SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8001a58:	4b14      	ldr	r3, [pc, #80]	; (8001aac <RadioSetRxConfig+0x268>)
 8001a5a:	781a      	ldrb	r2, [r3, #0]
 8001a5c:	4b14      	ldr	r3, [pc, #80]	; (8001ab0 <RadioSetRxConfig+0x26c>)
 8001a5e:	73da      	strb	r2, [r3, #15]
            SX126x.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8001a60:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8001a64:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <RadioSetRxConfig+0x26c>)
 8001a66:	741a      	strb	r2, [r3, #16]
            SX126x.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8001a68:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 8001a6c:	4b10      	ldr	r3, [pc, #64]	; (8001ab0 <RadioSetRxConfig+0x26c>)
 8001a6e:	745a      	strb	r2, [r3, #17]
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8001a70:	4b0f      	ldr	r3, [pc, #60]	; (8001ab0 <RadioSetRxConfig+0x26c>)
 8001a72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	bf14      	ite	ne
 8001a7a:	2301      	movne	r3, #1
 8001a7c:	2300      	moveq	r3, #0
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff fe63 	bl	800174c <RadioSetModem>
            SX126xSetModulationParams( &SX126x.ModulationParams );
 8001a86:	480b      	ldr	r0, [pc, #44]	; (8001ab4 <RadioSetRxConfig+0x270>)
 8001a88:	f001 fa76 	bl	8002f78 <SX126xSetModulationParams>
            SX126xSetPacketParams( &SX126x.PacketParams );
 8001a8c:	4808      	ldr	r0, [pc, #32]	; (8001ab0 <RadioSetRxConfig+0x26c>)
 8001a8e:	f001 fb11 	bl	80030b4 <SX126xSetPacketParams>
             RxTimeout = 0xFFFF;
 8001a92:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <RadioSetRxConfig+0x280>)
 8001a94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a98:	601a      	str	r2, [r3, #0]
            break;
 8001a9a:	bf00      	nop
}
 8001a9c:	bf00      	nop
 8001a9e:	3718      	adds	r7, #24
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bdb0      	pop	{r4, r5, r7, pc}
 8001aa4:	080065b0 	.word	0x080065b0
 8001aa8:	20000099 	.word	0x20000099
 8001aac:	20000098 	.word	0x20000098
 8001ab0:	20000534 	.word	0x20000534
 8001ab4:	2000055c 	.word	0x2000055c
 8001ab8:	3ff00000 	.word	0x3ff00000
 8001abc:	40200000 	.word	0x40200000
 8001ac0:	408f4000 	.word	0x408f4000
 8001ac4:	200001ac 	.word	0x200001ac
 8001ac8:	080066f8 	.word	0x080066f8

08001acc <RadioSetTxConfig>:
void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                        uint32_t bandwidth, uint32_t datarate,
                        uint8_t coderate, uint16_t preambleLen,
                        bool fixLen, bool crcOn, bool freqHopOn,
                        uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60ba      	str	r2, [r7, #8]
 8001ad4:	607b      	str	r3, [r7, #4]
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	73fb      	strb	r3, [r7, #15]
 8001ada:	460b      	mov	r3, r1
 8001adc:	73bb      	strb	r3, [r7, #14]
	uint8_t syncWordByte[] ={ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8001ade:	4a6f      	ldr	r2, [pc, #444]	; (8001c9c <RadioSetTxConfig+0x1d0>)
 8001ae0:	f107 0310 	add.w	r3, r7, #16
 8001ae4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ae8:	e883 0003 	stmia.w	r3, {r0, r1}
	
    switch( modem )
 8001aec:	7bfb      	ldrb	r3, [r7, #15]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d002      	beq.n	8001af8 <RadioSetTxConfig+0x2c>
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d05a      	beq.n	8001bac <RadioSetTxConfig+0xe0>
 8001af6:	e0c5      	b.n	8001c84 <RadioSetTxConfig+0x1b8>
    {
        case MODEM_FSK:
            SX126x.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8001af8:	4b69      	ldr	r3, [pc, #420]	; (8001ca0 <RadioSetTxConfig+0x1d4>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            SX126x.ModulationParams.Params.Gfsk.BitRate = datarate;
 8001b00:	4a67      	ldr	r2, [pc, #412]	; (8001ca0 <RadioSetTxConfig+0x1d4>)
 8001b02:	6a3b      	ldr	r3, [r7, #32]
 8001b04:	62d3      	str	r3, [r2, #44]	; 0x2c

            SX126x.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8001b06:	4b66      	ldr	r3, [pc, #408]	; (8001ca0 <RadioSetTxConfig+0x1d4>)
 8001b08:	220b      	movs	r2, #11
 8001b0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            SX126x.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue( bandwidth );
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f7ff fda6 	bl	8001660 <RadioGetFskBandwidthRegValue>
 8001b14:	4603      	mov	r3, r0
 8001b16:	461a      	mov	r2, r3
 8001b18:	4b61      	ldr	r3, [pc, #388]	; (8001ca0 <RadioSetTxConfig+0x1d4>)
 8001b1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            SX126x.ModulationParams.Params.Gfsk.Fdev = fdev;
 8001b1e:	4a60      	ldr	r2, [pc, #384]	; (8001ca0 <RadioSetTxConfig+0x1d4>)
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	6313      	str	r3, [r2, #48]	; 0x30

            SX126x.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8001b24:	4b5e      	ldr	r3, [pc, #376]	; (8001ca0 <RadioSetTxConfig+0x1d4>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	701a      	strb	r2, [r3, #0]
            SX126x.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8001b2a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	4b5b      	ldr	r3, [pc, #364]	; (8001ca0 <RadioSetTxConfig+0x1d4>)
 8001b32:	805a      	strh	r2, [r3, #2]
            SX126x.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8001b34:	4b5a      	ldr	r3, [pc, #360]	; (8001ca0 <RadioSetTxConfig+0x1d4>)
 8001b36:	2204      	movs	r2, #4
 8001b38:	711a      	strb	r2, [r3, #4]
            SX126x.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8001b3a:	4b59      	ldr	r3, [pc, #356]	; (8001ca0 <RadioSetTxConfig+0x1d4>)
 8001b3c:	2218      	movs	r2, #24
 8001b3e:	715a      	strb	r2, [r3, #5]
            SX126x.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8001b40:	4b57      	ldr	r3, [pc, #348]	; (8001ca0 <RadioSetTxConfig+0x1d4>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	719a      	strb	r2, [r3, #6]
            SX126x.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8001b46:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b4a:	f083 0301 	eor.w	r3, r3, #1
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	461a      	mov	r2, r3
 8001b52:	4b53      	ldr	r3, [pc, #332]	; (8001ca0 <RadioSetTxConfig+0x1d4>)
 8001b54:	71da      	strb	r2, [r3, #7]

            if( crcOn == true )
 8001b56:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d003      	beq.n	8001b66 <RadioSetTxConfig+0x9a>
            {
                SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8001b5e:	4b50      	ldr	r3, [pc, #320]	; (8001ca0 <RadioSetTxConfig+0x1d4>)
 8001b60:	22f2      	movs	r2, #242	; 0xf2
 8001b62:	725a      	strb	r2, [r3, #9]
 8001b64:	e002      	b.n	8001b6c <RadioSetTxConfig+0xa0>
            }
            else
            {
                SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8001b66:	4b4e      	ldr	r3, [pc, #312]	; (8001ca0 <RadioSetTxConfig+0x1d4>)
 8001b68:	2201      	movs	r2, #1
 8001b6a:	725a      	strb	r2, [r3, #9]
            }
            SX126x.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8001b6c:	4b4c      	ldr	r3, [pc, #304]	; (8001ca0 <RadioSetTxConfig+0x1d4>)
 8001b6e:	2201      	movs	r2, #1
 8001b70:	729a      	strb	r2, [r3, #10]

            RadioStandby( );
 8001b72:	f000 fa42 	bl	8001ffa <RadioStandby>
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8001b76:	4b4a      	ldr	r3, [pc, #296]	; (8001ca0 <RadioSetTxConfig+0x1d4>)
 8001b78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	bf14      	ite	ne
 8001b80:	2301      	movne	r3, #1
 8001b82:	2300      	moveq	r3, #0
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff fde0 	bl	800174c <RadioSetModem>
            SX126xSetModulationParams( &SX126x.ModulationParams );
 8001b8c:	4845      	ldr	r0, [pc, #276]	; (8001ca4 <RadioSetTxConfig+0x1d8>)
 8001b8e:	f001 f9f3 	bl	8002f78 <SX126xSetModulationParams>
            SX126xSetPacketParams( &SX126x.PacketParams );
 8001b92:	4843      	ldr	r0, [pc, #268]	; (8001ca0 <RadioSetTxConfig+0x1d4>)
 8001b94:	f001 fa8e 	bl	80030b4 <SX126xSetPacketParams>
            SX126xSetSyncWord( syncWordByte );
 8001b98:	f107 0310 	add.w	r3, r7, #16
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f000 fed6 	bl	800294e <SX126xSetSyncWord>
            SX126xSetWhiteningSeed( 0x01FF );
 8001ba2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001ba6:	f000 ff21 	bl	80029ec <SX126xSetWhiteningSeed>
            break;
 8001baa:	e06b      	b.n	8001c84 <RadioSetTxConfig+0x1b8>

        case MODEM_LORA:
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8001bac:	4b3c      	ldr	r3, [pc, #240]	; (8001ca0 <RadioSetTxConfig+0x1d4>)
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            SX126x.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8001bb4:	6a3b      	ldr	r3, [r7, #32]
 8001bb6:	b2da      	uxtb	r2, r3
 8001bb8:	4b39      	ldr	r3, [pc, #228]	; (8001ca0 <RadioSetTxConfig+0x1d4>)
 8001bba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SX126x.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8001bbe:	4a3a      	ldr	r2, [pc, #232]	; (8001ca8 <RadioSetTxConfig+0x1dc>)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	781a      	ldrb	r2, [r3, #0]
 8001bc6:	4b36      	ldr	r3, [pc, #216]	; (8001ca0 <RadioSetTxConfig+0x1d4>)
 8001bc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            SX126x.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8001bcc:	4a34      	ldr	r2, [pc, #208]	; (8001ca0 <RadioSetTxConfig+0x1d4>)
 8001bce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001bd2:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a

            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d105      	bne.n	8001be8 <RadioSetTxConfig+0x11c>
 8001bdc:	6a3b      	ldr	r3, [r7, #32]
 8001bde:	2b0b      	cmp	r3, #11
 8001be0:	d008      	beq.n	8001bf4 <RadioSetTxConfig+0x128>
 8001be2:	6a3b      	ldr	r3, [r7, #32]
 8001be4:	2b0c      	cmp	r3, #12
 8001be6:	d005      	beq.n	8001bf4 <RadioSetTxConfig+0x128>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d107      	bne.n	8001bfe <RadioSetTxConfig+0x132>
            ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8001bee:	6a3b      	ldr	r3, [r7, #32]
 8001bf0:	2b0c      	cmp	r3, #12
 8001bf2:	d104      	bne.n	8001bfe <RadioSetTxConfig+0x132>
            {
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8001bf4:	4b2a      	ldr	r3, [pc, #168]	; (8001ca0 <RadioSetTxConfig+0x1d4>)
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8001bfc:	e003      	b.n	8001c06 <RadioSetTxConfig+0x13a>
            }
            else
            {
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8001bfe:	4b28      	ldr	r3, [pc, #160]	; (8001ca0 <RadioSetTxConfig+0x1d4>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
            }

            SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 8001c06:	4b26      	ldr	r3, [pc, #152]	; (8001ca0 <RadioSetTxConfig+0x1d4>)
 8001c08:	2201      	movs	r2, #1
 8001c0a:	701a      	strb	r2, [r3, #0]

            if( ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8001c0c:	4b24      	ldr	r3, [pc, #144]	; (8001ca0 <RadioSetTxConfig+0x1d4>)
 8001c0e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c12:	2b05      	cmp	r3, #5
 8001c14:	d004      	beq.n	8001c20 <RadioSetTxConfig+0x154>
                ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8001c16:	4b22      	ldr	r3, [pc, #136]	; (8001ca0 <RadioSetTxConfig+0x1d4>)
 8001c18:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
            if( ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8001c1c:	2b06      	cmp	r3, #6
 8001c1e:	d10a      	bne.n	8001c36 <RadioSetTxConfig+0x16a>
            {
                if( preambleLen < 12 )
 8001c20:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001c22:	2b0b      	cmp	r3, #11
 8001c24:	d803      	bhi.n	8001c2e <RadioSetTxConfig+0x162>
                {
                    SX126x.PacketParams.Params.LoRa.PreambleLength = 12;
 8001c26:	4b1e      	ldr	r3, [pc, #120]	; (8001ca0 <RadioSetTxConfig+0x1d4>)
 8001c28:	220c      	movs	r2, #12
 8001c2a:	819a      	strh	r2, [r3, #12]
                if( preambleLen < 12 )
 8001c2c:	e006      	b.n	8001c3c <RadioSetTxConfig+0x170>
                }
                else
                {
                    SX126x.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8001c2e:	4a1c      	ldr	r2, [pc, #112]	; (8001ca0 <RadioSetTxConfig+0x1d4>)
 8001c30:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001c32:	8193      	strh	r3, [r2, #12]
                if( preambleLen < 12 )
 8001c34:	e002      	b.n	8001c3c <RadioSetTxConfig+0x170>
                }
            }
            else
            {
                SX126x.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8001c36:	4a1a      	ldr	r2, [pc, #104]	; (8001ca0 <RadioSetTxConfig+0x1d4>)
 8001c38:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001c3a:	8193      	strh	r3, [r2, #12]
            }

            SX126x.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8001c3c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001c40:	4b17      	ldr	r3, [pc, #92]	; (8001ca0 <RadioSetTxConfig+0x1d4>)
 8001c42:	739a      	strb	r2, [r3, #14]
            SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8001c44:	4b19      	ldr	r3, [pc, #100]	; (8001cac <RadioSetTxConfig+0x1e0>)
 8001c46:	781a      	ldrb	r2, [r3, #0]
 8001c48:	4b15      	ldr	r3, [pc, #84]	; (8001ca0 <RadioSetTxConfig+0x1d4>)
 8001c4a:	73da      	strb	r2, [r3, #15]
            SX126x.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8001c4c:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001c50:	4b13      	ldr	r3, [pc, #76]	; (8001ca0 <RadioSetTxConfig+0x1d4>)
 8001c52:	741a      	strb	r2, [r3, #16]
            SX126x.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8001c54:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8001c58:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <RadioSetTxConfig+0x1d4>)
 8001c5a:	745a      	strb	r2, [r3, #17]

            RadioStandby( );
 8001c5c:	f000 f9cd 	bl	8001ffa <RadioStandby>
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8001c60:	4b0f      	ldr	r3, [pc, #60]	; (8001ca0 <RadioSetTxConfig+0x1d4>)
 8001c62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	bf14      	ite	ne
 8001c6a:	2301      	movne	r3, #1
 8001c6c:	2300      	moveq	r3, #0
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff fd6b 	bl	800174c <RadioSetModem>
            SX126xSetModulationParams( &SX126x.ModulationParams );
 8001c76:	480b      	ldr	r0, [pc, #44]	; (8001ca4 <RadioSetTxConfig+0x1d8>)
 8001c78:	f001 f97e 	bl	8002f78 <SX126xSetModulationParams>
            SX126xSetPacketParams( &SX126x.PacketParams );
 8001c7c:	4808      	ldr	r0, [pc, #32]	; (8001ca0 <RadioSetTxConfig+0x1d4>)
 8001c7e:	f001 fa19 	bl	80030b4 <SX126xSetPacketParams>
            break;
 8001c82:	bf00      	nop
    }
    SX126xSetRfTxPower( power );
 8001c84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f000 fdbb 	bl	8002804 <SX126xSetRfTxPower>
    TxTimeout = timeout;
 8001c8e:	4a08      	ldr	r2, [pc, #32]	; (8001cb0 <RadioSetTxConfig+0x1e4>)
 8001c90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c92:	6013      	str	r3, [r2, #0]
}
 8001c94:	bf00      	nop
 8001c96:	3718      	adds	r7, #24
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	080065b0 	.word	0x080065b0
 8001ca0:	20000534 	.word	0x20000534
 8001ca4:	2000055c 	.word	0x2000055c
 8001ca8:	080066f8 	.word	0x080066f8
 8001cac:	20000098 	.word	0x20000098
 8001cb0:	200001a8 	.word	0x200001a8

08001cb4 <RadioCheckRfFrequency>:

bool RadioCheckRfFrequency( uint32_t frequency )
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
    return true;
 8001cbc:	2301      	movs	r3, #1
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	0000      	movs	r0, r0
 8001ccc:	0000      	movs	r0, r0
	...

08001cd0 <RadioTimeOnAir>:

uint32_t RadioTimeOnAir( RadioModems_t modem, uint8_t pktLen )
{
 8001cd0:	b5b0      	push	{r4, r5, r7, lr}
 8001cd2:	b090      	sub	sp, #64	; 0x40
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	460a      	mov	r2, r1
 8001cda:	71fb      	strb	r3, [r7, #7]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	71bb      	strb	r3, [r7, #6]
    uint32_t airTime = 0;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	63fb      	str	r3, [r7, #60]	; 0x3c

    switch( modem )
 8001ce4:	79fb      	ldrb	r3, [r7, #7]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d002      	beq.n	8001cf0 <RadioTimeOnAir+0x20>
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d072      	beq.n	8001dd4 <RadioTimeOnAir+0x104>
 8001cee:	e132      	b.n	8001f56 <RadioTimeOnAir+0x286>
    {
    case MODEM_FSK:
        {
           airTime = rint( ( 8 * ( SX126x.PacketParams.Params.Gfsk.PreambleLength +
 8001cf0:	4b9d      	ldr	r3, [pc, #628]	; (8001f68 <RadioTimeOnAir+0x298>)
 8001cf2:	885b      	ldrh	r3, [r3, #2]
 8001cf4:	461a      	mov	r2, r3
                                     ( SX126x.PacketParams.Params.Gfsk.SyncWordLength >> 3 ) +
 8001cf6:	4b9c      	ldr	r3, [pc, #624]	; (8001f68 <RadioTimeOnAir+0x298>)
 8001cf8:	795b      	ldrb	r3, [r3, #5]
 8001cfa:	08db      	lsrs	r3, r3, #3
 8001cfc:	b2db      	uxtb	r3, r3
           airTime = rint( ( 8 * ( SX126x.PacketParams.Params.Gfsk.PreambleLength +
 8001cfe:	4413      	add	r3, r2
                                     ( SX126x.PacketParams.Params.Gfsk.SyncWordLength >> 3 ) +
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7fe fbb3 	bl	800046c <__aeabi_i2d>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
                                     ( ( SX126x.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_FIXED_LENGTH ) ? 0.0 : 1.0 ) +
 8001d0a:	4997      	ldr	r1, [pc, #604]	; (8001f68 <RadioTimeOnAir+0x298>)
 8001d0c:	79c9      	ldrb	r1, [r1, #7]
 8001d0e:	2900      	cmp	r1, #0
 8001d10:	d104      	bne.n	8001d1c <RadioTimeOnAir+0x4c>
 8001d12:	f04f 0000 	mov.w	r0, #0
 8001d16:	f04f 0100 	mov.w	r1, #0
 8001d1a:	e002      	b.n	8001d22 <RadioTimeOnAir+0x52>
 8001d1c:	f04f 0000 	mov.w	r0, #0
 8001d20:	4992      	ldr	r1, [pc, #584]	; (8001f6c <RadioTimeOnAir+0x29c>)
                                     ( SX126x.PacketParams.Params.Gfsk.SyncWordLength >> 3 ) +
 8001d22:	f7fe fa57 	bl	80001d4 <__adddf3>
 8001d26:	4602      	mov	r2, r0
 8001d28:	460b      	mov	r3, r1
 8001d2a:	4614      	mov	r4, r2
 8001d2c:	461d      	mov	r5, r3
                                     ( ( SX126x.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_FIXED_LENGTH ) ? 0.0 : 1.0 ) +
 8001d2e:	79bb      	ldrb	r3, [r7, #6]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7fe fb9b 	bl	800046c <__aeabi_i2d>
 8001d36:	4602      	mov	r2, r0
 8001d38:	460b      	mov	r3, r1
 8001d3a:	4620      	mov	r0, r4
 8001d3c:	4629      	mov	r1, r5
 8001d3e:	f7fe fa49 	bl	80001d4 <__adddf3>
 8001d42:	4602      	mov	r2, r0
 8001d44:	460b      	mov	r3, r1
 8001d46:	4614      	mov	r4, r2
 8001d48:	461d      	mov	r5, r3
                                     pktLen +
                                     ( ( SX126x.PacketParams.Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES ) ? 2.0 : 0 ) ) /
 8001d4a:	4b87      	ldr	r3, [pc, #540]	; (8001f68 <RadioTimeOnAir+0x298>)
 8001d4c:	7a5b      	ldrb	r3, [r3, #9]
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d104      	bne.n	8001d5c <RadioTimeOnAir+0x8c>
 8001d52:	f04f 0000 	mov.w	r0, #0
 8001d56:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001d5a:	e003      	b.n	8001d64 <RadioTimeOnAir+0x94>
 8001d5c:	f04f 0000 	mov.w	r0, #0
 8001d60:	f04f 0100 	mov.w	r1, #0
                                     pktLen +
 8001d64:	4622      	mov	r2, r4
 8001d66:	462b      	mov	r3, r5
 8001d68:	f7fe fa34 	bl	80001d4 <__adddf3>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	4610      	mov	r0, r2
 8001d72:	4619      	mov	r1, r3
           airTime = rint( ( 8 * ( SX126x.PacketParams.Params.Gfsk.PreambleLength +
 8001d74:	f04f 0200 	mov.w	r2, #0
 8001d78:	4b7d      	ldr	r3, [pc, #500]	; (8001f70 <RadioTimeOnAir+0x2a0>)
 8001d7a:	f7fe fbe1 	bl	8000540 <__aeabi_dmul>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	460b      	mov	r3, r1
 8001d82:	4614      	mov	r4, r2
 8001d84:	461d      	mov	r5, r3
                                     SX126x.ModulationParams.Params.Gfsk.BitRate ) * 1e3 );
 8001d86:	4b78      	ldr	r3, [pc, #480]	; (8001f68 <RadioTimeOnAir+0x298>)
 8001d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                                     ( ( SX126x.PacketParams.Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES ) ? 2.0 : 0 ) ) /
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7fe fb5e 	bl	800044c <__aeabi_ui2d>
 8001d90:	4602      	mov	r2, r0
 8001d92:	460b      	mov	r3, r1
 8001d94:	4620      	mov	r0, r4
 8001d96:	4629      	mov	r1, r5
 8001d98:	f7fe fcfc 	bl	8000794 <__aeabi_ddiv>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	4610      	mov	r0, r2
 8001da2:	4619      	mov	r1, r3
           airTime = rint( ( 8 * ( SX126x.PacketParams.Params.Gfsk.PreambleLength +
 8001da4:	f04f 0200 	mov.w	r2, #0
 8001da8:	4b72      	ldr	r3, [pc, #456]	; (8001f74 <RadioTimeOnAir+0x2a4>)
 8001daa:	f7fe fbc9 	bl	8000540 <__aeabi_dmul>
 8001dae:	4602      	mov	r2, r0
 8001db0:	460b      	mov	r3, r1
 8001db2:	ec43 2b17 	vmov	d7, r2, r3
 8001db6:	eeb0 0a47 	vmov.f32	s0, s14
 8001dba:	eef0 0a67 	vmov.f32	s1, s15
 8001dbe:	f004 fb4f 	bl	8006460 <rint>
 8001dc2:	ec53 2b10 	vmov	r2, r3, d0
 8001dc6:	4610      	mov	r0, r2
 8001dc8:	4619      	mov	r1, r3
 8001dca:	f7fe fe53 	bl	8000a74 <__aeabi_d2uiz>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        break;
 8001dd2:	e0c0      	b.n	8001f56 <RadioTimeOnAir+0x286>
    case MODEM_LORA:
        {
            double ts = RadioLoRaSymbTime[SX126x.ModulationParams.Params.LoRa.Bandwidth - 4][12 - SX126x.ModulationParams.Params.LoRa.SpreadingFactor];
 8001dd4:	4b64      	ldr	r3, [pc, #400]	; (8001f68 <RadioTimeOnAir+0x298>)
 8001dd6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001dda:	1f1a      	subs	r2, r3, #4
 8001ddc:	4b62      	ldr	r3, [pc, #392]	; (8001f68 <RadioTimeOnAir+0x298>)
 8001dde:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001de2:	f1c3 010c 	rsb	r1, r3, #12
 8001de6:	4864      	ldr	r0, [pc, #400]	; (8001f78 <RadioTimeOnAir+0x2a8>)
 8001de8:	4613      	mov	r3, r2
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	4413      	add	r3, r2
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	440b      	add	r3, r1
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	4403      	add	r3, r0
 8001df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dfa:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
            // time of preamble
            double tPreamble = ( SX126x.PacketParams.Params.LoRa.PreambleLength + 4.25 ) * ts;
 8001dfe:	4b5a      	ldr	r3, [pc, #360]	; (8001f68 <RadioTimeOnAir+0x298>)
 8001e00:	899b      	ldrh	r3, [r3, #12]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7fe fb32 	bl	800046c <__aeabi_i2d>
 8001e08:	f04f 0200 	mov.w	r2, #0
 8001e0c:	4b5b      	ldr	r3, [pc, #364]	; (8001f7c <RadioTimeOnAir+0x2ac>)
 8001e0e:	f7fe f9e1 	bl	80001d4 <__adddf3>
 8001e12:	4602      	mov	r2, r0
 8001e14:	460b      	mov	r3, r1
 8001e16:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001e1a:	f7fe fb91 	bl	8000540 <__aeabi_dmul>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	460b      	mov	r3, r1
 8001e22:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
            // Symbol length of payload and time
            double tmp = ceil( ( 8 * pktLen - 4 * SX126x.ModulationParams.Params.LoRa.SpreadingFactor +
 8001e26:	79bb      	ldrb	r3, [r7, #6]
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	4a4f      	ldr	r2, [pc, #316]	; (8001f68 <RadioTimeOnAir+0x298>)
 8001e2c:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 8001e30:	1a9b      	subs	r3, r3, r2
 8001e32:	1dda      	adds	r2, r3, #7
                                 28 + 16 * SX126x.PacketParams.Params.LoRa.CrcMode -
 8001e34:	4b4c      	ldr	r3, [pc, #304]	; (8001f68 <RadioTimeOnAir+0x298>)
 8001e36:	7c1b      	ldrb	r3, [r3, #16]
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	4413      	add	r3, r2
 8001e3c:	009a      	lsls	r2, r3, #2
                                 ( ( SX126x.PacketParams.Params.LoRa.HeaderType == LORA_PACKET_FIXED_LENGTH ) ? 20 : 0 ) ) /
 8001e3e:	4b4a      	ldr	r3, [pc, #296]	; (8001f68 <RadioTimeOnAir+0x298>)
 8001e40:	7b9b      	ldrb	r3, [r3, #14]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d101      	bne.n	8001e4a <RadioTimeOnAir+0x17a>
 8001e46:	2314      	movs	r3, #20
 8001e48:	e000      	b.n	8001e4c <RadioTimeOnAir+0x17c>
 8001e4a:	2300      	movs	r3, #0
                                 28 + 16 * SX126x.PacketParams.Params.LoRa.CrcMode -
 8001e4c:	1ad3      	subs	r3, r2, r3
            double tmp = ceil( ( 8 * pktLen - 4 * SX126x.ModulationParams.Params.LoRa.SpreadingFactor +
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7fe fb0c 	bl	800046c <__aeabi_i2d>
 8001e54:	4604      	mov	r4, r0
 8001e56:	460d      	mov	r5, r1
                                 ( double )( 4 * ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor -
 8001e58:	4b43      	ldr	r3, [pc, #268]	; (8001f68 <RadioTimeOnAir+0x298>)
 8001e5a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e5e:	461a      	mov	r2, r3
                                 ( ( SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 8001e60:	4b41      	ldr	r3, [pc, #260]	; (8001f68 <RadioTimeOnAir+0x298>)
 8001e62:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <RadioTimeOnAir+0x19e>
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	e000      	b.n	8001e70 <RadioTimeOnAir+0x1a0>
 8001e6e:	2300      	movs	r3, #0
                                 ( double )( 4 * ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor -
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7fe faf9 	bl	800046c <__aeabi_i2d>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	460b      	mov	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX126x.ModulationParams.Params.LoRa.SpreadingFactor +
 8001e7e:	4620      	mov	r0, r4
 8001e80:	4629      	mov	r1, r5
 8001e82:	f7fe fc87 	bl	8000794 <__aeabi_ddiv>
 8001e86:	4602      	mov	r2, r0
 8001e88:	460b      	mov	r3, r1
 8001e8a:	ec43 2b17 	vmov	d7, r2, r3
 8001e8e:	eeb0 0a47 	vmov.f32	s0, s14
 8001e92:	eef0 0a67 	vmov.f32	s1, s15
 8001e96:	f004 f9df 	bl	8006258 <ceil>
 8001e9a:	ec55 4b10 	vmov	r4, r5, d0
                                 ( ( SX126x.ModulationParams.Params.LoRa.CodingRate % 4 ) + 4 );
 8001e9e:	4b32      	ldr	r3, [pc, #200]	; (8001f68 <RadioTimeOnAir+0x298>)
 8001ea0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001ea4:	f003 0303 	and.w	r3, r3, #3
 8001ea8:	3304      	adds	r3, #4
                                 ( ( SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7fe fade 	bl	800046c <__aeabi_i2d>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	460b      	mov	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX126x.ModulationParams.Params.LoRa.SpreadingFactor +
 8001eb4:	4620      	mov	r0, r4
 8001eb6:	4629      	mov	r1, r5
 8001eb8:	f7fe fb42 	bl	8000540 <__aeabi_dmul>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	e9c7 2308 	strd	r2, r3, [r7, #32]
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 8001ec4:	f04f 0200 	mov.w	r2, #0
 8001ec8:	f04f 0300 	mov.w	r3, #0
 8001ecc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001ed0:	f7fe fdc6 	bl	8000a60 <__aeabi_dcmpgt>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d002      	beq.n	8001ee0 <RadioTimeOnAir+0x210>
 8001eda:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001ede:	e003      	b.n	8001ee8 <RadioTimeOnAir+0x218>
 8001ee0:	f04f 0000 	mov.w	r0, #0
 8001ee4:	f04f 0100 	mov.w	r1, #0
 8001ee8:	f04f 0200 	mov.w	r2, #0
 8001eec:	4b20      	ldr	r3, [pc, #128]	; (8001f70 <RadioTimeOnAir+0x2a0>)
 8001eee:	f7fe f971 	bl	80001d4 <__adddf3>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	e9c7 2306 	strd	r2, r3, [r7, #24]
            double tPayload = nPayload * ts;
 8001efa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001efe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001f02:	f7fe fb1d 	bl	8000540 <__aeabi_dmul>
 8001f06:	4602      	mov	r2, r0
 8001f08:	460b      	mov	r3, r1
 8001f0a:	e9c7 2304 	strd	r2, r3, [r7, #16]
            // Time on air
            double tOnAir = tPreamble + tPayload;
 8001f0e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001f12:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001f16:	f7fe f95d 	bl	80001d4 <__adddf3>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	e9c7 2302 	strd	r2, r3, [r7, #8]
            // return milli seconds
            airTime = floor( tOnAir + 0.999 );
 8001f22:	a30f      	add	r3, pc, #60	; (adr r3, 8001f60 <RadioTimeOnAir+0x290>)
 8001f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f28:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f2c:	f7fe f952 	bl	80001d4 <__adddf3>
 8001f30:	4602      	mov	r2, r0
 8001f32:	460b      	mov	r3, r1
 8001f34:	ec43 2b17 	vmov	d7, r2, r3
 8001f38:	eeb0 0a47 	vmov.f32	s0, s14
 8001f3c:	eef0 0a67 	vmov.f32	s1, s15
 8001f40:	f004 fa0e 	bl	8006360 <floor>
 8001f44:	ec53 2b10 	vmov	r2, r3, d0
 8001f48:	4610      	mov	r0, r2
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	f7fe fd92 	bl	8000a74 <__aeabi_d2uiz>
 8001f50:	4603      	mov	r3, r0
 8001f52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        break;
 8001f54:	bf00      	nop
    }
    return airTime;
 8001f56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3740      	adds	r7, #64	; 0x40
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bdb0      	pop	{r4, r5, r7, pc}
 8001f60:	d916872b 	.word	0xd916872b
 8001f64:	3feff7ce 	.word	0x3feff7ce
 8001f68:	20000534 	.word	0x20000534
 8001f6c:	3ff00000 	.word	0x3ff00000
 8001f70:	40200000 	.word	0x40200000
 8001f74:	408f4000 	.word	0x408f4000
 8001f78:	20000008 	.word	0x20000008
 8001f7c:	40110000 	.word	0x40110000

08001f80 <RadioSend>:

void RadioSend( uint8_t *buffer, uint8_t size )
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	460b      	mov	r3, r1
 8001f8a:	70fb      	strb	r3, [r7, #3]
    SX126xSetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f240 2101 	movw	r1, #513	; 0x201
 8001f94:	f240 2001 	movw	r0, #513	; 0x201
 8001f98:	f000 feca 	bl	8002d30 <SX126xSetDioIrqParams>
                           IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
                           IRQ_RADIO_NONE,
                           IRQ_RADIO_NONE );

    if( SX126xGetPacketType( ) == PACKET_TYPE_LORA )
 8001f9c:	f000 ff82 	bl	8002ea4 <SX126xGetPacketType>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d103      	bne.n	8001fae <RadioSend+0x2e>
    {
        SX126x.PacketParams.Params.LoRa.PayloadLength = size;
 8001fa6:	4a0a      	ldr	r2, [pc, #40]	; (8001fd0 <RadioSend+0x50>)
 8001fa8:	78fb      	ldrb	r3, [r7, #3]
 8001faa:	73d3      	strb	r3, [r2, #15]
 8001fac:	e002      	b.n	8001fb4 <RadioSend+0x34>
    }
    else
    {
        SX126x.PacketParams.Params.Gfsk.PayloadLength = size;
 8001fae:	4a08      	ldr	r2, [pc, #32]	; (8001fd0 <RadioSend+0x50>)
 8001fb0:	78fb      	ldrb	r3, [r7, #3]
 8001fb2:	7213      	strb	r3, [r2, #8]
    }
    SX126xSetPacketParams( &SX126x.PacketParams );
 8001fb4:	4806      	ldr	r0, [pc, #24]	; (8001fd0 <RadioSend+0x50>)
 8001fb6:	f001 f87d 	bl	80030b4 <SX126xSetPacketParams>

    SX126xSendPayload( buffer, size, 0 );
 8001fba:	78fb      	ldrb	r3, [r7, #3]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f000 fcb1 	bl	8002928 <SX126xSendPayload>
}
 8001fc6:	bf00      	nop
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	20000534 	.word	0x20000534

08001fd4 <RadioSleep>:

void RadioSleep( void )
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8001fda:	2300      	movs	r3, #0
 8001fdc:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8001fde:	793b      	ldrb	r3, [r7, #4]
 8001fe0:	f043 0304 	orr.w	r3, r3, #4
 8001fe4:	713b      	strb	r3, [r7, #4]
    SX126xSetSleep( params );
 8001fe6:	7938      	ldrb	r0, [r7, #4]
 8001fe8:	f000 fd34 	bl	8002a54 <SX126xSetSleep>

    DelayMs( 2 );
 8001fec:	2002      	movs	r0, #2
 8001fee:	f7ff fb26 	bl	800163e <DelayMs>
}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <RadioStandby>:

void RadioStandby( void )
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	af00      	add	r7, sp, #0
    SX126xSetStandby( STDBY_RC );
 8001ffe:	2000      	movs	r0, #0
 8002000:	f000 fd3e 	bl	8002a80 <SX126xSetStandby>
}
 8002004:	bf00      	nop
 8002006:	bd80      	pop	{r7, pc}

08002008 <RadioRx>:

void RadioRx( uint32_t timeout )
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 8002010:	2300      	movs	r3, #0
 8002012:	2200      	movs	r2, #0
 8002014:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002018:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800201c:	f000 fe88 	bl	8002d30 <SX126xSetDioIrqParams>
                           IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
                           IRQ_RADIO_NONE,
                           IRQ_RADIO_NONE );
    
    RxContinuous = true;
 8002020:	4b0a      	ldr	r3, [pc, #40]	; (800204c <RadioRx+0x44>)
 8002022:	2201      	movs	r2, #1
 8002024:	701a      	strb	r2, [r3, #0]
    if( RxContinuous == true )
 8002026:	4b09      	ldr	r3, [pc, #36]	; (800204c <RadioRx+0x44>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d004      	beq.n	8002038 <RadioRx+0x30>
    {
        SX126xSetRx( 0xFFFFFF ); // Rx Continuous
 800202e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8002032:	f000 fd61 	bl	8002af8 <SX126xSetRx>
    }
    else
    {
        SX126xSetRx( timeout << 6 );
    }
}
 8002036:	e004      	b.n	8002042 <RadioRx+0x3a>
        SX126xSetRx( timeout << 6 );
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	019b      	lsls	r3, r3, #6
 800203c:	4618      	mov	r0, r3
 800203e:	f000 fd5b 	bl	8002af8 <SX126xSetRx>
}
 8002042:	bf00      	nop
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	20000099 	.word	0x20000099

08002050 <RadioRxBoosted>:

void RadioRxBoosted( uint32_t timeout )
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 8002058:	2300      	movs	r3, #0
 800205a:	2200      	movs	r2, #0
 800205c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002060:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002064:	f000 fe64 	bl	8002d30 <SX126xSetDioIrqParams>
                           IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
                           IRQ_RADIO_NONE,
                           IRQ_RADIO_NONE );


    if( RxContinuous == true )
 8002068:	4b08      	ldr	r3, [pc, #32]	; (800208c <RadioRxBoosted+0x3c>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d004      	beq.n	800207a <RadioRxBoosted+0x2a>
    {
        SX126xSetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8002070:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8002074:	f000 fd60 	bl	8002b38 <SX126xSetRxBoosted>
    }
    else
    {
        SX126xSetRxBoosted( timeout << 6 );
    }
}
 8002078:	e004      	b.n	8002084 <RadioRxBoosted+0x34>
        SX126xSetRxBoosted( timeout << 6 );
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	019b      	lsls	r3, r3, #6
 800207e:	4618      	mov	r0, r3
 8002080:	f000 fd5a 	bl	8002b38 <SX126xSetRxBoosted>
}
 8002084:	bf00      	nop
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	20000099 	.word	0x20000099

08002090 <RadioSetRxDutyCycle>:

void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
    SX126xSetRxDutyCycle( rxTime, sleepTime );
 800209a:	6839      	ldr	r1, [r7, #0]
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 fd6f 	bl	8002b80 <SX126xSetRxDutyCycle>
}
 80020a2:	bf00      	nop
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <RadioStartCad>:

void RadioStartCad( void )
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	af00      	add	r7, sp, #0
    SX126xSetCad( );
 80020ae:	f000 fd93 	bl	8002bd8 <SX126xSetCad>
}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <RadioSetTxContinuousWave>:
{
    SX126xSetTx( timeout << 6 );
}

void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b082      	sub	sp, #8
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
 80020be:	460b      	mov	r3, r1
 80020c0:	70fb      	strb	r3, [r7, #3]
 80020c2:	4613      	mov	r3, r2
 80020c4:	803b      	strh	r3, [r7, #0]
    SX126xSetRfFrequency( freq );
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 fe92 	bl	8002df0 <SX126xSetRfFrequency>
    SX126xSetRfTxPower( power );
 80020cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f000 fb97 	bl	8002804 <SX126xSetRfTxPower>
    SX126xSetTxContinuousWave( );
 80020d6:	f000 fd8d 	bl	8002bf4 <SX126xSetTxContinuousWave>

//    TimerSetValue( &RxTimeoutTimer, time  * 1e3 );
//    TimerStart( &RxTimeoutTimer );
}
 80020da:	bf00      	nop
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <RadioRssi>:

int16_t RadioRssi( RadioModems_t modem )
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b082      	sub	sp, #8
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	4603      	mov	r3, r0
 80020ea:	71fb      	strb	r3, [r7, #7]
    return SX126xGetRssiInst( );
 80020ec:	f001 f8b3 	bl	8003256 <SX126xGetRssiInst>
 80020f0:	4603      	mov	r3, r0
 80020f2:	b21b      	sxth	r3, r3
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <RadioWrite>:

void RadioWrite( uint16_t addr, uint8_t data )
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	460a      	mov	r2, r1
 8002106:	80fb      	strh	r3, [r7, #6]
 8002108:	4613      	mov	r3, r2
 800210a:	717b      	strb	r3, [r7, #5]
    SX126xWriteRegister( addr, data );
 800210c:	797a      	ldrb	r2, [r7, #5]
 800210e:	88fb      	ldrh	r3, [r7, #6]
 8002110:	4611      	mov	r1, r2
 8002112:	4618      	mov	r0, r3
 8002114:	f000 fa8a 	bl	800262c <SX126xWriteRegister>
}
 8002118:	bf00      	nop
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <RadioRead>:

uint8_t RadioRead( uint16_t addr )
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	4603      	mov	r3, r0
 8002128:	80fb      	strh	r3, [r7, #6]
    return SX126xReadRegister( addr );
 800212a:	88fb      	ldrh	r3, [r7, #6]
 800212c:	4618      	mov	r0, r3
 800212e:	f000 fad9 	bl	80026e4 <SX126xReadRegister>
 8002132:	4603      	mov	r3, r0
}
 8002134:	4618      	mov	r0, r3
 8002136:	3708      	adds	r7, #8
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <RadioWriteBuffer>:

void RadioWriteBuffer( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	4603      	mov	r3, r0
 8002144:	6039      	str	r1, [r7, #0]
 8002146:	80fb      	strh	r3, [r7, #6]
 8002148:	4613      	mov	r3, r2
 800214a:	717b      	strb	r3, [r7, #5]
    SX126xWriteRegisters( addr, buffer, size );
 800214c:	797b      	ldrb	r3, [r7, #5]
 800214e:	b29a      	uxth	r2, r3
 8002150:	88fb      	ldrh	r3, [r7, #6]
 8002152:	6839      	ldr	r1, [r7, #0]
 8002154:	4618      	mov	r0, r3
 8002156:	f000 fa25 	bl	80025a4 <SX126xWriteRegisters>
}
 800215a:	bf00      	nop
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <RadioReadBuffer>:

void RadioReadBuffer( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b082      	sub	sp, #8
 8002166:	af00      	add	r7, sp, #0
 8002168:	4603      	mov	r3, r0
 800216a:	6039      	str	r1, [r7, #0]
 800216c:	80fb      	strh	r3, [r7, #6]
 800216e:	4613      	mov	r3, r2
 8002170:	717b      	strb	r3, [r7, #5]
    SX126xReadRegisters( addr, buffer, size );
 8002172:	797b      	ldrb	r3, [r7, #5]
 8002174:	b29a      	uxth	r2, r3
 8002176:	88fb      	ldrh	r3, [r7, #6]
 8002178:	6839      	ldr	r1, [r7, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f000 fa68 	bl	8002650 <SX126xReadRegisters>
}
 8002180:	bf00      	nop
 8002182:	3708      	adds	r7, #8
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <RadioSetMaxPayloadLength>:
{
    SX126xReadBuffer( 0, buffer, size );
}

void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	4603      	mov	r3, r0
 8002190:	460a      	mov	r2, r1
 8002192:	71fb      	strb	r3, [r7, #7]
 8002194:	4613      	mov	r3, r2
 8002196:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8002198:	79fb      	ldrb	r3, [r7, #7]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d10a      	bne.n	80021b4 <RadioSetMaxPayloadLength+0x2c>
    {
        SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 800219e:	4a0e      	ldr	r2, [pc, #56]	; (80021d8 <RadioSetMaxPayloadLength+0x50>)
 80021a0:	79bb      	ldrb	r3, [r7, #6]
 80021a2:	7013      	strb	r3, [r2, #0]
 80021a4:	4b0c      	ldr	r3, [pc, #48]	; (80021d8 <RadioSetMaxPayloadLength+0x50>)
 80021a6:	781a      	ldrb	r2, [r3, #0]
 80021a8:	4b0c      	ldr	r3, [pc, #48]	; (80021dc <RadioSetMaxPayloadLength+0x54>)
 80021aa:	73da      	strb	r2, [r3, #15]
        SX126xSetPacketParams( &SX126x.PacketParams );
 80021ac:	480b      	ldr	r0, [pc, #44]	; (80021dc <RadioSetMaxPayloadLength+0x54>)
 80021ae:	f000 ff81 	bl	80030b4 <SX126xSetPacketParams>
        {
            SX126x.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SX126xSetPacketParams( &SX126x.PacketParams );
        }
    }
}
 80021b2:	e00d      	b.n	80021d0 <RadioSetMaxPayloadLength+0x48>
        if( SX126x.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 80021b4:	4b09      	ldr	r3, [pc, #36]	; (80021dc <RadioSetMaxPayloadLength+0x54>)
 80021b6:	79db      	ldrb	r3, [r3, #7]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d109      	bne.n	80021d0 <RadioSetMaxPayloadLength+0x48>
            SX126x.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 80021bc:	4a06      	ldr	r2, [pc, #24]	; (80021d8 <RadioSetMaxPayloadLength+0x50>)
 80021be:	79bb      	ldrb	r3, [r7, #6]
 80021c0:	7013      	strb	r3, [r2, #0]
 80021c2:	4b05      	ldr	r3, [pc, #20]	; (80021d8 <RadioSetMaxPayloadLength+0x50>)
 80021c4:	781a      	ldrb	r2, [r3, #0]
 80021c6:	4b05      	ldr	r3, [pc, #20]	; (80021dc <RadioSetMaxPayloadLength+0x54>)
 80021c8:	721a      	strb	r2, [r3, #8]
            SX126xSetPacketParams( &SX126x.PacketParams );
 80021ca:	4804      	ldr	r0, [pc, #16]	; (80021dc <RadioSetMaxPayloadLength+0x54>)
 80021cc:	f000 ff72 	bl	80030b4 <SX126xSetPacketParams>
}
 80021d0:	bf00      	nop
 80021d2:	3708      	adds	r7, #8
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	20000098 	.word	0x20000098
 80021dc:	20000534 	.word	0x20000534

080021e0 <RadioSetPublicNetwork>:

void RadioSetPublicNetwork( bool enable )
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	4603      	mov	r3, r0
 80021e8:	71fb      	strb	r3, [r7, #7]
    RadioPublicNetwork.Current = RadioPublicNetwork.Previous = enable;
 80021ea:	4a13      	ldr	r2, [pc, #76]	; (8002238 <RadioSetPublicNetwork+0x58>)
 80021ec:	79fb      	ldrb	r3, [r7, #7]
 80021ee:	7013      	strb	r3, [r2, #0]
 80021f0:	4b11      	ldr	r3, [pc, #68]	; (8002238 <RadioSetPublicNetwork+0x58>)
 80021f2:	781a      	ldrb	r2, [r3, #0]
 80021f4:	4b10      	ldr	r3, [pc, #64]	; (8002238 <RadioSetPublicNetwork+0x58>)
 80021f6:	705a      	strb	r2, [r3, #1]

    RadioSetModem( MODEM_LORA );
 80021f8:	2001      	movs	r0, #1
 80021fa:	f7ff faa7 	bl	800174c <RadioSetModem>
    if( enable == true )
 80021fe:	79fb      	ldrb	r3, [r7, #7]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d00a      	beq.n	800221a <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SX126xWriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8002204:	2134      	movs	r1, #52	; 0x34
 8002206:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 800220a:	f000 fa0f 	bl	800262c <SX126xWriteRegister>
        SX126xWriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 800220e:	2144      	movs	r1, #68	; 0x44
 8002210:	f240 7041 	movw	r0, #1857	; 0x741
 8002214:	f000 fa0a 	bl	800262c <SX126xWriteRegister>
    {
        // Change LoRa modem SyncWord
        SX126xWriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SX126xWriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8002218:	e009      	b.n	800222e <RadioSetPublicNetwork+0x4e>
        SX126xWriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 800221a:	2114      	movs	r1, #20
 800221c:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8002220:	f000 fa04 	bl	800262c <SX126xWriteRegister>
        SX126xWriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8002224:	2124      	movs	r1, #36	; 0x24
 8002226:	f240 7041 	movw	r0, #1857	; 0x741
 800222a:	f000 f9ff 	bl	800262c <SX126xWriteRegister>
}
 800222e:	bf00      	nop
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	200001b4 	.word	0x200001b4

0800223c <RadioGetWakeupTime>:

uint32_t RadioGetWakeupTime( void )
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
    return( RADIO_TCXO_SETUP_TIME + RADIO_WAKEUP_TIME );
 8002240:	2303      	movs	r3, #3
}
 8002242:	4618      	mov	r0, r3
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <RadioOnDioIrq>:
        RadioEvents->RxTimeout( );
    }
}

void RadioOnDioIrq( void )
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
    IrqFired = true;
 8002250:	4b03      	ldr	r3, [pc, #12]	; (8002260 <RadioOnDioIrq+0x14>)
 8002252:	2201      	movs	r2, #1
 8002254:	701a      	strb	r2, [r3, #0]
}
 8002256:	bf00      	nop
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr
 8002260:	200001b0 	.word	0x200001b0

08002264 <RadioIrqProcess>:

void RadioIrqProcess( void )
{
 8002264:	b590      	push	{r4, r7, lr}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
	uint16_t irqRegs=0;
 800226a:	2300      	movs	r3, #0
 800226c:	80fb      	strh	r3, [r7, #6]
   // if( IrqFired == true )
    if(HAL_GPIO_ReadPin(RADIO_DIO1_PORT, RADIO_DIO1_PIN) == GPIO_PIN_SET)
 800226e:	2104      	movs	r1, #4
 8002270:	485c      	ldr	r0, [pc, #368]	; (80023e4 <RadioIrqProcess+0x180>)
 8002272:	f002 ff9b 	bl	80051ac <HAL_GPIO_ReadPin>
 8002276:	4603      	mov	r3, r0
 8002278:	2b01      	cmp	r3, #1
 800227a:	f040 80ae 	bne.w	80023da <RadioIrqProcess+0x176>
    {
        IrqFired = false;
 800227e:	4b5a      	ldr	r3, [pc, #360]	; (80023e8 <RadioIrqProcess+0x184>)
 8002280:	2200      	movs	r2, #0
 8002282:	701a      	strb	r2, [r3, #0]

        irqRegs = SX126xGetIrqStatus( );
 8002284:	f000 fd8e 	bl	8002da4 <SX126xGetIrqStatus>
 8002288:	4603      	mov	r3, r0
 800228a:	80fb      	strh	r3, [r7, #6]
        SX126xClearIrqStatus( IRQ_RADIO_ALL );
 800228c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002290:	f001 f882 	bl	8003398 <SX126xClearIrqStatus>
        
        if( ( irqRegs & IRQ_TX_DONE ) == IRQ_TX_DONE )
 8002294:	88fb      	ldrh	r3, [r7, #6]
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00c      	beq.n	80022b8 <RadioIrqProcess+0x54>
        {
 
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800229e:	4b53      	ldr	r3, [pc, #332]	; (80023ec <RadioIrqProcess+0x188>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d008      	beq.n	80022b8 <RadioIrqProcess+0x54>
 80022a6:	4b51      	ldr	r3, [pc, #324]	; (80023ec <RadioIrqProcess+0x188>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d003      	beq.n	80022b8 <RadioIrqProcess+0x54>
            {
                RadioEvents->TxDone( );
 80022b0:	4b4e      	ldr	r3, [pc, #312]	; (80023ec <RadioIrqProcess+0x188>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4798      	blx	r3
            }
        }

        if( ( irqRegs & IRQ_RX_DONE ) == IRQ_RX_DONE )
 80022b8:	88fb      	ldrh	r3, [r7, #6]
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d022      	beq.n	8002308 <RadioIrqProcess+0xa4>
        {
            uint8_t size;

            SX126xGetPayload( RadioRxPayload, &size , 255 );
 80022c2:	1d7b      	adds	r3, r7, #5
 80022c4:	22ff      	movs	r2, #255	; 0xff
 80022c6:	4619      	mov	r1, r3
 80022c8:	4849      	ldr	r0, [pc, #292]	; (80023f0 <RadioIrqProcess+0x18c>)
 80022ca:	f000 fb0b 	bl	80028e4 <SX126xGetPayload>
            SX126xGetPacketStatus( &RadioPktStatus );
 80022ce:	4849      	ldr	r0, [pc, #292]	; (80023f4 <RadioIrqProcess+0x190>)
 80022d0:	f001 f804 	bl	80032dc <SX126xGetPacketStatus>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80022d4:	4b45      	ldr	r3, [pc, #276]	; (80023ec <RadioIrqProcess+0x188>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d012      	beq.n	8002302 <RadioIrqProcess+0x9e>
 80022dc:	4b43      	ldr	r3, [pc, #268]	; (80023ec <RadioIrqProcess+0x188>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00d      	beq.n	8002302 <RadioIrqProcess+0x9e>
            {
                RadioEvents->RxDone( RadioRxPayload, size, RadioPktStatus.Params.LoRa.RssiPkt, RadioPktStatus.Params.LoRa.SnrPkt );
 80022e6:	4b41      	ldr	r3, [pc, #260]	; (80023ec <RadioIrqProcess+0x188>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	689c      	ldr	r4, [r3, #8]
 80022ec:	797b      	ldrb	r3, [r7, #5]
 80022ee:	b299      	uxth	r1, r3
 80022f0:	4b40      	ldr	r3, [pc, #256]	; (80023f4 <RadioIrqProcess+0x190>)
 80022f2:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80022f6:	b21a      	sxth	r2, r3
 80022f8:	4b3e      	ldr	r3, [pc, #248]	; (80023f4 <RadioIrqProcess+0x190>)
 80022fa:	f993 300d 	ldrsb.w	r3, [r3, #13]
 80022fe:	483c      	ldr	r0, [pc, #240]	; (80023f0 <RadioIrqProcess+0x18c>)
 8002300:	47a0      	blx	r4
            }
            SX126xClearIrqStatus( IRQ_RX_DONE );
 8002302:	2002      	movs	r0, #2
 8002304:	f001 f848 	bl	8003398 <SX126xClearIrqStatus>
        }

        if( ( irqRegs & IRQ_CRC_ERROR ) == IRQ_CRC_ERROR )
 8002308:	88fb      	ldrh	r3, [r7, #6]
 800230a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800230e:	2b00      	cmp	r3, #0
 8002310:	d00c      	beq.n	800232c <RadioIrqProcess+0xc8>
        {
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8002312:	4b36      	ldr	r3, [pc, #216]	; (80023ec <RadioIrqProcess+0x188>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d008      	beq.n	800232c <RadioIrqProcess+0xc8>
 800231a:	4b34      	ldr	r3, [pc, #208]	; (80023ec <RadioIrqProcess+0x188>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d003      	beq.n	800232c <RadioIrqProcess+0xc8>
            {
                RadioEvents->RxError( );
 8002324:	4b31      	ldr	r3, [pc, #196]	; (80023ec <RadioIrqProcess+0x188>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	4798      	blx	r3
            }
        }

        if( ( irqRegs & IRQ_CAD_DONE ) == IRQ_CAD_DONE )
 800232c:	88fb      	ldrh	r3, [r7, #6]
 800232e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002332:	2b00      	cmp	r3, #0
 8002334:	d015      	beq.n	8002362 <RadioIrqProcess+0xfe>
        {
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8002336:	4b2d      	ldr	r3, [pc, #180]	; (80023ec <RadioIrqProcess+0x188>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d011      	beq.n	8002362 <RadioIrqProcess+0xfe>
 800233e:	4b2b      	ldr	r3, [pc, #172]	; (80023ec <RadioIrqProcess+0x188>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d00c      	beq.n	8002362 <RadioIrqProcess+0xfe>
            {
                RadioEvents->CadDone( ( ( irqRegs & IRQ_CAD_ACTIVITY_DETECTED ) == IRQ_CAD_ACTIVITY_DETECTED ) );
 8002348:	4b28      	ldr	r3, [pc, #160]	; (80023ec <RadioIrqProcess+0x188>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	88fa      	ldrh	r2, [r7, #6]
 8002350:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8002354:	2a00      	cmp	r2, #0
 8002356:	bf14      	ite	ne
 8002358:	2201      	movne	r2, #1
 800235a:	2200      	moveq	r2, #0
 800235c:	b2d2      	uxtb	r2, r2
 800235e:	4610      	mov	r0, r2
 8002360:	4798      	blx	r3
            }
        }

        if( ( irqRegs & IRQ_RX_TX_TIMEOUT ) == IRQ_RX_TX_TIMEOUT )
 8002362:	88fb      	ldrh	r3, [r7, #6]
 8002364:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002368:	2b00      	cmp	r3, #0
 800236a:	d024      	beq.n	80023b6 <RadioIrqProcess+0x152>
        {
            if( SX126xGetOperatingMode( ) == MODE_TX )
 800236c:	f000 fa8a 	bl	8002884 <SX126xGetOperatingMode>
 8002370:	4603      	mov	r3, r0
 8002372:	2b04      	cmp	r3, #4
 8002374:	d10d      	bne.n	8002392 <RadioIrqProcess+0x12e>
            {
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8002376:	4b1d      	ldr	r3, [pc, #116]	; (80023ec <RadioIrqProcess+0x188>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d01b      	beq.n	80023b6 <RadioIrqProcess+0x152>
 800237e:	4b1b      	ldr	r3, [pc, #108]	; (80023ec <RadioIrqProcess+0x188>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d016      	beq.n	80023b6 <RadioIrqProcess+0x152>
                {
                    RadioEvents->TxTimeout( );
 8002388:	4b18      	ldr	r3, [pc, #96]	; (80023ec <RadioIrqProcess+0x188>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	4798      	blx	r3
 8002390:	e011      	b.n	80023b6 <RadioIrqProcess+0x152>
                }
            }
            else if( SX126xGetOperatingMode( ) == MODE_RX )
 8002392:	f000 fa77 	bl	8002884 <SX126xGetOperatingMode>
 8002396:	4603      	mov	r3, r0
 8002398:	2b05      	cmp	r3, #5
 800239a:	d10c      	bne.n	80023b6 <RadioIrqProcess+0x152>
            {
 
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800239c:	4b13      	ldr	r3, [pc, #76]	; (80023ec <RadioIrqProcess+0x188>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d008      	beq.n	80023b6 <RadioIrqProcess+0x152>
 80023a4:	4b11      	ldr	r3, [pc, #68]	; (80023ec <RadioIrqProcess+0x188>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d003      	beq.n	80023b6 <RadioIrqProcess+0x152>
                {
                    RadioEvents->RxTimeout( );
 80023ae:	4b0f      	ldr	r3, [pc, #60]	; (80023ec <RadioIrqProcess+0x188>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	4798      	blx	r3
        if( ( irqRegs & IRQ_HEADER_VALID ) == IRQ_HEADER_VALID )
        {
            //__NOP( );
        }

        if( ( irqRegs & IRQ_HEADER_ERROR ) == IRQ_HEADER_ERROR )
 80023b6:	88fb      	ldrh	r3, [r7, #6]
 80023b8:	f003 0320 	and.w	r3, r3, #32
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d00c      	beq.n	80023da <RadioIrqProcess+0x176>
        {
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80023c0:	4b0a      	ldr	r3, [pc, #40]	; (80023ec <RadioIrqProcess+0x188>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d008      	beq.n	80023da <RadioIrqProcess+0x176>
 80023c8:	4b08      	ldr	r3, [pc, #32]	; (80023ec <RadioIrqProcess+0x188>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d003      	beq.n	80023da <RadioIrqProcess+0x176>
            {
                RadioEvents->RxTimeout( );
 80023d2:	4b06      	ldr	r3, [pc, #24]	; (80023ec <RadioIrqProcess+0x188>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	4798      	blx	r3
            }
        }
    }
}
 80023da:	bf00      	nop
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd90      	pop	{r4, r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40020400 	.word	0x40020400
 80023e8:	200001b0 	.word	0x200001b0
 80023ec:	200001b8 	.word	0x200001b8
 80023f0:	20000570 	.word	0x20000570
 80023f4:	20000670 	.word	0x20000670

080023f8 <HALSpiInOut>:




uint8_t HALSpiInOut(SPI_HandleTypeDef *hspi, uint8_t transmitdata)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af02      	add	r7, sp, #8
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	460b      	mov	r3, r1
 8002402:	70fb      	strb	r3, [r7, #3]
	uint8_t *data = &transmitdata;
 8002404:	1cfb      	adds	r3, r7, #3
 8002406:	60fb      	str	r3, [r7, #12]
	uint8_t receive_data = 0;
 8002408:	2300      	movs	r3, #0
 800240a:	72fb      	strb	r3, [r7, #11]
	HAL_SPI_TransmitReceive(hspi, data, &receive_data, 1, 200);
 800240c:	f107 020b 	add.w	r2, r7, #11
 8002410:	23c8      	movs	r3, #200	; 0xc8
 8002412:	9300      	str	r3, [sp, #0]
 8002414:	2301      	movs	r3, #1
 8002416:	68f9      	ldr	r1, [r7, #12]
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f003 fbec 	bl	8005bf6 <HAL_SPI_TransmitReceive>
	return receive_data;
 800241e:	7afb      	ldrb	r3, [r7, #11]
}
 8002420:	4618      	mov	r0, r3
 8002422:	3710      	adds	r7, #16
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <SX126xReset>:




void SX126xReset( void )
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
    DelayMs( 1 );
 800242c:	2001      	movs	r0, #1
 800242e:	f7ff f906 	bl	800163e <DelayMs>
    HAL_GPIO_WritePin(SX1278_RST_PIN_INDEX_GPIO_Port, SX1278_RST_PIN_INDEX_GPIO_Port, GPIO_PIN_RESET);
 8002432:	2200      	movs	r2, #0
 8002434:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002438:	4808      	ldr	r0, [pc, #32]	; (800245c <SX126xReset+0x34>)
 800243a:	f002 fecf 	bl	80051dc <HAL_GPIO_WritePin>
    DelayMs( 2 );
 800243e:	2002      	movs	r0, #2
 8002440:	f7ff f8fd 	bl	800163e <DelayMs>
    HAL_GPIO_WritePin(SX1278_RST_PIN_INDEX_GPIO_Port, SX1278_RST_PIN_INDEX_GPIO_Port, GPIO_PIN_SET);
 8002444:	2201      	movs	r2, #1
 8002446:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800244a:	4804      	ldr	r0, [pc, #16]	; (800245c <SX126xReset+0x34>)
 800244c:	f002 fec6 	bl	80051dc <HAL_GPIO_WritePin>
    DelayMs( 1);
 8002450:	2001      	movs	r0, #1
 8002452:	f7ff f8f4 	bl	800163e <DelayMs>
}
 8002456:	bf00      	nop
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	40020400 	.word	0x40020400

08002460 <SX126xWaitOnBusy>:

void SX126xWaitOnBusy( void )
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
   while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0));
 8002464:	bf00      	nop
 8002466:	2101      	movs	r1, #1
 8002468:	4804      	ldr	r0, [pc, #16]	; (800247c <SX126xWaitOnBusy+0x1c>)
 800246a:	f002 fe9f 	bl	80051ac <HAL_GPIO_ReadPin>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1f8      	bne.n	8002466 <SX126xWaitOnBusy+0x6>
}
 8002474:	bf00      	nop
 8002476:	bf00      	nop
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	40020400 	.word	0x40020400

08002480 <SX126xWakeup>:


void SX126xWakeup( void )
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin( SPI_CSS_Pin_GPIO_Port, SPI_CSS_Pin_Pin,GPIO_PIN_RESET);
 8002484:	2200      	movs	r2, #0
 8002486:	2110      	movs	r1, #16
 8002488:	4809      	ldr	r0, [pc, #36]	; (80024b0 <SX126xWakeup+0x30>)
 800248a:	f002 fea7 	bl	80051dc <HAL_GPIO_WritePin>
   
    HALSpiInOut(&hspi1,RADIO_GET_STATUS);
 800248e:	21c0      	movs	r1, #192	; 0xc0
 8002490:	4808      	ldr	r0, [pc, #32]	; (80024b4 <SX126xWakeup+0x34>)
 8002492:	f7ff ffb1 	bl	80023f8 <HALSpiInOut>
    HALSpiInOut(&hspi1,0);
 8002496:	2100      	movs	r1, #0
 8002498:	4806      	ldr	r0, [pc, #24]	; (80024b4 <SX126xWakeup+0x34>)
 800249a:	f7ff ffad 	bl	80023f8 <HALSpiInOut>
    
    HAL_GPIO_WritePin( SPI_CSS_Pin_GPIO_Port, SPI_CSS_Pin_Pin,GPIO_PIN_SET);
 800249e:	2201      	movs	r2, #1
 80024a0:	2110      	movs	r1, #16
 80024a2:	4803      	ldr	r0, [pc, #12]	; (80024b0 <SX126xWakeup+0x30>)
 80024a4:	f002 fe9a 	bl	80051dc <HAL_GPIO_WritePin>

    // Wait for chip to be ready.
    SX126xWaitOnBusy( );
 80024a8:	f7ff ffda 	bl	8002460 <SX126xWaitOnBusy>
}
 80024ac:	bf00      	nop
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	40020000 	.word	0x40020000
 80024b4:	200004dc 	.word	0x200004dc

080024b8 <SX126xWriteCommand>:

void SX126xWriteCommand( RadioCommands_t command, uint8_t *buffer, uint16_t size )
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	4603      	mov	r3, r0
 80024c0:	6039      	str	r1, [r7, #0]
 80024c2:	71fb      	strb	r3, [r7, #7]
 80024c4:	4613      	mov	r3, r2
 80024c6:	80bb      	strh	r3, [r7, #4]
	uint16_t i = 0;
 80024c8:	2300      	movs	r3, #0
 80024ca:	81fb      	strh	r3, [r7, #14]
    SX126xCheckDeviceReady( );
 80024cc:	f000 f9e6 	bl	800289c <SX126xCheckDeviceReady>

    HAL_GPIO_WritePin( SPI_CSS_Pin_GPIO_Port, SPI_CSS_Pin_Pin,GPIO_PIN_RESET);
 80024d0:	2200      	movs	r2, #0
 80024d2:	2110      	movs	r1, #16
 80024d4:	4813      	ldr	r0, [pc, #76]	; (8002524 <SX126xWriteCommand+0x6c>)
 80024d6:	f002 fe81 	bl	80051dc <HAL_GPIO_WritePin>

    HALSpiInOut(&hspi1,( uint8_t )command );
 80024da:	79fb      	ldrb	r3, [r7, #7]
 80024dc:	4619      	mov	r1, r3
 80024de:	4812      	ldr	r0, [pc, #72]	; (8002528 <SX126xWriteCommand+0x70>)
 80024e0:	f7ff ff8a 	bl	80023f8 <HALSpiInOut>

    for( i = 0; i < size; i++ )
 80024e4:	2300      	movs	r3, #0
 80024e6:	81fb      	strh	r3, [r7, #14]
 80024e8:	e00a      	b.n	8002500 <SX126xWriteCommand+0x48>
    {
        HALSpiInOut(&hspi1,buffer[i] );
 80024ea:	89fb      	ldrh	r3, [r7, #14]
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	4413      	add	r3, r2
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	4619      	mov	r1, r3
 80024f4:	480c      	ldr	r0, [pc, #48]	; (8002528 <SX126xWriteCommand+0x70>)
 80024f6:	f7ff ff7f 	bl	80023f8 <HALSpiInOut>
    for( i = 0; i < size; i++ )
 80024fa:	89fb      	ldrh	r3, [r7, #14]
 80024fc:	3301      	adds	r3, #1
 80024fe:	81fb      	strh	r3, [r7, #14]
 8002500:	89fa      	ldrh	r2, [r7, #14]
 8002502:	88bb      	ldrh	r3, [r7, #4]
 8002504:	429a      	cmp	r2, r3
 8002506:	d3f0      	bcc.n	80024ea <SX126xWriteCommand+0x32>
    }

    HAL_GPIO_WritePin( SPI_CSS_Pin_GPIO_Port, SPI_CSS_Pin_Pin,GPIO_PIN_SET);
 8002508:	2201      	movs	r2, #1
 800250a:	2110      	movs	r1, #16
 800250c:	4805      	ldr	r0, [pc, #20]	; (8002524 <SX126xWriteCommand+0x6c>)
 800250e:	f002 fe65 	bl	80051dc <HAL_GPIO_WritePin>
    
    if( command != RADIO_SET_SLEEP )
 8002512:	79fb      	ldrb	r3, [r7, #7]
 8002514:	2b84      	cmp	r3, #132	; 0x84
 8002516:	d001      	beq.n	800251c <SX126xWriteCommand+0x64>
    {
        SX126xWaitOnBusy( );
 8002518:	f7ff ffa2 	bl	8002460 <SX126xWaitOnBusy>
    }
}
 800251c:	bf00      	nop
 800251e:	3710      	adds	r7, #16
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40020000 	.word	0x40020000
 8002528:	200004dc 	.word	0x200004dc

0800252c <SX126xReadCommand>:

void SX126xReadCommand( RadioCommands_t command, uint8_t *buffer, uint16_t size )
{
 800252c:	b590      	push	{r4, r7, lr}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	6039      	str	r1, [r7, #0]
 8002536:	71fb      	strb	r3, [r7, #7]
 8002538:	4613      	mov	r3, r2
 800253a:	80bb      	strh	r3, [r7, #4]
	uint16_t i = 0;
 800253c:	2300      	movs	r3, #0
 800253e:	81fb      	strh	r3, [r7, #14]
    SX126xCheckDeviceReady( );
 8002540:	f000 f9ac 	bl	800289c <SX126xCheckDeviceReady>

    HAL_GPIO_WritePin( SPI_CSS_Pin_GPIO_Port, SPI_CSS_Pin_Pin,GPIO_PIN_RESET);
 8002544:	2200      	movs	r2, #0
 8002546:	2110      	movs	r1, #16
 8002548:	4814      	ldr	r0, [pc, #80]	; (800259c <SX126xReadCommand+0x70>)
 800254a:	f002 fe47 	bl	80051dc <HAL_GPIO_WritePin>

    HALSpiInOut(&hspi1,( uint8_t )command );
 800254e:	79fb      	ldrb	r3, [r7, #7]
 8002550:	4619      	mov	r1, r3
 8002552:	4813      	ldr	r0, [pc, #76]	; (80025a0 <SX126xReadCommand+0x74>)
 8002554:	f7ff ff50 	bl	80023f8 <HALSpiInOut>
    HALSpiInOut(&hspi1,0x00 );
 8002558:	2100      	movs	r1, #0
 800255a:	4811      	ldr	r0, [pc, #68]	; (80025a0 <SX126xReadCommand+0x74>)
 800255c:	f7ff ff4c 	bl	80023f8 <HALSpiInOut>
    for( i = 0; i < size; i++ )
 8002560:	2300      	movs	r3, #0
 8002562:	81fb      	strh	r3, [r7, #14]
 8002564:	e00b      	b.n	800257e <SX126xReadCommand+0x52>
    {
        buffer[i] = HALSpiInOut(&hspi1,0 );
 8002566:	89fb      	ldrh	r3, [r7, #14]
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	18d4      	adds	r4, r2, r3
 800256c:	2100      	movs	r1, #0
 800256e:	480c      	ldr	r0, [pc, #48]	; (80025a0 <SX126xReadCommand+0x74>)
 8002570:	f7ff ff42 	bl	80023f8 <HALSpiInOut>
 8002574:	4603      	mov	r3, r0
 8002576:	7023      	strb	r3, [r4, #0]
    for( i = 0; i < size; i++ )
 8002578:	89fb      	ldrh	r3, [r7, #14]
 800257a:	3301      	adds	r3, #1
 800257c:	81fb      	strh	r3, [r7, #14]
 800257e:	89fa      	ldrh	r2, [r7, #14]
 8002580:	88bb      	ldrh	r3, [r7, #4]
 8002582:	429a      	cmp	r2, r3
 8002584:	d3ef      	bcc.n	8002566 <SX126xReadCommand+0x3a>
    }

    HAL_GPIO_WritePin( SPI_CSS_Pin_GPIO_Port, SPI_CSS_Pin_Pin,GPIO_PIN_SET);
 8002586:	2201      	movs	r2, #1
 8002588:	2110      	movs	r1, #16
 800258a:	4804      	ldr	r0, [pc, #16]	; (800259c <SX126xReadCommand+0x70>)
 800258c:	f002 fe26 	bl	80051dc <HAL_GPIO_WritePin>

    SX126xWaitOnBusy( );
 8002590:	f7ff ff66 	bl	8002460 <SX126xWaitOnBusy>
}
 8002594:	bf00      	nop
 8002596:	3714      	adds	r7, #20
 8002598:	46bd      	mov	sp, r7
 800259a:	bd90      	pop	{r4, r7, pc}
 800259c:	40020000 	.word	0x40020000
 80025a0:	200004dc 	.word	0x200004dc

080025a4 <SX126xWriteRegisters>:

void SX126xWriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	6039      	str	r1, [r7, #0]
 80025ae:	80fb      	strh	r3, [r7, #6]
 80025b0:	4613      	mov	r3, r2
 80025b2:	80bb      	strh	r3, [r7, #4]
	uint16_t i = 0;
 80025b4:	2300      	movs	r3, #0
 80025b6:	81fb      	strh	r3, [r7, #14]
	
    SX126xCheckDeviceReady( );
 80025b8:	f000 f970 	bl	800289c <SX126xCheckDeviceReady>

    HAL_GPIO_WritePin( SPI_CSS_Pin_GPIO_Port, SPI_CSS_Pin_Pin,GPIO_PIN_RESET);
 80025bc:	2200      	movs	r2, #0
 80025be:	2110      	movs	r1, #16
 80025c0:	4818      	ldr	r0, [pc, #96]	; (8002624 <SX126xWriteRegisters+0x80>)
 80025c2:	f002 fe0b 	bl	80051dc <HAL_GPIO_WritePin>
    
    HALSpiInOut(&hspi1,RADIO_WRITE_REGISTER );
 80025c6:	210d      	movs	r1, #13
 80025c8:	4817      	ldr	r0, [pc, #92]	; (8002628 <SX126xWriteRegisters+0x84>)
 80025ca:	f7ff ff15 	bl	80023f8 <HALSpiInOut>
    HALSpiInOut(&hspi1,( address & 0xFF00 ) >> 8 );
 80025ce:	88fb      	ldrh	r3, [r7, #6]
 80025d0:	0a1b      	lsrs	r3, r3, #8
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	4619      	mov	r1, r3
 80025d8:	4813      	ldr	r0, [pc, #76]	; (8002628 <SX126xWriteRegisters+0x84>)
 80025da:	f7ff ff0d 	bl	80023f8 <HALSpiInOut>
    HALSpiInOut(&hspi1, address & 0x00FF );
 80025de:	88fb      	ldrh	r3, [r7, #6]
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	4619      	mov	r1, r3
 80025e4:	4810      	ldr	r0, [pc, #64]	; (8002628 <SX126xWriteRegisters+0x84>)
 80025e6:	f7ff ff07 	bl	80023f8 <HALSpiInOut>
    
    for( i = 0; i < size; i++ )
 80025ea:	2300      	movs	r3, #0
 80025ec:	81fb      	strh	r3, [r7, #14]
 80025ee:	e00a      	b.n	8002606 <SX126xWriteRegisters+0x62>
    {
        HALSpiInOut(&hspi1,buffer[i] );
 80025f0:	89fb      	ldrh	r3, [r7, #14]
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	4413      	add	r3, r2
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	4619      	mov	r1, r3
 80025fa:	480b      	ldr	r0, [pc, #44]	; (8002628 <SX126xWriteRegisters+0x84>)
 80025fc:	f7ff fefc 	bl	80023f8 <HALSpiInOut>
    for( i = 0; i < size; i++ )
 8002600:	89fb      	ldrh	r3, [r7, #14]
 8002602:	3301      	adds	r3, #1
 8002604:	81fb      	strh	r3, [r7, #14]
 8002606:	89fa      	ldrh	r2, [r7, #14]
 8002608:	88bb      	ldrh	r3, [r7, #4]
 800260a:	429a      	cmp	r2, r3
 800260c:	d3f0      	bcc.n	80025f0 <SX126xWriteRegisters+0x4c>
    }


    HAL_GPIO_WritePin( SPI_CSS_Pin_GPIO_Port, SPI_CSS_Pin_Pin,GPIO_PIN_SET);
 800260e:	2201      	movs	r2, #1
 8002610:	2110      	movs	r1, #16
 8002612:	4804      	ldr	r0, [pc, #16]	; (8002624 <SX126xWriteRegisters+0x80>)
 8002614:	f002 fde2 	bl	80051dc <HAL_GPIO_WritePin>

    SX126xWaitOnBusy( );
 8002618:	f7ff ff22 	bl	8002460 <SX126xWaitOnBusy>
}
 800261c:	bf00      	nop
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40020000 	.word	0x40020000
 8002628:	200004dc 	.word	0x200004dc

0800262c <SX126xWriteRegister>:

void SX126xWriteRegister( uint16_t address, uint8_t value )
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	4603      	mov	r3, r0
 8002634:	460a      	mov	r2, r1
 8002636:	80fb      	strh	r3, [r7, #6]
 8002638:	4613      	mov	r3, r2
 800263a:	717b      	strb	r3, [r7, #5]
    SX126xWriteRegisters( address, &value, 1 );
 800263c:	1d79      	adds	r1, r7, #5
 800263e:	88fb      	ldrh	r3, [r7, #6]
 8002640:	2201      	movs	r2, #1
 8002642:	4618      	mov	r0, r3
 8002644:	f7ff ffae 	bl	80025a4 <SX126xWriteRegisters>
}
 8002648:	bf00      	nop
 800264a:	3708      	adds	r7, #8
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <SX126xReadRegisters>:

void SX126xReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8002650:	b590      	push	{r4, r7, lr}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	4603      	mov	r3, r0
 8002658:	6039      	str	r1, [r7, #0]
 800265a:	80fb      	strh	r3, [r7, #6]
 800265c:	4613      	mov	r3, r2
 800265e:	80bb      	strh	r3, [r7, #4]
	uint16_t i = 0;
 8002660:	2300      	movs	r3, #0
 8002662:	81fb      	strh	r3, [r7, #14]
    SX126xCheckDeviceReady( );
 8002664:	f000 f91a 	bl	800289c <SX126xCheckDeviceReady>

    HAL_GPIO_WritePin( SPI_CSS_Pin_GPIO_Port, SPI_CSS_Pin_Pin,GPIO_PIN_RESET);
 8002668:	2200      	movs	r2, #0
 800266a:	2110      	movs	r1, #16
 800266c:	481b      	ldr	r0, [pc, #108]	; (80026dc <SX126xReadRegisters+0x8c>)
 800266e:	f002 fdb5 	bl	80051dc <HAL_GPIO_WritePin>

    HALSpiInOut(&hspi1,RADIO_READ_REGISTER );
 8002672:	211d      	movs	r1, #29
 8002674:	481a      	ldr	r0, [pc, #104]	; (80026e0 <SX126xReadRegisters+0x90>)
 8002676:	f7ff febf 	bl	80023f8 <HALSpiInOut>
    HALSpiInOut(&hspi1,( address & 0xFF00 ) >> 8 );
 800267a:	88fb      	ldrh	r3, [r7, #6]
 800267c:	0a1b      	lsrs	r3, r3, #8
 800267e:	b29b      	uxth	r3, r3
 8002680:	b2db      	uxtb	r3, r3
 8002682:	4619      	mov	r1, r3
 8002684:	4816      	ldr	r0, [pc, #88]	; (80026e0 <SX126xReadRegisters+0x90>)
 8002686:	f7ff feb7 	bl	80023f8 <HALSpiInOut>
    HALSpiInOut(&hspi1, address & 0x00FF );
 800268a:	88fb      	ldrh	r3, [r7, #6]
 800268c:	b2db      	uxtb	r3, r3
 800268e:	4619      	mov	r1, r3
 8002690:	4813      	ldr	r0, [pc, #76]	; (80026e0 <SX126xReadRegisters+0x90>)
 8002692:	f7ff feb1 	bl	80023f8 <HALSpiInOut>
    HALSpiInOut(&hspi1, 0 );
 8002696:	2100      	movs	r1, #0
 8002698:	4811      	ldr	r0, [pc, #68]	; (80026e0 <SX126xReadRegisters+0x90>)
 800269a:	f7ff fead 	bl	80023f8 <HALSpiInOut>
    for( i = 0; i < size; i++ )
 800269e:	2300      	movs	r3, #0
 80026a0:	81fb      	strh	r3, [r7, #14]
 80026a2:	e00b      	b.n	80026bc <SX126xReadRegisters+0x6c>
    {
        buffer[i] = HALSpiInOut(&hspi1,0 );
 80026a4:	89fb      	ldrh	r3, [r7, #14]
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	18d4      	adds	r4, r2, r3
 80026aa:	2100      	movs	r1, #0
 80026ac:	480c      	ldr	r0, [pc, #48]	; (80026e0 <SX126xReadRegisters+0x90>)
 80026ae:	f7ff fea3 	bl	80023f8 <HALSpiInOut>
 80026b2:	4603      	mov	r3, r0
 80026b4:	7023      	strb	r3, [r4, #0]
    for( i = 0; i < size; i++ )
 80026b6:	89fb      	ldrh	r3, [r7, #14]
 80026b8:	3301      	adds	r3, #1
 80026ba:	81fb      	strh	r3, [r7, #14]
 80026bc:	89fa      	ldrh	r2, [r7, #14]
 80026be:	88bb      	ldrh	r3, [r7, #4]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d3ef      	bcc.n	80026a4 <SX126xReadRegisters+0x54>
    }

    HAL_GPIO_WritePin( SPI_CSS_Pin_GPIO_Port, SPI_CSS_Pin_Pin,GPIO_PIN_SET);
 80026c4:	2201      	movs	r2, #1
 80026c6:	2110      	movs	r1, #16
 80026c8:	4804      	ldr	r0, [pc, #16]	; (80026dc <SX126xReadRegisters+0x8c>)
 80026ca:	f002 fd87 	bl	80051dc <HAL_GPIO_WritePin>

    SX126xWaitOnBusy( );
 80026ce:	f7ff fec7 	bl	8002460 <SX126xWaitOnBusy>
}
 80026d2:	bf00      	nop
 80026d4:	3714      	adds	r7, #20
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd90      	pop	{r4, r7, pc}
 80026da:	bf00      	nop
 80026dc:	40020000 	.word	0x40020000
 80026e0:	200004dc 	.word	0x200004dc

080026e4 <SX126xReadRegister>:

uint8_t SX126xReadRegister( uint16_t address )
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    SX126xReadRegisters( address, &data, 1 );
 80026ee:	f107 010f 	add.w	r1, r7, #15
 80026f2:	88fb      	ldrh	r3, [r7, #6]
 80026f4:	2201      	movs	r2, #1
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff ffaa 	bl	8002650 <SX126xReadRegisters>
    return data;
 80026fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
	...

08002708 <SX126xWriteBuffer>:

void SX126xWriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	6039      	str	r1, [r7, #0]
 8002712:	71fb      	strb	r3, [r7, #7]
 8002714:	4613      	mov	r3, r2
 8002716:	71bb      	strb	r3, [r7, #6]
	uint16_t i = 0;
 8002718:	2300      	movs	r3, #0
 800271a:	81fb      	strh	r3, [r7, #14]
    SX126xCheckDeviceReady( );
 800271c:	f000 f8be 	bl	800289c <SX126xCheckDeviceReady>

    HAL_GPIO_WritePin( SPI_CSS_Pin_GPIO_Port, SPI_CSS_Pin_Pin,GPIO_PIN_RESET);
 8002720:	2200      	movs	r2, #0
 8002722:	2110      	movs	r1, #16
 8002724:	4814      	ldr	r0, [pc, #80]	; (8002778 <SX126xWriteBuffer+0x70>)
 8002726:	f002 fd59 	bl	80051dc <HAL_GPIO_WritePin>
    
    HALSpiInOut(&hspi1, RADIO_WRITE_BUFFER );
 800272a:	210e      	movs	r1, #14
 800272c:	4813      	ldr	r0, [pc, #76]	; (800277c <SX126xWriteBuffer+0x74>)
 800272e:	f7ff fe63 	bl	80023f8 <HALSpiInOut>
    HALSpiInOut(&hspi1, offset );
 8002732:	79fb      	ldrb	r3, [r7, #7]
 8002734:	4619      	mov	r1, r3
 8002736:	4811      	ldr	r0, [pc, #68]	; (800277c <SX126xWriteBuffer+0x74>)
 8002738:	f7ff fe5e 	bl	80023f8 <HALSpiInOut>
    for( i = 0; i < size; i++ )
 800273c:	2300      	movs	r3, #0
 800273e:	81fb      	strh	r3, [r7, #14]
 8002740:	e00a      	b.n	8002758 <SX126xWriteBuffer+0x50>
    {
        HALSpiInOut(&hspi1, buffer[i] );
 8002742:	89fb      	ldrh	r3, [r7, #14]
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	4413      	add	r3, r2
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	4619      	mov	r1, r3
 800274c:	480b      	ldr	r0, [pc, #44]	; (800277c <SX126xWriteBuffer+0x74>)
 800274e:	f7ff fe53 	bl	80023f8 <HALSpiInOut>
    for( i = 0; i < size; i++ )
 8002752:	89fb      	ldrh	r3, [r7, #14]
 8002754:	3301      	adds	r3, #1
 8002756:	81fb      	strh	r3, [r7, #14]
 8002758:	79bb      	ldrb	r3, [r7, #6]
 800275a:	b29b      	uxth	r3, r3
 800275c:	89fa      	ldrh	r2, [r7, #14]
 800275e:	429a      	cmp	r2, r3
 8002760:	d3ef      	bcc.n	8002742 <SX126xWriteBuffer+0x3a>
    }

    HAL_GPIO_WritePin( SPI_CSS_Pin_GPIO_Port, SPI_CSS_Pin_Pin,GPIO_PIN_SET);
 8002762:	2201      	movs	r2, #1
 8002764:	2110      	movs	r1, #16
 8002766:	4804      	ldr	r0, [pc, #16]	; (8002778 <SX126xWriteBuffer+0x70>)
 8002768:	f002 fd38 	bl	80051dc <HAL_GPIO_WritePin>

    SX126xWaitOnBusy( );
 800276c:	f7ff fe78 	bl	8002460 <SX126xWaitOnBusy>
}
 8002770:	bf00      	nop
 8002772:	3710      	adds	r7, #16
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40020000 	.word	0x40020000
 800277c:	200004dc 	.word	0x200004dc

08002780 <SX126xReadBuffer>:

void SX126xReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8002780:	b590      	push	{r4, r7, lr}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	4603      	mov	r3, r0
 8002788:	6039      	str	r1, [r7, #0]
 800278a:	71fb      	strb	r3, [r7, #7]
 800278c:	4613      	mov	r3, r2
 800278e:	71bb      	strb	r3, [r7, #6]
	uint16_t i = 0;
 8002790:	2300      	movs	r3, #0
 8002792:	81fb      	strh	r3, [r7, #14]
	
    SX126xCheckDeviceReady( );
 8002794:	f000 f882 	bl	800289c <SX126xCheckDeviceReady>

    HAL_GPIO_WritePin( SPI_CSS_Pin_GPIO_Port, SPI_CSS_Pin_Pin,GPIO_PIN_RESET);
 8002798:	2200      	movs	r2, #0
 800279a:	2110      	movs	r1, #16
 800279c:	4817      	ldr	r0, [pc, #92]	; (80027fc <SX126xReadBuffer+0x7c>)
 800279e:	f002 fd1d 	bl	80051dc <HAL_GPIO_WritePin>

    HALSpiInOut(&hspi1,  RADIO_READ_BUFFER );
 80027a2:	211e      	movs	r1, #30
 80027a4:	4816      	ldr	r0, [pc, #88]	; (8002800 <SX126xReadBuffer+0x80>)
 80027a6:	f7ff fe27 	bl	80023f8 <HALSpiInOut>
    HALSpiInOut(&hspi1,  offset );
 80027aa:	79fb      	ldrb	r3, [r7, #7]
 80027ac:	4619      	mov	r1, r3
 80027ae:	4814      	ldr	r0, [pc, #80]	; (8002800 <SX126xReadBuffer+0x80>)
 80027b0:	f7ff fe22 	bl	80023f8 <HALSpiInOut>
    HALSpiInOut(&hspi1,  0 );
 80027b4:	2100      	movs	r1, #0
 80027b6:	4812      	ldr	r0, [pc, #72]	; (8002800 <SX126xReadBuffer+0x80>)
 80027b8:	f7ff fe1e 	bl	80023f8 <HALSpiInOut>
    for( i = 0; i < size; i++ )
 80027bc:	2300      	movs	r3, #0
 80027be:	81fb      	strh	r3, [r7, #14]
 80027c0:	e00b      	b.n	80027da <SX126xReadBuffer+0x5a>
    {
        buffer[i] = HALSpiInOut(&hspi1, 0 );
 80027c2:	89fb      	ldrh	r3, [r7, #14]
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	18d4      	adds	r4, r2, r3
 80027c8:	2100      	movs	r1, #0
 80027ca:	480d      	ldr	r0, [pc, #52]	; (8002800 <SX126xReadBuffer+0x80>)
 80027cc:	f7ff fe14 	bl	80023f8 <HALSpiInOut>
 80027d0:	4603      	mov	r3, r0
 80027d2:	7023      	strb	r3, [r4, #0]
    for( i = 0; i < size; i++ )
 80027d4:	89fb      	ldrh	r3, [r7, #14]
 80027d6:	3301      	adds	r3, #1
 80027d8:	81fb      	strh	r3, [r7, #14]
 80027da:	79bb      	ldrb	r3, [r7, #6]
 80027dc:	b29b      	uxth	r3, r3
 80027de:	89fa      	ldrh	r2, [r7, #14]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d3ee      	bcc.n	80027c2 <SX126xReadBuffer+0x42>
    }

    HAL_GPIO_WritePin( SPI_CSS_Pin_GPIO_Port, SPI_CSS_Pin_Pin,GPIO_PIN_SET);
 80027e4:	2201      	movs	r2, #1
 80027e6:	2110      	movs	r1, #16
 80027e8:	4804      	ldr	r0, [pc, #16]	; (80027fc <SX126xReadBuffer+0x7c>)
 80027ea:	f002 fcf7 	bl	80051dc <HAL_GPIO_WritePin>
    
    SX126xWaitOnBusy( );
 80027ee:	f7ff fe37 	bl	8002460 <SX126xWaitOnBusy>
}
 80027f2:	bf00      	nop
 80027f4:	3714      	adds	r7, #20
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd90      	pop	{r4, r7, pc}
 80027fa:	bf00      	nop
 80027fc:	40020000 	.word	0x40020000
 8002800:	200004dc 	.word	0x200004dc

08002804 <SX126xSetRfTxPower>:

void SX126xSetRfTxPower( int8_t power )
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	4603      	mov	r3, r0
 800280c:	71fb      	strb	r3, [r7, #7]
    SX126xSetTxParams( power, RADIO_RAMP_40_US );
 800280e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002812:	2102      	movs	r1, #2
 8002814:	4618      	mov	r0, r3
 8002816:	f000 fb51 	bl	8002ebc <SX126xSetTxParams>
}
 800281a:	bf00      	nop
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <SX126xGetPaSelect>:

uint8_t SX126xGetPaSelect( uint32_t channel )
{
 8002822:	b480      	push	{r7}
 8002824:	b083      	sub	sp, #12
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
//    else
//    {
//        return SX1262;
//    }
  
  return SX1262;
 800282a:	2302      	movs	r3, #2
}
 800282c:	4618      	mov	r0, r3
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <SX126xAntSwOn>:

void SX126xAntSwOn( void )
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
    //GpioInit( &AntPow, ANT_SWITCH_POWER, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 1 );
}
 800283c:	bf00      	nop
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr

08002846 <SX126xAntSwOff>:

void SX126xAntSwOff( void )
{
 8002846:	b480      	push	{r7}
 8002848:	af00      	add	r7, sp, #0
   // GpioInit( &AntPow, ANT_SWITCH_POWER, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
}
 800284a:	bf00      	nop
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <SX126xInit>:
 */
void SX126xProcessIrqs( void );


void SX126xInit( DioIrqHandler dioIrq )
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
    SX126xReset( );
 800285c:	f7ff fde4 	bl	8002428 <SX126xReset>
    SX126xWakeup( );
 8002860:	f7ff fe0e 	bl	8002480 <SX126xWakeup>
    SX126xSetStandby( STDBY_RC );
 8002864:	2000      	movs	r0, #0
 8002866:	f000 f90b 	bl	8002a80 <SX126xSetStandby>
    calibParam.Value = 0x7F;    
    SX126xCalibrate( calibParam );

#endif
    
    SX126xSetDio2AsRfSwitchCtrl( true );
 800286a:	2001      	movs	r0, #1
 800286c:	f000 faaf 	bl	8002dce <SX126xSetDio2AsRfSwitchCtrl>
    OperatingMode = MODE_STDBY_RC;
 8002870:	4b03      	ldr	r3, [pc, #12]	; (8002880 <SX126xInit+0x2c>)
 8002872:	2201      	movs	r2, #1
 8002874:	701a      	strb	r2, [r3, #0]
}
 8002876:	bf00      	nop
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	200001bc 	.word	0x200001bc

08002884 <SX126xGetOperatingMode>:

RadioOperatingModes_t SX126xGetOperatingMode( void )
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
    return OperatingMode;
 8002888:	4b03      	ldr	r3, [pc, #12]	; (8002898 <SX126xGetOperatingMode+0x14>)
 800288a:	781b      	ldrb	r3, [r3, #0]
}
 800288c:	4618      	mov	r0, r3
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	200001bc 	.word	0x200001bc

0800289c <SX126xCheckDeviceReady>:

void SX126xCheckDeviceReady( void )
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
    if( ( SX126xGetOperatingMode( ) == MODE_SLEEP ) || ( SX126xGetOperatingMode( ) == MODE_RX_DC ) )
 80028a0:	f7ff fff0 	bl	8002884 <SX126xGetOperatingMode>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d004      	beq.n	80028b4 <SX126xCheckDeviceReady+0x18>
 80028aa:	f7ff ffeb 	bl	8002884 <SX126xGetOperatingMode>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b06      	cmp	r3, #6
 80028b2:	d103      	bne.n	80028bc <SX126xCheckDeviceReady+0x20>
    {
        SX126xWakeup( );
 80028b4:	f7ff fde4 	bl	8002480 <SX126xWakeup>
        // Switch is turned off when device is in sleep mode and turned on is all other modes
        SX126xAntSwOn( );
 80028b8:	f7ff ffbe 	bl	8002838 <SX126xAntSwOn>
    }
    SX126xWaitOnBusy( );
 80028bc:	f7ff fdd0 	bl	8002460 <SX126xWaitOnBusy>
}
 80028c0:	bf00      	nop
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <SX126xSetPayload>:

void SX126xSetPayload( uint8_t *payload, uint8_t size )
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	460b      	mov	r3, r1
 80028ce:	70fb      	strb	r3, [r7, #3]
    SX126xWriteBuffer( 0x00, payload, size );
 80028d0:	78fb      	ldrb	r3, [r7, #3]
 80028d2:	461a      	mov	r2, r3
 80028d4:	6879      	ldr	r1, [r7, #4]
 80028d6:	2000      	movs	r0, #0
 80028d8:	f7ff ff16 	bl	8002708 <SX126xWriteBuffer>
}
 80028dc:	bf00      	nop
 80028de:	3708      	adds	r7, #8
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <SX126xGetPayload>:

uint8_t SX126xGetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b086      	sub	sp, #24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	4613      	mov	r3, r2
 80028f0:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 80028f2:	2300      	movs	r3, #0
 80028f4:	75fb      	strb	r3, [r7, #23]

    SX126xGetRxBufferStatus( size, &offset );
 80028f6:	f107 0317 	add.w	r3, r7, #23
 80028fa:	4619      	mov	r1, r3
 80028fc:	68b8      	ldr	r0, [r7, #8]
 80028fe:	f000 fcbf 	bl	8003280 <SX126xGetRxBufferStatus>
    if( *size > maxSize )
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	79fa      	ldrb	r2, [r7, #7]
 8002908:	429a      	cmp	r2, r3
 800290a:	d201      	bcs.n	8002910 <SX126xGetPayload+0x2c>
    {
        return 1;
 800290c:	2301      	movs	r3, #1
 800290e:	e007      	b.n	8002920 <SX126xGetPayload+0x3c>
    }
    SX126xReadBuffer( offset, buffer, *size );
 8002910:	7df8      	ldrb	r0, [r7, #23]
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	461a      	mov	r2, r3
 8002918:	68f9      	ldr	r1, [r7, #12]
 800291a:	f7ff ff31 	bl	8002780 <SX126xReadBuffer>
    return 0;
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	3718      	adds	r7, #24
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <SX126xSendPayload>:

void SX126xSendPayload( uint8_t *payload, uint8_t size, uint32_t timeout )
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	460b      	mov	r3, r1
 8002932:	607a      	str	r2, [r7, #4]
 8002934:	72fb      	strb	r3, [r7, #11]
    SX126xSetPayload( payload, size );
 8002936:	7afb      	ldrb	r3, [r7, #11]
 8002938:	4619      	mov	r1, r3
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f7ff ffc2 	bl	80028c4 <SX126xSetPayload>
    SX126xSetTx( timeout );
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f000 f8b9 	bl	8002ab8 <SX126xSetTx>
}
 8002946:	bf00      	nop
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <SX126xSetSyncWord>:

uint8_t SX126xSetSyncWord( uint8_t *syncWord )
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b082      	sub	sp, #8
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
    SX126xWriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8002956:	2208      	movs	r2, #8
 8002958:	6879      	ldr	r1, [r7, #4]
 800295a:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 800295e:	f7ff fe21 	bl	80025a4 <SX126xWriteRegisters>
    return 0;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3708      	adds	r7, #8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <SX126xSetCrcSeed>:

void SX126xSetCrcSeed( uint16_t seed )
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	4603      	mov	r3, r0
 8002974:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8002976:	88fb      	ldrh	r3, [r7, #6]
 8002978:	0a1b      	lsrs	r3, r3, #8
 800297a:	b29b      	uxth	r3, r3
 800297c:	b2db      	uxtb	r3, r3
 800297e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8002980:	88fb      	ldrh	r3, [r7, #6]
 8002982:	b2db      	uxtb	r3, r3
 8002984:	737b      	strb	r3, [r7, #13]

    switch( SX126xGetPacketType( ) )
 8002986:	f000 fa8d 	bl	8002ea4 <SX126xGetPacketType>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d108      	bne.n	80029a2 <SX126xSetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SX126xWriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8002990:	f107 030c 	add.w	r3, r7, #12
 8002994:	2202      	movs	r2, #2
 8002996:	4619      	mov	r1, r3
 8002998:	f240 60bc 	movw	r0, #1724	; 0x6bc
 800299c:	f7ff fe02 	bl	80025a4 <SX126xWriteRegisters>
            break;
 80029a0:	e000      	b.n	80029a4 <SX126xSetCrcSeed+0x38>

        default:
            break;
 80029a2:	bf00      	nop
    }
}
 80029a4:	bf00      	nop
 80029a6:	3710      	adds	r7, #16
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <SX126xSetCrcPolynomial>:

void SX126xSetCrcPolynomial( uint16_t polynomial )
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	4603      	mov	r3, r0
 80029b4:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 80029b6:	88fb      	ldrh	r3, [r7, #6]
 80029b8:	0a1b      	lsrs	r3, r3, #8
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 80029c0:	88fb      	ldrh	r3, [r7, #6]
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	737b      	strb	r3, [r7, #13]

    switch( SX126xGetPacketType( ) )
 80029c6:	f000 fa6d 	bl	8002ea4 <SX126xGetPacketType>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d108      	bne.n	80029e2 <SX126xSetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SX126xWriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 80029d0:	f107 030c 	add.w	r3, r7, #12
 80029d4:	2202      	movs	r2, #2
 80029d6:	4619      	mov	r1, r3
 80029d8:	f240 60be 	movw	r0, #1726	; 0x6be
 80029dc:	f7ff fde2 	bl	80025a4 <SX126xWriteRegisters>
            break;
 80029e0:	e000      	b.n	80029e4 <SX126xSetCrcPolynomial+0x38>

        default:
            break;
 80029e2:	bf00      	nop
    }
}
 80029e4:	bf00      	nop
 80029e6:	3710      	adds	r7, #16
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <SX126xSetWhiteningSeed>:

void SX126xSetWhiteningSeed( uint16_t seed )
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	4603      	mov	r3, r0
 80029f4:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 80029f6:	2300      	movs	r3, #0
 80029f8:	73fb      	strb	r3, [r7, #15]
    
    switch( SX126xGetPacketType( ) )
 80029fa:	f000 fa53 	bl	8002ea4 <SX126xGetPacketType>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d121      	bne.n	8002a48 <SX126xSetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SX126xReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8002a04:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8002a08:	f7ff fe6c 	bl	80026e4 <SX126xReadRegister>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	f023 0301 	bic.w	r3, r3, #1
 8002a12:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8002a14:	88fb      	ldrh	r3, [r7, #6]
 8002a16:	0a1b      	lsrs	r3, r3, #8
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	b25b      	sxtb	r3, r3
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	b25a      	sxtb	r2, r3
 8002a22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	b25b      	sxtb	r3, r3
 8002a2a:	73fb      	strb	r3, [r7, #15]
            SX126xWriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8002a2c:	7bfb      	ldrb	r3, [r7, #15]
 8002a2e:	4619      	mov	r1, r3
 8002a30:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8002a34:	f7ff fdfa 	bl	800262c <SX126xWriteRegister>
            SX126xWriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, ( uint8_t )seed );
 8002a38:	88fb      	ldrh	r3, [r7, #6]
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	f240 60b9 	movw	r0, #1721	; 0x6b9
 8002a42:	f7ff fdf3 	bl	800262c <SX126xWriteRegister>
            break;
 8002a46:	e000      	b.n	8002a4a <SX126xSetWhiteningSeed+0x5e>

        default:
            break;
 8002a48:	bf00      	nop
    }
}
 8002a4a:	bf00      	nop
 8002a4c:	3710      	adds	r7, #16
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
	...

08002a54 <SX126xSetSleep>:

    return ( buf[0] << 24 ) | ( buf[1] << 16 ) | ( buf[2] << 8 ) | buf[3];
}

void SX126xSetSleep( SleepParams_t sleepConfig )
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	7138      	strb	r0, [r7, #4]
    SX126xAntSwOff( );
 8002a5c:	f7ff fef3 	bl	8002846 <SX126xAntSwOff>

    SX126xWriteCommand( RADIO_SET_SLEEP, &sleepConfig.Value, 1 );
 8002a60:	1d3b      	adds	r3, r7, #4
 8002a62:	2201      	movs	r2, #1
 8002a64:	4619      	mov	r1, r3
 8002a66:	2084      	movs	r0, #132	; 0x84
 8002a68:	f7ff fd26 	bl	80024b8 <SX126xWriteCommand>
    OperatingMode = MODE_SLEEP;
 8002a6c:	4b03      	ldr	r3, [pc, #12]	; (8002a7c <SX126xSetSleep+0x28>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	701a      	strb	r2, [r3, #0]
}
 8002a72:	bf00      	nop
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	200001bc 	.word	0x200001bc

08002a80 <SX126xSetStandby>:

void SX126xSetStandby( RadioStandbyModes_t standbyConfig )
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	4603      	mov	r3, r0
 8002a88:	71fb      	strb	r3, [r7, #7]
    SX126xWriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8002a8a:	1dfb      	adds	r3, r7, #7
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	4619      	mov	r1, r3
 8002a90:	2080      	movs	r0, #128	; 0x80
 8002a92:	f7ff fd11 	bl	80024b8 <SX126xWriteCommand>
    if( standbyConfig == STDBY_RC )
 8002a96:	79fb      	ldrb	r3, [r7, #7]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d103      	bne.n	8002aa4 <SX126xSetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8002a9c:	4b05      	ldr	r3, [pc, #20]	; (8002ab4 <SX126xSetStandby+0x34>)
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8002aa2:	e002      	b.n	8002aaa <SX126xSetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8002aa4:	4b03      	ldr	r3, [pc, #12]	; (8002ab4 <SX126xSetStandby+0x34>)
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	701a      	strb	r2, [r3, #0]
}
 8002aaa:	bf00      	nop
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	200001bc 	.word	0x200001bc

08002ab8 <SX126xSetTx>:
    SX126xWriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SX126xSetTx( uint32_t timeout )
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8002ac0:	4b0c      	ldr	r3, [pc, #48]	; (8002af4 <SX126xSetTx+0x3c>)
 8002ac2:	2204      	movs	r2, #4
 8002ac4:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	0c1b      	lsrs	r3, r3, #16
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	0a1b      	lsrs	r3, r3, #8
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	73bb      	strb	r3, [r7, #14]
    SX126xWriteCommand( RADIO_SET_TX, buf, 3 );
 8002adc:	f107 030c 	add.w	r3, r7, #12
 8002ae0:	2203      	movs	r2, #3
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	2083      	movs	r0, #131	; 0x83
 8002ae6:	f7ff fce7 	bl	80024b8 <SX126xWriteCommand>
}
 8002aea:	bf00      	nop
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	200001bc 	.word	0x200001bc

08002af8 <SX126xSetRx>:

void SX126xSetRx( uint32_t timeout )
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8002b00:	4b0c      	ldr	r3, [pc, #48]	; (8002b34 <SX126xSetRx+0x3c>)
 8002b02:	2205      	movs	r2, #5
 8002b04:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	0c1b      	lsrs	r3, r3, #16
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	0a1b      	lsrs	r3, r3, #8
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	73bb      	strb	r3, [r7, #14]
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
 8002b1c:	f107 030c 	add.w	r3, r7, #12
 8002b20:	2203      	movs	r2, #3
 8002b22:	4619      	mov	r1, r3
 8002b24:	2082      	movs	r0, #130	; 0x82
 8002b26:	f7ff fcc7 	bl	80024b8 <SX126xWriteCommand>
}
 8002b2a:	bf00      	nop
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	200001bc 	.word	0x200001bc

08002b38 <SX126xSetRxBoosted>:

void SX126xSetRxBoosted( uint32_t timeout )
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8002b40:	4b0e      	ldr	r3, [pc, #56]	; (8002b7c <SX126xSetRxBoosted+0x44>)
 8002b42:	2205      	movs	r2, #5
 8002b44:	701a      	strb	r2, [r3, #0]

    SX126xWriteRegister( REG_RX_GAIN, 0x96 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensivity
 8002b46:	2196      	movs	r1, #150	; 0x96
 8002b48:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8002b4c:	f7ff fd6e 	bl	800262c <SX126xWriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	0c1b      	lsrs	r3, r3, #16
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	0a1b      	lsrs	r3, r3, #8
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	73bb      	strb	r3, [r7, #14]
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
 8002b66:	f107 030c 	add.w	r3, r7, #12
 8002b6a:	2203      	movs	r2, #3
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	2082      	movs	r0, #130	; 0x82
 8002b70:	f7ff fca2 	bl	80024b8 <SX126xWriteCommand>
}
 8002b74:	bf00      	nop
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	200001bc 	.word	0x200001bc

08002b80 <SX126xSetRxDutyCycle>:

void SX126xSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	0c1b      	lsrs	r3, r3, #16
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	0a1b      	lsrs	r3, r3, #8
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	0c1b      	lsrs	r3, r3, #16
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	0a1b      	lsrs	r3, r3, #8
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	737b      	strb	r3, [r7, #13]
    SX126xWriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8002bb6:	f107 0308 	add.w	r3, r7, #8
 8002bba:	2206      	movs	r2, #6
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	2094      	movs	r0, #148	; 0x94
 8002bc0:	f7ff fc7a 	bl	80024b8 <SX126xWriteCommand>
    OperatingMode = MODE_RX_DC;
 8002bc4:	4b03      	ldr	r3, [pc, #12]	; (8002bd4 <SX126xSetRxDutyCycle+0x54>)
 8002bc6:	2206      	movs	r2, #6
 8002bc8:	701a      	strb	r2, [r3, #0]
}
 8002bca:	bf00      	nop
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	200001bc 	.word	0x200001bc

08002bd8 <SX126xSetCad>:

void SX126xSetCad( void )
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
    SX126xWriteCommand( RADIO_SET_CAD, 0, 0 );
 8002bdc:	2200      	movs	r2, #0
 8002bde:	2100      	movs	r1, #0
 8002be0:	20c5      	movs	r0, #197	; 0xc5
 8002be2:	f7ff fc69 	bl	80024b8 <SX126xWriteCommand>
    OperatingMode = MODE_CAD;
 8002be6:	4b02      	ldr	r3, [pc, #8]	; (8002bf0 <SX126xSetCad+0x18>)
 8002be8:	2207      	movs	r2, #7
 8002bea:	701a      	strb	r2, [r3, #0]
}
 8002bec:	bf00      	nop
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	200001bc 	.word	0x200001bc

08002bf4 <SX126xSetTxContinuousWave>:

void SX126xSetTxContinuousWave( void )
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
    SX126xWriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	2100      	movs	r1, #0
 8002bfc:	20d1      	movs	r0, #209	; 0xd1
 8002bfe:	f7ff fc5b 	bl	80024b8 <SX126xWriteCommand>
}
 8002c02:	bf00      	nop
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <SX126xSetStopRxTimerOnPreambleDetect>:
{
    SX126xWriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
}

void SX126xSetStopRxTimerOnPreambleDetect( bool enable )
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b082      	sub	sp, #8
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	71fb      	strb	r3, [r7, #7]
    SX126xWriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8002c10:	1dfb      	adds	r3, r7, #7
 8002c12:	2201      	movs	r2, #1
 8002c14:	4619      	mov	r1, r3
 8002c16:	209f      	movs	r0, #159	; 0x9f
 8002c18:	f7ff fc4e 	bl	80024b8 <SX126xWriteCommand>
}
 8002c1c:	bf00      	nop
 8002c1e:	3708      	adds	r7, #8
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <SX126xSetLoRaSymbNumTimeout>:

void SX126xSetLoRaSymbNumTimeout( uint8_t SymbNum )
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	71fb      	strb	r3, [r7, #7]
    SX126xWriteCommand( RADIO_SET_LORASYMBTIMEOUT, &SymbNum, 1 );
 8002c2e:	1dfb      	adds	r3, r7, #7
 8002c30:	2201      	movs	r2, #1
 8002c32:	4619      	mov	r1, r3
 8002c34:	20a0      	movs	r0, #160	; 0xa0
 8002c36:	f7ff fc3f 	bl	80024b8 <SX126xWriteCommand>
}
 8002c3a:	bf00      	nop
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <SX126xSetRegulatorMode>:

void SX126xSetRegulatorMode( RadioRegulatorMode_t mode )
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b082      	sub	sp, #8
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	4603      	mov	r3, r0
 8002c4a:	71fb      	strb	r3, [r7, #7]
    SX126xWriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8002c4c:	1dfb      	adds	r3, r7, #7
 8002c4e:	2201      	movs	r2, #1
 8002c50:	4619      	mov	r1, r3
 8002c52:	2096      	movs	r0, #150	; 0x96
 8002c54:	f7ff fc30 	bl	80024b8 <SX126xWriteCommand>
}
 8002c58:	bf00      	nop
 8002c5a:	3708      	adds	r7, #8
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <SX126xCalibrateImage>:
{
    SX126xWriteCommand( RADIO_CALIBRATE, ( uint8_t* )&calibParam, 1 );
}

void SX126xCalibrateImage( uint32_t freq )
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a1b      	ldr	r2, [pc, #108]	; (8002cd8 <SX126xCalibrateImage+0x78>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d904      	bls.n	8002c7a <SX126xCalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8002c70:	23e1      	movs	r3, #225	; 0xe1
 8002c72:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8002c74:	23e9      	movs	r3, #233	; 0xe9
 8002c76:	737b      	strb	r3, [r7, #13]
 8002c78:	e022      	b.n	8002cc0 <SX126xCalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a17      	ldr	r2, [pc, #92]	; (8002cdc <SX126xCalibrateImage+0x7c>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d904      	bls.n	8002c8c <SX126xCalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 8002c82:	23d7      	movs	r3, #215	; 0xd7
 8002c84:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xD8;
 8002c86:	23d8      	movs	r3, #216	; 0xd8
 8002c88:	737b      	strb	r3, [r7, #13]
 8002c8a:	e019      	b.n	8002cc0 <SX126xCalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a14      	ldr	r2, [pc, #80]	; (8002ce0 <SX126xCalibrateImage+0x80>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d904      	bls.n	8002c9e <SX126xCalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8002c94:	23c1      	movs	r3, #193	; 0xc1
 8002c96:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8002c98:	23c5      	movs	r3, #197	; 0xc5
 8002c9a:	737b      	strb	r3, [r7, #13]
 8002c9c:	e010      	b.n	8002cc0 <SX126xCalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a10      	ldr	r2, [pc, #64]	; (8002ce4 <SX126xCalibrateImage+0x84>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d904      	bls.n	8002cb0 <SX126xCalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 8002ca6:	2375      	movs	r3, #117	; 0x75
 8002ca8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 8002caa:	2381      	movs	r3, #129	; 0x81
 8002cac:	737b      	strb	r3, [r7, #13]
 8002cae:	e007      	b.n	8002cc0 <SX126xCalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a0d      	ldr	r2, [pc, #52]	; (8002ce8 <SX126xCalibrateImage+0x88>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d903      	bls.n	8002cc0 <SX126xCalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 8002cb8:	236b      	movs	r3, #107	; 0x6b
 8002cba:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8002cbc:	236f      	movs	r3, #111	; 0x6f
 8002cbe:	737b      	strb	r3, [r7, #13]
    }
    SX126xWriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8002cc0:	f107 030c 	add.w	r3, r7, #12
 8002cc4:	2202      	movs	r2, #2
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	2098      	movs	r0, #152	; 0x98
 8002cca:	f7ff fbf5 	bl	80024b8 <SX126xWriteCommand>
}
 8002cce:	bf00      	nop
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	35a4e900 	.word	0x35a4e900
 8002cdc:	32a9f880 	.word	0x32a9f880
 8002ce0:	2de54480 	.word	0x2de54480
 8002ce4:	1b6b0b00 	.word	0x1b6b0b00
 8002ce8:	1954fc40 	.word	0x1954fc40

08002cec <SX126xSetPaConfig>:

void SX126xSetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8002cec:	b590      	push	{r4, r7, lr}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	4604      	mov	r4, r0
 8002cf4:	4608      	mov	r0, r1
 8002cf6:	4611      	mov	r1, r2
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	4623      	mov	r3, r4
 8002cfc:	71fb      	strb	r3, [r7, #7]
 8002cfe:	4603      	mov	r3, r0
 8002d00:	71bb      	strb	r3, [r7, #6]
 8002d02:	460b      	mov	r3, r1
 8002d04:	717b      	strb	r3, [r7, #5]
 8002d06:	4613      	mov	r3, r2
 8002d08:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 8002d0a:	79fb      	ldrb	r3, [r7, #7]
 8002d0c:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8002d0e:	79bb      	ldrb	r3, [r7, #6]
 8002d10:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8002d12:	797b      	ldrb	r3, [r7, #5]
 8002d14:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 8002d16:	793b      	ldrb	r3, [r7, #4]
 8002d18:	73fb      	strb	r3, [r7, #15]
    SX126xWriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8002d1a:	f107 030c 	add.w	r3, r7, #12
 8002d1e:	2204      	movs	r2, #4
 8002d20:	4619      	mov	r1, r3
 8002d22:	2095      	movs	r0, #149	; 0x95
 8002d24:	f7ff fbc8 	bl	80024b8 <SX126xWriteCommand>
}
 8002d28:	bf00      	nop
 8002d2a:	3714      	adds	r7, #20
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd90      	pop	{r4, r7, pc}

08002d30 <SX126xSetDioIrqParams>:
{
    SX126xWriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SX126xSetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8002d30:	b590      	push	{r4, r7, lr}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	4604      	mov	r4, r0
 8002d38:	4608      	mov	r0, r1
 8002d3a:	4611      	mov	r1, r2
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	4623      	mov	r3, r4
 8002d40:	80fb      	strh	r3, [r7, #6]
 8002d42:	4603      	mov	r3, r0
 8002d44:	80bb      	strh	r3, [r7, #4]
 8002d46:	460b      	mov	r3, r1
 8002d48:	807b      	strh	r3, [r7, #2]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8002d4e:	88fb      	ldrh	r3, [r7, #6]
 8002d50:	0a1b      	lsrs	r3, r3, #8
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8002d58:	88fb      	ldrh	r3, [r7, #6]
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8002d5e:	88bb      	ldrh	r3, [r7, #4]
 8002d60:	0a1b      	lsrs	r3, r3, #8
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8002d68:	88bb      	ldrh	r3, [r7, #4]
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8002d6e:	887b      	ldrh	r3, [r7, #2]
 8002d70:	0a1b      	lsrs	r3, r3, #8
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8002d78:	887b      	ldrh	r3, [r7, #2]
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8002d7e:	883b      	ldrh	r3, [r7, #0]
 8002d80:	0a1b      	lsrs	r3, r3, #8
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8002d88:	883b      	ldrh	r3, [r7, #0]
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	73fb      	strb	r3, [r7, #15]
    SX126xWriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8002d8e:	f107 0308 	add.w	r3, r7, #8
 8002d92:	2208      	movs	r2, #8
 8002d94:	4619      	mov	r1, r3
 8002d96:	2008      	movs	r0, #8
 8002d98:	f7ff fb8e 	bl	80024b8 <SX126xWriteCommand>
}
 8002d9c:	bf00      	nop
 8002d9e:	3714      	adds	r7, #20
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd90      	pop	{r4, r7, pc}

08002da4 <SX126xGetIrqStatus>:

uint16_t SX126xGetIrqStatus( void )
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
    uint8_t irqStatus[2];

    SX126xReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
 8002daa:	1d3b      	adds	r3, r7, #4
 8002dac:	2202      	movs	r2, #2
 8002dae:	4619      	mov	r1, r3
 8002db0:	2012      	movs	r0, #18
 8002db2:	f7ff fbbb 	bl	800252c <SX126xReadCommand>
    return ( irqStatus[0] << 8 ) | irqStatus[1];
 8002db6:	793b      	ldrb	r3, [r7, #4]
 8002db8:	021b      	lsls	r3, r3, #8
 8002dba:	b21a      	sxth	r2, r3
 8002dbc:	797b      	ldrb	r3, [r7, #5]
 8002dbe:	b21b      	sxth	r3, r3
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	b21b      	sxth	r3, r3
 8002dc4:	b29b      	uxth	r3, r3
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3708      	adds	r7, #8
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <SX126xSetDio2AsRfSwitchCtrl>:

void SX126xSetDio2AsRfSwitchCtrl( uint8_t enable )
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b082      	sub	sp, #8
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	71fb      	strb	r3, [r7, #7]
    SX126xWriteCommand( RADIO_SET_RFSWITCHMODE, &enable, 1 );
 8002dd8:	1dfb      	adds	r3, r7, #7
 8002dda:	2201      	movs	r2, #1
 8002ddc:	4619      	mov	r1, r3
 8002dde:	209d      	movs	r0, #157	; 0x9d
 8002de0:	f7ff fb6a 	bl	80024b8 <SX126xWriteCommand>
}
 8002de4:	bf00      	nop
 8002de6:	3708      	adds	r7, #8
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	0000      	movs	r0, r0
	...

08002df0 <SX126xSetRfFrequency>:

    SX126xWriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
}

void SX126xSetRfFrequency( uint32_t frequency )
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t freq = 0;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 8002dfc:	4b1e      	ldr	r3, [pc, #120]	; (8002e78 <SX126xSetRfFrequency+0x88>)
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	f083 0301 	eor.w	r3, r3, #1
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d005      	beq.n	8002e16 <SX126xSetRfFrequency+0x26>
    {
        SX126xCalibrateImage( frequency );
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f7ff ff28 	bl	8002c60 <SX126xCalibrateImage>
        ImageCalibrated = true;
 8002e10:	4b19      	ldr	r3, [pc, #100]	; (8002e78 <SX126xSetRfFrequency+0x88>)
 8002e12:	2201      	movs	r2, #1
 8002e14:	701a      	strb	r2, [r3, #0]
    }

    freq = ( uint32_t )( ( double )frequency / ( double )FREQ_STEP );
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f7fd fb18 	bl	800044c <__aeabi_ui2d>
 8002e1c:	a314      	add	r3, pc, #80	; (adr r3, 8002e70 <SX126xSetRfFrequency+0x80>)
 8002e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e22:	f7fd fcb7 	bl	8000794 <__aeabi_ddiv>
 8002e26:	4602      	mov	r2, r0
 8002e28:	460b      	mov	r3, r1
 8002e2a:	4610      	mov	r0, r2
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	f7fd fe21 	bl	8000a74 <__aeabi_d2uiz>
 8002e32:	4603      	mov	r3, r0
 8002e34:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( freq >> 24 ) & 0xFF );
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	0e1b      	lsrs	r3, r3, #24
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( freq >> 16 ) & 0xFF );
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	0c1b      	lsrs	r3, r3, #16
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( freq >> 8 ) & 0xFF );
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	0a1b      	lsrs	r3, r3, #8
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( freq & 0xFF );
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	72fb      	strb	r3, [r7, #11]
    SX126xWriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8002e54:	f107 0308 	add.w	r3, r7, #8
 8002e58:	2204      	movs	r2, #4
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	2086      	movs	r0, #134	; 0x86
 8002e5e:	f7ff fb2b 	bl	80024b8 <SX126xWriteCommand>
}
 8002e62:	bf00      	nop
 8002e64:	3710      	adds	r7, #16
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	f3af 8000 	nop.w
 8002e70:	00000000 	.word	0x00000000
 8002e74:	3fee8480 	.word	0x3fee8480
 8002e78:	200001c4 	.word	0x200001c4

08002e7c <SX126xSetPacketType>:

void SX126xSetPacketType( RadioPacketTypes_t packetType )
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	4603      	mov	r3, r0
 8002e84:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8002e86:	79fa      	ldrb	r2, [r7, #7]
 8002e88:	4b05      	ldr	r3, [pc, #20]	; (8002ea0 <SX126xSetPacketType+0x24>)
 8002e8a:	701a      	strb	r2, [r3, #0]
    SX126xWriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8002e8c:	1dfb      	adds	r3, r7, #7
 8002e8e:	2201      	movs	r2, #1
 8002e90:	4619      	mov	r1, r3
 8002e92:	208a      	movs	r0, #138	; 0x8a
 8002e94:	f7ff fb10 	bl	80024b8 <SX126xWriteCommand>
}
 8002e98:	bf00      	nop
 8002e9a:	3708      	adds	r7, #8
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	200001bd 	.word	0x200001bd

08002ea4 <SX126xGetPacketType>:

RadioPacketTypes_t SX126xGetPacketType( void )
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
    return PacketType;
 8002ea8:	4b03      	ldr	r3, [pc, #12]	; (8002eb8 <SX126xGetPacketType+0x14>)
 8002eaa:	781b      	ldrb	r3, [r3, #0]
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	200001bd 	.word	0x200001bd

08002ebc <SX126xSetTxParams>:

void SX126xSetTxParams( int8_t power, RadioRampTimes_t rampTime )
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	460a      	mov	r2, r1
 8002ec6:	71fb      	strb	r3, [r7, #7]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    if( SX126xGetPaSelect( 0 ) == SX1261 )
 8002ecc:	2000      	movs	r0, #0
 8002ece:	f7ff fca8 	bl	8002822 <SX126xGetPaSelect>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d124      	bne.n	8002f22 <SX126xSetTxParams+0x66>
    {
        if( power == 15 )
 8002ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002edc:	2b0f      	cmp	r3, #15
 8002ede:	d106      	bne.n	8002eee <SX126xSetTxParams+0x32>
        {
            SX126xSetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	2006      	movs	r0, #6
 8002ee8:	f7ff ff00 	bl	8002cec <SX126xSetPaConfig>
 8002eec:	e005      	b.n	8002efa <SX126xSetTxParams+0x3e>
        }
        else
        {
            SX126xSetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 8002eee:	2301      	movs	r3, #1
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	2004      	movs	r0, #4
 8002ef6:	f7ff fef9 	bl	8002cec <SX126xSetPaConfig>
        }
        if( power >= 14 )
 8002efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efe:	2b0d      	cmp	r3, #13
 8002f00:	dd02      	ble.n	8002f08 <SX126xSetTxParams+0x4c>
        {
            power = 14;
 8002f02:	230e      	movs	r3, #14
 8002f04:	71fb      	strb	r3, [r7, #7]
 8002f06:	e006      	b.n	8002f16 <SX126xSetTxParams+0x5a>
        }
        else if( power < -3 )
 8002f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f0c:	f113 0f03 	cmn.w	r3, #3
 8002f10:	da01      	bge.n	8002f16 <SX126xSetTxParams+0x5a>
        {
            power = -3;
 8002f12:	23fd      	movs	r3, #253	; 0xfd
 8002f14:	71fb      	strb	r3, [r7, #7]
        }
        SX126xWriteRegister( REG_OCP, 0x18 ); // current max is 80 mA for the whole device
 8002f16:	2118      	movs	r1, #24
 8002f18:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8002f1c:	f7ff fb86 	bl	800262c <SX126xWriteRegister>
 8002f20:	e018      	b.n	8002f54 <SX126xSetTxParams+0x98>
    }
    else // sx1262
    {
        SX126xSetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 8002f22:	2301      	movs	r3, #1
 8002f24:	2200      	movs	r2, #0
 8002f26:	2107      	movs	r1, #7
 8002f28:	2004      	movs	r0, #4
 8002f2a:	f7ff fedf 	bl	8002cec <SX126xSetPaConfig>
        if( power > 22 )
 8002f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f32:	2b16      	cmp	r3, #22
 8002f34:	dd02      	ble.n	8002f3c <SX126xSetTxParams+0x80>
        {
            power = 22;
 8002f36:	2316      	movs	r3, #22
 8002f38:	71fb      	strb	r3, [r7, #7]
 8002f3a:	e006      	b.n	8002f4a <SX126xSetTxParams+0x8e>
        }
        else if( power < -3 )
 8002f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f40:	f113 0f03 	cmn.w	r3, #3
 8002f44:	da01      	bge.n	8002f4a <SX126xSetTxParams+0x8e>
        {
            power = -3;
 8002f46:	23fd      	movs	r3, #253	; 0xfd
 8002f48:	71fb      	strb	r3, [r7, #7]
        }
        SX126xWriteRegister( REG_OCP, 0x38 ); // current max 160mA for the whole device
 8002f4a:	2138      	movs	r1, #56	; 0x38
 8002f4c:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8002f50:	f7ff fb6c 	bl	800262c <SX126xWriteRegister>
    }
    buf[0] = power;
 8002f54:	79fb      	ldrb	r3, [r7, #7]
 8002f56:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )rampTime;
 8002f58:	79bb      	ldrb	r3, [r7, #6]
 8002f5a:	737b      	strb	r3, [r7, #13]
    SX126xWriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 8002f5c:	f107 030c 	add.w	r3, r7, #12
 8002f60:	2202      	movs	r2, #2
 8002f62:	4619      	mov	r1, r3
 8002f64:	208e      	movs	r0, #142	; 0x8e
 8002f66:	f7ff faa7 	bl	80024b8 <SX126xWriteCommand>
}
 8002f6a:	bf00      	nop
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	0000      	movs	r0, r0
 8002f74:	0000      	movs	r0, r0
	...

08002f78 <SX126xSetModulationParams>:

void SX126xSetModulationParams( ModulationParams_t *modulationParams )
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8002f80:	2300      	movs	r3, #0
 8002f82:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8002f84:	4a48      	ldr	r2, [pc, #288]	; (80030a8 <SX126xSetModulationParams+0x130>)
 8002f86:	f107 0308 	add.w	r3, r7, #8
 8002f8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f8e:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	781a      	ldrb	r2, [r3, #0]
 8002f96:	4b45      	ldr	r3, [pc, #276]	; (80030ac <SX126xSetModulationParams+0x134>)
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d004      	beq.n	8002fa8 <SX126xSetModulationParams+0x30>
    {
        SX126xSetPacketType( modulationParams->PacketType );
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7ff ff6a 	bl	8002e7c <SX126xSetPacketType>
    }

    switch( modulationParams->PacketType )
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d002      	beq.n	8002fb6 <SX126xSetModulationParams+0x3e>
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d056      	beq.n	8003062 <SX126xSetModulationParams+0xea>
        SX126xWriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );

        break;
    default:
    case PACKET_TYPE_NONE:
        return;
 8002fb4:	e06c      	b.n	8003090 <SX126xSetModulationParams+0x118>
        n = 8;
 8002fb6:	2308      	movs	r3, #8
 8002fb8:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )( 32 * ( ( double )XTAL_FREQ / ( double )modulationParams->Params.Gfsk.BitRate ) );
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7fd fa44 	bl	800044c <__aeabi_ui2d>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	460b      	mov	r3, r1
 8002fc8:	a133      	add	r1, pc, #204	; (adr r1, 8003098 <SX126xSetModulationParams+0x120>)
 8002fca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002fce:	f7fd fbe1 	bl	8000794 <__aeabi_ddiv>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	4610      	mov	r0, r2
 8002fd8:	4619      	mov	r1, r3
 8002fda:	f04f 0200 	mov.w	r2, #0
 8002fde:	4b34      	ldr	r3, [pc, #208]	; (80030b0 <SX126xSetModulationParams+0x138>)
 8002fe0:	f7fd faae 	bl	8000540 <__aeabi_dmul>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	4610      	mov	r0, r2
 8002fea:	4619      	mov	r1, r3
 8002fec:	f7fd fd42 	bl	8000a74 <__aeabi_d2uiz>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	0c1b      	lsrs	r3, r3, #16
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	0a1b      	lsrs	r3, r3, #8
 8003000:	b2db      	uxtb	r3, r3
 8003002:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	b2db      	uxtb	r3, r3
 8003008:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	7b1b      	ldrb	r3, [r3, #12]
 800300e:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	7b5b      	ldrb	r3, [r3, #13]
 8003014:	733b      	strb	r3, [r7, #12]
        tempVal = ( uint32_t )( ( double )modulationParams->Params.Gfsk.Fdev / ( double )FREQ_STEP );
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	4618      	mov	r0, r3
 800301c:	f7fd fa16 	bl	800044c <__aeabi_ui2d>
 8003020:	a31f      	add	r3, pc, #124	; (adr r3, 80030a0 <SX126xSetModulationParams+0x128>)
 8003022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003026:	f7fd fbb5 	bl	8000794 <__aeabi_ddiv>
 800302a:	4602      	mov	r2, r0
 800302c:	460b      	mov	r3, r1
 800302e:	4610      	mov	r0, r2
 8003030:	4619      	mov	r1, r3
 8003032:	f7fd fd1f 	bl	8000a74 <__aeabi_d2uiz>
 8003036:	4603      	mov	r3, r0
 8003038:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	0c1b      	lsrs	r3, r3, #16
 800303e:	b2db      	uxtb	r3, r3
 8003040:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	0a1b      	lsrs	r3, r3, #8
 8003046:	b2db      	uxtb	r3, r3
 8003048:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	b2db      	uxtb	r3, r3
 800304e:	73fb      	strb	r3, [r7, #15]
        SX126xWriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8003050:	7cfb      	ldrb	r3, [r7, #19]
 8003052:	b29a      	uxth	r2, r3
 8003054:	f107 0308 	add.w	r3, r7, #8
 8003058:	4619      	mov	r1, r3
 800305a:	208b      	movs	r0, #139	; 0x8b
 800305c:	f7ff fa2c 	bl	80024b8 <SX126xWriteCommand>
        break;
 8003060:	e016      	b.n	8003090 <SX126xSetModulationParams+0x118>
        n = 4;
 8003062:	2304      	movs	r3, #4
 8003064:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	7c1b      	ldrb	r3, [r3, #16]
 800306a:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	7c5b      	ldrb	r3, [r3, #17]
 8003070:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	7c9b      	ldrb	r3, [r3, #18]
 8003076:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	7cdb      	ldrb	r3, [r3, #19]
 800307c:	72fb      	strb	r3, [r7, #11]
        SX126xWriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800307e:	7cfb      	ldrb	r3, [r7, #19]
 8003080:	b29a      	uxth	r2, r3
 8003082:	f107 0308 	add.w	r3, r7, #8
 8003086:	4619      	mov	r1, r3
 8003088:	208b      	movs	r0, #139	; 0x8b
 800308a:	f7ff fa15 	bl	80024b8 <SX126xWriteCommand>
        break;
 800308e:	bf00      	nop
    }
}
 8003090:	3718      	adds	r7, #24
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	00000000 	.word	0x00000000
 800309c:	417e8480 	.word	0x417e8480
 80030a0:	00000000 	.word	0x00000000
 80030a4:	3fee8480 	.word	0x3fee8480
 80030a8:	080065b8 	.word	0x080065b8
 80030ac:	200001bd 	.word	0x200001bd
 80030b0:	40400000 	.word	0x40400000

080030b4 <SX126xSetPacketParams>:

void SX126xSetPacketParams( PacketParams_t *packetParams )
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 80030bc:	2300      	movs	r3, #0
 80030be:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80030c0:	4a3e      	ldr	r2, [pc, #248]	; (80031bc <SX126xSetPacketParams+0x108>)
 80030c2:	f107 030c 	add.w	r3, r7, #12
 80030c6:	ca07      	ldmia	r2, {r0, r1, r2}
 80030c8:	c303      	stmia	r3!, {r0, r1}
 80030ca:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	781a      	ldrb	r2, [r3, #0]
 80030d0:	4b3b      	ldr	r3, [pc, #236]	; (80031c0 <SX126xSetPacketParams+0x10c>)
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d004      	beq.n	80030e2 <SX126xSetPacketParams+0x2e>
    {
        SX126xSetPacketType( packetParams->PacketType );
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	4618      	mov	r0, r3
 80030de:	f7ff fecd 	bl	8002e7c <SX126xSetPacketType>
    }

    switch( packetParams->PacketType )
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d002      	beq.n	80030f0 <SX126xSetPacketParams+0x3c>
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d042      	beq.n	8003174 <SX126xSetPacketParams+0xc0>
        buf[4] = packetParams->Params.LoRa.CrcMode;
        buf[5] = packetParams->Params.LoRa.InvertIQ;
        break;
    default:
    case PACKET_TYPE_NONE:
        return;
 80030ee:	e062      	b.n	80031b6 <SX126xSetPacketParams+0x102>
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	7a5b      	ldrb	r3, [r3, #9]
 80030f4:	2bf1      	cmp	r3, #241	; 0xf1
 80030f6:	d10a      	bne.n	800310e <SX126xSetPacketParams+0x5a>
            SX126xSetCrcSeed( CRC_IBM_SEED );
 80030f8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80030fc:	f7ff fc36 	bl	800296c <SX126xSetCrcSeed>
            SX126xSetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8003100:	f248 0005 	movw	r0, #32773	; 0x8005
 8003104:	f7ff fc52 	bl	80029ac <SX126xSetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8003108:	2302      	movs	r3, #2
 800310a:	75bb      	strb	r3, [r7, #22]
 800310c:	e011      	b.n	8003132 <SX126xSetPacketParams+0x7e>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	7a5b      	ldrb	r3, [r3, #9]
 8003112:	2bf2      	cmp	r3, #242	; 0xf2
 8003114:	d10a      	bne.n	800312c <SX126xSetPacketParams+0x78>
            SX126xSetCrcSeed( CRC_CCITT_SEED );
 8003116:	f641 500f 	movw	r0, #7439	; 0x1d0f
 800311a:	f7ff fc27 	bl	800296c <SX126xSetCrcSeed>
            SX126xSetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 800311e:	f241 0021 	movw	r0, #4129	; 0x1021
 8003122:	f7ff fc43 	bl	80029ac <SX126xSetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8003126:	2306      	movs	r3, #6
 8003128:	75bb      	strb	r3, [r7, #22]
 800312a:	e002      	b.n	8003132 <SX126xSetPacketParams+0x7e>
            crcVal = packetParams->Params.Gfsk.CrcLength;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	7a5b      	ldrb	r3, [r3, #9]
 8003130:	75bb      	strb	r3, [r7, #22]
        n = 9;
 8003132:	2309      	movs	r3, #9
 8003134:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	885b      	ldrh	r3, [r3, #2]
 800313a:	0a1b      	lsrs	r3, r3, #8
 800313c:	b29b      	uxth	r3, r3
 800313e:	b2db      	uxtb	r3, r3
 8003140:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	885b      	ldrh	r3, [r3, #2]
 8003146:	b2db      	uxtb	r3, r3
 8003148:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	791b      	ldrb	r3, [r3, #4]
 800314e:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	795b      	ldrb	r3, [r3, #5]
 8003154:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	799b      	ldrb	r3, [r3, #6]
 800315a:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	79db      	ldrb	r3, [r3, #7]
 8003160:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	7a1b      	ldrb	r3, [r3, #8]
 8003166:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8003168:	7dbb      	ldrb	r3, [r7, #22]
 800316a:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	7a9b      	ldrb	r3, [r3, #10]
 8003170:	753b      	strb	r3, [r7, #20]
        break;
 8003172:	e018      	b.n	80031a6 <SX126xSetPacketParams+0xf2>
        n = 6;
 8003174:	2306      	movs	r3, #6
 8003176:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	899b      	ldrh	r3, [r3, #12]
 800317c:	0a1b      	lsrs	r3, r3, #8
 800317e:	b29b      	uxth	r3, r3
 8003180:	b2db      	uxtb	r3, r3
 8003182:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	899b      	ldrh	r3, [r3, #12]
 8003188:	b2db      	uxtb	r3, r3
 800318a:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.LoRa.HeaderType;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	7b9b      	ldrb	r3, [r3, #14]
 8003190:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	7bdb      	ldrb	r3, [r3, #15]
 8003196:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	7c1b      	ldrb	r3, [r3, #16]
 800319c:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	7c5b      	ldrb	r3, [r3, #17]
 80031a2:	747b      	strb	r3, [r7, #17]
        break;
 80031a4:	bf00      	nop
    }
    SX126xWriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 80031a6:	7dfb      	ldrb	r3, [r7, #23]
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	f107 030c 	add.w	r3, r7, #12
 80031ae:	4619      	mov	r1, r3
 80031b0:	208c      	movs	r0, #140	; 0x8c
 80031b2:	f7ff f981 	bl	80024b8 <SX126xWriteCommand>
}
 80031b6:	3718      	adds	r7, #24
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	080065c0 	.word	0x080065c0
 80031c0:	200001bd 	.word	0x200001bd

080031c4 <SX126xSetCadParams>:

void SX126xSetCadParams( RadioLoRaCadSymbols_t cadSymbolNum, uint8_t cadDetPeak, uint8_t cadDetMin, RadioCadExitModes_t cadExitMode, uint32_t cadTimeout )
{
 80031c4:	b590      	push	{r4, r7, lr}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	4604      	mov	r4, r0
 80031cc:	4608      	mov	r0, r1
 80031ce:	4611      	mov	r1, r2
 80031d0:	461a      	mov	r2, r3
 80031d2:	4623      	mov	r3, r4
 80031d4:	71fb      	strb	r3, [r7, #7]
 80031d6:	4603      	mov	r3, r0
 80031d8:	71bb      	strb	r3, [r7, #6]
 80031da:	460b      	mov	r3, r1
 80031dc:	717b      	strb	r3, [r7, #5]
 80031de:	4613      	mov	r3, r2
 80031e0:	713b      	strb	r3, [r7, #4]
    uint8_t buf[7];

    buf[0] = ( uint8_t )cadSymbolNum;
 80031e2:	79fb      	ldrb	r3, [r7, #7]
 80031e4:	723b      	strb	r3, [r7, #8]
    buf[1] = cadDetPeak;
 80031e6:	79bb      	ldrb	r3, [r7, #6]
 80031e8:	727b      	strb	r3, [r7, #9]
    buf[2] = cadDetMin;
 80031ea:	797b      	ldrb	r3, [r7, #5]
 80031ec:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )cadExitMode;
 80031ee:	793b      	ldrb	r3, [r7, #4]
 80031f0:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( cadTimeout >> 16 ) & 0xFF );
 80031f2:	6a3b      	ldr	r3, [r7, #32]
 80031f4:	0c1b      	lsrs	r3, r3, #16
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( ( cadTimeout >> 8 ) & 0xFF );
 80031fa:	6a3b      	ldr	r3, [r7, #32]
 80031fc:	0a1b      	lsrs	r3, r3, #8
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( cadTimeout & 0xFF );
 8003202:	6a3b      	ldr	r3, [r7, #32]
 8003204:	b2db      	uxtb	r3, r3
 8003206:	73bb      	strb	r3, [r7, #14]
    SX126xWriteCommand( RADIO_SET_CADPARAMS, buf, 5 );
 8003208:	f107 0308 	add.w	r3, r7, #8
 800320c:	2205      	movs	r2, #5
 800320e:	4619      	mov	r1, r3
 8003210:	2088      	movs	r0, #136	; 0x88
 8003212:	f7ff f951 	bl	80024b8 <SX126xWriteCommand>
    OperatingMode = MODE_CAD;
 8003216:	4b03      	ldr	r3, [pc, #12]	; (8003224 <SX126xSetCadParams+0x60>)
 8003218:	2207      	movs	r2, #7
 800321a:	701a      	strb	r2, [r3, #0]
}
 800321c:	bf00      	nop
 800321e:	3714      	adds	r7, #20
 8003220:	46bd      	mov	sp, r7
 8003222:	bd90      	pop	{r4, r7, pc}
 8003224:	200001bc 	.word	0x200001bc

08003228 <SX126xSetBufferBaseAddress>:

void SX126xSetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	4603      	mov	r3, r0
 8003230:	460a      	mov	r2, r1
 8003232:	71fb      	strb	r3, [r7, #7]
 8003234:	4613      	mov	r3, r2
 8003236:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8003238:	79fb      	ldrb	r3, [r7, #7]
 800323a:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 800323c:	79bb      	ldrb	r3, [r7, #6]
 800323e:	737b      	strb	r3, [r7, #13]
    SX126xWriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8003240:	f107 030c 	add.w	r3, r7, #12
 8003244:	2202      	movs	r2, #2
 8003246:	4619      	mov	r1, r3
 8003248:	208f      	movs	r0, #143	; 0x8f
 800324a:	f7ff f935 	bl	80024b8 <SX126xWriteCommand>
}
 800324e:	bf00      	nop
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <SX126xGetRssiInst>:
    status.Value = stat;
    return status;
}

int8_t SX126xGetRssiInst( void )
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b082      	sub	sp, #8
 800325a:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 800325c:	2300      	movs	r3, #0
 800325e:	71fb      	strb	r3, [r7, #7]

    SX126xReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8003260:	1d3b      	adds	r3, r7, #4
 8003262:	2201      	movs	r2, #1
 8003264:	4619      	mov	r1, r3
 8003266:	2015      	movs	r0, #21
 8003268:	f7ff f960 	bl	800252c <SX126xReadCommand>
    rssi = -buf[0] >> 1;
 800326c:	793b      	ldrb	r3, [r7, #4]
 800326e:	425b      	negs	r3, r3
 8003270:	105b      	asrs	r3, r3, #1
 8003272:	71fb      	strb	r3, [r7, #7]
    return rssi;
 8003274:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8003278:	4618      	mov	r0, r3
 800327a:	3708      	adds	r7, #8
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <SX126xGetRxBufferStatus>:

void SX126xGetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SX126xReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800328a:	f107 030c 	add.w	r3, r7, #12
 800328e:	2202      	movs	r2, #2
 8003290:	4619      	mov	r1, r3
 8003292:	2013      	movs	r0, #19
 8003294:	f7ff f94a 	bl	800252c <SX126xReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SX126xGetPacketType( ) == PACKET_TYPE_LORA ) && ( SX126xReadRegister( REG_LR_PACKETPARAMS ) >> 7 == 1 ) )
 8003298:	f7ff fe04 	bl	8002ea4 <SX126xGetPacketType>
 800329c:	4603      	mov	r3, r0
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d111      	bne.n	80032c6 <SX126xGetRxBufferStatus+0x46>
 80032a2:	f240 7004 	movw	r0, #1796	; 0x704
 80032a6:	f7ff fa1d 	bl	80026e4 <SX126xReadRegister>
 80032aa:	4603      	mov	r3, r0
 80032ac:	09db      	lsrs	r3, r3, #7
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d108      	bne.n	80032c6 <SX126xGetRxBufferStatus+0x46>
    {
        *payloadLength = SX126xReadRegister( REG_LR_PAYLOADLENGTH );
 80032b4:	f240 7002 	movw	r0, #1794	; 0x702
 80032b8:	f7ff fa14 	bl	80026e4 <SX126xReadRegister>
 80032bc:	4603      	mov	r3, r0
 80032be:	461a      	mov	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	701a      	strb	r2, [r3, #0]
 80032c4:	e002      	b.n	80032cc <SX126xGetRxBufferStatus+0x4c>
    }
    else
    {
        *payloadLength = status[0];
 80032c6:	7b3a      	ldrb	r2, [r7, #12]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 80032cc:	7b7a      	ldrb	r2, [r7, #13]
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	701a      	strb	r2, [r3, #0]
}
 80032d2:	bf00      	nop
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
	...

080032dc <SX126xGetPacketStatus>:

void SX126xGetPacketStatus( PacketStatus_t *pktStatus )
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SX126xReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 80032e4:	f107 030c 	add.w	r3, r7, #12
 80032e8:	2203      	movs	r2, #3
 80032ea:	4619      	mov	r1, r3
 80032ec:	2014      	movs	r0, #20
 80032ee:	f7ff f91d 	bl	800252c <SX126xReadCommand>

    pktStatus->packetType = SX126xGetPacketType( );
 80032f2:	f7ff fdd7 	bl	8002ea4 <SX126xGetPacketType>
 80032f6:	4603      	mov	r3, r0
 80032f8:	461a      	mov	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d002      	beq.n	800330c <SX126xGetPacketStatus+0x30>
 8003306:	2b01      	cmp	r3, #1
 8003308:	d013      	beq.n	8003332 <SX126xGetPacketStatus+0x56>
 800330a:	e035      	b.n	8003378 <SX126xGetPacketStatus+0x9c>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800330c:	7b3a      	ldrb	r2, [r7, #12]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8003312:	7b7b      	ldrb	r3, [r7, #13]
 8003314:	425b      	negs	r3, r3
 8003316:	105b      	asrs	r3, r3, #1
 8003318:	b25a      	sxtb	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800331e:	7bbb      	ldrb	r3, [r7, #14]
 8003320:	425b      	negs	r3, r3
 8003322:	105b      	asrs	r3, r3, #1
 8003324:	b25a      	sxtb	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	609a      	str	r2, [r3, #8]
            break;
 8003330:	e02b      	b.n	800338a <SX126xGetPacketStatus+0xae>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8003332:	7b3b      	ldrb	r3, [r7, #12]
 8003334:	425b      	negs	r3, r3
 8003336:	105b      	asrs	r3, r3, #1
 8003338:	b25a      	sxtb	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	731a      	strb	r2, [r3, #12]
            ( status[1] < 128 ) ? ( pktStatus->Params.LoRa.SnrPkt = status[1] >> 2 ) : ( pktStatus->Params.LoRa.SnrPkt = ( ( status[1] - 256 ) >> 2 ) );
 800333e:	7b7b      	ldrb	r3, [r7, #13]
 8003340:	b25b      	sxtb	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	db06      	blt.n	8003354 <SX126xGetPacketStatus+0x78>
 8003346:	7b7b      	ldrb	r3, [r7, #13]
 8003348:	089b      	lsrs	r3, r3, #2
 800334a:	b2db      	uxtb	r3, r3
 800334c:	b25a      	sxtb	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	735a      	strb	r2, [r3, #13]
 8003352:	e006      	b.n	8003362 <SX126xGetPacketStatus+0x86>
 8003354:	7b7b      	ldrb	r3, [r7, #13]
 8003356:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800335a:	109b      	asrs	r3, r3, #2
 800335c:	b25a      	sxtb	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8003362:	7bbb      	ldrb	r3, [r7, #14]
 8003364:	425b      	negs	r3, r3
 8003366:	105b      	asrs	r3, r3, #1
 8003368:	b25a      	sxtb	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800336e:	4b09      	ldr	r3, [pc, #36]	; (8003394 <SX126xGetPacketStatus+0xb8>)
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	611a      	str	r2, [r3, #16]
            break;
 8003376:	e008      	b.n	800338a <SX126xGetPacketStatus+0xae>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            memset( pktStatus, 0, sizeof( PacketStatus_t ) );
 8003378:	2214      	movs	r2, #20
 800337a:	2100      	movs	r1, #0
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f002 fed9 	bl	8006134 <memset>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	220f      	movs	r2, #15
 8003386:	701a      	strb	r2, [r3, #0]
            break;
 8003388:	bf00      	nop
    }
}
 800338a:	bf00      	nop
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	200001c0 	.word	0x200001c0

08003398 <SX126xClearIrqStatus>:
    uint8_t buf[2] = { 0x00, 0x00 };
    SX126xWriteCommand( RADIO_CLR_ERROR, buf, 2 );
}

void SX126xClearIrqStatus( uint16_t irq )
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	4603      	mov	r3, r0
 80033a0:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( ( uint16_t )irq >> 8 ) & 0x00FF );
 80033a2:	88fb      	ldrh	r3, [r7, #6]
 80033a4:	0a1b      	lsrs	r3, r3, #8
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
 80033ac:	88fb      	ldrh	r3, [r7, #6]
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	737b      	strb	r3, [r7, #13]
    SX126xWriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
 80033b2:	f107 030c 	add.w	r3, r7, #12
 80033b6:	2202      	movs	r2, #2
 80033b8:	4619      	mov	r1, r3
 80033ba:	2002      	movs	r0, #2
 80033bc:	f7ff f87c 	bl	80024b8 <SX126xWriteCommand>
}
 80033c0:	bf00      	nop
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <Init_Timer>:


static EventInt EventInterrupt[TIM_MAX_HW][MAX_EVENT_ALL_TIM];

void Init_Timer(Tim_CfgTypes *Timer_Cfg)
{
 80033c8:	b590      	push	{r4, r7, lr}
 80033ca:	b097      	sub	sp, #92	; 0x5c
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
     TIM_TypeDef *hw;
     uint32_t tmpcr1 = 0U;
 80033d0:	2300      	movs	r3, #0
 80033d2:	64fb      	str	r3, [r7, #76]	; 0x4c
    
     Tim_OCCMode_CfgTypes  OCCMode_Cfg_local;
     Tim_ICCMode_CfgTypes  ICCMode_Cfg_local;
     Tim_TRIGMode_CfgTypes TRIGMode_Cfg_local;
    
     for(uint8_t i = 0; i < Timer_Cfg->Number_HW; i++) 
 80033d4:	2300      	movs	r3, #0
 80033d6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 80033da:	e2fa      	b.n	80039d2 <Init_Timer+0x60a>
     {
         /*get base address of hw*/
         switch(Timer_Cfg->Hw_Config[i].HW)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6859      	ldr	r1, [r3, #4]
 80033e0:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 80033e4:	4613      	mov	r3, r2
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	4413      	add	r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	440b      	add	r3, r1
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	3b01      	subs	r3, #1
 80033f2:	2b03      	cmp	r3, #3
 80033f4:	d83e      	bhi.n	8003474 <Init_Timer+0xac>
 80033f6:	a201      	add	r2, pc, #4	; (adr r2, 80033fc <Init_Timer+0x34>)
 80033f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033fc:	0800340d 	.word	0x0800340d
 8003400:	0800342f 	.word	0x0800342f
 8003404:	08003453 	.word	0x08003453
 8003408:	08003475 	.word	0x08003475
         {
             case TIMER1_HW : 
                 hw = TIM1;
 800340c:	4bb6      	ldr	r3, [pc, #728]	; (80036e8 <Init_Timer+0x320>)
 800340e:	657b      	str	r3, [r7, #84]	; 0x54
                 __HAL_RCC_TIM1_CLK_ENABLE();
 8003410:	2300      	movs	r3, #0
 8003412:	613b      	str	r3, [r7, #16]
 8003414:	4bb5      	ldr	r3, [pc, #724]	; (80036ec <Init_Timer+0x324>)
 8003416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003418:	4ab4      	ldr	r2, [pc, #720]	; (80036ec <Init_Timer+0x324>)
 800341a:	f043 0301 	orr.w	r3, r3, #1
 800341e:	6453      	str	r3, [r2, #68]	; 0x44
 8003420:	4bb2      	ldr	r3, [pc, #712]	; (80036ec <Init_Timer+0x324>)
 8003422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003424:	f003 0301 	and.w	r3, r3, #1
 8003428:	613b      	str	r3, [r7, #16]
 800342a:	693b      	ldr	r3, [r7, #16]
                 break;
 800342c:	e023      	b.n	8003476 <Init_Timer+0xae>
             case TIMER2_HW : 
                 hw = (TIM_TypeDef *)TIM2;
 800342e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003432:	657b      	str	r3, [r7, #84]	; 0x54
                 __HAL_RCC_TIM2_CLK_ENABLE();
 8003434:	2300      	movs	r3, #0
 8003436:	60fb      	str	r3, [r7, #12]
 8003438:	4bac      	ldr	r3, [pc, #688]	; (80036ec <Init_Timer+0x324>)
 800343a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343c:	4aab      	ldr	r2, [pc, #684]	; (80036ec <Init_Timer+0x324>)
 800343e:	f043 0301 	orr.w	r3, r3, #1
 8003442:	6413      	str	r3, [r2, #64]	; 0x40
 8003444:	4ba9      	ldr	r3, [pc, #676]	; (80036ec <Init_Timer+0x324>)
 8003446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003448:	f003 0301 	and.w	r3, r3, #1
 800344c:	60fb      	str	r3, [r7, #12]
 800344e:	68fb      	ldr	r3, [r7, #12]
                 break;      
 8003450:	e011      	b.n	8003476 <Init_Timer+0xae>
             case TIMER3_HW : 
                 hw = (TIM_TypeDef *)TIM3;
 8003452:	4ba7      	ldr	r3, [pc, #668]	; (80036f0 <Init_Timer+0x328>)
 8003454:	657b      	str	r3, [r7, #84]	; 0x54
                 __HAL_RCC_TIM3_CLK_ENABLE();
 8003456:	2300      	movs	r3, #0
 8003458:	60bb      	str	r3, [r7, #8]
 800345a:	4ba4      	ldr	r3, [pc, #656]	; (80036ec <Init_Timer+0x324>)
 800345c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345e:	4aa3      	ldr	r2, [pc, #652]	; (80036ec <Init_Timer+0x324>)
 8003460:	f043 0302 	orr.w	r3, r3, #2
 8003464:	6413      	str	r3, [r2, #64]	; 0x40
 8003466:	4ba1      	ldr	r3, [pc, #644]	; (80036ec <Init_Timer+0x324>)
 8003468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	60bb      	str	r3, [r7, #8]
 8003470:	68bb      	ldr	r3, [r7, #8]
                 break;
 8003472:	e000      	b.n	8003476 <Init_Timer+0xae>
             case TIMER4_HW : 
                 //hw = (TIM_TypeDef *)TIM4;
                 break;
             default :
                 break;
 8003474:	bf00      	nop
         }
         /*cau hinh prescaler/period cho timer*/
         tmpcr1 = hw->CR1;
 8003476:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	64fb      	str	r3, [r7, #76]	; 0x4c
         tmpcr1 &= ~TIM_CR1_ARPE_Msk;
 800347c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800347e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003482:	64fb      	str	r3, [r7, #76]	; 0x4c
         tmpcr1 |= TIM_CR1_ARPE_Msk;
 8003484:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800348a:	64fb      	str	r3, [r7, #76]	; 0x4c
         hw->CR1 = tmpcr1;
 800348c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800348e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003490:	601a      	str	r2, [r3, #0]
         hw->PSC = (uint32_t)Timer_Cfg->Hw_Config[i].Base_Cfg->Prescaler;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6859      	ldr	r1, [r3, #4]
 8003496:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 800349a:	4613      	mov	r3, r2
 800349c:	005b      	lsls	r3, r3, #1
 800349e:	4413      	add	r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	440b      	add	r3, r1
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034aa:	629a      	str	r2, [r3, #40]	; 0x28
         hw->ARR = (uint32_t)Timer_Cfg->Hw_Config[i].Base_Cfg->Period ;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6859      	ldr	r1, [r3, #4]
 80034b0:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 80034b4:	4613      	mov	r3, r2
 80034b6:	005b      	lsls	r3, r3, #1
 80034b8:	4413      	add	r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	440b      	add	r3, r1
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034c4:	62da      	str	r2, [r3, #44]	; 0x2c
         hw->EGR = TIM_EGR_UG_Msk;
 80034c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034c8:	2201      	movs	r2, #1
 80034ca:	615a      	str	r2, [r3, #20]
         /* check bien enable ngat de cau hinh ngat*/
         if(Timer_Cfg->Hw_Config[i].Base_Cfg->Int_Enable == TIME_INT_ENABLE)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6859      	ldr	r1, [r3, #4]
 80034d0:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 80034d4:	4613      	mov	r3, r2
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	4413      	add	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	440b      	add	r3, r1
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	7a1b      	ldrb	r3, [r3, #8]
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d121      	bne.n	800352a <Init_Timer+0x162>
         {
             if((hw==TIM2)||(hw==TIM3))
 80034e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ec:	d003      	beq.n	80034f6 <Init_Timer+0x12e>
 80034ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034f0:	4a7f      	ldr	r2, [pc, #508]	; (80036f0 <Init_Timer+0x328>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d119      	bne.n	800352a <Init_Timer+0x162>
             {
                 tmpdier = hw->DIER;
 80034f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	64bb      	str	r3, [r7, #72]	; 0x48
                 tmpdier |= TIM_DIER_UIE;
 80034fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034fe:	f043 0301 	orr.w	r3, r3, #1
 8003502:	64bb      	str	r3, [r7, #72]	; 0x48
                 hw->DIER = tmpdier;
 8003504:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003506:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003508:	60da      	str	r2, [r3, #12]
             	 HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800350a:	201c      	movs	r0, #28
 800350c:	f001 fc97 	bl	8004e3e <HAL_NVIC_EnableIRQ>
             	 HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003510:	201d      	movs	r0, #29
 8003512:	f001 fc94 	bl	8004e3e <HAL_NVIC_EnableIRQ>

             	 HAL_NVIC_SetPriority(TIM3_IRQn,5u,0u);
 8003516:	2200      	movs	r2, #0
 8003518:	2105      	movs	r1, #5
 800351a:	201d      	movs	r0, #29
 800351c:	f001 fc73 	bl	8004e06 <HAL_NVIC_SetPriority>
             	 HAL_NVIC_SetPriority(TIM2_IRQn,5u,0u);
 8003520:	2200      	movs	r2, #0
 8003522:	2105      	movs	r1, #5
 8003524:	201c      	movs	r0, #28
 8003526:	f001 fc6e 	bl	8004e06 <HAL_NVIC_SetPriority>
             {
                 
             }
         }
         /* config chanel of hw*/
         for(uint8_t j = 0; j < Timer_Cfg->Hw_Config[i].Number_Chanel; j++)
 800352a:	2300      	movs	r3, #0
 800352c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 8003530:	e235      	b.n	800399e <Init_Timer+0x5d6>
         {
             chanel=Timer_Cfg->Hw_Config[i].Chanel_Config[j].Chanel_ID;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6859      	ldr	r1, [r3, #4]
 8003536:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 800353a:	4613      	mov	r3, r2
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	4413      	add	r3, r2
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	440b      	add	r3, r1
 8003544:	689a      	ldr	r2, [r3, #8]
 8003546:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800354a:	011b      	lsls	r3, r3, #4
 800354c:	4413      	add	r3, r2
 800354e:	785b      	ldrb	r3, [r3, #1]
 8003550:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
             switch(Timer_Cfg->Hw_Config[i].Chanel_Config[j].Mode)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6859      	ldr	r1, [r3, #4]
 8003558:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 800355c:	4613      	mov	r3, r2
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	4413      	add	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	440b      	add	r3, r1
 8003566:	689a      	ldr	r2, [r3, #8]
 8003568:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800356c:	011b      	lsls	r3, r3, #4
 800356e:	4413      	add	r3, r2
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	3b01      	subs	r3, #1
 8003574:	2b03      	cmp	r3, #3
 8003576:	f200 820c 	bhi.w	8003992 <Init_Timer+0x5ca>
 800357a:	a201      	add	r2, pc, #4	; (adr r2, 8003580 <Init_Timer+0x1b8>)
 800357c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003580:	08003591 	.word	0x08003591
 8003584:	08003719 	.word	0x08003719
 8003588:	080038ef 	.word	0x080038ef
 800358c:	08003993 	.word	0x08003993
             {
                 case OCC_MODE :
                     /*cau hinh thanh ghi cho output compare mode*/
                                     OCCMode_Cfg_local= *(Timer_Cfg->Hw_Config[i].Chanel_Config[j].OCCMode_Cfg);               
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6859      	ldr	r1, [r3, #4]
 8003594:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8003598:	4613      	mov	r3, r2
 800359a:	005b      	lsls	r3, r3, #1
 800359c:	4413      	add	r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	440b      	add	r3, r1
 80035a2:	689a      	ldr	r2, [r3, #8]
 80035a4:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 80035a8:	011b      	lsls	r3, r3, #4
 80035aa:	4413      	add	r3, r2
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80035b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                     hw->CCER &= ~(TIM_CCER_CC1E<<((chanel-1)*4));
 80035b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035ba:	6a1a      	ldr	r2, [r3, #32]
 80035bc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80035c0:	3b01      	subs	r3, #1
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	2101      	movs	r1, #1
 80035c6:	fa01 f303 	lsl.w	r3, r1, r3
 80035ca:	43db      	mvns	r3, r3
 80035cc:	401a      	ands	r2, r3
 80035ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035d0:	621a      	str	r2, [r3, #32]
                     tmpccer = hw->CCER;
 80035d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	63fb      	str	r3, [r7, #60]	; 0x3c
                     /*cau hinh mode/compare_value/OCPolarity */
                     if(chanel<3)
 80035d8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d82d      	bhi.n	800363c <Init_Timer+0x274>
                     {
                         tmpccmrx = hw->CCMR1;
 80035e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	643b      	str	r3, [r7, #64]	; 0x40
                         tmpccmrx &= ~(TIM_CCMR1_OC1M<<((chanel-1)*8));
 80035e6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80035ea:	3b01      	subs	r3, #1
 80035ec:	00db      	lsls	r3, r3, #3
 80035ee:	2270      	movs	r2, #112	; 0x70
 80035f0:	fa02 f303 	lsl.w	r3, r2, r3
 80035f4:	43db      	mvns	r3, r3
 80035f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035f8:	4013      	ands	r3, r2
 80035fa:	643b      	str	r3, [r7, #64]	; 0x40
                         tmpccmrx &= ~(TIM_CCMR1_CC1S<<((chanel-1)*8));
 80035fc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003600:	3b01      	subs	r3, #1
 8003602:	00db      	lsls	r3, r3, #3
 8003604:	2203      	movs	r2, #3
 8003606:	fa02 f303 	lsl.w	r3, r2, r3
 800360a:	43db      	mvns	r3, r3
 800360c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800360e:	4013      	ands	r3, r2
 8003610:	643b      	str	r3, [r7, #64]	; 0x40
                         tmpccmrx |= (OCCMode_Cfg_local.OCMode<<((chanel-1)*8))|(TIM_CCMR1_OC1PE<<((chanel-1)*8));
 8003612:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003614:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003618:	3b01      	subs	r3, #1
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	409a      	lsls	r2, r3
 800361e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003622:	3b01      	subs	r3, #1
 8003624:	00db      	lsls	r3, r3, #3
 8003626:	2108      	movs	r1, #8
 8003628:	fa01 f303 	lsl.w	r3, r1, r3
 800362c:	4313      	orrs	r3, r2
 800362e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003630:	4313      	orrs	r3, r2
 8003632:	643b      	str	r3, [r7, #64]	; 0x40
                         hw->CCMR1 = tmpccmrx;
 8003634:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003636:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003638:	619a      	str	r2, [r3, #24]
 800363a:	e02c      	b.n	8003696 <Init_Timer+0x2ce>
                     }   
                     else
                     {   
                         tmpccmrx = hw->CCMR2;
 800363c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800363e:	69db      	ldr	r3, [r3, #28]
 8003640:	643b      	str	r3, [r7, #64]	; 0x40
                         tmpccmrx &= ~(TIM_CCMR1_OC1M<<((chanel-3)*8));
 8003642:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003646:	3b03      	subs	r3, #3
 8003648:	00db      	lsls	r3, r3, #3
 800364a:	2270      	movs	r2, #112	; 0x70
 800364c:	fa02 f303 	lsl.w	r3, r2, r3
 8003650:	43db      	mvns	r3, r3
 8003652:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003654:	4013      	ands	r3, r2
 8003656:	643b      	str	r3, [r7, #64]	; 0x40
                         tmpccmrx &= ~(TIM_CCMR1_CC1S<<((chanel-3)*8));
 8003658:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800365c:	3b03      	subs	r3, #3
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	2203      	movs	r2, #3
 8003662:	fa02 f303 	lsl.w	r3, r2, r3
 8003666:	43db      	mvns	r3, r3
 8003668:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800366a:	4013      	ands	r3, r2
 800366c:	643b      	str	r3, [r7, #64]	; 0x40
                         tmpccmrx |= (OCCMode_Cfg_local.OCMode<<((chanel-3)*8))|(TIM_CCMR1_OC1PE<<((chanel-3)*8));
 800366e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003670:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003674:	3b03      	subs	r3, #3
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	409a      	lsls	r2, r3
 800367a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800367e:	3b03      	subs	r3, #3
 8003680:	00db      	lsls	r3, r3, #3
 8003682:	2108      	movs	r1, #8
 8003684:	fa01 f303 	lsl.w	r3, r1, r3
 8003688:	4313      	orrs	r3, r2
 800368a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800368c:	4313      	orrs	r3, r2
 800368e:	643b      	str	r3, [r7, #64]	; 0x40
                         hw->CCMR2 = tmpccmrx;
 8003690:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003692:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003694:	61da      	str	r2, [r3, #28]
                     }
                     tmpccer &= ~(TIM_CCER_CC1P<<((chanel-1)*4));
 8003696:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800369a:	3b01      	subs	r3, #1
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	2202      	movs	r2, #2
 80036a0:	fa02 f303 	lsl.w	r3, r2, r3
 80036a4:	43db      	mvns	r3, r3
 80036a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036a8:	4013      	ands	r3, r2
 80036aa:	63fb      	str	r3, [r7, #60]	; 0x3c
                     tmpccer |= (OCCMode_Cfg_local.OCPolarity<<((chanel-1)*4));
 80036ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036ae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80036b2:	3b01      	subs	r3, #1
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036bc:	4313      	orrs	r3, r2
 80036be:	63fb      	str	r3, [r7, #60]	; 0x3c
                     hw->CCER = tmpccer;
 80036c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036c4:	621a      	str	r2, [r3, #32]
                     switch(chanel)
 80036c6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80036ca:	3b01      	subs	r3, #1
 80036cc:	2b03      	cmp	r3, #3
 80036ce:	d821      	bhi.n	8003714 <Init_Timer+0x34c>
 80036d0:	a201      	add	r2, pc, #4	; (adr r2, 80036d8 <Init_Timer+0x310>)
 80036d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d6:	bf00      	nop
 80036d8:	080036f5 	.word	0x080036f5
 80036dc:	080036fd 	.word	0x080036fd
 80036e0:	08003705 	.word	0x08003705
 80036e4:	0800370d 	.word	0x0800370d
 80036e8:	40010000 	.word	0x40010000
 80036ec:	40023800 	.word	0x40023800
 80036f0:	40000400 	.word	0x40000400
                     {
                         case CHANNEL1_HW : hw->CCR1 = OCCMode_Cfg_local.Compare_value;
 80036f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036f8:	635a      	str	r2, [r3, #52]	; 0x34
                         break;
 80036fa:	e00c      	b.n	8003716 <Init_Timer+0x34e>
                         case CHANNEL2_HW : hw->CCR2 = OCCMode_Cfg_local.Compare_value;
 80036fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003700:	639a      	str	r2, [r3, #56]	; 0x38
                         break;      
 8003702:	e008      	b.n	8003716 <Init_Timer+0x34e>
                         case CHANNEL3_HW : hw->CCR3 = OCCMode_Cfg_local.Compare_value;
 8003704:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003706:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003708:	63da      	str	r2, [r3, #60]	; 0x3c
                         break;
 800370a:	e004      	b.n	8003716 <Init_Timer+0x34e>
                         case CHANNEL4_HW : hw->CCR4 = OCCMode_Cfg_local.Compare_value;
 800370c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800370e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003710:	641a      	str	r2, [r3, #64]	; 0x40
                         break;
 8003712:	e000      	b.n	8003716 <Init_Timer+0x34e>
                         default :
                         break;
 8003714:	bf00      	nop
                     }
                     break;
 8003716:	e13d      	b.n	8003994 <Init_Timer+0x5cc>
                 case ICC_MODE :
                     /*cau hinh thanh ghi cho input capture mode*/
                     ICCMode_Cfg_local= *(Timer_Cfg->Hw_Config[i].Chanel_Config[j].ICCMode_Cfg);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6859      	ldr	r1, [r3, #4]
 800371c:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8003720:	4613      	mov	r3, r2
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	4413      	add	r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	440b      	add	r3, r1
 800372a:	689a      	ldr	r2, [r3, #8]
 800372c:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8003730:	011b      	lsls	r3, r3, #4
 8003732:	4413      	add	r3, r2
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f107 041c 	add.w	r4, r7, #28
 800373a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800373c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                     hw->CCER &= ~(TIM_CCER_CC1E<<((chanel-1)*4));
 8003740:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003742:	6a1a      	ldr	r2, [r3, #32]
 8003744:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003748:	3b01      	subs	r3, #1
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	2101      	movs	r1, #1
 800374e:	fa01 f303 	lsl.w	r3, r1, r3
 8003752:	43db      	mvns	r3, r3
 8003754:	401a      	ands	r2, r3
 8003756:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003758:	621a      	str	r2, [r3, #32]
                     /*Reset counter value*/
                     switch(chanel)
 800375a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800375e:	3b01      	subs	r3, #1
 8003760:	2b03      	cmp	r3, #3
 8003762:	d81b      	bhi.n	800379c <Init_Timer+0x3d4>
 8003764:	a201      	add	r2, pc, #4	; (adr r2, 800376c <Init_Timer+0x3a4>)
 8003766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800376a:	bf00      	nop
 800376c:	0800377d 	.word	0x0800377d
 8003770:	08003785 	.word	0x08003785
 8003774:	0800378d 	.word	0x0800378d
 8003778:	08003795 	.word	0x08003795
                     {
                         case CHANNEL1_HW : hw->CCR1 = 0;
 800377c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800377e:	2200      	movs	r2, #0
 8003780:	635a      	str	r2, [r3, #52]	; 0x34
                         break;
 8003782:	e00c      	b.n	800379e <Init_Timer+0x3d6>
                         case CHANNEL2_HW : hw->CCR2 = 0;
 8003784:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003786:	2200      	movs	r2, #0
 8003788:	639a      	str	r2, [r3, #56]	; 0x38
                         break;      
 800378a:	e008      	b.n	800379e <Init_Timer+0x3d6>
                         case CHANNEL3_HW : hw->CCR3 = 0;
 800378c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800378e:	2200      	movs	r2, #0
 8003790:	63da      	str	r2, [r3, #60]	; 0x3c
                         break;
 8003792:	e004      	b.n	800379e <Init_Timer+0x3d6>
                         case CHANNEL4_HW : hw->CCR4 = 0;
 8003794:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003796:	2200      	movs	r2, #0
 8003798:	641a      	str	r2, [r3, #64]	; 0x40
                         break;
 800379a:	e000      	b.n	800379e <Init_Timer+0x3d6>
                         default :
                         break;
 800379c:	bf00      	nop
                     }
                     /*cau hinh filter/ICPrescaler/ICPolarity source input*/
                     tmpccmrx = hw->CCMR1;
 800379e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	643b      	str	r3, [r7, #64]	; 0x40
                     tmpccer = hw->CCER;
 80037a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037a6:	6a1b      	ldr	r3, [r3, #32]
 80037a8:	63fb      	str	r3, [r7, #60]	; 0x3c
                     if(chanel<3)
 80037aa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d842      	bhi.n	8003838 <Init_Timer+0x470>
                     {
                         tmpccmrx = hw->CCMR1;
 80037b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	643b      	str	r3, [r7, #64]	; 0x40
                         tmpccmrx &= ~(TIM_CCMR1_IC1F<<((chanel-1)*8));
 80037b8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80037bc:	3b01      	subs	r3, #1
 80037be:	00db      	lsls	r3, r3, #3
 80037c0:	22f0      	movs	r2, #240	; 0xf0
 80037c2:	fa02 f303 	lsl.w	r3, r2, r3
 80037c6:	43db      	mvns	r3, r3
 80037c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037ca:	4013      	ands	r3, r2
 80037cc:	643b      	str	r3, [r7, #64]	; 0x40
                         tmpccmrx &= ~(TIM_CCMR1_IC1PSC<<((chanel-1)*8));
 80037ce:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80037d2:	3b01      	subs	r3, #1
 80037d4:	00db      	lsls	r3, r3, #3
 80037d6:	220c      	movs	r2, #12
 80037d8:	fa02 f303 	lsl.w	r3, r2, r3
 80037dc:	43db      	mvns	r3, r3
 80037de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037e0:	4013      	ands	r3, r2
 80037e2:	643b      	str	r3, [r7, #64]	; 0x40
                         tmpccmrx |= (ICCMode_Cfg_local.ICFilter<<((chanel-1)*8))|(ICCMode_Cfg_local.ICPrescaler<<((chanel-1)*8));
 80037e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037e6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80037ea:	3b01      	subs	r3, #1
 80037ec:	00db      	lsls	r3, r3, #3
 80037ee:	409a      	lsls	r2, r3
 80037f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037f2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80037f6:	3b01      	subs	r3, #1
 80037f8:	00db      	lsls	r3, r3, #3
 80037fa:	fa01 f303 	lsl.w	r3, r1, r3
 80037fe:	4313      	orrs	r3, r2
 8003800:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003802:	4313      	orrs	r3, r2
 8003804:	643b      	str	r3, [r7, #64]	; 0x40
                         tmpccmrx &= ~(TIM_CCMR1_CC1S<<((chanel-1)*8));
 8003806:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800380a:	3b01      	subs	r3, #1
 800380c:	00db      	lsls	r3, r3, #3
 800380e:	2203      	movs	r2, #3
 8003810:	fa02 f303 	lsl.w	r3, r2, r3
 8003814:	43db      	mvns	r3, r3
 8003816:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003818:	4013      	ands	r3, r2
 800381a:	643b      	str	r3, [r7, #64]	; 0x40
                         tmpccmrx |= ICCMode_Cfg_local.ICSelection<<((chanel-3)*8);
 800381c:	6a3a      	ldr	r2, [r7, #32]
 800381e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003822:	3b03      	subs	r3, #3
 8003824:	00db      	lsls	r3, r3, #3
 8003826:	fa02 f303 	lsl.w	r3, r2, r3
 800382a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800382c:	4313      	orrs	r3, r2
 800382e:	643b      	str	r3, [r7, #64]	; 0x40
                         hw->CCMR1 = tmpccmrx;
 8003830:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003832:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003834:	619a      	str	r2, [r3, #24]
 8003836:	e041      	b.n	80038bc <Init_Timer+0x4f4>
                     }   
                     else
                     {   
                         tmpccmrx = hw->CCMR2;
 8003838:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800383a:	69db      	ldr	r3, [r3, #28]
 800383c:	643b      	str	r3, [r7, #64]	; 0x40
                         tmpccmrx &= ~(TIM_CCMR1_IC1F<<((chanel-3)*8));
 800383e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003842:	3b03      	subs	r3, #3
 8003844:	00db      	lsls	r3, r3, #3
 8003846:	22f0      	movs	r2, #240	; 0xf0
 8003848:	fa02 f303 	lsl.w	r3, r2, r3
 800384c:	43db      	mvns	r3, r3
 800384e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003850:	4013      	ands	r3, r2
 8003852:	643b      	str	r3, [r7, #64]	; 0x40
                         tmpccmrx &= ~(TIM_CCMR1_IC1PSC<<((chanel-3)*8));
 8003854:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003858:	3b03      	subs	r3, #3
 800385a:	00db      	lsls	r3, r3, #3
 800385c:	220c      	movs	r2, #12
 800385e:	fa02 f303 	lsl.w	r3, r2, r3
 8003862:	43db      	mvns	r3, r3
 8003864:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003866:	4013      	ands	r3, r2
 8003868:	643b      	str	r3, [r7, #64]	; 0x40
                         tmpccmrx |= (ICCMode_Cfg_local.ICFilter<<((chanel-3)*8))|(ICCMode_Cfg_local.ICPrescaler<<((chanel-3)*8));
 800386a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800386c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003870:	3b03      	subs	r3, #3
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	409a      	lsls	r2, r3
 8003876:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003878:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800387c:	3b03      	subs	r3, #3
 800387e:	00db      	lsls	r3, r3, #3
 8003880:	fa01 f303 	lsl.w	r3, r1, r3
 8003884:	4313      	orrs	r3, r2
 8003886:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003888:	4313      	orrs	r3, r2
 800388a:	643b      	str	r3, [r7, #64]	; 0x40
                         tmpccmrx &= ~(TIM_CCMR1_CC1S<<((chanel-3)*8));
 800388c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003890:	3b03      	subs	r3, #3
 8003892:	00db      	lsls	r3, r3, #3
 8003894:	2203      	movs	r2, #3
 8003896:	fa02 f303 	lsl.w	r3, r2, r3
 800389a:	43db      	mvns	r3, r3
 800389c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800389e:	4013      	ands	r3, r2
 80038a0:	643b      	str	r3, [r7, #64]	; 0x40
                         tmpccmrx |= ICCMode_Cfg_local.ICSelection<<((chanel-3)*8);
 80038a2:	6a3a      	ldr	r2, [r7, #32]
 80038a4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80038a8:	3b03      	subs	r3, #3
 80038aa:	00db      	lsls	r3, r3, #3
 80038ac:	fa02 f303 	lsl.w	r3, r2, r3
 80038b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80038b2:	4313      	orrs	r3, r2
 80038b4:	643b      	str	r3, [r7, #64]	; 0x40
                         hw->CCMR2 = tmpccmrx;
 80038b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80038ba:	61da      	str	r2, [r3, #28]
                     }
                     tmpccer  &= ~(TIM_CCER_CC1P<<((chanel-1)*4));
 80038bc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80038c0:	3b01      	subs	r3, #1
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	2202      	movs	r2, #2
 80038c6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ca:	43db      	mvns	r3, r3
 80038cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038ce:	4013      	ands	r3, r2
 80038d0:	63fb      	str	r3, [r7, #60]	; 0x3c
                     tmpccer  |= (ICCMode_Cfg_local.ICPolarity<<((chanel-1)*4));
 80038d2:	69fa      	ldr	r2, [r7, #28]
 80038d4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80038d8:	3b01      	subs	r3, #1
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	fa02 f303 	lsl.w	r3, r2, r3
 80038e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038e2:	4313      	orrs	r3, r2
 80038e4:	63fb      	str	r3, [r7, #60]	; 0x3c
                     hw->CCER  = tmpccer;
 80038e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038ea:	621a      	str	r2, [r3, #32]
                     break;
 80038ec:	e052      	b.n	8003994 <Init_Timer+0x5cc>
                 case TRIGER_MODE :
                     /*cau hinh thanh ghi cho trigger  mode*/
                     /*get config*/
                     TRIGMode_Cfg_local= *(Timer_Cfg->Hw_Config[i].Chanel_Config[j].TRIGMode_Cfg);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6859      	ldr	r1, [r3, #4]
 80038f2:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 80038f6:	4613      	mov	r3, r2
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	4413      	add	r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	440b      	add	r3, r1
 8003900:	689a      	ldr	r2, [r3, #8]
 8003902:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8003906:	011b      	lsls	r3, r3, #4
 8003908:	4413      	add	r3, r2
 800390a:	68da      	ldr	r2, [r3, #12]
 800390c:	f107 0314 	add.w	r3, r7, #20
 8003910:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003914:	e883 0003 	stmia.w	r3, {r0, r1}
                     /*cau hinh compare_value */
                     switch(chanel)
 8003918:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800391c:	3b01      	subs	r3, #1
 800391e:	2b03      	cmp	r3, #3
 8003920:	d81a      	bhi.n	8003958 <Init_Timer+0x590>
 8003922:	a201      	add	r2, pc, #4	; (adr r2, 8003928 <Init_Timer+0x560>)
 8003924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003928:	08003939 	.word	0x08003939
 800392c:	08003941 	.word	0x08003941
 8003930:	08003949 	.word	0x08003949
 8003934:	08003951 	.word	0x08003951
                     {
                         case CHANNEL1_HW : hw->CCR1 = TRIGMode_Cfg_local.Compare_value;
 8003938:	697a      	ldr	r2, [r7, #20]
 800393a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800393c:	635a      	str	r2, [r3, #52]	; 0x34
                         break;
 800393e:	e00c      	b.n	800395a <Init_Timer+0x592>
                         case CHANNEL2_HW : hw->CCR2 = TRIGMode_Cfg_local.Compare_value;
 8003940:	697a      	ldr	r2, [r7, #20]
 8003942:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003944:	639a      	str	r2, [r3, #56]	; 0x38
                         break;      
 8003946:	e008      	b.n	800395a <Init_Timer+0x592>
                         case CHANNEL3_HW : hw->CCR3 = TRIGMode_Cfg_local.Compare_value;
 8003948:	697a      	ldr	r2, [r7, #20]
 800394a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800394c:	63da      	str	r2, [r3, #60]	; 0x3c
                         break;
 800394e:	e004      	b.n	800395a <Init_Timer+0x592>
                         case CHANNEL4_HW : hw->CCR4 = TRIGMode_Cfg_local.Compare_value;
 8003950:	697a      	ldr	r2, [r7, #20]
 8003952:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003954:	641a      	str	r2, [r3, #64]	; 0x40
                         break;
 8003956:	e000      	b.n	800395a <Init_Timer+0x592>
                         default :
                         break;
 8003958:	bf00      	nop
                     }
                     /*Enable source trigger dma*/
                     tmpdier = hw->DIER;
 800395a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	64bb      	str	r3, [r7, #72]	; 0x48
                     tmpdier &= ~(TIM_DIER_CC1DE<<(chanel+8));
 8003960:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003964:	3308      	adds	r3, #8
 8003966:	f44f 7200 	mov.w	r2, #512	; 0x200
 800396a:	fa02 f303 	lsl.w	r3, r2, r3
 800396e:	43db      	mvns	r3, r3
 8003970:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003972:	4013      	ands	r3, r2
 8003974:	64bb      	str	r3, [r7, #72]	; 0x48
                     tmpdier |= TIM_DIER_CC1DE<<(chanel+8);
 8003976:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800397a:	3308      	adds	r3, #8
 800397c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003980:	fa02 f303 	lsl.w	r3, r2, r3
 8003984:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003986:	4313      	orrs	r3, r2
 8003988:	64bb      	str	r3, [r7, #72]	; 0x48
                     hw->DIER =tmpdier;
 800398a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800398c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800398e:	60da      	str	r2, [r3, #12]
                     break;
 8003990:	e000      	b.n	8003994 <Init_Timer+0x5cc>
                 case DEFAULT_MODE : /*Do nothing*/                                     
                     break;
                 default :
                     break;
 8003992:	bf00      	nop
         for(uint8_t j = 0; j < Timer_Cfg->Hw_Config[i].Number_Chanel; j++)
 8003994:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8003998:	3301      	adds	r3, #1
 800399a:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6859      	ldr	r1, [r3, #4]
 80039a2:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 80039a6:	4613      	mov	r3, r2
 80039a8:	005b      	lsls	r3, r3, #1
 80039aa:	4413      	add	r3, r2
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	440b      	add	r3, r1
 80039b0:	785b      	ldrb	r3, [r3, #1]
 80039b2:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 80039b6:	429a      	cmp	r2, r3
 80039b8:	f4ff adbb 	bcc.w	8003532 <Init_Timer+0x16a>
             }                
         }
         /*Enable timer*/
         hw->CR1|=TIM_CR1_CEN;
 80039bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f043 0201 	orr.w	r2, r3, #1
 80039c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039c6:	601a      	str	r2, [r3, #0]
     for(uint8_t i = 0; i < Timer_Cfg->Number_HW; i++) 
 80039c8:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80039cc:	3301      	adds	r3, #1
 80039ce:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 80039da:	429a      	cmp	r2, r3
 80039dc:	f4ff acfe 	bcc.w	80033dc <Init_Timer+0x14>
     }
}
 80039e0:	bf00      	nop
 80039e2:	bf00      	nop
 80039e4:	375c      	adds	r7, #92	; 0x5c
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd90      	pop	{r4, r7, pc}
 80039ea:	bf00      	nop

080039ec <Tim_AddEvent>:
}



Std_ReturnType Tim_AddEvent(uint8_t tim_instance,void (*fun)())
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	4603      	mov	r3, r0
 80039f4:	6039      	str	r1, [r7, #0]
 80039f6:	71fb      	strb	r3, [r7, #7]
    static uint8_t count_event[TIM_MAX_HW] ;
    /*Add callback func*/
    EventInterrupt[tim_instance][count_event[tim_instance]] = fun;
 80039f8:	79fa      	ldrb	r2, [r7, #7]
 80039fa:	79fb      	ldrb	r3, [r7, #7]
 80039fc:	4913      	ldr	r1, [pc, #76]	; (8003a4c <Tim_AddEvent+0x60>)
 80039fe:	5ccb      	ldrb	r3, [r1, r3]
 8003a00:	4618      	mov	r0, r3
 8003a02:	4913      	ldr	r1, [pc, #76]	; (8003a50 <Tim_AddEvent+0x64>)
 8003a04:	4613      	mov	r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	4413      	add	r3, r2
 8003a0a:	4403      	add	r3, r0
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      if(++ count_event[tim_instance] >= Max_Event_Time[tim_instance])
 8003a12:	79fb      	ldrb	r3, [r7, #7]
 8003a14:	4a0d      	ldr	r2, [pc, #52]	; (8003a4c <Tim_AddEvent+0x60>)
 8003a16:	5cd2      	ldrb	r2, [r2, r3]
 8003a18:	3201      	adds	r2, #1
 8003a1a:	b2d1      	uxtb	r1, r2
 8003a1c:	4a0b      	ldr	r2, [pc, #44]	; (8003a4c <Tim_AddEvent+0x60>)
 8003a1e:	54d1      	strb	r1, [r2, r3]
 8003a20:	4a0a      	ldr	r2, [pc, #40]	; (8003a4c <Tim_AddEvent+0x60>)
 8003a22:	5cd2      	ldrb	r2, [r2, r3]
 8003a24:	79fb      	ldrb	r3, [r7, #7]
 8003a26:	490b      	ldr	r1, [pc, #44]	; (8003a54 <Tim_AddEvent+0x68>)
 8003a28:	5ccb      	ldrb	r3, [r1, r3]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d307      	bcc.n	8003a3e <Tim_AddEvent+0x52>
        {
            count_event[tim_instance] = Max_Event_Time[tim_instance];
 8003a2e:	79fa      	ldrb	r2, [r7, #7]
 8003a30:	79fb      	ldrb	r3, [r7, #7]
 8003a32:	4908      	ldr	r1, [pc, #32]	; (8003a54 <Tim_AddEvent+0x68>)
 8003a34:	5c89      	ldrb	r1, [r1, r2]
 8003a36:	4a05      	ldr	r2, [pc, #20]	; (8003a4c <Tim_AddEvent+0x60>)
 8003a38:	54d1      	strb	r1, [r2, r3]
            return E_NOT_OK;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e000      	b.n	8003a40 <Tim_AddEvent+0x54>
        }
        return E_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr
 8003a4c:	2000022c 	.word	0x2000022c
 8003a50:	200001c8 	.word	0x200001c8
 8003a54:	080066fc 	.word	0x080066fc

08003a58 <TIM2_IRQHandler>:
        EventInterrupt[TIMER_HW][i] = NULL;
    }
}

void TIM2_IRQHandler()
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
    /* Run call back func */
    for(uint8_t i = 0; i< Max_Event_Time[TIMER2_HW]; i++)
 8003a5e:	2300      	movs	r3, #0
 8003a60:	71fb      	strb	r3, [r7, #7]
 8003a62:	e00f      	b.n	8003a84 <TIM2_IRQHandler+0x2c>
    {
        if(EventInterrupt[TIMER2_HW][i]!=NULL)
 8003a64:	79fb      	ldrb	r3, [r7, #7]
 8003a66:	4a10      	ldr	r2, [pc, #64]	; (8003aa8 <TIM2_IRQHandler+0x50>)
 8003a68:	330a      	adds	r3, #10
 8003a6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d005      	beq.n	8003a7e <TIM2_IRQHandler+0x26>
        EventInterrupt[TIMER2_HW][i]();
 8003a72:	79fb      	ldrb	r3, [r7, #7]
 8003a74:	4a0c      	ldr	r2, [pc, #48]	; (8003aa8 <TIM2_IRQHandler+0x50>)
 8003a76:	330a      	adds	r3, #10
 8003a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a7c:	4798      	blx	r3
    for(uint8_t i = 0; i< Max_Event_Time[TIMER2_HW]; i++)
 8003a7e:	79fb      	ldrb	r3, [r7, #7]
 8003a80:	3301      	adds	r3, #1
 8003a82:	71fb      	strb	r3, [r7, #7]
 8003a84:	4b09      	ldr	r3, [pc, #36]	; (8003aac <TIM2_IRQHandler+0x54>)
 8003a86:	789b      	ldrb	r3, [r3, #2]
 8003a88:	79fa      	ldrb	r2, [r7, #7]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d3ea      	bcc.n	8003a64 <TIM2_IRQHandler+0xc>
    }
    TIM2->SR&=(~TIM_SR_UIF);
 8003a8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003a98:	f023 0301 	bic.w	r3, r3, #1
 8003a9c:	6113      	str	r3, [r2, #16]

}
 8003a9e:	bf00      	nop
 8003aa0:	3708      	adds	r7, #8
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	200001c8 	.word	0x200001c8
 8003aac:	080066fc 	.word	0x080066fc

08003ab0 <TIM3_IRQHandler>:

void TIM3_IRQHandler()
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
    /* Run call back func */
    for(uint8_t i = 0; i< Max_Event_Time[TIMER3_HW]; i++)
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	71fb      	strb	r3, [r7, #7]
 8003aba:	e00f      	b.n	8003adc <TIM3_IRQHandler+0x2c>
    {
        if(EventInterrupt[TIMER3_HW][i]!=NULL)
 8003abc:	79fb      	ldrb	r3, [r7, #7]
 8003abe:	4a0f      	ldr	r2, [pc, #60]	; (8003afc <TIM3_IRQHandler+0x4c>)
 8003ac0:	330f      	adds	r3, #15
 8003ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d005      	beq.n	8003ad6 <TIM3_IRQHandler+0x26>
        EventInterrupt[TIMER3_HW][i]();
 8003aca:	79fb      	ldrb	r3, [r7, #7]
 8003acc:	4a0b      	ldr	r2, [pc, #44]	; (8003afc <TIM3_IRQHandler+0x4c>)
 8003ace:	330f      	adds	r3, #15
 8003ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ad4:	4798      	blx	r3
    for(uint8_t i = 0; i< Max_Event_Time[TIMER3_HW]; i++)
 8003ad6:	79fb      	ldrb	r3, [r7, #7]
 8003ad8:	3301      	adds	r3, #1
 8003ada:	71fb      	strb	r3, [r7, #7]
 8003adc:	4b08      	ldr	r3, [pc, #32]	; (8003b00 <TIM3_IRQHandler+0x50>)
 8003ade:	78db      	ldrb	r3, [r3, #3]
 8003ae0:	79fa      	ldrb	r2, [r7, #7]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d3ea      	bcc.n	8003abc <TIM3_IRQHandler+0xc>
    }
    TIM3->SR&=(~TIM_SR_UIF);
 8003ae6:	4b07      	ldr	r3, [pc, #28]	; (8003b04 <TIM3_IRQHandler+0x54>)
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	4a06      	ldr	r2, [pc, #24]	; (8003b04 <TIM3_IRQHandler+0x54>)
 8003aec:	f023 0301 	bic.w	r3, r3, #1
 8003af0:	6113      	str	r3, [r2, #16]
}
 8003af2:	bf00      	nop
 8003af4:	3708      	adds	r7, #8
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	200001c8 	.word	0x200001c8
 8003b00:	080066fc 	.word	0x080066fc
 8003b04:	40000400 	.word	0x40000400

08003b08 <TIM4_IRQHandler>:

void TIM4_IRQHandler()
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
    /* Run call back func */
    for(uint8_t i = 0; i < Max_Event_Time[TIMER4_HW]; i++)
 8003b0e:	2300      	movs	r3, #0
 8003b10:	71fb      	strb	r3, [r7, #7]
 8003b12:	e00f      	b.n	8003b34 <TIM4_IRQHandler+0x2c>
    {
        if(EventInterrupt[TIMER4_HW][i]!=NULL)
 8003b14:	79fb      	ldrb	r3, [r7, #7]
 8003b16:	4a0c      	ldr	r2, [pc, #48]	; (8003b48 <TIM4_IRQHandler+0x40>)
 8003b18:	3314      	adds	r3, #20
 8003b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d005      	beq.n	8003b2e <TIM4_IRQHandler+0x26>
        EventInterrupt[TIMER4_HW][i]();
 8003b22:	79fb      	ldrb	r3, [r7, #7]
 8003b24:	4a08      	ldr	r2, [pc, #32]	; (8003b48 <TIM4_IRQHandler+0x40>)
 8003b26:	3314      	adds	r3, #20
 8003b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b2c:	4798      	blx	r3
    for(uint8_t i = 0; i < Max_Event_Time[TIMER4_HW]; i++)
 8003b2e:	79fb      	ldrb	r3, [r7, #7]
 8003b30:	3301      	adds	r3, #1
 8003b32:	71fb      	strb	r3, [r7, #7]
 8003b34:	4b05      	ldr	r3, [pc, #20]	; (8003b4c <TIM4_IRQHandler+0x44>)
 8003b36:	791b      	ldrb	r3, [r3, #4]
 8003b38:	79fa      	ldrb	r2, [r7, #7]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d3ea      	bcc.n	8003b14 <TIM4_IRQHandler+0xc>
    }
   // TIM4->SR&=(~TIM_SR_UIF);
}
 8003b3e:	bf00      	nop
 8003b40:	bf00      	nop
 8003b42:	3708      	adds	r7, #8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	200001c8 	.word	0x200001c8
 8003b4c:	080066fc 	.word	0x080066fc

08003b50 <User_Uart_Init>:
#include "./protocol/slip/User_Slip.h"

static User_Uart_ConfigType *UartConfigPtr = NULL;

void User_Uart_Init(User_Uart_ConfigType *UartConfig)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b08c      	sub	sp, #48	; 0x30
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
    uint8_t u8ChannelCount;
    User_Uart_HWConfigType  HWConfig;


    __HAL_RCC_USART1_CLK_ENABLE();
 8003b58:	2300      	movs	r3, #0
 8003b5a:	61bb      	str	r3, [r7, #24]
 8003b5c:	4b49      	ldr	r3, [pc, #292]	; (8003c84 <User_Uart_Init+0x134>)
 8003b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b60:	4a48      	ldr	r2, [pc, #288]	; (8003c84 <User_Uart_Init+0x134>)
 8003b62:	f043 0310 	orr.w	r3, r3, #16
 8003b66:	6453      	str	r3, [r2, #68]	; 0x44
 8003b68:	4b46      	ldr	r3, [pc, #280]	; (8003c84 <User_Uart_Init+0x134>)
 8003b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b6c:	f003 0310 	and.w	r3, r3, #16
 8003b70:	61bb      	str	r3, [r7, #24]
 8003b72:	69bb      	ldr	r3, [r7, #24]
    //__HAL_RCC_USART2_CLK_ENABLE();
    __HAL_RCC_USART3_CLK_ENABLE();
 8003b74:	2300      	movs	r3, #0
 8003b76:	617b      	str	r3, [r7, #20]
 8003b78:	4b42      	ldr	r3, [pc, #264]	; (8003c84 <User_Uart_Init+0x134>)
 8003b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7c:	4a41      	ldr	r2, [pc, #260]	; (8003c84 <User_Uart_Init+0x134>)
 8003b7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b82:	6413      	str	r3, [r2, #64]	; 0x40
 8003b84:	4b3f      	ldr	r3, [pc, #252]	; (8003c84 <User_Uart_Init+0x134>)
 8003b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b8c:	617b      	str	r3, [r7, #20]
 8003b8e:	697b      	ldr	r3, [r7, #20]
    //__HAL_RCC_USART6_CLK_ENABLE();
    __HAL_RCC_UART4_CLK_ENABLE();
 8003b90:	2300      	movs	r3, #0
 8003b92:	613b      	str	r3, [r7, #16]
 8003b94:	4b3b      	ldr	r3, [pc, #236]	; (8003c84 <User_Uart_Init+0x134>)
 8003b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b98:	4a3a      	ldr	r2, [pc, #232]	; (8003c84 <User_Uart_Init+0x134>)
 8003b9a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b9e:	6413      	str	r3, [r2, #64]	; 0x40
 8003ba0:	4b38      	ldr	r3, [pc, #224]	; (8003c84 <User_Uart_Init+0x134>)
 8003ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ba8:	613b      	str	r3, [r7, #16]
 8003baa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_UART5_CLK_ENABLE();
 8003bac:	2300      	movs	r3, #0
 8003bae:	60fb      	str	r3, [r7, #12]
 8003bb0:	4b34      	ldr	r3, [pc, #208]	; (8003c84 <User_Uart_Init+0x134>)
 8003bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb4:	4a33      	ldr	r2, [pc, #204]	; (8003c84 <User_Uart_Init+0x134>)
 8003bb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bba:	6413      	str	r3, [r2, #64]	; 0x40
 8003bbc:	4b31      	ldr	r3, [pc, #196]	; (8003c84 <User_Uart_Init+0x134>)
 8003bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bc4:	60fb      	str	r3, [r7, #12]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
    //__HAL_RCC_UART7_CLK_ENABLE();
    //__HAL_RCC_UART8_CLK_ENABLE();

    UartConfigPtr = UartConfig;
 8003bc8:	4a2f      	ldr	r2, [pc, #188]	; (8003c88 <User_Uart_Init+0x138>)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6013      	str	r3, [r2, #0]

    for(u8ChannelCount = 0u; u8ChannelCount < UartConfigPtr->numberChannel; u8ChannelCount++)
 8003bce:	2300      	movs	r3, #0
 8003bd0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003bd4:	e04a      	b.n	8003c6c <User_Uart_Init+0x11c>
    {
    	HWConfig.ParityMode = UartConfigPtr->ChannelConfig[u8ChannelCount].ParityMode;
 8003bd6:	4b2c      	ldr	r3, [pc, #176]	; (8003c88 <User_Uart_Init+0x138>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	685a      	ldr	r2, [r3, #4]
 8003bdc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003be0:	011b      	lsls	r3, r3, #4
 8003be2:	4413      	add	r3, r2
 8003be4:	7b1b      	ldrb	r3, [r3, #12]
 8003be6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    	HWConfig.StopBitCount = UartConfigPtr->ChannelConfig[u8ChannelCount].StopBitCount;
 8003bea:	4b27      	ldr	r3, [pc, #156]	; (8003c88 <User_Uart_Init+0x138>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003bf4:	011b      	lsls	r3, r3, #4
 8003bf6:	4413      	add	r3, r2
 8003bf8:	7b5b      	ldrb	r3, [r3, #13]
 8003bfa:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    	HWConfig.u32SourceClock = UartConfigPtr->ChannelConfig[u8ChannelCount].u32SourceClock;
 8003bfe:	4b22      	ldr	r3, [pc, #136]	; (8003c88 <User_Uart_Init+0x138>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	685a      	ldr	r2, [r3, #4]
 8003c04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003c08:	011b      	lsls	r3, r3, #4
 8003c0a:	4413      	add	r3, r2
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	623b      	str	r3, [r7, #32]
    	HWConfig.u32Baudrate = UartConfigPtr->ChannelConfig[u8ChannelCount].u32Baudrate;
 8003c10:	4b1d      	ldr	r3, [pc, #116]	; (8003c88 <User_Uart_Init+0x138>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	685a      	ldr	r2, [r3, #4]
 8003c16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003c1a:	011b      	lsls	r3, r3, #4
 8003c1c:	4413      	add	r3, r2
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	627b      	str	r3, [r7, #36]	; 0x24
    	HWConfig.SlipStatus = UartConfigPtr->ChannelConfig[u8ChannelCount].SlipStatus;
 8003c22:	4b19      	ldr	r3, [pc, #100]	; (8003c88 <User_Uart_Init+0x138>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	685a      	ldr	r2, [r3, #4]
 8003c28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003c2c:	011b      	lsls	r3, r3, #4
 8003c2e:	4413      	add	r3, r2
 8003c30:	7b9b      	ldrb	r3, [r3, #14]
 8003c32:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    	HWConfig.u8HwChannelID = UartConfigPtr->ChannelConfig[u8ChannelCount].u8HwChannelID;
 8003c36:	4b14      	ldr	r3, [pc, #80]	; (8003c88 <User_Uart_Init+0x138>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	685a      	ldr	r2, [r3, #4]
 8003c3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003c40:	011b      	lsls	r3, r3, #4
 8003c42:	4413      	add	r3, r2
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	773b      	strb	r3, [r7, #28]
		if(HWConfig.SlipStatus == USER_UART_SLIP_ENABLE)
 8003c48:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d103      	bne.n	8003c58 <User_Uart_Init+0x108>
		{
        	User_Slip_Init(HWConfig.u8HwChannelID);
 8003c50:	7f3b      	ldrb	r3, [r7, #28]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f000 feb0 	bl	80049b8 <User_Slip_Init>
		}
        User_Uart_Ipw_Init(&HWConfig);
 8003c58:	f107 031c 	add.w	r3, r7, #28
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f000 f867 	bl	8003d30 <User_Uart_Ipw_Init>
    for(u8ChannelCount = 0u; u8ChannelCount < UartConfigPtr->numberChannel; u8ChannelCount++)
 8003c62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003c66:	3301      	adds	r3, #1
 8003c68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003c6c:	4b06      	ldr	r3, [pc, #24]	; (8003c88 <User_Uart_Init+0x138>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d3ad      	bcc.n	8003bd6 <User_Uart_Init+0x86>
    }
}
 8003c7a:	bf00      	nop
 8003c7c:	bf00      	nop
 8003c7e:	3730      	adds	r7, #48	; 0x30
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	40023800 	.word	0x40023800
 8003c88:	20000234 	.word	0x20000234

08003c8c <User_Uart_AsyncTransmit>:

Std_ReturnType User_Uart_AsyncTransmit(uint8_t u8ChannelId, uint8_t *DataPtr, uint16_t DataLen)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	4603      	mov	r3, r0
 8003c94:	6039      	str	r1, [r7, #0]
 8003c96:	71fb      	strb	r3, [r7, #7]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	80bb      	strh	r3, [r7, #4]
	uint8_t u8count;
	uint8_t ChannelID = 0xFFu;
 8003c9c:	23ff      	movs	r3, #255	; 0xff
 8003c9e:	73bb      	strb	r3, [r7, #14]
	Std_ReturnType ret = E_NOT_OK;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	737b      	strb	r3, [r7, #13]

	if(UartConfigPtr == NULL)
 8003ca4:	4b21      	ldr	r3, [pc, #132]	; (8003d2c <User_Uart_AsyncTransmit+0xa0>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d101      	bne.n	8003cb0 <User_Uart_AsyncTransmit+0x24>
	{
		return E_NOT_OK;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e039      	b.n	8003d24 <User_Uart_AsyncTransmit+0x98>
	}

	for(u8count = 0;u8count < UartConfigPtr->numberChannel;u8count++)
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	73fb      	strb	r3, [r7, #15]
 8003cb4:	e00f      	b.n	8003cd6 <User_Uart_AsyncTransmit+0x4a>
	{
		if(UartConfigPtr->ChannelConfig[u8count].u8HwChannelID == u8ChannelId)
 8003cb6:	4b1d      	ldr	r3, [pc, #116]	; (8003d2c <User_Uart_AsyncTransmit+0xa0>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	685a      	ldr	r2, [r3, #4]
 8003cbc:	7bfb      	ldrb	r3, [r7, #15]
 8003cbe:	011b      	lsls	r3, r3, #4
 8003cc0:	4413      	add	r3, r2
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	79fa      	ldrb	r2, [r7, #7]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d102      	bne.n	8003cd0 <User_Uart_AsyncTransmit+0x44>
		{
			ChannelID = u8count;
 8003cca:	7bfb      	ldrb	r3, [r7, #15]
 8003ccc:	73bb      	strb	r3, [r7, #14]
			break;
 8003cce:	e008      	b.n	8003ce2 <User_Uart_AsyncTransmit+0x56>
	for(u8count = 0;u8count < UartConfigPtr->numberChannel;u8count++)
 8003cd0:	7bfb      	ldrb	r3, [r7, #15]
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	73fb      	strb	r3, [r7, #15]
 8003cd6:	4b15      	ldr	r3, [pc, #84]	; (8003d2c <User_Uart_AsyncTransmit+0xa0>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	7bfa      	ldrb	r2, [r7, #15]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d3e9      	bcc.n	8003cb6 <User_Uart_AsyncTransmit+0x2a>
		}
	}

	if(ChannelID == 0xFF)
 8003ce2:	7bbb      	ldrb	r3, [r7, #14]
 8003ce4:	2bff      	cmp	r3, #255	; 0xff
 8003ce6:	d101      	bne.n	8003cec <User_Uart_AsyncTransmit+0x60>
	{
		return E_NOT_OK;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e01b      	b.n	8003d24 <User_Uart_AsyncTransmit+0x98>
	}

	if(UartConfigPtr->ChannelConfig[ChannelID].SlipStatus == USER_UART_SLIP_ENABLE)
 8003cec:	4b0f      	ldr	r3, [pc, #60]	; (8003d2c <User_Uart_AsyncTransmit+0xa0>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	685a      	ldr	r2, [r3, #4]
 8003cf2:	7bbb      	ldrb	r3, [r7, #14]
 8003cf4:	011b      	lsls	r3, r3, #4
 8003cf6:	4413      	add	r3, r2
 8003cf8:	7b9b      	ldrb	r3, [r3, #14]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d108      	bne.n	8003d10 <User_Uart_AsyncTransmit+0x84>
	{
		ret = User_Slip_SendFrame(u8ChannelId,DataPtr,DataLen);
 8003cfe:	88ba      	ldrh	r2, [r7, #4]
 8003d00:	79fb      	ldrb	r3, [r7, #7]
 8003d02:	6839      	ldr	r1, [r7, #0]
 8003d04:	4618      	mov	r0, r3
 8003d06:	f000 fe89 	bl	8004a1c <User_Slip_SendFrame>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	737b      	strb	r3, [r7, #13]
 8003d0e:	e008      	b.n	8003d22 <User_Uart_AsyncTransmit+0x96>
	}
	else
	{
		ret = User_Uart_Ipw_AsyncTransmit(u8ChannelId,DataPtr,DataLen);
 8003d10:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003d14:	79fb      	ldrb	r3, [r7, #7]
 8003d16:	6839      	ldr	r1, [r7, #0]
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f000 f82c 	bl	8003d76 <User_Uart_Ipw_AsyncTransmit>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	737b      	strb	r3, [r7, #13]
	}
    return ret;
 8003d22:	7b7b      	ldrb	r3, [r7, #13]
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	20000234 	.word	0x20000234

08003d30 <User_Uart_Ipw_Init>:
#include "User_Uart_Ipw.h"

void User_Uart_Ipw_Init(User_Uart_HWConfigType *HwConfig)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
	if(HwConfig->u8HwChannelID < 3U)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d916      	bls.n	8003d6e <User_Uart_Ipw_Init+0x3e>
	{
		//User_Ip_LPuart_Init(HwConfig);
	}
	else if(HwConfig->u8HwChannelID < 9U)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	2b08      	cmp	r3, #8
 8003d46:	d809      	bhi.n	8003d5c <User_Uart_Ipw_Init+0x2c>
	{
		HwConfig->u8HwChannelID = HwConfig->u8HwChannelID - 3U;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	3b03      	subs	r3, #3
 8003d4e:	b2da      	uxtb	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	701a      	strb	r2, [r3, #0]
		User_Ip_Usart_Init(HwConfig);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 fbfd 	bl	8004554 <User_Ip_Usart_Init>
	else
	{
		HwConfig->u8HwChannelID = HwConfig->u8HwChannelID - 10U;
		User_Ip_Uart_Init(HwConfig);
	}
}
 8003d5a:	e008      	b.n	8003d6e <User_Uart_Ipw_Init+0x3e>
		HwConfig->u8HwChannelID = HwConfig->u8HwChannelID - 10U;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	3b0a      	subs	r3, #10
 8003d62:	b2da      	uxtb	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	701a      	strb	r2, [r3, #0]
		User_Ip_Uart_Init(HwConfig);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 f909 	bl	8003f80 <User_Ip_Uart_Init>
}
 8003d6e:	bf00      	nop
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <User_Uart_Ipw_AsyncTransmit>:

Std_ReturnType User_Uart_Ipw_AsyncTransmit(uint8_t u8ChannelId, const uint8_t *u8DataPtr, int16_t u16DataLen)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b084      	sub	sp, #16
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	6039      	str	r1, [r7, #0]
 8003d80:	71fb      	strb	r3, [r7, #7]
 8003d82:	4613      	mov	r3, r2
 8003d84:	80bb      	strh	r3, [r7, #4]
	Std_ReturnType ret = E_NOT_OK;
 8003d86:	2301      	movs	r3, #1
 8003d88:	73fb      	strb	r3, [r7, #15]
	uint8_t channelID = u8ChannelId;
 8003d8a:	79fb      	ldrb	r3, [r7, #7]
 8003d8c:	73bb      	strb	r3, [r7, #14]

	if(channelID < 3U)
 8003d8e:	7bbb      	ldrb	r3, [r7, #14]
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d91b      	bls.n	8003dcc <User_Uart_Ipw_AsyncTransmit+0x56>
	{
		//ret = User_Ip_LPuart_WriteBuffer(channelID,u8DataPtr,u16DataLen);
	}
	else if(channelID < 9U)
 8003d94:	7bbb      	ldrb	r3, [r7, #14]
 8003d96:	2b08      	cmp	r3, #8
 8003d98:	d80c      	bhi.n	8003db4 <User_Uart_Ipw_AsyncTransmit+0x3e>
	{
		channelID = channelID - 3u;
 8003d9a:	7bbb      	ldrb	r3, [r7, #14]
 8003d9c:	3b03      	subs	r3, #3
 8003d9e:	73bb      	strb	r3, [r7, #14]
		ret = User_Ip_Usart_WriteBuffer(channelID,u8DataPtr,u16DataLen);
 8003da0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003da4:	7bbb      	ldrb	r3, [r7, #14]
 8003da6:	6839      	ldr	r1, [r7, #0]
 8003da8:	4618      	mov	r0, r3
 8003daa:	f000 fcb3 	bl	8004714 <User_Ip_Usart_WriteBuffer>
 8003dae:	4603      	mov	r3, r0
 8003db0:	73fb      	strb	r3, [r7, #15]
 8003db2:	e00b      	b.n	8003dcc <User_Uart_Ipw_AsyncTransmit+0x56>
	}
	else
	{
		channelID = channelID - 10u;
 8003db4:	7bbb      	ldrb	r3, [r7, #14]
 8003db6:	3b0a      	subs	r3, #10
 8003db8:	73bb      	strb	r3, [r7, #14]
		ret = User_Ip_Uart_WriteBuffer(channelID,u8DataPtr,u16DataLen);
 8003dba:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003dbe:	7bbb      	ldrb	r3, [r7, #14]
 8003dc0:	6839      	ldr	r1, [r7, #0]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f000 f9b2 	bl	800412c <User_Ip_Uart_WriteBuffer>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8003dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3710      	adds	r7, #16
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
	...

08003dd8 <User_Ip_Uart_SetBaudrate>:

static inline void User_Ip_Uart_PutChar(User_Ip_Uart_Type * Uart_channel, uint8_t u8Data);
static inline void User_Ip_Uart_TransmitBuffer(uint8_t u8ChannelId);

static Std_ReturnType User_Ip_Uart_SetBaudrate(User_Ip_Uart_Type *HwChannel, uint32_t UartSourceClock, uint32_t baudrate)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b089      	sub	sp, #36	; 0x24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	607a      	str	r2, [r7, #4]
	/* Check Source Clock */
	uint32_t BaudrateDiv = 0;
 8003de4:	2300      	movs	r3, #0
 8003de6:	61bb      	str	r3, [r7, #24]
	uint8_t  Value = 0;
 8003de8:	2300      	movs	r3, #0
 8003dea:	77fb      	strb	r3, [r7, #31]
	uint32_t  UartDiv_Mant = 0;
 8003dec:	2300      	movs	r3, #0
 8003dee:	617b      	str	r3, [r7, #20]
	uint32_t  UartDiv_Frac = 0;
 8003df0:	2300      	movs	r3, #0
 8003df2:	613b      	str	r3, [r7, #16]

	Value = (HwChannel->CR1 & USER_IP_USART_CR1_OVER8_MASK) >> USER_IP_USART_CR1_OVER8_SHIFT;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	0bdb      	lsrs	r3, r3, #15
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	f003 0301 	and.w	r3, r3, #1
 8003e00:	77fb      	strb	r3, [r7, #31]
    Value = 2 - Value;
 8003e02:	7ffb      	ldrb	r3, [r7, #31]
 8003e04:	f1c3 0302 	rsb	r3, r3, #2
 8003e08:	77fb      	strb	r3, [r7, #31]

	BaudrateDiv = UartSourceClock / (baudrate/100);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a23      	ldr	r2, [pc, #140]	; (8003e9c <User_Ip_Uart_SetBaudrate+0xc4>)
 8003e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e12:	095b      	lsrs	r3, r3, #5
 8003e14:	68ba      	ldr	r2, [r7, #8]
 8003e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e1a:	61bb      	str	r3, [r7, #24]
	BaudrateDiv = BaudrateDiv / (8 * Value);
 8003e1c:	7ffb      	ldrb	r3, [r7, #31]
 8003e1e:	00db      	lsls	r3, r3, #3
 8003e20:	461a      	mov	r2, r3
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e28:	61bb      	str	r3, [r7, #24]

    UartDiv_Mant  = BaudrateDiv /100;
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	4a1b      	ldr	r2, [pc, #108]	; (8003e9c <User_Ip_Uart_SetBaudrate+0xc4>)
 8003e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e32:	095b      	lsrs	r3, r3, #5
 8003e34:	617b      	str	r3, [r7, #20]
	UartDiv_Frac  = BaudrateDiv - 100 * UartDiv_Mant;
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	2264      	movs	r2, #100	; 0x64
 8003e3a:	fb02 f303 	mul.w	r3, r2, r3
 8003e3e:	69ba      	ldr	r2, [r7, #24]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	613b      	str	r3, [r7, #16]

	Value  = (UartDiv_Frac * 16)/100;
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	011b      	lsls	r3, r3, #4
 8003e48:	4a14      	ldr	r2, [pc, #80]	; (8003e9c <User_Ip_Uart_SetBaudrate+0xc4>)
 8003e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e4e:	095b      	lsrs	r3, r3, #5
 8003e50:	77fb      	strb	r3, [r7, #31]

	if((UartDiv_Frac * 16)%100 >= 50)
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	011a      	lsls	r2, r3, #4
 8003e56:	4b11      	ldr	r3, [pc, #68]	; (8003e9c <User_Ip_Uart_SetBaudrate+0xc4>)
 8003e58:	fba3 1302 	umull	r1, r3, r3, r2
 8003e5c:	095b      	lsrs	r3, r3, #5
 8003e5e:	2164      	movs	r1, #100	; 0x64
 8003e60:	fb01 f303 	mul.w	r3, r1, r3
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b31      	cmp	r3, #49	; 0x31
 8003e68:	d902      	bls.n	8003e70 <User_Ip_Uart_SetBaudrate+0x98>
	{
		Value = Value + 1;
 8003e6a:	7ffb      	ldrb	r3, [r7, #31]
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	77fb      	strb	r3, [r7, #31]
	}
    UartDiv_Frac = Value;
 8003e70:	7ffb      	ldrb	r3, [r7, #31]
 8003e72:	613b      	str	r3, [r7, #16]

	HwChannel->BRR = (UartDiv_Mant << USER_IP_USART_BRR_MANT_SHIFT) & USER_IP_USART_BRR_MANT_MASK;
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	011b      	lsls	r3, r3, #4
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	609a      	str	r2, [r3, #8]
	HwChannel->BRR |= (Value << USER_IP_USART_BRR_FRAC_SHIFT) & USER_IP_USART_BRR_FRAC_MASK;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	689a      	ldr	r2, [r3, #8]
 8003e82:	7ffb      	ldrb	r3, [r7, #31]
 8003e84:	f003 030f 	and.w	r3, r3, #15
 8003e88:	431a      	orrs	r2, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	609a      	str	r2, [r3, #8]

	return E_OK;
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3724      	adds	r7, #36	; 0x24
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr
 8003e9c:	51eb851f 	.word	0x51eb851f

08003ea0 <User_Ip_Uart_SetParityMode>:

static void User_Ip_Uart_SetParityMode(User_Ip_Uart_Type *HwChannel, User_Uart_ParityMode_t parityMode)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b085      	sub	sp, #20
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	70fb      	strb	r3, [r7, #3]
	uint8_t u8ParityMode = 0u;
 8003eac:	2300      	movs	r3, #0
 8003eae:	73fb      	strb	r3, [r7, #15]
	if(parityMode == USER_UART_PARITY_NONE)
 8003eb0:	78fb      	ldrb	r3, [r7, #3]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d106      	bne.n	8003ec4 <User_Ip_Uart_SetParityMode+0x24>
	{
		HwChannel->CR1 &= ~USER_IP_UART_CR1_PCE_MASK;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	60da      	str	r2, [r3, #12]
		u8ParityMode = parityMode - 1u;
		HwChannel->CR1 &= ~USER_IP_UART_CR1_PS_MASK;
		HwChannel->CR1 |= (u8ParityMode << USER_IP_UART_CR1_PS_SHIFT) & USER_IP_UART_CR1_PS_MASK;
		HwChannel->CR1 |= USER_IP_UART_CR1_PCE_MASK;
	}
}
 8003ec2:	e017      	b.n	8003ef4 <User_Ip_Uart_SetParityMode+0x54>
		u8ParityMode = parityMode - 1u;
 8003ec4:	78fb      	ldrb	r3, [r7, #3]
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	73fb      	strb	r3, [r7, #15]
		HwChannel->CR1 &= ~USER_IP_UART_CR1_PS_MASK;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	60da      	str	r2, [r3, #12]
		HwChannel->CR1 |= (u8ParityMode << USER_IP_UART_CR1_PS_SHIFT) & USER_IP_UART_CR1_PS_MASK;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	68da      	ldr	r2, [r3, #12]
 8003eda:	7bfb      	ldrb	r3, [r7, #15]
 8003edc:	025b      	lsls	r3, r3, #9
 8003ede:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	60da      	str	r2, [r3, #12]
		HwChannel->CR1 |= USER_IP_UART_CR1_PCE_MASK;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	60da      	str	r2, [r3, #12]
}
 8003ef4:	bf00      	nop
 8003ef6:	3714      	adds	r7, #20
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <User_Ip_Uart_SetStopBitCount>:

static void User_Ip_Uart_SetStopBitCount(User_Ip_Uart_Type *HwChannel, User_Uart_StopBitCount_t stopBitCount)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	460b      	mov	r3, r1
 8003f0a:	70fb      	strb	r3, [r7, #3]
	HwChannel->CR2 &= ~USER_IP_UART_CR2_STOP_MASK;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	611a      	str	r2, [r3, #16]
	HwChannel->CR2 |= (stopBitCount << USER_IP_UART_CR2_STOP_SHIFT) & USER_IP_UART_CR2_STOP_MASK;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	691a      	ldr	r2, [r3, #16]
 8003f1c:	78fb      	ldrb	r3, [r7, #3]
 8003f1e:	031b      	lsls	r3, r3, #12
 8003f20:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003f24:	431a      	orrs	r2, r3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	611a      	str	r2, [r3, #16]
}
 8003f2a:	bf00      	nop
 8003f2c:	370c      	adds	r7, #12
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
	...

08003f38 <User_Ip_Uart_DeInit>:

void User_Ip_Uart_DeInit(User_Ip_Uart_Type *HwChannel)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]

	User_Ip_Uart_RingBuffer_t *BufferChannel;

	HwChannel->CR1 = USER_IP_UART_RESET_VALUE;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	60da      	str	r2, [r3, #12]
	HwChannel->CR2 = USER_IP_UART_RESET_VALUE;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	611a      	str	r2, [r3, #16]
	HwChannel->CR3 = USER_IP_UART_RESET_VALUE;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	615a      	str	r2, [r3, #20]
	HwChannel->BRR = USER_IP_UART_RESET_VALUE;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	609a      	str	r2, [r3, #8]



	BufferChannel = &Buffer_Uart4Channel;
 8003f58:	4b08      	ldr	r3, [pc, #32]	; (8003f7c <User_Ip_Uart_DeInit+0x44>)
 8003f5a:	60fb      	str	r3, [r7, #12]

	BufferChannel->TxHead = 0u;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	815a      	strh	r2, [r3, #10]
	BufferChannel->TxTail = 0u;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	811a      	strh	r2, [r3, #8]
	BufferChannel->Status = UART_BUFFER_UNLOCK;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	741a      	strb	r2, [r3, #16]
}
 8003f6e:	bf00      	nop
 8003f70:	3714      	adds	r7, #20
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	20000238 	.word	0x20000238

08003f80 <User_Ip_Uart_Init>:

void User_Ip_Uart_Init(User_Uart_HWConfigType *HwConfig)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b086      	sub	sp, #24
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
	uint8_t u8ChannelId = HwConfig->u8HwChannelID;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	75fb      	strb	r3, [r7, #23]
	User_Ip_Uart_Type *Uart = User_Ip_Uart_BaseAddress[u8ChannelId];
 8003f8e:	7dfb      	ldrb	r3, [r7, #23]
 8003f90:	4a2f      	ldr	r2, [pc, #188]	; (8004050 <User_Ip_Uart_Init+0xd0>)
 8003f92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f96:	613b      	str	r3, [r7, #16]
	
	User_Ip_Uart_DeInit(Uart);
 8003f98:	6938      	ldr	r0, [r7, #16]
 8003f9a:	f7ff ffcd 	bl	8003f38 <User_Ip_Uart_DeInit>
	Uart->CR1 &= ~USER_IP_UART_CR1_TE_MASK;
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	f023 0208 	bic.w	r2, r3, #8
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	60da      	str	r2, [r3, #12]
	Uart->CR1 &= ~USER_IP_UART_CR1_RE_MASK;
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	f023 0204 	bic.w	r2, r3, #4
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	60da      	str	r2, [r3, #12]

	User_Ip_Uart_SetBaudrate (
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6859      	ldr	r1, [r3, #4]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	6938      	ldr	r0, [r7, #16]
 8003fc2:	f7ff ff09 	bl	8003dd8 <User_Ip_Uart_SetBaudrate>
								   Uart,
								   HwConfig->u32SourceClock,
								   HwConfig->u32Baudrate
	                           );

	User_Ip_Uart_SetParityMode (
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	7b1b      	ldrb	r3, [r3, #12]
 8003fca:	4619      	mov	r1, r3
 8003fcc:	6938      	ldr	r0, [r7, #16]
 8003fce:	f7ff ff67 	bl	8003ea0 <User_Ip_Uart_SetParityMode>
									Uart,
									HwConfig->ParityMode
			                     );

	User_Ip_Uart_SetStopBitCount (
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	7b5b      	ldrb	r3, [r3, #13]
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	6938      	ldr	r0, [r7, #16]
 8003fda:	f7ff ff91 	bl	8003f00 <User_Ip_Uart_SetStopBitCount>
									  Uart,
									  HwConfig->StopBitCount
			                       );
	User_Ip_Uart_RingBuffer_t *BufferChannel;
	BufferChannel = User_Ip_Uart_GetBuffer(u8ChannelId);
 8003fde:	7dfb      	ldrb	r3, [r7, #23]
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f000 f875 	bl	80040d0 <User_Ip_Uart_GetBuffer>
 8003fe6:	60f8      	str	r0, [r7, #12]
	BufferChannel->RingTxBufferChannel = (uint8_t *)calloc(USER_IP_UART_SIZE_RINGBUFF,sizeof(uint8_t));
 8003fe8:	2101      	movs	r1, #1
 8003fea:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003fee:	f002 f86f 	bl	80060d0 <calloc>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	601a      	str	r2, [r3, #0]
	BufferChannel->RingRxBufferChannel = (uint8_t *)calloc(USER_IP_UART_SIZE_RINGBUFF,sizeof(uint8_t));
 8003ffa:	2101      	movs	r1, #1
 8003ffc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004000:	f002 f866 	bl	80060d0 <calloc>
 8004004:	4603      	mov	r3, r0
 8004006:	461a      	mov	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	605a      	str	r2, [r3, #4]
	



	Uart->CR3 |= (
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	695b      	ldr	r3, [r3, #20]
 8004010:	f043 0201 	orr.w	r2, r3, #1
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	615a      	str	r2, [r3, #20]
						 USER_IP_UART_CR3_EIE_MASK
					);

	Uart->CR1 |= (
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004020:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 8004024:	693a      	ldr	r2, [r7, #16]
 8004026:	60d3      	str	r3, [r2, #12]
						 USER_IP_UART_CR1_RE_MASK |
						 USER_IP_UART_CR1_UE_MASK
					  );

	/* Enable Interrupt*/
	HAL_NVIC_EnableIRQ(User_Uart_IRQn[u8ChannelId]);
 8004028:	7dfb      	ldrb	r3, [r7, #23]
 800402a:	4a0a      	ldr	r2, [pc, #40]	; (8004054 <User_Ip_Uart_Init+0xd4>)
 800402c:	5cd3      	ldrb	r3, [r2, r3]
 800402e:	b25b      	sxtb	r3, r3
 8004030:	4618      	mov	r0, r3
 8004032:	f000 ff04 	bl	8004e3e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(User_Uart_IRQn[u8ChannelId],USER_IP_UART_PRIORITY,0u);
 8004036:	7dfb      	ldrb	r3, [r7, #23]
 8004038:	4a06      	ldr	r2, [pc, #24]	; (8004054 <User_Ip_Uart_Init+0xd4>)
 800403a:	5cd3      	ldrb	r3, [r2, r3]
 800403c:	b25b      	sxtb	r3, r3
 800403e:	2200      	movs	r2, #0
 8004040:	2101      	movs	r1, #1
 8004042:	4618      	mov	r0, r3
 8004044:	f000 fedf 	bl	8004e06 <HAL_NVIC_SetPriority>

}
 8004048:	bf00      	nop
 800404a:	3718      	adds	r7, #24
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	08006714 	.word	0x08006714
 8004054:	20000104 	.word	0x20000104

08004058 <User_Ip_Uart_GetChar>:

static inline uint8_t User_Ip_Uart_GetChar(User_Ip_Uart_Type * Uart_channel)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
	return (Uart_channel->DR);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	b2db      	uxtb	r3, r3
}
 8004066:	4618      	mov	r0, r3
 8004068:	370c      	adds	r7, #12
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr

08004072 <User_Ip_Uart_PutChar>:

static inline void User_Ip_Uart_PutChar(User_Ip_Uart_Type *Uart_channel, uint8_t u8Data)
{
 8004072:	b480      	push	{r7}
 8004074:	b083      	sub	sp, #12
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
 800407a:	460b      	mov	r3, r1
 800407c:	70fb      	strb	r3, [r7, #3]
	Uart_channel->DR = u8Data;
 800407e:	78fa      	ldrb	r2, [r7, #3]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	605a      	str	r2, [r3, #4]
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <User_Ip_Uart_StartAsyncTransmit>:

void User_Ip_Uart_StartAsyncTransmit(User_Ip_Uart_Type *Uart_channel)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
	Uart_channel->CR1 |= USER_IP_UART_CR1_TXEIE_MASK;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	60da      	str	r2, [r3, #12]
}
 80040a4:	bf00      	nop
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <User_Ip_Uart_StopAsyncTransmit>:

static inline void User_Ip_Uart_StopAsyncTransmit(User_Ip_Uart_Type *Uart_channel)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
	Uart_channel->CR1 &= ~USER_IP_UART_CR1_TXEIE_MASK;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	60da      	str	r2, [r3, #12]
}
 80040c4:	bf00      	nop
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <User_Ip_Uart_GetBuffer>:

static User_Ip_Uart_RingBuffer_t *User_Ip_Uart_GetBuffer(uint8_t u8ChannelId)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b085      	sub	sp, #20
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	4603      	mov	r3, r0
 80040d8:	71fb      	strb	r3, [r7, #7]
	User_Ip_Uart_RingBuffer_t *BufferChannel;

	if(u8ChannelId == USER_IP_UART_CHANNELID_4)
 80040da:	79fb      	ldrb	r3, [r7, #7]
 80040dc:	2b04      	cmp	r3, #4
 80040de:	d102      	bne.n	80040e6 <User_Ip_Uart_GetBuffer+0x16>
	{
		BufferChannel = &Buffer_Uart4Channel;
 80040e0:	4b0e      	ldr	r3, [pc, #56]	; (800411c <User_Ip_Uart_GetBuffer+0x4c>)
 80040e2:	60fb      	str	r3, [r7, #12]
 80040e4:	e013      	b.n	800410e <User_Ip_Uart_GetBuffer+0x3e>
	}
	else if(u8ChannelId == USER_IP_UART_CHANNELID_5)
 80040e6:	79fb      	ldrb	r3, [r7, #7]
 80040e8:	2b05      	cmp	r3, #5
 80040ea:	d102      	bne.n	80040f2 <User_Ip_Uart_GetBuffer+0x22>
	{
		BufferChannel = &Buffer_Uart5Channel;
 80040ec:	4b0c      	ldr	r3, [pc, #48]	; (8004120 <User_Ip_Uart_GetBuffer+0x50>)
 80040ee:	60fb      	str	r3, [r7, #12]
 80040f0:	e00d      	b.n	800410e <User_Ip_Uart_GetBuffer+0x3e>
	}
	else if(u8ChannelId == USER_IP_UART_CHANNELID_7)
 80040f2:	79fb      	ldrb	r3, [r7, #7]
 80040f4:	2b07      	cmp	r3, #7
 80040f6:	d102      	bne.n	80040fe <User_Ip_Uart_GetBuffer+0x2e>
	{
		BufferChannel = &Buffer_Uart7Channel;
 80040f8:	4b0a      	ldr	r3, [pc, #40]	; (8004124 <User_Ip_Uart_GetBuffer+0x54>)
 80040fa:	60fb      	str	r3, [r7, #12]
 80040fc:	e007      	b.n	800410e <User_Ip_Uart_GetBuffer+0x3e>
	}
	else if(u8ChannelId == USER_IP_UART_CHANNELID_8)
 80040fe:	79fb      	ldrb	r3, [r7, #7]
 8004100:	2b08      	cmp	r3, #8
 8004102:	d102      	bne.n	800410a <User_Ip_Uart_GetBuffer+0x3a>
	{
		BufferChannel = &Buffer_Uart8Channel;
 8004104:	4b08      	ldr	r3, [pc, #32]	; (8004128 <User_Ip_Uart_GetBuffer+0x58>)
 8004106:	60fb      	str	r3, [r7, #12]
 8004108:	e001      	b.n	800410e <User_Ip_Uart_GetBuffer+0x3e>
	}
	else
	{
		BufferChannel = NULL;
 800410a:	2300      	movs	r3, #0
 800410c:	60fb      	str	r3, [r7, #12]
	}

	return BufferChannel;
 800410e:	68fb      	ldr	r3, [r7, #12]
}
 8004110:	4618      	mov	r0, r3
 8004112:	3714      	adds	r7, #20
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr
 800411c:	20000238 	.word	0x20000238
 8004120:	2000024c 	.word	0x2000024c
 8004124:	20000260 	.word	0x20000260
 8004128:	20000274 	.word	0x20000274

0800412c <User_Ip_Uart_WriteBuffer>:


Std_ReturnType User_Ip_Uart_WriteBuffer(uint8_t u8ChannelId, const uint8_t *u8DataPtr, int16_t u16DataLen)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b086      	sub	sp, #24
 8004130:	af00      	add	r7, sp, #0
 8004132:	4603      	mov	r3, r0
 8004134:	6039      	str	r1, [r7, #0]
 8004136:	71fb      	strb	r3, [r7, #7]
 8004138:	4613      	mov	r3, r2
 800413a:	80bb      	strh	r3, [r7, #4]
    Std_ReturnType ret = E_NOT_OK;
 800413c:	2301      	movs	r3, #1
 800413e:	75fb      	strb	r3, [r7, #23]
    uint16_t u16CountLen = 0u;
 8004140:	2300      	movs	r3, #0
 8004142:	82bb      	strh	r3, [r7, #20]
    uint16_t u16AvailableLen = 0u;
 8004144:	2300      	movs	r3, #0
 8004146:	827b      	strh	r3, [r7, #18]
    User_Ip_Uart_RingBuffer_t *BufferChannel;
    BufferChannel = User_Ip_Uart_GetBuffer(u8ChannelId);
 8004148:	79fb      	ldrb	r3, [r7, #7]
 800414a:	4618      	mov	r0, r3
 800414c:	f7ff ffc0 	bl	80040d0 <User_Ip_Uart_GetBuffer>
 8004150:	60f8      	str	r0, [r7, #12]
    if(BufferChannel == NULL)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d101      	bne.n	800415c <User_Ip_Uart_WriteBuffer+0x30>
	{
		return E_NOT_OK;
 8004158:	2301      	movs	r3, #1
 800415a:	e05d      	b.n	8004218 <User_Ip_Uart_WriteBuffer+0xec>
	}

	if(u8DataPtr == NULL || u16DataLen == 0u)
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d003      	beq.n	800416a <User_Ip_Uart_WriteBuffer+0x3e>
 8004162:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <User_Ip_Uart_WriteBuffer+0x42>
	{
		return E_NOT_OK;
 800416a:	2301      	movs	r3, #1
 800416c:	e054      	b.n	8004218 <User_Ip_Uart_WriteBuffer+0xec>
	}

	if(UART_BUFFER_UNLOCK == BufferChannel->Status)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	7c1b      	ldrb	r3, [r3, #16]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d14f      	bne.n	8004216 <User_Ip_Uart_WriteBuffer+0xea>
	{
		if(BufferChannel->TxHead > BufferChannel->TxTail)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	895b      	ldrh	r3, [r3, #10]
 800417a:	b29a      	uxth	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	891b      	ldrh	r3, [r3, #8]
 8004180:	b29b      	uxth	r3, r3
 8004182:	429a      	cmp	r2, r3
 8004184:	d908      	bls.n	8004198 <User_Ip_Uart_WriteBuffer+0x6c>
		{
			u16AvailableLen = BufferChannel->TxHead - BufferChannel->TxTail;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	895b      	ldrh	r3, [r3, #10]
 800418a:	b29a      	uxth	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	891b      	ldrh	r3, [r3, #8]
 8004190:	b29b      	uxth	r3, r3
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	827b      	strh	r3, [r7, #18]
 8004196:	e00a      	b.n	80041ae <User_Ip_Uart_WriteBuffer+0x82>
		}
		else
		{
			u16AvailableLen = (USER_IP_UART_SIZE_RINGBUFF - BufferChannel->TxTail) + BufferChannel->TxHead;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	895b      	ldrh	r3, [r3, #10]
 800419c:	b29a      	uxth	r2, r3
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	891b      	ldrh	r3, [r3, #8]
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041ac:	827b      	strh	r3, [r7, #18]
		}

		if(u16AvailableLen >= u16DataLen)
 80041ae:	8a7a      	ldrh	r2, [r7, #18]
 80041b0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	db2e      	blt.n	8004216 <User_Ip_Uart_WriteBuffer+0xea>
		{
			BufferChannel->Status = UART_BUFFER_LOCK;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2201      	movs	r2, #1
 80041bc:	741a      	strb	r2, [r3, #16]
			for(u16CountLen = 0u;u16CountLen < u16DataLen;u16CountLen ++)
 80041be:	2300      	movs	r3, #0
 80041c0:	82bb      	strh	r3, [r7, #20]
 80041c2:	e017      	b.n	80041f4 <User_Ip_Uart_WriteBuffer+0xc8>
			{
				BufferChannel->RingTxBufferChannel[BufferChannel->TxTail] = u8DataPtr[u16CountLen];
 80041c4:	8abb      	ldrh	r3, [r7, #20]
 80041c6:	683a      	ldr	r2, [r7, #0]
 80041c8:	441a      	add	r2, r3
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68f9      	ldr	r1, [r7, #12]
 80041d0:	8909      	ldrh	r1, [r1, #8]
 80041d2:	b289      	uxth	r1, r1
 80041d4:	440b      	add	r3, r1
 80041d6:	7812      	ldrb	r2, [r2, #0]
 80041d8:	701a      	strb	r2, [r3, #0]
				BufferChannel->TxTail = (BufferChannel->TxTail + 1U) & (USER_IP_UART_SIZE_RINGBUFF - 1U);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	891b      	ldrh	r3, [r3, #8]
 80041de:	b29b      	uxth	r3, r3
 80041e0:	3301      	adds	r3, #1
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	811a      	strh	r2, [r3, #8]
			for(u16CountLen = 0u;u16CountLen < u16DataLen;u16CountLen ++)
 80041ee:	8abb      	ldrh	r3, [r7, #20]
 80041f0:	3301      	adds	r3, #1
 80041f2:	82bb      	strh	r3, [r7, #20]
 80041f4:	8aba      	ldrh	r2, [r7, #20]
 80041f6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	dbe2      	blt.n	80041c4 <User_Ip_Uart_WriteBuffer+0x98>

			}
			BufferChannel->Status = UART_BUFFER_UNLOCK;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2200      	movs	r2, #0
 8004202:	741a      	strb	r2, [r3, #16]
			User_Ip_Uart_StartAsyncTransmit(User_Ip_Uart_BaseAddress[u8ChannelId]);
 8004204:	79fb      	ldrb	r3, [r7, #7]
 8004206:	4a06      	ldr	r2, [pc, #24]	; (8004220 <User_Ip_Uart_WriteBuffer+0xf4>)
 8004208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800420c:	4618      	mov	r0, r3
 800420e:	f7ff ff3f 	bl	8004090 <User_Ip_Uart_StartAsyncTransmit>
			ret = E_OK;
 8004212:	2300      	movs	r3, #0
 8004214:	75fb      	strb	r3, [r7, #23]
		}
	}
    return ret;
 8004216:	7dfb      	ldrb	r3, [r7, #23]
}
 8004218:	4618      	mov	r0, r3
 800421a:	3718      	adds	r7, #24
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	08006714 	.word	0x08006714

08004224 <User_Ip_Uart_TransmitBuffer>:

    return E_OK;
}

static inline void User_Ip_Uart_TransmitBuffer(uint8_t u8ChannelId)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	4603      	mov	r3, r0
 800422c:	71fb      	strb	r3, [r7, #7]
	User_Ip_Uart_RingBuffer_t *BufferChannel;
	User_Ip_Uart_Type *HwChannel = User_Ip_Uart_BaseAddress[u8ChannelId];
 800422e:	79fb      	ldrb	r3, [r7, #7]
 8004230:	4a19      	ldr	r2, [pc, #100]	; (8004298 <User_Ip_Uart_TransmitBuffer+0x74>)
 8004232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004236:	60fb      	str	r3, [r7, #12]

    BufferChannel = User_Ip_Uart_GetBuffer(u8ChannelId);
 8004238:	79fb      	ldrb	r3, [r7, #7]
 800423a:	4618      	mov	r0, r3
 800423c:	f7ff ff48 	bl	80040d0 <User_Ip_Uart_GetBuffer>
 8004240:	60b8      	str	r0, [r7, #8]
    if(BufferChannel == NULL)
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d022      	beq.n	800428e <User_Ip_Uart_TransmitBuffer+0x6a>
	{
		return;
	}

	if(BufferChannel->TxTail != BufferChannel->TxHead)
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	891b      	ldrh	r3, [r3, #8]
 800424c:	b29a      	uxth	r2, r3
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	895b      	ldrh	r3, [r3, #10]
 8004252:	b29b      	uxth	r3, r3
 8004254:	429a      	cmp	r2, r3
 8004256:	d016      	beq.n	8004286 <User_Ip_Uart_TransmitBuffer+0x62>
	{
		User_Ip_Uart_PutChar(HwChannel,BufferChannel->RingTxBufferChannel[BufferChannel->TxHead]);
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68ba      	ldr	r2, [r7, #8]
 800425e:	8952      	ldrh	r2, [r2, #10]
 8004260:	b292      	uxth	r2, r2
 8004262:	4413      	add	r3, r2
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	b2db      	uxtb	r3, r3
 8004268:	4619      	mov	r1, r3
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	f7ff ff01 	bl	8004072 <User_Ip_Uart_PutChar>
		BufferChannel->TxHead = (BufferChannel->TxHead + 1U) & (USER_IP_UART_SIZE_RINGBUFF - 1U);
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	895b      	ldrh	r3, [r3, #10]
 8004274:	b29b      	uxth	r3, r3
 8004276:	3301      	adds	r3, #1
 8004278:	b29b      	uxth	r3, r3
 800427a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800427e:	b29a      	uxth	r2, r3
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	815a      	strh	r2, [r3, #10]
 8004284:	e004      	b.n	8004290 <User_Ip_Uart_TransmitBuffer+0x6c>
	}
	else
	{
		User_Ip_Uart_StopAsyncTransmit(HwChannel);
 8004286:	68f8      	ldr	r0, [r7, #12]
 8004288:	f7ff ff12 	bl	80040b0 <User_Ip_Uart_StopAsyncTransmit>
 800428c:	e000      	b.n	8004290 <User_Ip_Uart_TransmitBuffer+0x6c>
		return;
 800428e:	bf00      	nop
	}
}
 8004290:	3710      	adds	r7, #16
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	08006714 	.word	0x08006714

0800429c <User_Ip_Uart_ReceiveBuffer>:

static void User_Ip_Uart_ReceiveBuffer(uint8_t u8ChannelId, uint8_t u8Data)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	4603      	mov	r3, r0
 80042a4:	460a      	mov	r2, r1
 80042a6:	71fb      	strb	r3, [r7, #7]
 80042a8:	4613      	mov	r3, r2
 80042aa:	71bb      	strb	r3, [r7, #6]
    User_Ip_Uart_RingBuffer_t *BufferChannel;

    BufferChannel = User_Ip_Uart_GetBuffer(u8ChannelId);
 80042ac:	79fb      	ldrb	r3, [r7, #7]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7ff ff0e 	bl	80040d0 <User_Ip_Uart_GetBuffer>
 80042b4:	60f8      	str	r0, [r7, #12]
    if(BufferChannel == NULL)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d02e      	beq.n	800431a <User_Ip_Uart_ReceiveBuffer+0x7e>
	{
		return;
	}

	BufferChannel->RingRxBufferChannel[BufferChannel->RxTail] = u8Data;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	8992      	ldrh	r2, [r2, #12]
 80042c4:	b292      	uxth	r2, r2
 80042c6:	4413      	add	r3, r2
 80042c8:	79ba      	ldrb	r2, [r7, #6]
 80042ca:	701a      	strb	r2, [r3, #0]
	BufferChannel->RxTail = (BufferChannel->RxTail + 1U) & (USER_IP_UART_SIZE_RINGBUFF - 1U);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	899b      	ldrh	r3, [r3, #12]
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	3301      	adds	r3, #1
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042da:	b29a      	uxth	r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	819a      	strh	r2, [r3, #12]

	if(BufferChannel->RxTail == BufferChannel->RxHead)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	899b      	ldrh	r3, [r3, #12]
 80042e4:	b29a      	uxth	r2, r3
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	89db      	ldrh	r3, [r3, #14]
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d115      	bne.n	800431c <User_Ip_Uart_ReceiveBuffer+0x80>
	{
		if(BufferChannel->RxHead == 0U)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	89db      	ldrh	r3, [r3, #14]
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d104      	bne.n	8004304 <User_Ip_Uart_ReceiveBuffer+0x68>
		{
			BufferChannel->RxTail = USER_IP_UART_SIZE_RINGBUFF - 1U;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8004300:	819a      	strh	r2, [r3, #12]
 8004302:	e00b      	b.n	800431c <User_Ip_Uart_ReceiveBuffer+0x80>
		}
		else
		{
			BufferChannel->RxTail = (BufferChannel->RxTail - 1U) & (USER_IP_UART_SIZE_RINGBUFF - 1U);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	899b      	ldrh	r3, [r3, #12]
 8004308:	b29b      	uxth	r3, r3
 800430a:	3b01      	subs	r3, #1
 800430c:	b29b      	uxth	r3, r3
 800430e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004312:	b29a      	uxth	r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	819a      	strh	r2, [r3, #12]
 8004318:	e000      	b.n	800431c <User_Ip_Uart_ReceiveBuffer+0x80>
		return;
 800431a:	bf00      	nop
		}
	}

}
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
	...

08004324 <User_Ip_Uart_IrqHandler>:

static void User_Ip_Uart_IrqHandler(uint8_t u8ChannelId)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	4603      	mov	r3, r0
 800432c:	71fb      	strb	r3, [r7, #7]
	uint8_t Byte_Receive = 0u;
 800432e:	2300      	movs	r3, #0
 8004330:	73fb      	strb	r3, [r7, #15]
	User_Ip_Uart_Type *HwChannel = User_Ip_Uart_BaseAddress[u8ChannelId];
 8004332:	79fb      	ldrb	r3, [r7, #7]
 8004334:	4a15      	ldr	r2, [pc, #84]	; (800438c <User_Ip_Uart_IrqHandler+0x68>)
 8004336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800433a:	60bb      	str	r3, [r7, #8]

	if((HwChannel->SR & USER_IP_UART_SR_TXE_MASK) == USER_IP_UART_SR_TXE_MASK)
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004344:	2b00      	cmp	r3, #0
 8004346:	d003      	beq.n	8004350 <User_Ip_Uart_IrqHandler+0x2c>
	{
		User_Ip_Uart_TransmitBuffer(u8ChannelId);
 8004348:	79fb      	ldrb	r3, [r7, #7]
 800434a:	4618      	mov	r0, r3
 800434c:	f7ff ff6a 	bl	8004224 <User_Ip_Uart_TransmitBuffer>
	}

	if((HwChannel->SR & USER_IP_UART_SR_RXNE_MASK) == USER_IP_UART_SR_RXNE_MASK)
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0320 	and.w	r3, r3, #32
 8004358:	2b00      	cmp	r3, #0
 800435a:	d00a      	beq.n	8004372 <User_Ip_Uart_IrqHandler+0x4e>
	{
		Byte_Receive = User_Ip_Uart_GetChar(HwChannel);
 800435c:	68b8      	ldr	r0, [r7, #8]
 800435e:	f7ff fe7b 	bl	8004058 <User_Ip_Uart_GetChar>
 8004362:	4603      	mov	r3, r0
 8004364:	73fb      	strb	r3, [r7, #15]
		User_Ip_Uart_ReceiveBuffer(u8ChannelId,Byte_Receive);
 8004366:	7bfa      	ldrb	r2, [r7, #15]
 8004368:	79fb      	ldrb	r3, [r7, #7]
 800436a:	4611      	mov	r1, r2
 800436c:	4618      	mov	r0, r3
 800436e:	f7ff ff95 	bl	800429c <User_Ip_Uart_ReceiveBuffer>
	{
		/*TODO*/

	}

	if((HwChannel->SR & USER_IP_UART_SR_ORE_MASK) == USER_IP_UART_SR_ORE_MASK)
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0308 	and.w	r3, r3, #8
 800437a:	2b00      	cmp	r3, #0
 800437c:	d002      	beq.n	8004384 <User_Ip_Uart_IrqHandler+0x60>
	{
		/*TODO*/
		User_Ip_Uart_GetChar(HwChannel);
 800437e:	68b8      	ldr	r0, [r7, #8]
 8004380:	f7ff fe6a 	bl	8004058 <User_Ip_Uart_GetChar>
		HwChannel->SR ;
	}



}
 8004384:	bf00      	nop
 8004386:	3710      	adds	r7, #16
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	08006714 	.word	0x08006714

08004390 <UART4_IRQHandler>:


void UART4_IRQHandler(void)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	af00      	add	r7, sp, #0
    User_Ip_Uart_IrqHandler(USER_IP_UART_CHANNELID_4);
 8004394:	2004      	movs	r0, #4
 8004396:	f7ff ffc5 	bl	8004324 <User_Ip_Uart_IrqHandler>
}
 800439a:	bf00      	nop
 800439c:	bd80      	pop	{r7, pc}

0800439e <UART5_IRQHandler>:

void UART5_IRQHandler(void)
{
 800439e:	b580      	push	{r7, lr}
 80043a0:	af00      	add	r7, sp, #0
    User_Ip_Uart_IrqHandler(USER_IP_UART_CHANNELID_5);
 80043a2:	2005      	movs	r0, #5
 80043a4:	f7ff ffbe 	bl	8004324 <User_Ip_Uart_IrqHandler>
}
 80043a8:	bf00      	nop
 80043aa:	bd80      	pop	{r7, pc}

080043ac <User_Ip_Usart_SetBaudrate>:

static inline void User_Ip_Usart_PutChar(User_Ip_Usart_Type * Usart_channel, uint8_t u8Data);
static inline void User_Ip_Usart_TransmitBuffer(uint8_t u8ChannelId);

static Std_ReturnType User_Ip_Usart_SetBaudrate(User_Ip_Usart_Type *HwChannel, uint32_t UsartSourceClock, uint32_t baudrate)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b089      	sub	sp, #36	; 0x24
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
	/* Check Source Clock */
	uint32_t BaudrateDiv = 0;
 80043b8:	2300      	movs	r3, #0
 80043ba:	61bb      	str	r3, [r7, #24]
	uint8_t  Value = 0;
 80043bc:	2300      	movs	r3, #0
 80043be:	77fb      	strb	r3, [r7, #31]
	uint32_t  UartDiv_Mant = 0;
 80043c0:	2300      	movs	r3, #0
 80043c2:	617b      	str	r3, [r7, #20]
	uint32_t  UartDiv_Frac = 0;
 80043c4:	2300      	movs	r3, #0
 80043c6:	613b      	str	r3, [r7, #16]

	Value = (HwChannel->CR1 & USER_IP_USART_CR1_OVER8_MASK) >> USER_IP_USART_CR1_OVER8_SHIFT;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	0bdb      	lsrs	r3, r3, #15
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	f003 0301 	and.w	r3, r3, #1
 80043d4:	77fb      	strb	r3, [r7, #31]
    Value = 2 - Value;
 80043d6:	7ffb      	ldrb	r3, [r7, #31]
 80043d8:	f1c3 0302 	rsb	r3, r3, #2
 80043dc:	77fb      	strb	r3, [r7, #31]

	BaudrateDiv = UsartSourceClock / (baudrate/100);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a23      	ldr	r2, [pc, #140]	; (8004470 <User_Ip_Usart_SetBaudrate+0xc4>)
 80043e2:	fba2 2303 	umull	r2, r3, r2, r3
 80043e6:	095b      	lsrs	r3, r3, #5
 80043e8:	68ba      	ldr	r2, [r7, #8]
 80043ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ee:	61bb      	str	r3, [r7, #24]
	BaudrateDiv = BaudrateDiv / (8 * Value);
 80043f0:	7ffb      	ldrb	r3, [r7, #31]
 80043f2:	00db      	lsls	r3, r3, #3
 80043f4:	461a      	mov	r2, r3
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80043fc:	61bb      	str	r3, [r7, #24]

    UartDiv_Mant  = BaudrateDiv /100;
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	4a1b      	ldr	r2, [pc, #108]	; (8004470 <User_Ip_Usart_SetBaudrate+0xc4>)
 8004402:	fba2 2303 	umull	r2, r3, r2, r3
 8004406:	095b      	lsrs	r3, r3, #5
 8004408:	617b      	str	r3, [r7, #20]
	UartDiv_Frac  = BaudrateDiv - 100 * UartDiv_Mant;
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	2264      	movs	r2, #100	; 0x64
 800440e:	fb02 f303 	mul.w	r3, r2, r3
 8004412:	69ba      	ldr	r2, [r7, #24]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	613b      	str	r3, [r7, #16]

	Value  = (UartDiv_Frac * 16)/100;
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	011b      	lsls	r3, r3, #4
 800441c:	4a14      	ldr	r2, [pc, #80]	; (8004470 <User_Ip_Usart_SetBaudrate+0xc4>)
 800441e:	fba2 2303 	umull	r2, r3, r2, r3
 8004422:	095b      	lsrs	r3, r3, #5
 8004424:	77fb      	strb	r3, [r7, #31]

	if((UartDiv_Frac * 16)%100 >= 50)
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	011a      	lsls	r2, r3, #4
 800442a:	4b11      	ldr	r3, [pc, #68]	; (8004470 <User_Ip_Usart_SetBaudrate+0xc4>)
 800442c:	fba3 1302 	umull	r1, r3, r3, r2
 8004430:	095b      	lsrs	r3, r3, #5
 8004432:	2164      	movs	r1, #100	; 0x64
 8004434:	fb01 f303 	mul.w	r3, r1, r3
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b31      	cmp	r3, #49	; 0x31
 800443c:	d902      	bls.n	8004444 <User_Ip_Usart_SetBaudrate+0x98>
	{
		Value = Value + 1;
 800443e:	7ffb      	ldrb	r3, [r7, #31]
 8004440:	3301      	adds	r3, #1
 8004442:	77fb      	strb	r3, [r7, #31]
	}
    UartDiv_Frac = Value;
 8004444:	7ffb      	ldrb	r3, [r7, #31]
 8004446:	613b      	str	r3, [r7, #16]

	HwChannel->BRR = (UartDiv_Mant << USER_IP_USART_BRR_MANT_SHIFT) & USER_IP_USART_BRR_MANT_MASK;
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	011b      	lsls	r3, r3, #4
 800444c:	b29a      	uxth	r2, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	609a      	str	r2, [r3, #8]
	HwChannel->BRR |= (Value << USER_IP_USART_BRR_FRAC_SHIFT) & USER_IP_USART_BRR_FRAC_MASK;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	689a      	ldr	r2, [r3, #8]
 8004456:	7ffb      	ldrb	r3, [r7, #31]
 8004458:	f003 030f 	and.w	r3, r3, #15
 800445c:	431a      	orrs	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	609a      	str	r2, [r3, #8]

	return E_OK;
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	3724      	adds	r7, #36	; 0x24
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr
 8004470:	51eb851f 	.word	0x51eb851f

08004474 <User_Ip_Usart_SetParityMode>:

static void User_Ip_Usart_SetParityMode(User_Ip_Usart_Type *HwChannel, User_Uart_ParityMode_t parityMode)
{
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	460b      	mov	r3, r1
 800447e:	70fb      	strb	r3, [r7, #3]
	uint8_t u8ParityMode = 0u;
 8004480:	2300      	movs	r3, #0
 8004482:	73fb      	strb	r3, [r7, #15]
	if(parityMode == USER_UART_PARITY_NONE)
 8004484:	78fb      	ldrb	r3, [r7, #3]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d106      	bne.n	8004498 <User_Ip_Usart_SetParityMode+0x24>
	{
		HwChannel->CR1 &= ~USER_IP_USART_CR1_PCE_MASK;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	60da      	str	r2, [r3, #12]
		u8ParityMode = parityMode - 1u;
		HwChannel->CR1 &= ~USER_IP_USART_CR1_PS_MASK;
		HwChannel->CR1 |= (u8ParityMode << USER_IP_USART_CR1_PS_SHIFT) & USER_IP_USART_CR1_PS_MASK;
		HwChannel->CR1 |= USER_IP_USART_CR1_PCE_MASK;
	}
}
 8004496:	e017      	b.n	80044c8 <User_Ip_Usart_SetParityMode+0x54>
		u8ParityMode = parityMode - 1u;
 8004498:	78fb      	ldrb	r3, [r7, #3]
 800449a:	3b01      	subs	r3, #1
 800449c:	73fb      	strb	r3, [r7, #15]
		HwChannel->CR1 &= ~USER_IP_USART_CR1_PS_MASK;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	60da      	str	r2, [r3, #12]
		HwChannel->CR1 |= (u8ParityMode << USER_IP_USART_CR1_PS_SHIFT) & USER_IP_USART_CR1_PS_MASK;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	68da      	ldr	r2, [r3, #12]
 80044ae:	7bfb      	ldrb	r3, [r7, #15]
 80044b0:	025b      	lsls	r3, r3, #9
 80044b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044b6:	431a      	orrs	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	60da      	str	r2, [r3, #12]
		HwChannel->CR1 |= USER_IP_USART_CR1_PCE_MASK;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	60da      	str	r2, [r3, #12]
}
 80044c8:	bf00      	nop
 80044ca:	3714      	adds	r7, #20
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <User_Ip_Usart_SetStopBitCount>:

static void User_Ip_Usart_SetStopBitCount(User_Ip_Usart_Type *HwChannel, User_Uart_StopBitCount_t stopBitCount)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	460b      	mov	r3, r1
 80044de:	70fb      	strb	r3, [r7, #3]
	HwChannel->CR2 &= ~USER_IP_USART_CR2_STOP_MASK;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	611a      	str	r2, [r3, #16]
	HwChannel->CR2 |= (stopBitCount << USER_IP_USART_CR2_STOP_SHIFT) & USER_IP_USART_CR2_STOP_MASK;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	691a      	ldr	r2, [r3, #16]
 80044f0:	78fb      	ldrb	r3, [r7, #3]
 80044f2:	031b      	lsls	r3, r3, #12
 80044f4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80044f8:	431a      	orrs	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	611a      	str	r2, [r3, #16]
}
 80044fe:	bf00      	nop
 8004500:	370c      	adds	r7, #12
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr

0800450a <User_Ip_Usart_DeInit>:

void User_Ip_Usart_DeInit(User_Ip_Usart_Type *HwChannel,uint8_t channelID)
{
 800450a:	b580      	push	{r7, lr}
 800450c:	b084      	sub	sp, #16
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
 8004512:	460b      	mov	r3, r1
 8004514:	70fb      	strb	r3, [r7, #3]
	User_Ip_Usart_RingBuffer_t *BufferChannel;
    BufferChannel = User_Ip_Usart_GetBuffer(channelID);
 8004516:	78fb      	ldrb	r3, [r7, #3]
 8004518:	4618      	mov	r0, r3
 800451a:	f000 f8c5 	bl	80046a8 <User_Ip_Usart_GetBuffer>
 800451e:	60f8      	str	r0, [r7, #12]

	HwChannel->CR1 = USER_IP_USART_RESET_VALUE;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	60da      	str	r2, [r3, #12]
	HwChannel->CR2 = USER_IP_USART_RESET_VALUE;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	611a      	str	r2, [r3, #16]
	HwChannel->CR3 = USER_IP_USART_RESET_VALUE;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	615a      	str	r2, [r3, #20]
	HwChannel->BRR = USER_IP_USART_RESET_VALUE;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	609a      	str	r2, [r3, #8]

	BufferChannel->TxHead = 0u;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	815a      	strh	r2, [r3, #10]
	BufferChannel->TxTail = 0u;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	811a      	strh	r2, [r3, #8]
	BufferChannel->Status = USART_BUFFER_UNLOCK;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	741a      	strb	r2, [r3, #16]
}
 800454a:	bf00      	nop
 800454c:	3710      	adds	r7, #16
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
	...

08004554 <User_Ip_Usart_Init>:

void User_Ip_Usart_Init(User_Uart_HWConfigType *HwConfig)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b086      	sub	sp, #24
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
	uint8_t u8ChannelId = HwConfig->u8HwChannelID;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	75fb      	strb	r3, [r7, #23]
	User_Ip_Usart_RingBuffer_t *RingBuff;
	User_Ip_Usart_Type *Usart = User_Ip_Usart_BaseAddress[u8ChannelId];
 8004562:	7dfb      	ldrb	r3, [r7, #23]
 8004564:	4a30      	ldr	r2, [pc, #192]	; (8004628 <User_Ip_Usart_Init+0xd4>)
 8004566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800456a:	613b      	str	r3, [r7, #16]

	User_Ip_Usart_DeInit(Usart,u8ChannelId);
 800456c:	7dfb      	ldrb	r3, [r7, #23]
 800456e:	4619      	mov	r1, r3
 8004570:	6938      	ldr	r0, [r7, #16]
 8004572:	f7ff ffca 	bl	800450a <User_Ip_Usart_DeInit>
	Usart->CR1 &= ~USER_IP_USART_CR1_TE_MASK;
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	f023 0208 	bic.w	r2, r3, #8
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	60da      	str	r2, [r3, #12]
	Usart->CR1 &= ~USER_IP_USART_CR1_RE_MASK;
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	f023 0204 	bic.w	r2, r3, #4
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	60da      	str	r2, [r3, #12]

    RingBuff = User_Ip_Usart_GetBuffer(u8ChannelId);
 800458e:	7dfb      	ldrb	r3, [r7, #23]
 8004590:	4618      	mov	r0, r3
 8004592:	f000 f889 	bl	80046a8 <User_Ip_Usart_GetBuffer>
 8004596:	60f8      	str	r0, [r7, #12]
    RingBuff->RingRxBufferChannel = (uint8_t *)calloc(USER_IP_USART_SIZE_RINGBUFF,sizeof(uint8_t));
 8004598:	2101      	movs	r1, #1
 800459a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800459e:	f001 fd97 	bl	80060d0 <calloc>
 80045a2:	4603      	mov	r3, r0
 80045a4:	461a      	mov	r2, r3
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	605a      	str	r2, [r3, #4]
    RingBuff->RingTxBufferChannel = (uint8_t *)calloc(USER_IP_USART_SIZE_RINGBUFF,sizeof(uint8_t));
 80045aa:	2101      	movs	r1, #1
 80045ac:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80045b0:	f001 fd8e 	bl	80060d0 <calloc>
 80045b4:	4603      	mov	r3, r0
 80045b6:	461a      	mov	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	601a      	str	r2, [r3, #0]

	User_Ip_Usart_SetBaudrate (
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6859      	ldr	r1, [r3, #4]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	461a      	mov	r2, r3
 80045c6:	6938      	ldr	r0, [r7, #16]
 80045c8:	f7ff fef0 	bl	80043ac <User_Ip_Usart_SetBaudrate>
								   Usart,
								   HwConfig->u32SourceClock,
								   HwConfig->u32Baudrate
	                           );

	User_Ip_Usart_SetParityMode (
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	7b1b      	ldrb	r3, [r3, #12]
 80045d0:	4619      	mov	r1, r3
 80045d2:	6938      	ldr	r0, [r7, #16]
 80045d4:	f7ff ff4e 	bl	8004474 <User_Ip_Usart_SetParityMode>
									Usart,
									HwConfig->ParityMode
			                     );

	User_Ip_Usart_SetStopBitCount (
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	7b5b      	ldrb	r3, [r3, #13]
 80045dc:	4619      	mov	r1, r3
 80045de:	6938      	ldr	r0, [r7, #16]
 80045e0:	f7ff ff78 	bl	80044d4 <User_Ip_Usart_SetStopBitCount>
									  Usart,
									  HwConfig->StopBitCount
			                       );


	Usart->CR3 |= (
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	695b      	ldr	r3, [r3, #20]
 80045e8:	f043 0201 	orr.w	r2, r3, #1
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	615a      	str	r2, [r3, #20]
						 USER_IP_USART_CR3_EIE_MASK
					);

	Usart->CR1 |= (
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80045f8:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 80045fc:	693a      	ldr	r2, [r7, #16]
 80045fe:	60d3      	str	r3, [r2, #12]
						 USER_IP_USART_CR1_RE_MASK |
						 USER_IP_USART_CR1_UE_MASK
					  );

	/* Enable Interrupt*/
	HAL_NVIC_EnableIRQ(User_Usart_IRQn[u8ChannelId]);
 8004600:	7dfb      	ldrb	r3, [r7, #23]
 8004602:	4a0a      	ldr	r2, [pc, #40]	; (800462c <User_Ip_Usart_Init+0xd8>)
 8004604:	5cd3      	ldrb	r3, [r2, r3]
 8004606:	b25b      	sxtb	r3, r3
 8004608:	4618      	mov	r0, r3
 800460a:	f000 fc18 	bl	8004e3e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(User_Usart_IRQn[u8ChannelId],USER_IP_USART_PRIORITY,0u);
 800460e:	7dfb      	ldrb	r3, [r7, #23]
 8004610:	4a06      	ldr	r2, [pc, #24]	; (800462c <User_Ip_Usart_Init+0xd8>)
 8004612:	5cd3      	ldrb	r3, [r2, r3]
 8004614:	b25b      	sxtb	r3, r3
 8004616:	2200      	movs	r2, #0
 8004618:	2105      	movs	r1, #5
 800461a:	4618      	mov	r0, r3
 800461c:	f000 fbf3 	bl	8004e06 <HAL_NVIC_SetPriority>

}
 8004620:	bf00      	nop
 8004622:	3718      	adds	r7, #24
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	08006738 	.word	0x08006738
 800462c:	20000110 	.word	0x20000110

08004630 <User_Ip_Usart_GetChar>:

static inline uint8_t User_Ip_Usart_GetChar(User_Ip_Usart_Type * Usart_channel)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
	return (Usart_channel->DR);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	b2db      	uxtb	r3, r3
}
 800463e:	4618      	mov	r0, r3
 8004640:	370c      	adds	r7, #12
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr

0800464a <User_Ip_Usart_PutChar>:

static inline void User_Ip_Usart_PutChar(User_Ip_Usart_Type *Usart_channel, uint8_t u8Data)
{
 800464a:	b480      	push	{r7}
 800464c:	b083      	sub	sp, #12
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
 8004652:	460b      	mov	r3, r1
 8004654:	70fb      	strb	r3, [r7, #3]
	Usart_channel->DR = u8Data;
 8004656:	78fa      	ldrb	r2, [r7, #3]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	605a      	str	r2, [r3, #4]
}
 800465c:	bf00      	nop
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <User_Ip_Usart_StartAsyncTransmit>:

void User_Ip_Usart_StartAsyncTransmit(User_Ip_Usart_Type *Usart_channel)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
	Usart_channel->CR1 |= USER_IP_USART_CR1_TXEIE_MASK;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	60da      	str	r2, [r3, #12]
}
 800467c:	bf00      	nop
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <User_Ip_Usart_StopAsyncTransmit>:

static inline void User_Ip_Usart_StopAsyncTransmit(User_Ip_Usart_Type *Usart_channel)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
	Usart_channel->CR1 &= ~USER_IP_USART_CR1_TXEIE_MASK;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	60da      	str	r2, [r3, #12]
}
 800469c:	bf00      	nop
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <User_Ip_Usart_GetBuffer>:

static User_Ip_Usart_RingBuffer_t *User_Ip_Usart_GetBuffer(uint8_t u8ChannelId)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b085      	sub	sp, #20
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	4603      	mov	r3, r0
 80046b0:	71fb      	strb	r3, [r7, #7]
	User_Ip_Usart_RingBuffer_t *BufferChannel;

	if(u8ChannelId == USER_IP_USART_CHANNELID_0)
 80046b2:	79fb      	ldrb	r3, [r7, #7]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d102      	bne.n	80046be <User_Ip_Usart_GetBuffer+0x16>
	{
		BufferChannel = &Buffer_Usart0Channel;
 80046b8:	4b11      	ldr	r3, [pc, #68]	; (8004700 <User_Ip_Usart_GetBuffer+0x58>)
 80046ba:	60fb      	str	r3, [r7, #12]
 80046bc:	e019      	b.n	80046f2 <User_Ip_Usart_GetBuffer+0x4a>
	}
	else if(u8ChannelId == USER_IP_USART_CHANNELID_1)
 80046be:	79fb      	ldrb	r3, [r7, #7]
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d102      	bne.n	80046ca <User_Ip_Usart_GetBuffer+0x22>
	{
		BufferChannel = &Buffer_Usart1Channel;
 80046c4:	4b0f      	ldr	r3, [pc, #60]	; (8004704 <User_Ip_Usart_GetBuffer+0x5c>)
 80046c6:	60fb      	str	r3, [r7, #12]
 80046c8:	e013      	b.n	80046f2 <User_Ip_Usart_GetBuffer+0x4a>
	}
	else if(u8ChannelId == USER_IP_USART_CHANNELID_2)
 80046ca:	79fb      	ldrb	r3, [r7, #7]
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d102      	bne.n	80046d6 <User_Ip_Usart_GetBuffer+0x2e>
	{
		BufferChannel = &Buffer_Usart2Channel;
 80046d0:	4b0d      	ldr	r3, [pc, #52]	; (8004708 <User_Ip_Usart_GetBuffer+0x60>)
 80046d2:	60fb      	str	r3, [r7, #12]
 80046d4:	e00d      	b.n	80046f2 <User_Ip_Usart_GetBuffer+0x4a>
	}
	else if(u8ChannelId == USER_IP_USART_CHANNELID_3)
 80046d6:	79fb      	ldrb	r3, [r7, #7]
 80046d8:	2b03      	cmp	r3, #3
 80046da:	d102      	bne.n	80046e2 <User_Ip_Usart_GetBuffer+0x3a>
	{
		BufferChannel = &Buffer_Usart3Channel;
 80046dc:	4b0b      	ldr	r3, [pc, #44]	; (800470c <User_Ip_Usart_GetBuffer+0x64>)
 80046de:	60fb      	str	r3, [r7, #12]
 80046e0:	e007      	b.n	80046f2 <User_Ip_Usart_GetBuffer+0x4a>
	}
	else if(u8ChannelId == USER_IP_USART_CHANNELID_6)
 80046e2:	79fb      	ldrb	r3, [r7, #7]
 80046e4:	2b06      	cmp	r3, #6
 80046e6:	d102      	bne.n	80046ee <User_Ip_Usart_GetBuffer+0x46>
	{
		BufferChannel = &Buffer_Usart6Channel;
 80046e8:	4b09      	ldr	r3, [pc, #36]	; (8004710 <User_Ip_Usart_GetBuffer+0x68>)
 80046ea:	60fb      	str	r3, [r7, #12]
 80046ec:	e001      	b.n	80046f2 <User_Ip_Usart_GetBuffer+0x4a>
	}
	else
	{
		BufferChannel = NULL;
 80046ee:	2300      	movs	r3, #0
 80046f0:	60fb      	str	r3, [r7, #12]
	}

	return BufferChannel;
 80046f2:	68fb      	ldr	r3, [r7, #12]
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3714      	adds	r7, #20
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr
 8004700:	20000288 	.word	0x20000288
 8004704:	2000029c 	.word	0x2000029c
 8004708:	200002b0 	.word	0x200002b0
 800470c:	200002c4 	.word	0x200002c4
 8004710:	200002d8 	.word	0x200002d8

08004714 <User_Ip_Usart_WriteBuffer>:


Std_ReturnType User_Ip_Usart_WriteBuffer(uint8_t u8ChannelId, const uint8_t *u8DataPtr, int16_t u16DataLen)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b086      	sub	sp, #24
 8004718:	af00      	add	r7, sp, #0
 800471a:	4603      	mov	r3, r0
 800471c:	6039      	str	r1, [r7, #0]
 800471e:	71fb      	strb	r3, [r7, #7]
 8004720:	4613      	mov	r3, r2
 8004722:	80bb      	strh	r3, [r7, #4]
    Std_ReturnType ret = E_NOT_OK;
 8004724:	2301      	movs	r3, #1
 8004726:	75fb      	strb	r3, [r7, #23]
    uint16_t u16CountLen = 0u;
 8004728:	2300      	movs	r3, #0
 800472a:	82bb      	strh	r3, [r7, #20]
    uint16_t u16AvailableLen = 0u;
 800472c:	2300      	movs	r3, #0
 800472e:	827b      	strh	r3, [r7, #18]
    User_Ip_Usart_RingBuffer_t *BufferChannel;
    BufferChannel = User_Ip_Usart_GetBuffer(u8ChannelId);
 8004730:	79fb      	ldrb	r3, [r7, #7]
 8004732:	4618      	mov	r0, r3
 8004734:	f7ff ffb8 	bl	80046a8 <User_Ip_Usart_GetBuffer>
 8004738:	60f8      	str	r0, [r7, #12]
    if(BufferChannel == NULL)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d101      	bne.n	8004744 <User_Ip_Usart_WriteBuffer+0x30>
	{
		return E_NOT_OK;
 8004740:	2301      	movs	r3, #1
 8004742:	e05d      	b.n	8004800 <User_Ip_Usart_WriteBuffer+0xec>
	}

	if(u8DataPtr == NULL || u16DataLen == 0u)
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d003      	beq.n	8004752 <User_Ip_Usart_WriteBuffer+0x3e>
 800474a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d101      	bne.n	8004756 <User_Ip_Usart_WriteBuffer+0x42>
	{
		return E_NOT_OK;
 8004752:	2301      	movs	r3, #1
 8004754:	e054      	b.n	8004800 <User_Ip_Usart_WriteBuffer+0xec>
	}

	if(USART_BUFFER_UNLOCK == BufferChannel->Status)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	7c1b      	ldrb	r3, [r3, #16]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d14f      	bne.n	80047fe <User_Ip_Usart_WriteBuffer+0xea>
	{
		if(BufferChannel->TxHead > BufferChannel->TxTail)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	895b      	ldrh	r3, [r3, #10]
 8004762:	b29a      	uxth	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	891b      	ldrh	r3, [r3, #8]
 8004768:	b29b      	uxth	r3, r3
 800476a:	429a      	cmp	r2, r3
 800476c:	d908      	bls.n	8004780 <User_Ip_Usart_WriteBuffer+0x6c>
		{
			u16AvailableLen = BufferChannel->TxHead - BufferChannel->TxTail;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	895b      	ldrh	r3, [r3, #10]
 8004772:	b29a      	uxth	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	891b      	ldrh	r3, [r3, #8]
 8004778:	b29b      	uxth	r3, r3
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	827b      	strh	r3, [r7, #18]
 800477e:	e00a      	b.n	8004796 <User_Ip_Usart_WriteBuffer+0x82>
		}
		else
		{
			u16AvailableLen = (USER_IP_USART_SIZE_RINGBUFF - BufferChannel->TxTail) + BufferChannel->TxHead;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	895b      	ldrh	r3, [r3, #10]
 8004784:	b29a      	uxth	r2, r3
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	891b      	ldrh	r3, [r3, #8]
 800478a:	b29b      	uxth	r3, r3
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	b29b      	uxth	r3, r3
 8004790:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004794:	827b      	strh	r3, [r7, #18]

		}

		if(u16AvailableLen >= u16DataLen)
 8004796:	8a7a      	ldrh	r2, [r7, #18]
 8004798:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800479c:	429a      	cmp	r2, r3
 800479e:	db2e      	blt.n	80047fe <User_Ip_Usart_WriteBuffer+0xea>
		{
			BufferChannel->Status = USART_BUFFER_LOCK;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2201      	movs	r2, #1
 80047a4:	741a      	strb	r2, [r3, #16]
			for(u16CountLen = 0u;u16CountLen < u16DataLen;u16CountLen ++)
 80047a6:	2300      	movs	r3, #0
 80047a8:	82bb      	strh	r3, [r7, #20]
 80047aa:	e017      	b.n	80047dc <User_Ip_Usart_WriteBuffer+0xc8>
			{
				BufferChannel->RingTxBufferChannel[BufferChannel->TxTail] = u8DataPtr[u16CountLen];
 80047ac:	8abb      	ldrh	r3, [r7, #20]
 80047ae:	683a      	ldr	r2, [r7, #0]
 80047b0:	441a      	add	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68f9      	ldr	r1, [r7, #12]
 80047b8:	8909      	ldrh	r1, [r1, #8]
 80047ba:	b289      	uxth	r1, r1
 80047bc:	440b      	add	r3, r1
 80047be:	7812      	ldrb	r2, [r2, #0]
 80047c0:	701a      	strb	r2, [r3, #0]
				BufferChannel->TxTail = (BufferChannel->TxTail + 1U) & (USER_IP_USART_SIZE_RINGBUFF - 1U);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	891b      	ldrh	r3, [r3, #8]
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	3301      	adds	r3, #1
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047d0:	b29a      	uxth	r2, r3
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	811a      	strh	r2, [r3, #8]
			for(u16CountLen = 0u;u16CountLen < u16DataLen;u16CountLen ++)
 80047d6:	8abb      	ldrh	r3, [r7, #20]
 80047d8:	3301      	adds	r3, #1
 80047da:	82bb      	strh	r3, [r7, #20]
 80047dc:	8aba      	ldrh	r2, [r7, #20]
 80047de:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	dbe2      	blt.n	80047ac <User_Ip_Usart_WriteBuffer+0x98>

			}
			BufferChannel->Status = USART_BUFFER_UNLOCK;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	741a      	strb	r2, [r3, #16]
			User_Ip_Usart_StartAsyncTransmit(User_Ip_Usart_BaseAddress[u8ChannelId]);
 80047ec:	79fb      	ldrb	r3, [r7, #7]
 80047ee:	4a06      	ldr	r2, [pc, #24]	; (8004808 <User_Ip_Usart_WriteBuffer+0xf4>)
 80047f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047f4:	4618      	mov	r0, r3
 80047f6:	f7ff ff37 	bl	8004668 <User_Ip_Usart_StartAsyncTransmit>
			ret = E_OK;
 80047fa:	2300      	movs	r3, #0
 80047fc:	75fb      	strb	r3, [r7, #23]
		}
	}
    return ret;
 80047fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004800:	4618      	mov	r0, r3
 8004802:	3718      	adds	r7, #24
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	08006738 	.word	0x08006738

0800480c <User_Ip_Usart_TransmitBuffer>:

    return E_OK;
}

static inline void User_Ip_Usart_TransmitBuffer(uint8_t u8ChannelId)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	4603      	mov	r3, r0
 8004814:	71fb      	strb	r3, [r7, #7]
	User_Ip_Usart_RingBuffer_t *BufferChannel;
	User_Ip_Usart_Type *HwChannel = User_Ip_Usart_BaseAddress[u8ChannelId];
 8004816:	79fb      	ldrb	r3, [r7, #7]
 8004818:	4a19      	ldr	r2, [pc, #100]	; (8004880 <User_Ip_Usart_TransmitBuffer+0x74>)
 800481a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800481e:	60fb      	str	r3, [r7, #12]

    BufferChannel = User_Ip_Usart_GetBuffer(u8ChannelId);
 8004820:	79fb      	ldrb	r3, [r7, #7]
 8004822:	4618      	mov	r0, r3
 8004824:	f7ff ff40 	bl	80046a8 <User_Ip_Usart_GetBuffer>
 8004828:	60b8      	str	r0, [r7, #8]
    if(BufferChannel == NULL)
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d022      	beq.n	8004876 <User_Ip_Usart_TransmitBuffer+0x6a>
	{
		return;
	}

	if(BufferChannel->TxTail != BufferChannel->TxHead)
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	891b      	ldrh	r3, [r3, #8]
 8004834:	b29a      	uxth	r2, r3
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	895b      	ldrh	r3, [r3, #10]
 800483a:	b29b      	uxth	r3, r3
 800483c:	429a      	cmp	r2, r3
 800483e:	d016      	beq.n	800486e <User_Ip_Usart_TransmitBuffer+0x62>
	{
		User_Ip_Usart_PutChar(HwChannel,BufferChannel->RingTxBufferChannel[BufferChannel->TxHead]);
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68ba      	ldr	r2, [r7, #8]
 8004846:	8952      	ldrh	r2, [r2, #10]
 8004848:	b292      	uxth	r2, r2
 800484a:	4413      	add	r3, r2
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	b2db      	uxtb	r3, r3
 8004850:	4619      	mov	r1, r3
 8004852:	68f8      	ldr	r0, [r7, #12]
 8004854:	f7ff fef9 	bl	800464a <User_Ip_Usart_PutChar>
		BufferChannel->TxHead = (BufferChannel->TxHead + 1U) & (USER_IP_USART_SIZE_RINGBUFF - 1U);
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	895b      	ldrh	r3, [r3, #10]
 800485c:	b29b      	uxth	r3, r3
 800485e:	3301      	adds	r3, #1
 8004860:	b29b      	uxth	r3, r3
 8004862:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004866:	b29a      	uxth	r2, r3
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	815a      	strh	r2, [r3, #10]
 800486c:	e004      	b.n	8004878 <User_Ip_Usart_TransmitBuffer+0x6c>
	}
	else
	{
		User_Ip_Usart_StopAsyncTransmit(HwChannel);
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	f7ff ff0a 	bl	8004688 <User_Ip_Usart_StopAsyncTransmit>
 8004874:	e000      	b.n	8004878 <User_Ip_Usart_TransmitBuffer+0x6c>
		return;
 8004876:	bf00      	nop
	}
}
 8004878:	3710      	adds	r7, #16
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	08006738 	.word	0x08006738

08004884 <User_Ip_Usart_ReceiveBuffer>:

static void User_Ip_Usart_ReceiveBuffer(uint8_t u8ChannelId, uint8_t u8Data)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	4603      	mov	r3, r0
 800488c:	460a      	mov	r2, r1
 800488e:	71fb      	strb	r3, [r7, #7]
 8004890:	4613      	mov	r3, r2
 8004892:	71bb      	strb	r3, [r7, #6]
    User_Ip_Usart_RingBuffer_t *BufferChannel;

    BufferChannel = User_Ip_Usart_GetBuffer(u8ChannelId);
 8004894:	79fb      	ldrb	r3, [r7, #7]
 8004896:	4618      	mov	r0, r3
 8004898:	f7ff ff06 	bl	80046a8 <User_Ip_Usart_GetBuffer>
 800489c:	60f8      	str	r0, [r7, #12]
    if(BufferChannel == NULL)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d02e      	beq.n	8004902 <User_Ip_Usart_ReceiveBuffer+0x7e>
	{
		return;
	}

	BufferChannel->RingRxBufferChannel[BufferChannel->RxTail] = u8Data;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	68fa      	ldr	r2, [r7, #12]
 80048aa:	8992      	ldrh	r2, [r2, #12]
 80048ac:	b292      	uxth	r2, r2
 80048ae:	4413      	add	r3, r2
 80048b0:	79ba      	ldrb	r2, [r7, #6]
 80048b2:	701a      	strb	r2, [r3, #0]
	BufferChannel->RxTail = (BufferChannel->RxTail + 1U) & (USER_IP_USART_SIZE_RINGBUFF - 1U);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	899b      	ldrh	r3, [r3, #12]
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	3301      	adds	r3, #1
 80048bc:	b29b      	uxth	r3, r3
 80048be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048c2:	b29a      	uxth	r2, r3
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	819a      	strh	r2, [r3, #12]

	if(BufferChannel->RxTail == BufferChannel->RxHead)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	899b      	ldrh	r3, [r3, #12]
 80048cc:	b29a      	uxth	r2, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	89db      	ldrh	r3, [r3, #14]
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d115      	bne.n	8004904 <User_Ip_Usart_ReceiveBuffer+0x80>
	{
		if(BufferChannel->RxHead == 0U)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	89db      	ldrh	r3, [r3, #14]
 80048dc:	b29b      	uxth	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d104      	bne.n	80048ec <User_Ip_Usart_ReceiveBuffer+0x68>
		{
			BufferChannel->RxTail = USER_IP_USART_SIZE_RINGBUFF - 1U;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80048e8:	819a      	strh	r2, [r3, #12]
 80048ea:	e00b      	b.n	8004904 <User_Ip_Usart_ReceiveBuffer+0x80>
		}
		else
		{
			BufferChannel->RxTail = (BufferChannel->RxTail - 1U) & (USER_IP_USART_SIZE_RINGBUFF - 1U);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	899b      	ldrh	r3, [r3, #12]
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	3b01      	subs	r3, #1
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048fa:	b29a      	uxth	r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	819a      	strh	r2, [r3, #12]
 8004900:	e000      	b.n	8004904 <User_Ip_Usart_ReceiveBuffer+0x80>
		return;
 8004902:	bf00      	nop
		}
	}

}
 8004904:	3710      	adds	r7, #16
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
	...

0800490c <User_Ip_Usart_IrqHandler>:

static void User_Ip_Usart_IrqHandler(uint8_t u8ChannelId)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b086      	sub	sp, #24
 8004910:	af00      	add	r7, sp, #0
 8004912:	4603      	mov	r3, r0
 8004914:	71fb      	strb	r3, [r7, #7]
	uint8_t Byte_Receive = 0u;
 8004916:	2300      	movs	r3, #0
 8004918:	75fb      	strb	r3, [r7, #23]
	User_Ip_Usart_Type *HwChannel = User_Ip_Usart_BaseAddress[u8ChannelId];
 800491a:	79fb      	ldrb	r3, [r7, #7]
 800491c:	4a17      	ldr	r2, [pc, #92]	; (800497c <User_Ip_Usart_IrqHandler+0x70>)
 800491e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004922:	613b      	str	r3, [r7, #16]
	uint32_t status = HwChannel->SR;
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	60fb      	str	r3, [r7, #12]

	if((status & USER_IP_USART_SR_TXE_MASK) == USER_IP_USART_SR_TXE_MASK)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004930:	2b00      	cmp	r3, #0
 8004932:	d003      	beq.n	800493c <User_Ip_Usart_IrqHandler+0x30>
	{
		User_Ip_Usart_TransmitBuffer(u8ChannelId);
 8004934:	79fb      	ldrb	r3, [r7, #7]
 8004936:	4618      	mov	r0, r3
 8004938:	f7ff ff68 	bl	800480c <User_Ip_Usart_TransmitBuffer>
	}

	if((status & USER_IP_USART_SR_RXNE_MASK) == USER_IP_USART_SR_RXNE_MASK)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f003 0320 	and.w	r3, r3, #32
 8004942:	2b00      	cmp	r3, #0
 8004944:	d00a      	beq.n	800495c <User_Ip_Usart_IrqHandler+0x50>
	{
		Byte_Receive = User_Ip_Usart_GetChar(HwChannel);
 8004946:	6938      	ldr	r0, [r7, #16]
 8004948:	f7ff fe72 	bl	8004630 <User_Ip_Usart_GetChar>
 800494c:	4603      	mov	r3, r0
 800494e:	75fb      	strb	r3, [r7, #23]
		User_Ip_Usart_ReceiveBuffer(u8ChannelId,Byte_Receive);
 8004950:	7dfa      	ldrb	r2, [r7, #23]
 8004952:	79fb      	ldrb	r3, [r7, #7]
 8004954:	4611      	mov	r1, r2
 8004956:	4618      	mov	r0, r3
 8004958:	f7ff ff94 	bl	8004884 <User_Ip_Usart_ReceiveBuffer>
	if((status & USER_IP_USART_SR_FE_MASK) == USER_IP_USART_SR_FE_MASK)
	{
		/*TODO*/
	}

	if((status & USER_IP_USART_SR_ORE_MASK) == USER_IP_USART_SR_ORE_MASK)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f003 0308 	and.w	r3, r3, #8
 8004962:	2b00      	cmp	r3, #0
 8004964:	d002      	beq.n	800496c <User_Ip_Usart_IrqHandler+0x60>
	{
		/*TODO*/
		User_Ip_Usart_GetChar(HwChannel);
 8004966:	6938      	ldr	r0, [r7, #16]
 8004968:	f7ff fe62 	bl	8004630 <User_Ip_Usart_GetChar>

	if((status & USER_IP_USART_SR_NF_MASK) == USER_IP_USART_SR_NF_MASK)
	{
		/*TODO*/
	}
	status = HwChannel->SR;
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	60fb      	str	r3, [r7, #12]
}
 8004972:	bf00      	nop
 8004974:	3718      	adds	r7, #24
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	08006738 	.word	0x08006738

08004980 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	af00      	add	r7, sp, #0
    User_Ip_Usart_IrqHandler(USER_IP_USART_CHANNELID_1);
 8004984:	2001      	movs	r0, #1
 8004986:	f7ff ffc1 	bl	800490c <User_Ip_Usart_IrqHandler>
}
 800498a:	bf00      	nop
 800498c:	bd80      	pop	{r7, pc}

0800498e <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 800498e:	b580      	push	{r7, lr}
 8004990:	af00      	add	r7, sp, #0
    User_Ip_Usart_IrqHandler(USER_IP_USART_CHANNELID_2);
 8004992:	2002      	movs	r0, #2
 8004994:	f7ff ffba 	bl	800490c <User_Ip_Usart_IrqHandler>
}
 8004998:	bf00      	nop
 800499a:	bd80      	pop	{r7, pc}

0800499c <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	af00      	add	r7, sp, #0
    User_Ip_Usart_IrqHandler(USER_IP_USART_CHANNELID_3);
 80049a0:	2003      	movs	r0, #3
 80049a2:	f7ff ffb3 	bl	800490c <User_Ip_Usart_IrqHandler>
}
 80049a6:	bf00      	nop
 80049a8:	bd80      	pop	{r7, pc}

080049aa <USART6_IRQHandler>:

void USART6_IRQHandler(void)
{
 80049aa:	b580      	push	{r7, lr}
 80049ac:	af00      	add	r7, sp, #0
    User_Ip_Usart_IrqHandler(USER_IP_USART_CHANNELID_6);
 80049ae:	2006      	movs	r0, #6
 80049b0:	f7ff ffac 	bl	800490c <User_Ip_Usart_IrqHandler>
}
 80049b4:	bf00      	nop
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <User_Slip_Init>:

static User_Slip_Buffer User_Slip_TxBuffer[USER_UART_NUMBEROFCHANNEL_USED];
static User_Slip_Buffer User_Slip_RxBuffer[USER_UART_NUMBEROFCHANNEL_USED];

void User_Slip_Init(uint8_t channelID)
{
 80049b8:	b590      	push	{r4, r7, lr}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	4603      	mov	r3, r0
 80049c0:	71fb      	strb	r3, [r7, #7]
    if(channelID < USER_UART_NUMBEROFCHANNEL_USED)
 80049c2:	79fb      	ldrb	r3, [r7, #7]
 80049c4:	2b11      	cmp	r3, #17
 80049c6:	d821      	bhi.n	8004a0c <User_Slip_Init+0x54>
    {
        User_Slip_RxBuffer[channelID].DataLen = 0U;
 80049c8:	79fb      	ldrb	r3, [r7, #7]
 80049ca:	4a12      	ldr	r2, [pc, #72]	; (8004a14 <User_Slip_Init+0x5c>)
 80049cc:	00db      	lsls	r3, r3, #3
 80049ce:	4413      	add	r3, r2
 80049d0:	2200      	movs	r2, #0
 80049d2:	809a      	strh	r2, [r3, #4]
        User_Slip_TxBuffer[channelID].DataLen = 0U;
 80049d4:	79fb      	ldrb	r3, [r7, #7]
 80049d6:	4a10      	ldr	r2, [pc, #64]	; (8004a18 <User_Slip_Init+0x60>)
 80049d8:	00db      	lsls	r3, r3, #3
 80049da:	4413      	add	r3, r2
 80049dc:	2200      	movs	r2, #0
 80049de:	809a      	strh	r2, [r3, #4]
        User_Slip_RxBuffer[channelID].DataSlipPtr =  (uint8_t *)calloc(USER_SLIP_BUFFERSIZE,sizeof(uint8_t));
 80049e0:	79fc      	ldrb	r4, [r7, #7]
 80049e2:	2101      	movs	r1, #1
 80049e4:	f44f 7081 	mov.w	r0, #258	; 0x102
 80049e8:	f001 fb72 	bl	80060d0 <calloc>
 80049ec:	4603      	mov	r3, r0
 80049ee:	461a      	mov	r2, r3
 80049f0:	4b08      	ldr	r3, [pc, #32]	; (8004a14 <User_Slip_Init+0x5c>)
 80049f2:	f843 2034 	str.w	r2, [r3, r4, lsl #3]
        User_Slip_TxBuffer[channelID].DataSlipPtr =  (uint8_t *)calloc(USER_SLIP_BUFFERSIZE,sizeof(uint8_t));
 80049f6:	79fc      	ldrb	r4, [r7, #7]
 80049f8:	2101      	movs	r1, #1
 80049fa:	f44f 7081 	mov.w	r0, #258	; 0x102
 80049fe:	f001 fb67 	bl	80060d0 <calloc>
 8004a02:	4603      	mov	r3, r0
 8004a04:	461a      	mov	r2, r3
 8004a06:	4b04      	ldr	r3, [pc, #16]	; (8004a18 <User_Slip_Init+0x60>)
 8004a08:	f843 2034 	str.w	r2, [r3, r4, lsl #3]
    }
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd90      	pop	{r4, r7, pc}
 8004a14:	2000037c 	.word	0x2000037c
 8004a18:	200002ec 	.word	0x200002ec

08004a1c <User_Slip_SendFrame>:

Std_ReturnType User_Slip_SendFrame(uint8_t u8ChannelId, uint8_t *u8DataSlipPtr, uint16_t length)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b086      	sub	sp, #24
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	4603      	mov	r3, r0
 8004a24:	6039      	str	r1, [r7, #0]
 8004a26:	71fb      	strb	r3, [r7, #7]
 8004a28:	4613      	mov	r3, r2
 8004a2a:	80bb      	strh	r3, [r7, #4]
    uint8_t u8Val;
    uint16_t u16CountIdx;
    uint16_t u16LenCount;
    Std_ReturnType ret = E_NOT_OK;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	74fb      	strb	r3, [r7, #19]
    User_Slip_Buffer *TxBufPtr = &User_Slip_TxBuffer[u8ChannelId];
 8004a30:	79fb      	ldrb	r3, [r7, #7]
 8004a32:	00db      	lsls	r3, r3, #3
 8004a34:	4a3a      	ldr	r2, [pc, #232]	; (8004b20 <User_Slip_SendFrame+0x104>)
 8004a36:	4413      	add	r3, r2
 8004a38:	60fb      	str	r3, [r7, #12]

    if (USER_SLIP_BUFFERSIZE > length)
 8004a3a:	88bb      	ldrh	r3, [r7, #4]
 8004a3c:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8004a40:	d268      	bcs.n	8004b14 <User_Slip_SendFrame+0xf8>
    {
        u16LenCount = 0;
 8004a42:	2300      	movs	r3, #0
 8004a44:	82bb      	strh	r3, [r7, #20]
        TxBufPtr->DataSlipPtr[u16LenCount] = USER_SLIP_END;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	8abb      	ldrh	r3, [r7, #20]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	22c0      	movs	r2, #192	; 0xc0
 8004a50:	701a      	strb	r2, [r3, #0]
        u16LenCount++;
 8004a52:	8abb      	ldrh	r3, [r7, #20]
 8004a54:	3301      	adds	r3, #1
 8004a56:	82bb      	strh	r3, [r7, #20]

        for(u16CountIdx = 0; u16CountIdx < length; u16CountIdx ++)
 8004a58:	2300      	movs	r3, #0
 8004a5a:	82fb      	strh	r3, [r7, #22]
 8004a5c:	e03d      	b.n	8004ada <User_Slip_SendFrame+0xbe>
        {
            u8Val = u8DataSlipPtr[u16CountIdx];
 8004a5e:	8afb      	ldrh	r3, [r7, #22]
 8004a60:	683a      	ldr	r2, [r7, #0]
 8004a62:	4413      	add	r3, r2
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	72fb      	strb	r3, [r7, #11]
            switch(u8Val)
 8004a68:	7afb      	ldrb	r3, [r7, #11]
 8004a6a:	2bc0      	cmp	r3, #192	; 0xc0
 8004a6c:	d002      	beq.n	8004a74 <User_Slip_SendFrame+0x58>
 8004a6e:	2bdb      	cmp	r3, #219	; 0xdb
 8004a70:	d013      	beq.n	8004a9a <User_Slip_SendFrame+0x7e>
 8004a72:	e025      	b.n	8004ac0 <User_Slip_SendFrame+0xa4>
            {
                case USER_SLIP_END:
                    TxBufPtr->DataSlipPtr[u16LenCount] = USER_SLIP_ESC;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	8abb      	ldrh	r3, [r7, #20]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	22db      	movs	r2, #219	; 0xdb
 8004a7e:	701a      	strb	r2, [r3, #0]
                    u16LenCount++;
 8004a80:	8abb      	ldrh	r3, [r7, #20]
 8004a82:	3301      	adds	r3, #1
 8004a84:	82bb      	strh	r3, [r7, #20]
                    TxBufPtr->DataSlipPtr[u16LenCount] = USER_SLIP_ESC_END;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	8abb      	ldrh	r3, [r7, #20]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	22dc      	movs	r2, #220	; 0xdc
 8004a90:	701a      	strb	r2, [r3, #0]
                    u16LenCount++;
 8004a92:	8abb      	ldrh	r3, [r7, #20]
 8004a94:	3301      	adds	r3, #1
 8004a96:	82bb      	strh	r3, [r7, #20]
                    break;
 8004a98:	e01c      	b.n	8004ad4 <User_Slip_SendFrame+0xb8>
                case USER_SLIP_ESC:
                    TxBufPtr->DataSlipPtr[u16LenCount] = USER_SLIP_ESC;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	8abb      	ldrh	r3, [r7, #20]
 8004aa0:	4413      	add	r3, r2
 8004aa2:	22db      	movs	r2, #219	; 0xdb
 8004aa4:	701a      	strb	r2, [r3, #0]
                    u16LenCount++;
 8004aa6:	8abb      	ldrh	r3, [r7, #20]
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	82bb      	strh	r3, [r7, #20]
                    TxBufPtr->DataSlipPtr[u16LenCount] = USER_SLIP_ESC_ESC;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	8abb      	ldrh	r3, [r7, #20]
 8004ab2:	4413      	add	r3, r2
 8004ab4:	22dd      	movs	r2, #221	; 0xdd
 8004ab6:	701a      	strb	r2, [r3, #0]
                    u16LenCount++;
 8004ab8:	8abb      	ldrh	r3, [r7, #20]
 8004aba:	3301      	adds	r3, #1
 8004abc:	82bb      	strh	r3, [r7, #20]
                    break;
 8004abe:	e009      	b.n	8004ad4 <User_Slip_SendFrame+0xb8>
                default:
                    TxBufPtr->DataSlipPtr[u16LenCount] = u8Val;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	8abb      	ldrh	r3, [r7, #20]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	7afa      	ldrb	r2, [r7, #11]
 8004aca:	701a      	strb	r2, [r3, #0]
                    u16LenCount++;
 8004acc:	8abb      	ldrh	r3, [r7, #20]
 8004ace:	3301      	adds	r3, #1
 8004ad0:	82bb      	strh	r3, [r7, #20]
                    break;
 8004ad2:	bf00      	nop
        for(u16CountIdx = 0; u16CountIdx < length; u16CountIdx ++)
 8004ad4:	8afb      	ldrh	r3, [r7, #22]
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	82fb      	strh	r3, [r7, #22]
 8004ada:	8afa      	ldrh	r2, [r7, #22]
 8004adc:	88bb      	ldrh	r3, [r7, #4]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d3bd      	bcc.n	8004a5e <User_Slip_SendFrame+0x42>
            }
        }
        TxBufPtr->DataSlipPtr[u16LenCount] = USER_SLIP_END;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	8abb      	ldrh	r3, [r7, #20]
 8004ae8:	4413      	add	r3, r2
 8004aea:	22c0      	movs	r2, #192	; 0xc0
 8004aec:	701a      	strb	r2, [r3, #0]
        u16LenCount++;
 8004aee:	8abb      	ldrh	r3, [r7, #20]
 8004af0:	3301      	adds	r3, #1
 8004af2:	82bb      	strh	r3, [r7, #20]
        TxBufPtr->DataLen =  u16LenCount;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	8aba      	ldrh	r2, [r7, #20]
 8004af8:	809a      	strh	r2, [r3, #4]

    	ret = User_Uart_Ipw_AsyncTransmit(u8ChannelId,TxBufPtr->DataSlipPtr,TxBufPtr->DataLen);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6819      	ldr	r1, [r3, #0]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	889b      	ldrh	r3, [r3, #4]
 8004b02:	b21a      	sxth	r2, r3
 8004b04:	79fb      	ldrb	r3, [r7, #7]
 8004b06:	4618      	mov	r0, r3
 8004b08:	f7ff f935 	bl	8003d76 <User_Uart_Ipw_AsyncTransmit>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	74fb      	strb	r3, [r7, #19]
        return ret;
 8004b10:	7cfb      	ldrb	r3, [r7, #19]
 8004b12:	e000      	b.n	8004b16 <User_Slip_SendFrame+0xfa>
    }

    return ret;
 8004b14:	7cfb      	ldrb	r3, [r7, #19]
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3718      	adds	r7, #24
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	200002ec 	.word	0x200002ec

08004b24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004b28:	4b0e      	ldr	r3, [pc, #56]	; (8004b64 <HAL_Init+0x40>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a0d      	ldr	r2, [pc, #52]	; (8004b64 <HAL_Init+0x40>)
 8004b2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004b34:	4b0b      	ldr	r3, [pc, #44]	; (8004b64 <HAL_Init+0x40>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a0a      	ldr	r2, [pc, #40]	; (8004b64 <HAL_Init+0x40>)
 8004b3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b40:	4b08      	ldr	r3, [pc, #32]	; (8004b64 <HAL_Init+0x40>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a07      	ldr	r2, [pc, #28]	; (8004b64 <HAL_Init+0x40>)
 8004b46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b4c:	2003      	movs	r0, #3
 8004b4e:	f000 f94f 	bl	8004df0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004b52:	200f      	movs	r0, #15
 8004b54:	f000 f808 	bl	8004b68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004b58:	f7fc fcae 	bl	80014b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	40023c00 	.word	0x40023c00

08004b68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004b70:	4b12      	ldr	r3, [pc, #72]	; (8004bbc <HAL_InitTick+0x54>)
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	4b12      	ldr	r3, [pc, #72]	; (8004bc0 <HAL_InitTick+0x58>)
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	4619      	mov	r1, r3
 8004b7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b86:	4618      	mov	r0, r3
 8004b88:	f000 f967 	bl	8004e5a <HAL_SYSTICK_Config>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d001      	beq.n	8004b96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e00e      	b.n	8004bb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2b0f      	cmp	r3, #15
 8004b9a:	d80a      	bhi.n	8004bb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	6879      	ldr	r1, [r7, #4]
 8004ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ba4:	f000 f92f 	bl	8004e06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004ba8:	4a06      	ldr	r2, [pc, #24]	; (8004bc4 <HAL_InitTick+0x5c>)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	e000      	b.n	8004bb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3708      	adds	r7, #8
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	20000000 	.word	0x20000000
 8004bc0:	2000011c 	.word	0x2000011c
 8004bc4:	20000118 	.word	0x20000118

08004bc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004bcc:	4b06      	ldr	r3, [pc, #24]	; (8004be8 <HAL_IncTick+0x20>)
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	4b06      	ldr	r3, [pc, #24]	; (8004bec <HAL_IncTick+0x24>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	4a04      	ldr	r2, [pc, #16]	; (8004bec <HAL_IncTick+0x24>)
 8004bda:	6013      	str	r3, [r2, #0]
}
 8004bdc:	bf00      	nop
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop
 8004be8:	2000011c 	.word	0x2000011c
 8004bec:	20000684 	.word	0x20000684

08004bf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	af00      	add	r7, sp, #0
  return uwTick;
 8004bf4:	4b03      	ldr	r3, [pc, #12]	; (8004c04 <HAL_GetTick+0x14>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	20000684 	.word	0x20000684

08004c08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004c10:	f7ff ffee 	bl	8004bf0 <HAL_GetTick>
 8004c14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c20:	d005      	beq.n	8004c2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004c22:	4b0a      	ldr	r3, [pc, #40]	; (8004c4c <HAL_Delay+0x44>)
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	461a      	mov	r2, r3
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004c2e:	bf00      	nop
 8004c30:	f7ff ffde 	bl	8004bf0 <HAL_GetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d8f7      	bhi.n	8004c30 <HAL_Delay+0x28>
  {
  }
}
 8004c40:	bf00      	nop
 8004c42:	bf00      	nop
 8004c44:	3710      	adds	r7, #16
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	2000011c 	.word	0x2000011c

08004c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b085      	sub	sp, #20
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f003 0307 	and.w	r3, r3, #7
 8004c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c60:	4b0c      	ldr	r3, [pc, #48]	; (8004c94 <__NVIC_SetPriorityGrouping+0x44>)
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c66:	68ba      	ldr	r2, [r7, #8]
 8004c68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004c78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c82:	4a04      	ldr	r2, [pc, #16]	; (8004c94 <__NVIC_SetPriorityGrouping+0x44>)
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	60d3      	str	r3, [r2, #12]
}
 8004c88:	bf00      	nop
 8004c8a:	3714      	adds	r7, #20
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr
 8004c94:	e000ed00 	.word	0xe000ed00

08004c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c9c:	4b04      	ldr	r3, [pc, #16]	; (8004cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	0a1b      	lsrs	r3, r3, #8
 8004ca2:	f003 0307 	and.w	r3, r3, #7
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr
 8004cb0:	e000ed00 	.word	0xe000ed00

08004cb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	4603      	mov	r3, r0
 8004cbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	db0b      	blt.n	8004cde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004cc6:	79fb      	ldrb	r3, [r7, #7]
 8004cc8:	f003 021f 	and.w	r2, r3, #31
 8004ccc:	4907      	ldr	r1, [pc, #28]	; (8004cec <__NVIC_EnableIRQ+0x38>)
 8004cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cd2:	095b      	lsrs	r3, r3, #5
 8004cd4:	2001      	movs	r0, #1
 8004cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8004cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004cde:	bf00      	nop
 8004ce0:	370c      	adds	r7, #12
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	e000e100 	.word	0xe000e100

08004cf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	6039      	str	r1, [r7, #0]
 8004cfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	db0a      	blt.n	8004d1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	b2da      	uxtb	r2, r3
 8004d08:	490c      	ldr	r1, [pc, #48]	; (8004d3c <__NVIC_SetPriority+0x4c>)
 8004d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d0e:	0112      	lsls	r2, r2, #4
 8004d10:	b2d2      	uxtb	r2, r2
 8004d12:	440b      	add	r3, r1
 8004d14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d18:	e00a      	b.n	8004d30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	b2da      	uxtb	r2, r3
 8004d1e:	4908      	ldr	r1, [pc, #32]	; (8004d40 <__NVIC_SetPriority+0x50>)
 8004d20:	79fb      	ldrb	r3, [r7, #7]
 8004d22:	f003 030f 	and.w	r3, r3, #15
 8004d26:	3b04      	subs	r3, #4
 8004d28:	0112      	lsls	r2, r2, #4
 8004d2a:	b2d2      	uxtb	r2, r2
 8004d2c:	440b      	add	r3, r1
 8004d2e:	761a      	strb	r2, [r3, #24]
}
 8004d30:	bf00      	nop
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr
 8004d3c:	e000e100 	.word	0xe000e100
 8004d40:	e000ed00 	.word	0xe000ed00

08004d44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b089      	sub	sp, #36	; 0x24
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f003 0307 	and.w	r3, r3, #7
 8004d56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	f1c3 0307 	rsb	r3, r3, #7
 8004d5e:	2b04      	cmp	r3, #4
 8004d60:	bf28      	it	cs
 8004d62:	2304      	movcs	r3, #4
 8004d64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	3304      	adds	r3, #4
 8004d6a:	2b06      	cmp	r3, #6
 8004d6c:	d902      	bls.n	8004d74 <NVIC_EncodePriority+0x30>
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	3b03      	subs	r3, #3
 8004d72:	e000      	b.n	8004d76 <NVIC_EncodePriority+0x32>
 8004d74:	2300      	movs	r3, #0
 8004d76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d78:	f04f 32ff 	mov.w	r2, #4294967295
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d82:	43da      	mvns	r2, r3
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	401a      	ands	r2, r3
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d8c:	f04f 31ff 	mov.w	r1, #4294967295
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	fa01 f303 	lsl.w	r3, r1, r3
 8004d96:	43d9      	mvns	r1, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d9c:	4313      	orrs	r3, r2
         );
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3724      	adds	r7, #36	; 0x24
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
	...

08004dac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	3b01      	subs	r3, #1
 8004db8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004dbc:	d301      	bcc.n	8004dc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e00f      	b.n	8004de2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004dc2:	4a0a      	ldr	r2, [pc, #40]	; (8004dec <SysTick_Config+0x40>)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004dca:	210f      	movs	r1, #15
 8004dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8004dd0:	f7ff ff8e 	bl	8004cf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004dd4:	4b05      	ldr	r3, [pc, #20]	; (8004dec <SysTick_Config+0x40>)
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004dda:	4b04      	ldr	r3, [pc, #16]	; (8004dec <SysTick_Config+0x40>)
 8004ddc:	2207      	movs	r2, #7
 8004dde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3708      	adds	r7, #8
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop
 8004dec:	e000e010 	.word	0xe000e010

08004df0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f7ff ff29 	bl	8004c50 <__NVIC_SetPriorityGrouping>
}
 8004dfe:	bf00      	nop
 8004e00:	3708      	adds	r7, #8
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}

08004e06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004e06:	b580      	push	{r7, lr}
 8004e08:	b086      	sub	sp, #24
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	60b9      	str	r1, [r7, #8]
 8004e10:	607a      	str	r2, [r7, #4]
 8004e12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004e14:	2300      	movs	r3, #0
 8004e16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004e18:	f7ff ff3e 	bl	8004c98 <__NVIC_GetPriorityGrouping>
 8004e1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	68b9      	ldr	r1, [r7, #8]
 8004e22:	6978      	ldr	r0, [r7, #20]
 8004e24:	f7ff ff8e 	bl	8004d44 <NVIC_EncodePriority>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e2e:	4611      	mov	r1, r2
 8004e30:	4618      	mov	r0, r3
 8004e32:	f7ff ff5d 	bl	8004cf0 <__NVIC_SetPriority>
}
 8004e36:	bf00      	nop
 8004e38:	3718      	adds	r7, #24
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b082      	sub	sp, #8
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	4603      	mov	r3, r0
 8004e46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f7ff ff31 	bl	8004cb4 <__NVIC_EnableIRQ>
}
 8004e52:	bf00      	nop
 8004e54:	3708      	adds	r7, #8
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}

08004e5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e5a:	b580      	push	{r7, lr}
 8004e5c:	b082      	sub	sp, #8
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f7ff ffa2 	bl	8004dac <SysTick_Config>
 8004e68:	4603      	mov	r3, r0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3708      	adds	r7, #8
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
	...

08004e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b089      	sub	sp, #36	; 0x24
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004e82:	2300      	movs	r3, #0
 8004e84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004e86:	2300      	movs	r3, #0
 8004e88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	61fb      	str	r3, [r7, #28]
 8004e8e:	e16b      	b.n	8005168 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004e90:	2201      	movs	r2, #1
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	fa02 f303 	lsl.w	r3, r2, r3
 8004e98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	697a      	ldr	r2, [r7, #20]
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004ea4:	693a      	ldr	r2, [r7, #16]
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	f040 815a 	bne.w	8005162 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f003 0303 	and.w	r3, r3, #3
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d005      	beq.n	8004ec6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d130      	bne.n	8004f28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	005b      	lsls	r3, r3, #1
 8004ed0:	2203      	movs	r2, #3
 8004ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed6:	43db      	mvns	r3, r3
 8004ed8:	69ba      	ldr	r2, [r7, #24]
 8004eda:	4013      	ands	r3, r2
 8004edc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	68da      	ldr	r2, [r3, #12]
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	005b      	lsls	r3, r3, #1
 8004ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eea:	69ba      	ldr	r2, [r7, #24]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	69ba      	ldr	r2, [r7, #24]
 8004ef4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004efc:	2201      	movs	r2, #1
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	fa02 f303 	lsl.w	r3, r2, r3
 8004f04:	43db      	mvns	r3, r3
 8004f06:	69ba      	ldr	r2, [r7, #24]
 8004f08:	4013      	ands	r3, r2
 8004f0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	091b      	lsrs	r3, r3, #4
 8004f12:	f003 0201 	and.w	r2, r3, #1
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	fa02 f303 	lsl.w	r3, r2, r3
 8004f1c:	69ba      	ldr	r2, [r7, #24]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	69ba      	ldr	r2, [r7, #24]
 8004f26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	f003 0303 	and.w	r3, r3, #3
 8004f30:	2b03      	cmp	r3, #3
 8004f32:	d017      	beq.n	8004f64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	005b      	lsls	r3, r3, #1
 8004f3e:	2203      	movs	r2, #3
 8004f40:	fa02 f303 	lsl.w	r3, r2, r3
 8004f44:	43db      	mvns	r3, r3
 8004f46:	69ba      	ldr	r2, [r7, #24]
 8004f48:	4013      	ands	r3, r2
 8004f4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	689a      	ldr	r2, [r3, #8]
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	005b      	lsls	r3, r3, #1
 8004f54:	fa02 f303 	lsl.w	r3, r2, r3
 8004f58:	69ba      	ldr	r2, [r7, #24]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	69ba      	ldr	r2, [r7, #24]
 8004f62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	f003 0303 	and.w	r3, r3, #3
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d123      	bne.n	8004fb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	08da      	lsrs	r2, r3, #3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	3208      	adds	r2, #8
 8004f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	f003 0307 	and.w	r3, r3, #7
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	220f      	movs	r2, #15
 8004f88:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8c:	43db      	mvns	r3, r3
 8004f8e:	69ba      	ldr	r2, [r7, #24]
 8004f90:	4013      	ands	r3, r2
 8004f92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	691a      	ldr	r2, [r3, #16]
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	f003 0307 	and.w	r3, r3, #7
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa4:	69ba      	ldr	r2, [r7, #24]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	08da      	lsrs	r2, r3, #3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	3208      	adds	r2, #8
 8004fb2:	69b9      	ldr	r1, [r7, #24]
 8004fb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	005b      	lsls	r3, r3, #1
 8004fc2:	2203      	movs	r2, #3
 8004fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc8:	43db      	mvns	r3, r3
 8004fca:	69ba      	ldr	r2, [r7, #24]
 8004fcc:	4013      	ands	r3, r2
 8004fce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	f003 0203 	and.w	r2, r3, #3
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	005b      	lsls	r3, r3, #1
 8004fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe0:	69ba      	ldr	r2, [r7, #24]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	69ba      	ldr	r2, [r7, #24]
 8004fea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	f000 80b4 	beq.w	8005162 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	60fb      	str	r3, [r7, #12]
 8004ffe:	4b60      	ldr	r3, [pc, #384]	; (8005180 <HAL_GPIO_Init+0x30c>)
 8005000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005002:	4a5f      	ldr	r2, [pc, #380]	; (8005180 <HAL_GPIO_Init+0x30c>)
 8005004:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005008:	6453      	str	r3, [r2, #68]	; 0x44
 800500a:	4b5d      	ldr	r3, [pc, #372]	; (8005180 <HAL_GPIO_Init+0x30c>)
 800500c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800500e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005012:	60fb      	str	r3, [r7, #12]
 8005014:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005016:	4a5b      	ldr	r2, [pc, #364]	; (8005184 <HAL_GPIO_Init+0x310>)
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	089b      	lsrs	r3, r3, #2
 800501c:	3302      	adds	r3, #2
 800501e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005022:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	f003 0303 	and.w	r3, r3, #3
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	220f      	movs	r2, #15
 800502e:	fa02 f303 	lsl.w	r3, r2, r3
 8005032:	43db      	mvns	r3, r3
 8005034:	69ba      	ldr	r2, [r7, #24]
 8005036:	4013      	ands	r3, r2
 8005038:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a52      	ldr	r2, [pc, #328]	; (8005188 <HAL_GPIO_Init+0x314>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d02b      	beq.n	800509a <HAL_GPIO_Init+0x226>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a51      	ldr	r2, [pc, #324]	; (800518c <HAL_GPIO_Init+0x318>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d025      	beq.n	8005096 <HAL_GPIO_Init+0x222>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a50      	ldr	r2, [pc, #320]	; (8005190 <HAL_GPIO_Init+0x31c>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d01f      	beq.n	8005092 <HAL_GPIO_Init+0x21e>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a4f      	ldr	r2, [pc, #316]	; (8005194 <HAL_GPIO_Init+0x320>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d019      	beq.n	800508e <HAL_GPIO_Init+0x21a>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a4e      	ldr	r2, [pc, #312]	; (8005198 <HAL_GPIO_Init+0x324>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d013      	beq.n	800508a <HAL_GPIO_Init+0x216>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a4d      	ldr	r2, [pc, #308]	; (800519c <HAL_GPIO_Init+0x328>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d00d      	beq.n	8005086 <HAL_GPIO_Init+0x212>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a4c      	ldr	r2, [pc, #304]	; (80051a0 <HAL_GPIO_Init+0x32c>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d007      	beq.n	8005082 <HAL_GPIO_Init+0x20e>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a4b      	ldr	r2, [pc, #300]	; (80051a4 <HAL_GPIO_Init+0x330>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d101      	bne.n	800507e <HAL_GPIO_Init+0x20a>
 800507a:	2307      	movs	r3, #7
 800507c:	e00e      	b.n	800509c <HAL_GPIO_Init+0x228>
 800507e:	2308      	movs	r3, #8
 8005080:	e00c      	b.n	800509c <HAL_GPIO_Init+0x228>
 8005082:	2306      	movs	r3, #6
 8005084:	e00a      	b.n	800509c <HAL_GPIO_Init+0x228>
 8005086:	2305      	movs	r3, #5
 8005088:	e008      	b.n	800509c <HAL_GPIO_Init+0x228>
 800508a:	2304      	movs	r3, #4
 800508c:	e006      	b.n	800509c <HAL_GPIO_Init+0x228>
 800508e:	2303      	movs	r3, #3
 8005090:	e004      	b.n	800509c <HAL_GPIO_Init+0x228>
 8005092:	2302      	movs	r3, #2
 8005094:	e002      	b.n	800509c <HAL_GPIO_Init+0x228>
 8005096:	2301      	movs	r3, #1
 8005098:	e000      	b.n	800509c <HAL_GPIO_Init+0x228>
 800509a:	2300      	movs	r3, #0
 800509c:	69fa      	ldr	r2, [r7, #28]
 800509e:	f002 0203 	and.w	r2, r2, #3
 80050a2:	0092      	lsls	r2, r2, #2
 80050a4:	4093      	lsls	r3, r2
 80050a6:	69ba      	ldr	r2, [r7, #24]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80050ac:	4935      	ldr	r1, [pc, #212]	; (8005184 <HAL_GPIO_Init+0x310>)
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	089b      	lsrs	r3, r3, #2
 80050b2:	3302      	adds	r3, #2
 80050b4:	69ba      	ldr	r2, [r7, #24]
 80050b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80050ba:	4b3b      	ldr	r3, [pc, #236]	; (80051a8 <HAL_GPIO_Init+0x334>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	43db      	mvns	r3, r3
 80050c4:	69ba      	ldr	r2, [r7, #24]
 80050c6:	4013      	ands	r3, r2
 80050c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d003      	beq.n	80050de <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80050d6:	69ba      	ldr	r2, [r7, #24]
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	4313      	orrs	r3, r2
 80050dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80050de:	4a32      	ldr	r2, [pc, #200]	; (80051a8 <HAL_GPIO_Init+0x334>)
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80050e4:	4b30      	ldr	r3, [pc, #192]	; (80051a8 <HAL_GPIO_Init+0x334>)
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	43db      	mvns	r3, r3
 80050ee:	69ba      	ldr	r2, [r7, #24]
 80050f0:	4013      	ands	r3, r2
 80050f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d003      	beq.n	8005108 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005100:	69ba      	ldr	r2, [r7, #24]
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	4313      	orrs	r3, r2
 8005106:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005108:	4a27      	ldr	r2, [pc, #156]	; (80051a8 <HAL_GPIO_Init+0x334>)
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800510e:	4b26      	ldr	r3, [pc, #152]	; (80051a8 <HAL_GPIO_Init+0x334>)
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	43db      	mvns	r3, r3
 8005118:	69ba      	ldr	r2, [r7, #24]
 800511a:	4013      	ands	r3, r2
 800511c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d003      	beq.n	8005132 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800512a:	69ba      	ldr	r2, [r7, #24]
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	4313      	orrs	r3, r2
 8005130:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005132:	4a1d      	ldr	r2, [pc, #116]	; (80051a8 <HAL_GPIO_Init+0x334>)
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005138:	4b1b      	ldr	r3, [pc, #108]	; (80051a8 <HAL_GPIO_Init+0x334>)
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	43db      	mvns	r3, r3
 8005142:	69ba      	ldr	r2, [r7, #24]
 8005144:	4013      	ands	r3, r2
 8005146:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d003      	beq.n	800515c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005154:	69ba      	ldr	r2, [r7, #24]
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	4313      	orrs	r3, r2
 800515a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800515c:	4a12      	ldr	r2, [pc, #72]	; (80051a8 <HAL_GPIO_Init+0x334>)
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	3301      	adds	r3, #1
 8005166:	61fb      	str	r3, [r7, #28]
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	2b0f      	cmp	r3, #15
 800516c:	f67f ae90 	bls.w	8004e90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005170:	bf00      	nop
 8005172:	bf00      	nop
 8005174:	3724      	adds	r7, #36	; 0x24
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr
 800517e:	bf00      	nop
 8005180:	40023800 	.word	0x40023800
 8005184:	40013800 	.word	0x40013800
 8005188:	40020000 	.word	0x40020000
 800518c:	40020400 	.word	0x40020400
 8005190:	40020800 	.word	0x40020800
 8005194:	40020c00 	.word	0x40020c00
 8005198:	40021000 	.word	0x40021000
 800519c:	40021400 	.word	0x40021400
 80051a0:	40021800 	.word	0x40021800
 80051a4:	40021c00 	.word	0x40021c00
 80051a8:	40013c00 	.word	0x40013c00

080051ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b085      	sub	sp, #20
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	460b      	mov	r3, r1
 80051b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	691a      	ldr	r2, [r3, #16]
 80051bc:	887b      	ldrh	r3, [r7, #2]
 80051be:	4013      	ands	r3, r2
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d002      	beq.n	80051ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80051c4:	2301      	movs	r3, #1
 80051c6:	73fb      	strb	r3, [r7, #15]
 80051c8:	e001      	b.n	80051ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80051ca:	2300      	movs	r3, #0
 80051cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80051ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3714      	adds	r7, #20
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	460b      	mov	r3, r1
 80051e6:	807b      	strh	r3, [r7, #2]
 80051e8:	4613      	mov	r3, r2
 80051ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80051ec:	787b      	ldrb	r3, [r7, #1]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d003      	beq.n	80051fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80051f2:	887a      	ldrh	r2, [r7, #2]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80051f8:	e003      	b.n	8005202 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80051fa:	887b      	ldrh	r3, [r7, #2]
 80051fc:	041a      	lsls	r2, r3, #16
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	619a      	str	r2, [r3, #24]
}
 8005202:	bf00      	nop
 8005204:	370c      	adds	r7, #12
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr
	...

08005210 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b086      	sub	sp, #24
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d101      	bne.n	8005222 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e264      	b.n	80056ec <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0301 	and.w	r3, r3, #1
 800522a:	2b00      	cmp	r3, #0
 800522c:	d075      	beq.n	800531a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800522e:	4ba3      	ldr	r3, [pc, #652]	; (80054bc <HAL_RCC_OscConfig+0x2ac>)
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f003 030c 	and.w	r3, r3, #12
 8005236:	2b04      	cmp	r3, #4
 8005238:	d00c      	beq.n	8005254 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800523a:	4ba0      	ldr	r3, [pc, #640]	; (80054bc <HAL_RCC_OscConfig+0x2ac>)
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005242:	2b08      	cmp	r3, #8
 8005244:	d112      	bne.n	800526c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005246:	4b9d      	ldr	r3, [pc, #628]	; (80054bc <HAL_RCC_OscConfig+0x2ac>)
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800524e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005252:	d10b      	bne.n	800526c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005254:	4b99      	ldr	r3, [pc, #612]	; (80054bc <HAL_RCC_OscConfig+0x2ac>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800525c:	2b00      	cmp	r3, #0
 800525e:	d05b      	beq.n	8005318 <HAL_RCC_OscConfig+0x108>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d157      	bne.n	8005318 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e23f      	b.n	80056ec <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005274:	d106      	bne.n	8005284 <HAL_RCC_OscConfig+0x74>
 8005276:	4b91      	ldr	r3, [pc, #580]	; (80054bc <HAL_RCC_OscConfig+0x2ac>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a90      	ldr	r2, [pc, #576]	; (80054bc <HAL_RCC_OscConfig+0x2ac>)
 800527c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005280:	6013      	str	r3, [r2, #0]
 8005282:	e01d      	b.n	80052c0 <HAL_RCC_OscConfig+0xb0>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800528c:	d10c      	bne.n	80052a8 <HAL_RCC_OscConfig+0x98>
 800528e:	4b8b      	ldr	r3, [pc, #556]	; (80054bc <HAL_RCC_OscConfig+0x2ac>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a8a      	ldr	r2, [pc, #552]	; (80054bc <HAL_RCC_OscConfig+0x2ac>)
 8005294:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005298:	6013      	str	r3, [r2, #0]
 800529a:	4b88      	ldr	r3, [pc, #544]	; (80054bc <HAL_RCC_OscConfig+0x2ac>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a87      	ldr	r2, [pc, #540]	; (80054bc <HAL_RCC_OscConfig+0x2ac>)
 80052a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052a4:	6013      	str	r3, [r2, #0]
 80052a6:	e00b      	b.n	80052c0 <HAL_RCC_OscConfig+0xb0>
 80052a8:	4b84      	ldr	r3, [pc, #528]	; (80054bc <HAL_RCC_OscConfig+0x2ac>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a83      	ldr	r2, [pc, #524]	; (80054bc <HAL_RCC_OscConfig+0x2ac>)
 80052ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052b2:	6013      	str	r3, [r2, #0]
 80052b4:	4b81      	ldr	r3, [pc, #516]	; (80054bc <HAL_RCC_OscConfig+0x2ac>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a80      	ldr	r2, [pc, #512]	; (80054bc <HAL_RCC_OscConfig+0x2ac>)
 80052ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d013      	beq.n	80052f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052c8:	f7ff fc92 	bl	8004bf0 <HAL_GetTick>
 80052cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052ce:	e008      	b.n	80052e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052d0:	f7ff fc8e 	bl	8004bf0 <HAL_GetTick>
 80052d4:	4602      	mov	r2, r0
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	2b64      	cmp	r3, #100	; 0x64
 80052dc:	d901      	bls.n	80052e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e204      	b.n	80056ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052e2:	4b76      	ldr	r3, [pc, #472]	; (80054bc <HAL_RCC_OscConfig+0x2ac>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d0f0      	beq.n	80052d0 <HAL_RCC_OscConfig+0xc0>
 80052ee:	e014      	b.n	800531a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052f0:	f7ff fc7e 	bl	8004bf0 <HAL_GetTick>
 80052f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052f6:	e008      	b.n	800530a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052f8:	f7ff fc7a 	bl	8004bf0 <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	2b64      	cmp	r3, #100	; 0x64
 8005304:	d901      	bls.n	800530a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e1f0      	b.n	80056ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800530a:	4b6c      	ldr	r3, [pc, #432]	; (80054bc <HAL_RCC_OscConfig+0x2ac>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1f0      	bne.n	80052f8 <HAL_RCC_OscConfig+0xe8>
 8005316:	e000      	b.n	800531a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005318:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0302 	and.w	r3, r3, #2
 8005322:	2b00      	cmp	r3, #0
 8005324:	d063      	beq.n	80053ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005326:	4b65      	ldr	r3, [pc, #404]	; (80054bc <HAL_RCC_OscConfig+0x2ac>)
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f003 030c 	and.w	r3, r3, #12
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00b      	beq.n	800534a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005332:	4b62      	ldr	r3, [pc, #392]	; (80054bc <HAL_RCC_OscConfig+0x2ac>)
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800533a:	2b08      	cmp	r3, #8
 800533c:	d11c      	bne.n	8005378 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800533e:	4b5f      	ldr	r3, [pc, #380]	; (80054bc <HAL_RCC_OscConfig+0x2ac>)
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d116      	bne.n	8005378 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800534a:	4b5c      	ldr	r3, [pc, #368]	; (80054bc <HAL_RCC_OscConfig+0x2ac>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 0302 	and.w	r3, r3, #2
 8005352:	2b00      	cmp	r3, #0
 8005354:	d005      	beq.n	8005362 <HAL_RCC_OscConfig+0x152>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	2b01      	cmp	r3, #1
 800535c:	d001      	beq.n	8005362 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e1c4      	b.n	80056ec <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005362:	4b56      	ldr	r3, [pc, #344]	; (80054bc <HAL_RCC_OscConfig+0x2ac>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	00db      	lsls	r3, r3, #3
 8005370:	4952      	ldr	r1, [pc, #328]	; (80054bc <HAL_RCC_OscConfig+0x2ac>)
 8005372:	4313      	orrs	r3, r2
 8005374:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005376:	e03a      	b.n	80053ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d020      	beq.n	80053c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005380:	4b4f      	ldr	r3, [pc, #316]	; (80054c0 <HAL_RCC_OscConfig+0x2b0>)
 8005382:	2201      	movs	r2, #1
 8005384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005386:	f7ff fc33 	bl	8004bf0 <HAL_GetTick>
 800538a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800538c:	e008      	b.n	80053a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800538e:	f7ff fc2f 	bl	8004bf0 <HAL_GetTick>
 8005392:	4602      	mov	r2, r0
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	2b02      	cmp	r3, #2
 800539a:	d901      	bls.n	80053a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800539c:	2303      	movs	r3, #3
 800539e:	e1a5      	b.n	80056ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053a0:	4b46      	ldr	r3, [pc, #280]	; (80054bc <HAL_RCC_OscConfig+0x2ac>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0302 	and.w	r3, r3, #2
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d0f0      	beq.n	800538e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053ac:	4b43      	ldr	r3, [pc, #268]	; (80054bc <HAL_RCC_OscConfig+0x2ac>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	00db      	lsls	r3, r3, #3
 80053ba:	4940      	ldr	r1, [pc, #256]	; (80054bc <HAL_RCC_OscConfig+0x2ac>)
 80053bc:	4313      	orrs	r3, r2
 80053be:	600b      	str	r3, [r1, #0]
 80053c0:	e015      	b.n	80053ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053c2:	4b3f      	ldr	r3, [pc, #252]	; (80054c0 <HAL_RCC_OscConfig+0x2b0>)
 80053c4:	2200      	movs	r2, #0
 80053c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053c8:	f7ff fc12 	bl	8004bf0 <HAL_GetTick>
 80053cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053ce:	e008      	b.n	80053e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053d0:	f7ff fc0e 	bl	8004bf0 <HAL_GetTick>
 80053d4:	4602      	mov	r2, r0
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d901      	bls.n	80053e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e184      	b.n	80056ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053e2:	4b36      	ldr	r3, [pc, #216]	; (80054bc <HAL_RCC_OscConfig+0x2ac>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0302 	and.w	r3, r3, #2
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d1f0      	bne.n	80053d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0308 	and.w	r3, r3, #8
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d030      	beq.n	800545c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	695b      	ldr	r3, [r3, #20]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d016      	beq.n	8005430 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005402:	4b30      	ldr	r3, [pc, #192]	; (80054c4 <HAL_RCC_OscConfig+0x2b4>)
 8005404:	2201      	movs	r2, #1
 8005406:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005408:	f7ff fbf2 	bl	8004bf0 <HAL_GetTick>
 800540c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800540e:	e008      	b.n	8005422 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005410:	f7ff fbee 	bl	8004bf0 <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	2b02      	cmp	r3, #2
 800541c:	d901      	bls.n	8005422 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800541e:	2303      	movs	r3, #3
 8005420:	e164      	b.n	80056ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005422:	4b26      	ldr	r3, [pc, #152]	; (80054bc <HAL_RCC_OscConfig+0x2ac>)
 8005424:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005426:	f003 0302 	and.w	r3, r3, #2
 800542a:	2b00      	cmp	r3, #0
 800542c:	d0f0      	beq.n	8005410 <HAL_RCC_OscConfig+0x200>
 800542e:	e015      	b.n	800545c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005430:	4b24      	ldr	r3, [pc, #144]	; (80054c4 <HAL_RCC_OscConfig+0x2b4>)
 8005432:	2200      	movs	r2, #0
 8005434:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005436:	f7ff fbdb 	bl	8004bf0 <HAL_GetTick>
 800543a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800543c:	e008      	b.n	8005450 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800543e:	f7ff fbd7 	bl	8004bf0 <HAL_GetTick>
 8005442:	4602      	mov	r2, r0
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	2b02      	cmp	r3, #2
 800544a:	d901      	bls.n	8005450 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800544c:	2303      	movs	r3, #3
 800544e:	e14d      	b.n	80056ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005450:	4b1a      	ldr	r3, [pc, #104]	; (80054bc <HAL_RCC_OscConfig+0x2ac>)
 8005452:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005454:	f003 0302 	and.w	r3, r3, #2
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1f0      	bne.n	800543e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0304 	and.w	r3, r3, #4
 8005464:	2b00      	cmp	r3, #0
 8005466:	f000 80a0 	beq.w	80055aa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800546a:	2300      	movs	r3, #0
 800546c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800546e:	4b13      	ldr	r3, [pc, #76]	; (80054bc <HAL_RCC_OscConfig+0x2ac>)
 8005470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d10f      	bne.n	800549a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800547a:	2300      	movs	r3, #0
 800547c:	60bb      	str	r3, [r7, #8]
 800547e:	4b0f      	ldr	r3, [pc, #60]	; (80054bc <HAL_RCC_OscConfig+0x2ac>)
 8005480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005482:	4a0e      	ldr	r2, [pc, #56]	; (80054bc <HAL_RCC_OscConfig+0x2ac>)
 8005484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005488:	6413      	str	r3, [r2, #64]	; 0x40
 800548a:	4b0c      	ldr	r3, [pc, #48]	; (80054bc <HAL_RCC_OscConfig+0x2ac>)
 800548c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005492:	60bb      	str	r3, [r7, #8]
 8005494:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005496:	2301      	movs	r3, #1
 8005498:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800549a:	4b0b      	ldr	r3, [pc, #44]	; (80054c8 <HAL_RCC_OscConfig+0x2b8>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d121      	bne.n	80054ea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054a6:	4b08      	ldr	r3, [pc, #32]	; (80054c8 <HAL_RCC_OscConfig+0x2b8>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a07      	ldr	r2, [pc, #28]	; (80054c8 <HAL_RCC_OscConfig+0x2b8>)
 80054ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054b2:	f7ff fb9d 	bl	8004bf0 <HAL_GetTick>
 80054b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054b8:	e011      	b.n	80054de <HAL_RCC_OscConfig+0x2ce>
 80054ba:	bf00      	nop
 80054bc:	40023800 	.word	0x40023800
 80054c0:	42470000 	.word	0x42470000
 80054c4:	42470e80 	.word	0x42470e80
 80054c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054cc:	f7ff fb90 	bl	8004bf0 <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d901      	bls.n	80054de <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e106      	b.n	80056ec <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054de:	4b85      	ldr	r3, [pc, #532]	; (80056f4 <HAL_RCC_OscConfig+0x4e4>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d0f0      	beq.n	80054cc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d106      	bne.n	8005500 <HAL_RCC_OscConfig+0x2f0>
 80054f2:	4b81      	ldr	r3, [pc, #516]	; (80056f8 <HAL_RCC_OscConfig+0x4e8>)
 80054f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054f6:	4a80      	ldr	r2, [pc, #512]	; (80056f8 <HAL_RCC_OscConfig+0x4e8>)
 80054f8:	f043 0301 	orr.w	r3, r3, #1
 80054fc:	6713      	str	r3, [r2, #112]	; 0x70
 80054fe:	e01c      	b.n	800553a <HAL_RCC_OscConfig+0x32a>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	2b05      	cmp	r3, #5
 8005506:	d10c      	bne.n	8005522 <HAL_RCC_OscConfig+0x312>
 8005508:	4b7b      	ldr	r3, [pc, #492]	; (80056f8 <HAL_RCC_OscConfig+0x4e8>)
 800550a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800550c:	4a7a      	ldr	r2, [pc, #488]	; (80056f8 <HAL_RCC_OscConfig+0x4e8>)
 800550e:	f043 0304 	orr.w	r3, r3, #4
 8005512:	6713      	str	r3, [r2, #112]	; 0x70
 8005514:	4b78      	ldr	r3, [pc, #480]	; (80056f8 <HAL_RCC_OscConfig+0x4e8>)
 8005516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005518:	4a77      	ldr	r2, [pc, #476]	; (80056f8 <HAL_RCC_OscConfig+0x4e8>)
 800551a:	f043 0301 	orr.w	r3, r3, #1
 800551e:	6713      	str	r3, [r2, #112]	; 0x70
 8005520:	e00b      	b.n	800553a <HAL_RCC_OscConfig+0x32a>
 8005522:	4b75      	ldr	r3, [pc, #468]	; (80056f8 <HAL_RCC_OscConfig+0x4e8>)
 8005524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005526:	4a74      	ldr	r2, [pc, #464]	; (80056f8 <HAL_RCC_OscConfig+0x4e8>)
 8005528:	f023 0301 	bic.w	r3, r3, #1
 800552c:	6713      	str	r3, [r2, #112]	; 0x70
 800552e:	4b72      	ldr	r3, [pc, #456]	; (80056f8 <HAL_RCC_OscConfig+0x4e8>)
 8005530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005532:	4a71      	ldr	r2, [pc, #452]	; (80056f8 <HAL_RCC_OscConfig+0x4e8>)
 8005534:	f023 0304 	bic.w	r3, r3, #4
 8005538:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d015      	beq.n	800556e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005542:	f7ff fb55 	bl	8004bf0 <HAL_GetTick>
 8005546:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005548:	e00a      	b.n	8005560 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800554a:	f7ff fb51 	bl	8004bf0 <HAL_GetTick>
 800554e:	4602      	mov	r2, r0
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	f241 3288 	movw	r2, #5000	; 0x1388
 8005558:	4293      	cmp	r3, r2
 800555a:	d901      	bls.n	8005560 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	e0c5      	b.n	80056ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005560:	4b65      	ldr	r3, [pc, #404]	; (80056f8 <HAL_RCC_OscConfig+0x4e8>)
 8005562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005564:	f003 0302 	and.w	r3, r3, #2
 8005568:	2b00      	cmp	r3, #0
 800556a:	d0ee      	beq.n	800554a <HAL_RCC_OscConfig+0x33a>
 800556c:	e014      	b.n	8005598 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800556e:	f7ff fb3f 	bl	8004bf0 <HAL_GetTick>
 8005572:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005574:	e00a      	b.n	800558c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005576:	f7ff fb3b 	bl	8004bf0 <HAL_GetTick>
 800557a:	4602      	mov	r2, r0
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	f241 3288 	movw	r2, #5000	; 0x1388
 8005584:	4293      	cmp	r3, r2
 8005586:	d901      	bls.n	800558c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005588:	2303      	movs	r3, #3
 800558a:	e0af      	b.n	80056ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800558c:	4b5a      	ldr	r3, [pc, #360]	; (80056f8 <HAL_RCC_OscConfig+0x4e8>)
 800558e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005590:	f003 0302 	and.w	r3, r3, #2
 8005594:	2b00      	cmp	r3, #0
 8005596:	d1ee      	bne.n	8005576 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005598:	7dfb      	ldrb	r3, [r7, #23]
 800559a:	2b01      	cmp	r3, #1
 800559c:	d105      	bne.n	80055aa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800559e:	4b56      	ldr	r3, [pc, #344]	; (80056f8 <HAL_RCC_OscConfig+0x4e8>)
 80055a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a2:	4a55      	ldr	r2, [pc, #340]	; (80056f8 <HAL_RCC_OscConfig+0x4e8>)
 80055a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	699b      	ldr	r3, [r3, #24]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	f000 809b 	beq.w	80056ea <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80055b4:	4b50      	ldr	r3, [pc, #320]	; (80056f8 <HAL_RCC_OscConfig+0x4e8>)
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	f003 030c 	and.w	r3, r3, #12
 80055bc:	2b08      	cmp	r3, #8
 80055be:	d05c      	beq.n	800567a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d141      	bne.n	800564c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055c8:	4b4c      	ldr	r3, [pc, #304]	; (80056fc <HAL_RCC_OscConfig+0x4ec>)
 80055ca:	2200      	movs	r2, #0
 80055cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055ce:	f7ff fb0f 	bl	8004bf0 <HAL_GetTick>
 80055d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055d4:	e008      	b.n	80055e8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055d6:	f7ff fb0b 	bl	8004bf0 <HAL_GetTick>
 80055da:	4602      	mov	r2, r0
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	2b02      	cmp	r3, #2
 80055e2:	d901      	bls.n	80055e8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e081      	b.n	80056ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055e8:	4b43      	ldr	r3, [pc, #268]	; (80056f8 <HAL_RCC_OscConfig+0x4e8>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d1f0      	bne.n	80055d6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	69da      	ldr	r2, [r3, #28]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a1b      	ldr	r3, [r3, #32]
 80055fc:	431a      	orrs	r2, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005602:	019b      	lsls	r3, r3, #6
 8005604:	431a      	orrs	r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800560a:	085b      	lsrs	r3, r3, #1
 800560c:	3b01      	subs	r3, #1
 800560e:	041b      	lsls	r3, r3, #16
 8005610:	431a      	orrs	r2, r3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005616:	061b      	lsls	r3, r3, #24
 8005618:	4937      	ldr	r1, [pc, #220]	; (80056f8 <HAL_RCC_OscConfig+0x4e8>)
 800561a:	4313      	orrs	r3, r2
 800561c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800561e:	4b37      	ldr	r3, [pc, #220]	; (80056fc <HAL_RCC_OscConfig+0x4ec>)
 8005620:	2201      	movs	r2, #1
 8005622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005624:	f7ff fae4 	bl	8004bf0 <HAL_GetTick>
 8005628:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800562a:	e008      	b.n	800563e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800562c:	f7ff fae0 	bl	8004bf0 <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	2b02      	cmp	r3, #2
 8005638:	d901      	bls.n	800563e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	e056      	b.n	80056ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800563e:	4b2e      	ldr	r3, [pc, #184]	; (80056f8 <HAL_RCC_OscConfig+0x4e8>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d0f0      	beq.n	800562c <HAL_RCC_OscConfig+0x41c>
 800564a:	e04e      	b.n	80056ea <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800564c:	4b2b      	ldr	r3, [pc, #172]	; (80056fc <HAL_RCC_OscConfig+0x4ec>)
 800564e:	2200      	movs	r2, #0
 8005650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005652:	f7ff facd 	bl	8004bf0 <HAL_GetTick>
 8005656:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005658:	e008      	b.n	800566c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800565a:	f7ff fac9 	bl	8004bf0 <HAL_GetTick>
 800565e:	4602      	mov	r2, r0
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	2b02      	cmp	r3, #2
 8005666:	d901      	bls.n	800566c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	e03f      	b.n	80056ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800566c:	4b22      	ldr	r3, [pc, #136]	; (80056f8 <HAL_RCC_OscConfig+0x4e8>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d1f0      	bne.n	800565a <HAL_RCC_OscConfig+0x44a>
 8005678:	e037      	b.n	80056ea <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	2b01      	cmp	r3, #1
 8005680:	d101      	bne.n	8005686 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e032      	b.n	80056ec <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005686:	4b1c      	ldr	r3, [pc, #112]	; (80056f8 <HAL_RCC_OscConfig+0x4e8>)
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	699b      	ldr	r3, [r3, #24]
 8005690:	2b01      	cmp	r3, #1
 8005692:	d028      	beq.n	80056e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800569e:	429a      	cmp	r2, r3
 80056a0:	d121      	bne.n	80056e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d11a      	bne.n	80056e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80056b6:	4013      	ands	r3, r2
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80056bc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056be:	4293      	cmp	r3, r2
 80056c0:	d111      	bne.n	80056e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056cc:	085b      	lsrs	r3, r3, #1
 80056ce:	3b01      	subs	r3, #1
 80056d0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d107      	bne.n	80056e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d001      	beq.n	80056ea <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e000      	b.n	80056ec <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80056ea:	2300      	movs	r3, #0
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3718      	adds	r7, #24
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	40007000 	.word	0x40007000
 80056f8:	40023800 	.word	0x40023800
 80056fc:	42470060 	.word	0x42470060

08005700 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d101      	bne.n	8005714 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	e0cc      	b.n	80058ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005714:	4b68      	ldr	r3, [pc, #416]	; (80058b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 0307 	and.w	r3, r3, #7
 800571c:	683a      	ldr	r2, [r7, #0]
 800571e:	429a      	cmp	r2, r3
 8005720:	d90c      	bls.n	800573c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005722:	4b65      	ldr	r3, [pc, #404]	; (80058b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005724:	683a      	ldr	r2, [r7, #0]
 8005726:	b2d2      	uxtb	r2, r2
 8005728:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800572a:	4b63      	ldr	r3, [pc, #396]	; (80058b8 <HAL_RCC_ClockConfig+0x1b8>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0307 	and.w	r3, r3, #7
 8005732:	683a      	ldr	r2, [r7, #0]
 8005734:	429a      	cmp	r2, r3
 8005736:	d001      	beq.n	800573c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e0b8      	b.n	80058ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 0302 	and.w	r3, r3, #2
 8005744:	2b00      	cmp	r3, #0
 8005746:	d020      	beq.n	800578a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0304 	and.w	r3, r3, #4
 8005750:	2b00      	cmp	r3, #0
 8005752:	d005      	beq.n	8005760 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005754:	4b59      	ldr	r3, [pc, #356]	; (80058bc <HAL_RCC_ClockConfig+0x1bc>)
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	4a58      	ldr	r2, [pc, #352]	; (80058bc <HAL_RCC_ClockConfig+0x1bc>)
 800575a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800575e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 0308 	and.w	r3, r3, #8
 8005768:	2b00      	cmp	r3, #0
 800576a:	d005      	beq.n	8005778 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800576c:	4b53      	ldr	r3, [pc, #332]	; (80058bc <HAL_RCC_ClockConfig+0x1bc>)
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	4a52      	ldr	r2, [pc, #328]	; (80058bc <HAL_RCC_ClockConfig+0x1bc>)
 8005772:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005776:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005778:	4b50      	ldr	r3, [pc, #320]	; (80058bc <HAL_RCC_ClockConfig+0x1bc>)
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	494d      	ldr	r1, [pc, #308]	; (80058bc <HAL_RCC_ClockConfig+0x1bc>)
 8005786:	4313      	orrs	r3, r2
 8005788:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0301 	and.w	r3, r3, #1
 8005792:	2b00      	cmp	r3, #0
 8005794:	d044      	beq.n	8005820 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	2b01      	cmp	r3, #1
 800579c:	d107      	bne.n	80057ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800579e:	4b47      	ldr	r3, [pc, #284]	; (80058bc <HAL_RCC_ClockConfig+0x1bc>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d119      	bne.n	80057de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e07f      	b.n	80058ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d003      	beq.n	80057be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057ba:	2b03      	cmp	r3, #3
 80057bc:	d107      	bne.n	80057ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057be:	4b3f      	ldr	r3, [pc, #252]	; (80058bc <HAL_RCC_ClockConfig+0x1bc>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d109      	bne.n	80057de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e06f      	b.n	80058ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057ce:	4b3b      	ldr	r3, [pc, #236]	; (80058bc <HAL_RCC_ClockConfig+0x1bc>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0302 	and.w	r3, r3, #2
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d101      	bne.n	80057de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e067      	b.n	80058ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057de:	4b37      	ldr	r3, [pc, #220]	; (80058bc <HAL_RCC_ClockConfig+0x1bc>)
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	f023 0203 	bic.w	r2, r3, #3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	4934      	ldr	r1, [pc, #208]	; (80058bc <HAL_RCC_ClockConfig+0x1bc>)
 80057ec:	4313      	orrs	r3, r2
 80057ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057f0:	f7ff f9fe 	bl	8004bf0 <HAL_GetTick>
 80057f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057f6:	e00a      	b.n	800580e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057f8:	f7ff f9fa 	bl	8004bf0 <HAL_GetTick>
 80057fc:	4602      	mov	r2, r0
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	f241 3288 	movw	r2, #5000	; 0x1388
 8005806:	4293      	cmp	r3, r2
 8005808:	d901      	bls.n	800580e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800580a:	2303      	movs	r3, #3
 800580c:	e04f      	b.n	80058ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800580e:	4b2b      	ldr	r3, [pc, #172]	; (80058bc <HAL_RCC_ClockConfig+0x1bc>)
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	f003 020c 	and.w	r2, r3, #12
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	429a      	cmp	r2, r3
 800581e:	d1eb      	bne.n	80057f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005820:	4b25      	ldr	r3, [pc, #148]	; (80058b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 0307 	and.w	r3, r3, #7
 8005828:	683a      	ldr	r2, [r7, #0]
 800582a:	429a      	cmp	r2, r3
 800582c:	d20c      	bcs.n	8005848 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800582e:	4b22      	ldr	r3, [pc, #136]	; (80058b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005830:	683a      	ldr	r2, [r7, #0]
 8005832:	b2d2      	uxtb	r2, r2
 8005834:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005836:	4b20      	ldr	r3, [pc, #128]	; (80058b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 0307 	and.w	r3, r3, #7
 800583e:	683a      	ldr	r2, [r7, #0]
 8005840:	429a      	cmp	r2, r3
 8005842:	d001      	beq.n	8005848 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	e032      	b.n	80058ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 0304 	and.w	r3, r3, #4
 8005850:	2b00      	cmp	r3, #0
 8005852:	d008      	beq.n	8005866 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005854:	4b19      	ldr	r3, [pc, #100]	; (80058bc <HAL_RCC_ClockConfig+0x1bc>)
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	4916      	ldr	r1, [pc, #88]	; (80058bc <HAL_RCC_ClockConfig+0x1bc>)
 8005862:	4313      	orrs	r3, r2
 8005864:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 0308 	and.w	r3, r3, #8
 800586e:	2b00      	cmp	r3, #0
 8005870:	d009      	beq.n	8005886 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005872:	4b12      	ldr	r3, [pc, #72]	; (80058bc <HAL_RCC_ClockConfig+0x1bc>)
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	00db      	lsls	r3, r3, #3
 8005880:	490e      	ldr	r1, [pc, #56]	; (80058bc <HAL_RCC_ClockConfig+0x1bc>)
 8005882:	4313      	orrs	r3, r2
 8005884:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005886:	f000 f821 	bl	80058cc <HAL_RCC_GetSysClockFreq>
 800588a:	4602      	mov	r2, r0
 800588c:	4b0b      	ldr	r3, [pc, #44]	; (80058bc <HAL_RCC_ClockConfig+0x1bc>)
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	091b      	lsrs	r3, r3, #4
 8005892:	f003 030f 	and.w	r3, r3, #15
 8005896:	490a      	ldr	r1, [pc, #40]	; (80058c0 <HAL_RCC_ClockConfig+0x1c0>)
 8005898:	5ccb      	ldrb	r3, [r1, r3]
 800589a:	fa22 f303 	lsr.w	r3, r2, r3
 800589e:	4a09      	ldr	r2, [pc, #36]	; (80058c4 <HAL_RCC_ClockConfig+0x1c4>)
 80058a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80058a2:	4b09      	ldr	r3, [pc, #36]	; (80058c8 <HAL_RCC_ClockConfig+0x1c8>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4618      	mov	r0, r3
 80058a8:	f7ff f95e 	bl	8004b68 <HAL_InitTick>

  return HAL_OK;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3710      	adds	r7, #16
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop
 80058b8:	40023c00 	.word	0x40023c00
 80058bc:	40023800 	.word	0x40023800
 80058c0:	080065cc 	.word	0x080065cc
 80058c4:	20000000 	.word	0x20000000
 80058c8:	20000118 	.word	0x20000118

080058cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058cc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80058d0:	b084      	sub	sp, #16
 80058d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80058d4:	2300      	movs	r3, #0
 80058d6:	607b      	str	r3, [r7, #4]
 80058d8:	2300      	movs	r3, #0
 80058da:	60fb      	str	r3, [r7, #12]
 80058dc:	2300      	movs	r3, #0
 80058de:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80058e0:	2300      	movs	r3, #0
 80058e2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80058e4:	4b67      	ldr	r3, [pc, #412]	; (8005a84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	f003 030c 	and.w	r3, r3, #12
 80058ec:	2b08      	cmp	r3, #8
 80058ee:	d00d      	beq.n	800590c <HAL_RCC_GetSysClockFreq+0x40>
 80058f0:	2b08      	cmp	r3, #8
 80058f2:	f200 80bd 	bhi.w	8005a70 <HAL_RCC_GetSysClockFreq+0x1a4>
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d002      	beq.n	8005900 <HAL_RCC_GetSysClockFreq+0x34>
 80058fa:	2b04      	cmp	r3, #4
 80058fc:	d003      	beq.n	8005906 <HAL_RCC_GetSysClockFreq+0x3a>
 80058fe:	e0b7      	b.n	8005a70 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005900:	4b61      	ldr	r3, [pc, #388]	; (8005a88 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005902:	60bb      	str	r3, [r7, #8]
       break;
 8005904:	e0b7      	b.n	8005a76 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005906:	4b61      	ldr	r3, [pc, #388]	; (8005a8c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005908:	60bb      	str	r3, [r7, #8]
      break;
 800590a:	e0b4      	b.n	8005a76 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800590c:	4b5d      	ldr	r3, [pc, #372]	; (8005a84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005914:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005916:	4b5b      	ldr	r3, [pc, #364]	; (8005a84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d04d      	beq.n	80059be <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005922:	4b58      	ldr	r3, [pc, #352]	; (8005a84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	099b      	lsrs	r3, r3, #6
 8005928:	461a      	mov	r2, r3
 800592a:	f04f 0300 	mov.w	r3, #0
 800592e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005932:	f04f 0100 	mov.w	r1, #0
 8005936:	ea02 0800 	and.w	r8, r2, r0
 800593a:	ea03 0901 	and.w	r9, r3, r1
 800593e:	4640      	mov	r0, r8
 8005940:	4649      	mov	r1, r9
 8005942:	f04f 0200 	mov.w	r2, #0
 8005946:	f04f 0300 	mov.w	r3, #0
 800594a:	014b      	lsls	r3, r1, #5
 800594c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005950:	0142      	lsls	r2, r0, #5
 8005952:	4610      	mov	r0, r2
 8005954:	4619      	mov	r1, r3
 8005956:	ebb0 0008 	subs.w	r0, r0, r8
 800595a:	eb61 0109 	sbc.w	r1, r1, r9
 800595e:	f04f 0200 	mov.w	r2, #0
 8005962:	f04f 0300 	mov.w	r3, #0
 8005966:	018b      	lsls	r3, r1, #6
 8005968:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800596c:	0182      	lsls	r2, r0, #6
 800596e:	1a12      	subs	r2, r2, r0
 8005970:	eb63 0301 	sbc.w	r3, r3, r1
 8005974:	f04f 0000 	mov.w	r0, #0
 8005978:	f04f 0100 	mov.w	r1, #0
 800597c:	00d9      	lsls	r1, r3, #3
 800597e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005982:	00d0      	lsls	r0, r2, #3
 8005984:	4602      	mov	r2, r0
 8005986:	460b      	mov	r3, r1
 8005988:	eb12 0208 	adds.w	r2, r2, r8
 800598c:	eb43 0309 	adc.w	r3, r3, r9
 8005990:	f04f 0000 	mov.w	r0, #0
 8005994:	f04f 0100 	mov.w	r1, #0
 8005998:	0259      	lsls	r1, r3, #9
 800599a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800599e:	0250      	lsls	r0, r2, #9
 80059a0:	4602      	mov	r2, r0
 80059a2:	460b      	mov	r3, r1
 80059a4:	4610      	mov	r0, r2
 80059a6:	4619      	mov	r1, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	461a      	mov	r2, r3
 80059ac:	f04f 0300 	mov.w	r3, #0
 80059b0:	f7fb f880 	bl	8000ab4 <__aeabi_uldivmod>
 80059b4:	4602      	mov	r2, r0
 80059b6:	460b      	mov	r3, r1
 80059b8:	4613      	mov	r3, r2
 80059ba:	60fb      	str	r3, [r7, #12]
 80059bc:	e04a      	b.n	8005a54 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059be:	4b31      	ldr	r3, [pc, #196]	; (8005a84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	099b      	lsrs	r3, r3, #6
 80059c4:	461a      	mov	r2, r3
 80059c6:	f04f 0300 	mov.w	r3, #0
 80059ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80059ce:	f04f 0100 	mov.w	r1, #0
 80059d2:	ea02 0400 	and.w	r4, r2, r0
 80059d6:	ea03 0501 	and.w	r5, r3, r1
 80059da:	4620      	mov	r0, r4
 80059dc:	4629      	mov	r1, r5
 80059de:	f04f 0200 	mov.w	r2, #0
 80059e2:	f04f 0300 	mov.w	r3, #0
 80059e6:	014b      	lsls	r3, r1, #5
 80059e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80059ec:	0142      	lsls	r2, r0, #5
 80059ee:	4610      	mov	r0, r2
 80059f0:	4619      	mov	r1, r3
 80059f2:	1b00      	subs	r0, r0, r4
 80059f4:	eb61 0105 	sbc.w	r1, r1, r5
 80059f8:	f04f 0200 	mov.w	r2, #0
 80059fc:	f04f 0300 	mov.w	r3, #0
 8005a00:	018b      	lsls	r3, r1, #6
 8005a02:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005a06:	0182      	lsls	r2, r0, #6
 8005a08:	1a12      	subs	r2, r2, r0
 8005a0a:	eb63 0301 	sbc.w	r3, r3, r1
 8005a0e:	f04f 0000 	mov.w	r0, #0
 8005a12:	f04f 0100 	mov.w	r1, #0
 8005a16:	00d9      	lsls	r1, r3, #3
 8005a18:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005a1c:	00d0      	lsls	r0, r2, #3
 8005a1e:	4602      	mov	r2, r0
 8005a20:	460b      	mov	r3, r1
 8005a22:	1912      	adds	r2, r2, r4
 8005a24:	eb45 0303 	adc.w	r3, r5, r3
 8005a28:	f04f 0000 	mov.w	r0, #0
 8005a2c:	f04f 0100 	mov.w	r1, #0
 8005a30:	0299      	lsls	r1, r3, #10
 8005a32:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005a36:	0290      	lsls	r0, r2, #10
 8005a38:	4602      	mov	r2, r0
 8005a3a:	460b      	mov	r3, r1
 8005a3c:	4610      	mov	r0, r2
 8005a3e:	4619      	mov	r1, r3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	461a      	mov	r2, r3
 8005a44:	f04f 0300 	mov.w	r3, #0
 8005a48:	f7fb f834 	bl	8000ab4 <__aeabi_uldivmod>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	460b      	mov	r3, r1
 8005a50:	4613      	mov	r3, r2
 8005a52:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005a54:	4b0b      	ldr	r3, [pc, #44]	; (8005a84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	0c1b      	lsrs	r3, r3, #16
 8005a5a:	f003 0303 	and.w	r3, r3, #3
 8005a5e:	3301      	adds	r3, #1
 8005a60:	005b      	lsls	r3, r3, #1
 8005a62:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a6c:	60bb      	str	r3, [r7, #8]
      break;
 8005a6e:	e002      	b.n	8005a76 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a70:	4b05      	ldr	r3, [pc, #20]	; (8005a88 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005a72:	60bb      	str	r3, [r7, #8]
      break;
 8005a74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a76:	68bb      	ldr	r3, [r7, #8]
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3710      	adds	r7, #16
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005a82:	bf00      	nop
 8005a84:	40023800 	.word	0x40023800
 8005a88:	00f42400 	.word	0x00f42400
 8005a8c:	007a1200 	.word	0x007a1200

08005a90 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b082      	sub	sp, #8
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d101      	bne.n	8005aa2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e01c      	b.n	8005adc <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	795b      	ldrb	r3, [r3, #5]
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d105      	bne.n	8005ab8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f7fb fc60 	bl	8001378 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2202      	movs	r2, #2
 8005abc:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f042 0204 	orr.w	r2, r2, #4
 8005acc:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8005ada:	2300      	movs	r3, #0
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3708      	adds	r7, #8
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b082      	sub	sp, #8
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d101      	bne.n	8005af6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e07b      	b.n	8005bee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d108      	bne.n	8005b10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b06:	d009      	beq.n	8005b1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	61da      	str	r2, [r3, #28]
 8005b0e:	e005      	b.n	8005b1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d106      	bne.n	8005b3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f7fb fc76 	bl	8001428 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2202      	movs	r2, #2
 8005b40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b52:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005b64:	431a      	orrs	r2, r3
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b6e:	431a      	orrs	r2, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	691b      	ldr	r3, [r3, #16]
 8005b74:	f003 0302 	and.w	r3, r3, #2
 8005b78:	431a      	orrs	r2, r3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	695b      	ldr	r3, [r3, #20]
 8005b7e:	f003 0301 	and.w	r3, r3, #1
 8005b82:	431a      	orrs	r2, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	699b      	ldr	r3, [r3, #24]
 8005b88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b8c:	431a      	orrs	r2, r3
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	69db      	ldr	r3, [r3, #28]
 8005b92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b96:	431a      	orrs	r2, r3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6a1b      	ldr	r3, [r3, #32]
 8005b9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ba0:	ea42 0103 	orr.w	r1, r2, r3
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	430a      	orrs	r2, r1
 8005bb2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	0c1b      	lsrs	r3, r3, #16
 8005bba:	f003 0104 	and.w	r1, r3, #4
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc2:	f003 0210 	and.w	r2, r3, #16
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	430a      	orrs	r2, r1
 8005bcc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	69da      	ldr	r2, [r3, #28]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bdc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3708      	adds	r7, #8
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}

08005bf6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b08c      	sub	sp, #48	; 0x30
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	60f8      	str	r0, [r7, #12]
 8005bfe:	60b9      	str	r1, [r7, #8]
 8005c00:	607a      	str	r2, [r7, #4]
 8005c02:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005c04:	2301      	movs	r3, #1
 8005c06:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d101      	bne.n	8005c1c <HAL_SPI_TransmitReceive+0x26>
 8005c18:	2302      	movs	r3, #2
 8005c1a:	e18a      	b.n	8005f32 <HAL_SPI_TransmitReceive+0x33c>
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c24:	f7fe ffe4 	bl	8004bf0 <HAL_GetTick>
 8005c28:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005c3a:	887b      	ldrh	r3, [r7, #2]
 8005c3c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005c3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d00f      	beq.n	8005c66 <HAL_SPI_TransmitReceive+0x70>
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c4c:	d107      	bne.n	8005c5e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d103      	bne.n	8005c5e <HAL_SPI_TransmitReceive+0x68>
 8005c56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c5a:	2b04      	cmp	r3, #4
 8005c5c:	d003      	beq.n	8005c66 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005c5e:	2302      	movs	r3, #2
 8005c60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005c64:	e15b      	b.n	8005f1e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d005      	beq.n	8005c78 <HAL_SPI_TransmitReceive+0x82>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d002      	beq.n	8005c78 <HAL_SPI_TransmitReceive+0x82>
 8005c72:	887b      	ldrh	r3, [r7, #2]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d103      	bne.n	8005c80 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005c7e:	e14e      	b.n	8005f1e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	2b04      	cmp	r3, #4
 8005c8a:	d003      	beq.n	8005c94 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2205      	movs	r2, #5
 8005c90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2200      	movs	r2, #0
 8005c98:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	887a      	ldrh	r2, [r7, #2]
 8005ca4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	887a      	ldrh	r2, [r7, #2]
 8005caa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	68ba      	ldr	r2, [r7, #8]
 8005cb0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	887a      	ldrh	r2, [r7, #2]
 8005cb6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	887a      	ldrh	r2, [r7, #2]
 8005cbc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cd4:	2b40      	cmp	r3, #64	; 0x40
 8005cd6:	d007      	beq.n	8005ce8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ce6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cf0:	d178      	bne.n	8005de4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d002      	beq.n	8005d00 <HAL_SPI_TransmitReceive+0x10a>
 8005cfa:	8b7b      	ldrh	r3, [r7, #26]
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d166      	bne.n	8005dce <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d04:	881a      	ldrh	r2, [r3, #0]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d10:	1c9a      	adds	r2, r3, #2
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	b29a      	uxth	r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d24:	e053      	b.n	8005dce <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	f003 0302 	and.w	r3, r3, #2
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d11b      	bne.n	8005d6c <HAL_SPI_TransmitReceive+0x176>
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d016      	beq.n	8005d6c <HAL_SPI_TransmitReceive+0x176>
 8005d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d113      	bne.n	8005d6c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d48:	881a      	ldrh	r2, [r3, #0]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d54:	1c9a      	adds	r2, r3, #2
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	3b01      	subs	r3, #1
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	f003 0301 	and.w	r3, r3, #1
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d119      	bne.n	8005dae <HAL_SPI_TransmitReceive+0x1b8>
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d014      	beq.n	8005dae <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68da      	ldr	r2, [r3, #12]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d8e:	b292      	uxth	r2, r2
 8005d90:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d96:	1c9a      	adds	r2, r3, #2
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	3b01      	subs	r3, #1
 8005da4:	b29a      	uxth	r2, r3
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005daa:	2301      	movs	r3, #1
 8005dac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005dae:	f7fe ff1f 	bl	8004bf0 <HAL_GetTick>
 8005db2:	4602      	mov	r2, r0
 8005db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db6:	1ad3      	subs	r3, r2, r3
 8005db8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d807      	bhi.n	8005dce <HAL_SPI_TransmitReceive+0x1d8>
 8005dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dc4:	d003      	beq.n	8005dce <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005dcc:	e0a7      	b.n	8005f1e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d1a6      	bne.n	8005d26 <HAL_SPI_TransmitReceive+0x130>
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d1a1      	bne.n	8005d26 <HAL_SPI_TransmitReceive+0x130>
 8005de2:	e07c      	b.n	8005ede <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d002      	beq.n	8005df2 <HAL_SPI_TransmitReceive+0x1fc>
 8005dec:	8b7b      	ldrh	r3, [r7, #26]
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d16b      	bne.n	8005eca <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	330c      	adds	r3, #12
 8005dfc:	7812      	ldrb	r2, [r2, #0]
 8005dfe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e04:	1c5a      	adds	r2, r3, #1
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	3b01      	subs	r3, #1
 8005e12:	b29a      	uxth	r2, r3
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e18:	e057      	b.n	8005eca <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	f003 0302 	and.w	r3, r3, #2
 8005e24:	2b02      	cmp	r3, #2
 8005e26:	d11c      	bne.n	8005e62 <HAL_SPI_TransmitReceive+0x26c>
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d017      	beq.n	8005e62 <HAL_SPI_TransmitReceive+0x26c>
 8005e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d114      	bne.n	8005e62 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	330c      	adds	r3, #12
 8005e42:	7812      	ldrb	r2, [r2, #0]
 8005e44:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e4a:	1c5a      	adds	r2, r3, #1
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	3b01      	subs	r3, #1
 8005e58:	b29a      	uxth	r2, r3
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	f003 0301 	and.w	r3, r3, #1
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d119      	bne.n	8005ea4 <HAL_SPI_TransmitReceive+0x2ae>
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d014      	beq.n	8005ea4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68da      	ldr	r2, [r3, #12]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e84:	b2d2      	uxtb	r2, r2
 8005e86:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e8c:	1c5a      	adds	r2, r3, #1
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	b29a      	uxth	r2, r3
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005ea4:	f7fe fea4 	bl	8004bf0 <HAL_GetTick>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eac:	1ad3      	subs	r3, r2, r3
 8005eae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d803      	bhi.n	8005ebc <HAL_SPI_TransmitReceive+0x2c6>
 8005eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eba:	d102      	bne.n	8005ec2 <HAL_SPI_TransmitReceive+0x2cc>
 8005ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d103      	bne.n	8005eca <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005ec8:	e029      	b.n	8005f1e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d1a2      	bne.n	8005e1a <HAL_SPI_TransmitReceive+0x224>
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d19d      	bne.n	8005e1a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ee0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005ee2:	68f8      	ldr	r0, [r7, #12]
 8005ee4:	f000 f8b2 	bl	800604c <SPI_EndRxTxTransaction>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d006      	beq.n	8005efc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2220      	movs	r2, #32
 8005ef8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005efa:	e010      	b.n	8005f1e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d10b      	bne.n	8005f1c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f04:	2300      	movs	r3, #0
 8005f06:	617b      	str	r3, [r7, #20]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	617b      	str	r3, [r7, #20]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	617b      	str	r3, [r7, #20]
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	e000      	b.n	8005f1e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005f1c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2201      	movs	r2, #1
 8005f22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005f2e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3730      	adds	r7, #48	; 0x30
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
	...

08005f3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b088      	sub	sp, #32
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	603b      	str	r3, [r7, #0]
 8005f48:	4613      	mov	r3, r2
 8005f4a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005f4c:	f7fe fe50 	bl	8004bf0 <HAL_GetTick>
 8005f50:	4602      	mov	r2, r0
 8005f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f54:	1a9b      	subs	r3, r3, r2
 8005f56:	683a      	ldr	r2, [r7, #0]
 8005f58:	4413      	add	r3, r2
 8005f5a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005f5c:	f7fe fe48 	bl	8004bf0 <HAL_GetTick>
 8005f60:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005f62:	4b39      	ldr	r3, [pc, #228]	; (8006048 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	015b      	lsls	r3, r3, #5
 8005f68:	0d1b      	lsrs	r3, r3, #20
 8005f6a:	69fa      	ldr	r2, [r7, #28]
 8005f6c:	fb02 f303 	mul.w	r3, r2, r3
 8005f70:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f72:	e054      	b.n	800601e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f7a:	d050      	beq.n	800601e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005f7c:	f7fe fe38 	bl	8004bf0 <HAL_GetTick>
 8005f80:	4602      	mov	r2, r0
 8005f82:	69bb      	ldr	r3, [r7, #24]
 8005f84:	1ad3      	subs	r3, r2, r3
 8005f86:	69fa      	ldr	r2, [r7, #28]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d902      	bls.n	8005f92 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d13d      	bne.n	800600e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	685a      	ldr	r2, [r3, #4]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005fa0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005faa:	d111      	bne.n	8005fd0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fb4:	d004      	beq.n	8005fc0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fbe:	d107      	bne.n	8005fd0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fd8:	d10f      	bne.n	8005ffa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005fe8:	601a      	str	r2, [r3, #0]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ff8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2200      	movs	r2, #0
 8006006:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	e017      	b.n	800603e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d101      	bne.n	8006018 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006014:	2300      	movs	r3, #0
 8006016:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	3b01      	subs	r3, #1
 800601c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	689a      	ldr	r2, [r3, #8]
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	4013      	ands	r3, r2
 8006028:	68ba      	ldr	r2, [r7, #8]
 800602a:	429a      	cmp	r2, r3
 800602c:	bf0c      	ite	eq
 800602e:	2301      	moveq	r3, #1
 8006030:	2300      	movne	r3, #0
 8006032:	b2db      	uxtb	r3, r3
 8006034:	461a      	mov	r2, r3
 8006036:	79fb      	ldrb	r3, [r7, #7]
 8006038:	429a      	cmp	r2, r3
 800603a:	d19b      	bne.n	8005f74 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800603c:	2300      	movs	r3, #0
}
 800603e:	4618      	mov	r0, r3
 8006040:	3720      	adds	r7, #32
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	20000000 	.word	0x20000000

0800604c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b088      	sub	sp, #32
 8006050:	af02      	add	r7, sp, #8
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006058:	4b1b      	ldr	r3, [pc, #108]	; (80060c8 <SPI_EndRxTxTransaction+0x7c>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a1b      	ldr	r2, [pc, #108]	; (80060cc <SPI_EndRxTxTransaction+0x80>)
 800605e:	fba2 2303 	umull	r2, r3, r2, r3
 8006062:	0d5b      	lsrs	r3, r3, #21
 8006064:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006068:	fb02 f303 	mul.w	r3, r2, r3
 800606c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006076:	d112      	bne.n	800609e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	9300      	str	r3, [sp, #0]
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	2200      	movs	r2, #0
 8006080:	2180      	movs	r1, #128	; 0x80
 8006082:	68f8      	ldr	r0, [r7, #12]
 8006084:	f7ff ff5a 	bl	8005f3c <SPI_WaitFlagStateUntilTimeout>
 8006088:	4603      	mov	r3, r0
 800608a:	2b00      	cmp	r3, #0
 800608c:	d016      	beq.n	80060bc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006092:	f043 0220 	orr.w	r2, r3, #32
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800609a:	2303      	movs	r3, #3
 800609c:	e00f      	b.n	80060be <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d00a      	beq.n	80060ba <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	3b01      	subs	r3, #1
 80060a8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060b4:	2b80      	cmp	r3, #128	; 0x80
 80060b6:	d0f2      	beq.n	800609e <SPI_EndRxTxTransaction+0x52>
 80060b8:	e000      	b.n	80060bc <SPI_EndRxTxTransaction+0x70>
        break;
 80060ba:	bf00      	nop
  }

  return HAL_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3718      	adds	r7, #24
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	20000000 	.word	0x20000000
 80060cc:	165e9f81 	.word	0x165e9f81

080060d0 <calloc>:
 80060d0:	4b02      	ldr	r3, [pc, #8]	; (80060dc <calloc+0xc>)
 80060d2:	460a      	mov	r2, r1
 80060d4:	4601      	mov	r1, r0
 80060d6:	6818      	ldr	r0, [r3, #0]
 80060d8:	f000 b834 	b.w	8006144 <_calloc_r>
 80060dc:	20000120 	.word	0x20000120

080060e0 <__errno>:
 80060e0:	4b01      	ldr	r3, [pc, #4]	; (80060e8 <__errno+0x8>)
 80060e2:	6818      	ldr	r0, [r3, #0]
 80060e4:	4770      	bx	lr
 80060e6:	bf00      	nop
 80060e8:	20000120 	.word	0x20000120

080060ec <__libc_init_array>:
 80060ec:	b570      	push	{r4, r5, r6, lr}
 80060ee:	4d0d      	ldr	r5, [pc, #52]	; (8006124 <__libc_init_array+0x38>)
 80060f0:	4c0d      	ldr	r4, [pc, #52]	; (8006128 <__libc_init_array+0x3c>)
 80060f2:	1b64      	subs	r4, r4, r5
 80060f4:	10a4      	asrs	r4, r4, #2
 80060f6:	2600      	movs	r6, #0
 80060f8:	42a6      	cmp	r6, r4
 80060fa:	d109      	bne.n	8006110 <__libc_init_array+0x24>
 80060fc:	4d0b      	ldr	r5, [pc, #44]	; (800612c <__libc_init_array+0x40>)
 80060fe:	4c0c      	ldr	r4, [pc, #48]	; (8006130 <__libc_init_array+0x44>)
 8006100:	f000 fa38 	bl	8006574 <_init>
 8006104:	1b64      	subs	r4, r4, r5
 8006106:	10a4      	asrs	r4, r4, #2
 8006108:	2600      	movs	r6, #0
 800610a:	42a6      	cmp	r6, r4
 800610c:	d105      	bne.n	800611a <__libc_init_array+0x2e>
 800610e:	bd70      	pop	{r4, r5, r6, pc}
 8006110:	f855 3b04 	ldr.w	r3, [r5], #4
 8006114:	4798      	blx	r3
 8006116:	3601      	adds	r6, #1
 8006118:	e7ee      	b.n	80060f8 <__libc_init_array+0xc>
 800611a:	f855 3b04 	ldr.w	r3, [r5], #4
 800611e:	4798      	blx	r3
 8006120:	3601      	adds	r6, #1
 8006122:	e7f2      	b.n	800610a <__libc_init_array+0x1e>
 8006124:	08006770 	.word	0x08006770
 8006128:	08006770 	.word	0x08006770
 800612c:	08006770 	.word	0x08006770
 8006130:	08006774 	.word	0x08006774

08006134 <memset>:
 8006134:	4402      	add	r2, r0
 8006136:	4603      	mov	r3, r0
 8006138:	4293      	cmp	r3, r2
 800613a:	d100      	bne.n	800613e <memset+0xa>
 800613c:	4770      	bx	lr
 800613e:	f803 1b01 	strb.w	r1, [r3], #1
 8006142:	e7f9      	b.n	8006138 <memset+0x4>

08006144 <_calloc_r>:
 8006144:	b513      	push	{r0, r1, r4, lr}
 8006146:	434a      	muls	r2, r1
 8006148:	4611      	mov	r1, r2
 800614a:	9201      	str	r2, [sp, #4]
 800614c:	f000 f80a 	bl	8006164 <_malloc_r>
 8006150:	4604      	mov	r4, r0
 8006152:	b118      	cbz	r0, 800615c <_calloc_r+0x18>
 8006154:	9a01      	ldr	r2, [sp, #4]
 8006156:	2100      	movs	r1, #0
 8006158:	f7ff ffec 	bl	8006134 <memset>
 800615c:	4620      	mov	r0, r4
 800615e:	b002      	add	sp, #8
 8006160:	bd10      	pop	{r4, pc}
	...

08006164 <_malloc_r>:
 8006164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006166:	1ccd      	adds	r5, r1, #3
 8006168:	f025 0503 	bic.w	r5, r5, #3
 800616c:	3508      	adds	r5, #8
 800616e:	2d0c      	cmp	r5, #12
 8006170:	bf38      	it	cc
 8006172:	250c      	movcc	r5, #12
 8006174:	2d00      	cmp	r5, #0
 8006176:	4606      	mov	r6, r0
 8006178:	db01      	blt.n	800617e <_malloc_r+0x1a>
 800617a:	42a9      	cmp	r1, r5
 800617c:	d903      	bls.n	8006186 <_malloc_r+0x22>
 800617e:	230c      	movs	r3, #12
 8006180:	6033      	str	r3, [r6, #0]
 8006182:	2000      	movs	r0, #0
 8006184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006186:	f000 f857 	bl	8006238 <__malloc_lock>
 800618a:	4921      	ldr	r1, [pc, #132]	; (8006210 <_malloc_r+0xac>)
 800618c:	680a      	ldr	r2, [r1, #0]
 800618e:	4614      	mov	r4, r2
 8006190:	b99c      	cbnz	r4, 80061ba <_malloc_r+0x56>
 8006192:	4f20      	ldr	r7, [pc, #128]	; (8006214 <_malloc_r+0xb0>)
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	b923      	cbnz	r3, 80061a2 <_malloc_r+0x3e>
 8006198:	4621      	mov	r1, r4
 800619a:	4630      	mov	r0, r6
 800619c:	f000 f83c 	bl	8006218 <_sbrk_r>
 80061a0:	6038      	str	r0, [r7, #0]
 80061a2:	4629      	mov	r1, r5
 80061a4:	4630      	mov	r0, r6
 80061a6:	f000 f837 	bl	8006218 <_sbrk_r>
 80061aa:	1c43      	adds	r3, r0, #1
 80061ac:	d123      	bne.n	80061f6 <_malloc_r+0x92>
 80061ae:	230c      	movs	r3, #12
 80061b0:	6033      	str	r3, [r6, #0]
 80061b2:	4630      	mov	r0, r6
 80061b4:	f000 f846 	bl	8006244 <__malloc_unlock>
 80061b8:	e7e3      	b.n	8006182 <_malloc_r+0x1e>
 80061ba:	6823      	ldr	r3, [r4, #0]
 80061bc:	1b5b      	subs	r3, r3, r5
 80061be:	d417      	bmi.n	80061f0 <_malloc_r+0x8c>
 80061c0:	2b0b      	cmp	r3, #11
 80061c2:	d903      	bls.n	80061cc <_malloc_r+0x68>
 80061c4:	6023      	str	r3, [r4, #0]
 80061c6:	441c      	add	r4, r3
 80061c8:	6025      	str	r5, [r4, #0]
 80061ca:	e004      	b.n	80061d6 <_malloc_r+0x72>
 80061cc:	6863      	ldr	r3, [r4, #4]
 80061ce:	42a2      	cmp	r2, r4
 80061d0:	bf0c      	ite	eq
 80061d2:	600b      	streq	r3, [r1, #0]
 80061d4:	6053      	strne	r3, [r2, #4]
 80061d6:	4630      	mov	r0, r6
 80061d8:	f000 f834 	bl	8006244 <__malloc_unlock>
 80061dc:	f104 000b 	add.w	r0, r4, #11
 80061e0:	1d23      	adds	r3, r4, #4
 80061e2:	f020 0007 	bic.w	r0, r0, #7
 80061e6:	1ac2      	subs	r2, r0, r3
 80061e8:	d0cc      	beq.n	8006184 <_malloc_r+0x20>
 80061ea:	1a1b      	subs	r3, r3, r0
 80061ec:	50a3      	str	r3, [r4, r2]
 80061ee:	e7c9      	b.n	8006184 <_malloc_r+0x20>
 80061f0:	4622      	mov	r2, r4
 80061f2:	6864      	ldr	r4, [r4, #4]
 80061f4:	e7cc      	b.n	8006190 <_malloc_r+0x2c>
 80061f6:	1cc4      	adds	r4, r0, #3
 80061f8:	f024 0403 	bic.w	r4, r4, #3
 80061fc:	42a0      	cmp	r0, r4
 80061fe:	d0e3      	beq.n	80061c8 <_malloc_r+0x64>
 8006200:	1a21      	subs	r1, r4, r0
 8006202:	4630      	mov	r0, r6
 8006204:	f000 f808 	bl	8006218 <_sbrk_r>
 8006208:	3001      	adds	r0, #1
 800620a:	d1dd      	bne.n	80061c8 <_malloc_r+0x64>
 800620c:	e7cf      	b.n	80061ae <_malloc_r+0x4a>
 800620e:	bf00      	nop
 8006210:	2000040c 	.word	0x2000040c
 8006214:	20000410 	.word	0x20000410

08006218 <_sbrk_r>:
 8006218:	b538      	push	{r3, r4, r5, lr}
 800621a:	4d06      	ldr	r5, [pc, #24]	; (8006234 <_sbrk_r+0x1c>)
 800621c:	2300      	movs	r3, #0
 800621e:	4604      	mov	r4, r0
 8006220:	4608      	mov	r0, r1
 8006222:	602b      	str	r3, [r5, #0]
 8006224:	f7fb f99a 	bl	800155c <_sbrk>
 8006228:	1c43      	adds	r3, r0, #1
 800622a:	d102      	bne.n	8006232 <_sbrk_r+0x1a>
 800622c:	682b      	ldr	r3, [r5, #0]
 800622e:	b103      	cbz	r3, 8006232 <_sbrk_r+0x1a>
 8006230:	6023      	str	r3, [r4, #0]
 8006232:	bd38      	pop	{r3, r4, r5, pc}
 8006234:	20000688 	.word	0x20000688

08006238 <__malloc_lock>:
 8006238:	4801      	ldr	r0, [pc, #4]	; (8006240 <__malloc_lock+0x8>)
 800623a:	f000 b809 	b.w	8006250 <__retarget_lock_acquire_recursive>
 800623e:	bf00      	nop
 8006240:	20000690 	.word	0x20000690

08006244 <__malloc_unlock>:
 8006244:	4801      	ldr	r0, [pc, #4]	; (800624c <__malloc_unlock+0x8>)
 8006246:	f000 b804 	b.w	8006252 <__retarget_lock_release_recursive>
 800624a:	bf00      	nop
 800624c:	20000690 	.word	0x20000690

08006250 <__retarget_lock_acquire_recursive>:
 8006250:	4770      	bx	lr

08006252 <__retarget_lock_release_recursive>:
 8006252:	4770      	bx	lr
 8006254:	0000      	movs	r0, r0
	...

08006258 <ceil>:
 8006258:	ec51 0b10 	vmov	r0, r1, d0
 800625c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006260:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8006264:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8006268:	2e13      	cmp	r6, #19
 800626a:	ee10 5a10 	vmov	r5, s0
 800626e:	ee10 8a10 	vmov	r8, s0
 8006272:	460c      	mov	r4, r1
 8006274:	dc30      	bgt.n	80062d8 <ceil+0x80>
 8006276:	2e00      	cmp	r6, #0
 8006278:	da12      	bge.n	80062a0 <ceil+0x48>
 800627a:	a335      	add	r3, pc, #212	; (adr r3, 8006350 <ceil+0xf8>)
 800627c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006280:	f7f9 ffa8 	bl	80001d4 <__adddf3>
 8006284:	2200      	movs	r2, #0
 8006286:	2300      	movs	r3, #0
 8006288:	f7fa fbea 	bl	8000a60 <__aeabi_dcmpgt>
 800628c:	b128      	cbz	r0, 800629a <ceil+0x42>
 800628e:	2c00      	cmp	r4, #0
 8006290:	db55      	blt.n	800633e <ceil+0xe6>
 8006292:	432c      	orrs	r4, r5
 8006294:	d057      	beq.n	8006346 <ceil+0xee>
 8006296:	4c30      	ldr	r4, [pc, #192]	; (8006358 <ceil+0x100>)
 8006298:	2500      	movs	r5, #0
 800629a:	4621      	mov	r1, r4
 800629c:	4628      	mov	r0, r5
 800629e:	e025      	b.n	80062ec <ceil+0x94>
 80062a0:	4f2e      	ldr	r7, [pc, #184]	; (800635c <ceil+0x104>)
 80062a2:	4137      	asrs	r7, r6
 80062a4:	ea01 0307 	and.w	r3, r1, r7
 80062a8:	4303      	orrs	r3, r0
 80062aa:	d01f      	beq.n	80062ec <ceil+0x94>
 80062ac:	a328      	add	r3, pc, #160	; (adr r3, 8006350 <ceil+0xf8>)
 80062ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b2:	f7f9 ff8f 	bl	80001d4 <__adddf3>
 80062b6:	2200      	movs	r2, #0
 80062b8:	2300      	movs	r3, #0
 80062ba:	f7fa fbd1 	bl	8000a60 <__aeabi_dcmpgt>
 80062be:	2800      	cmp	r0, #0
 80062c0:	d0eb      	beq.n	800629a <ceil+0x42>
 80062c2:	2c00      	cmp	r4, #0
 80062c4:	bfc2      	ittt	gt
 80062c6:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 80062ca:	fa43 f606 	asrgt.w	r6, r3, r6
 80062ce:	19a4      	addgt	r4, r4, r6
 80062d0:	ea24 0407 	bic.w	r4, r4, r7
 80062d4:	2500      	movs	r5, #0
 80062d6:	e7e0      	b.n	800629a <ceil+0x42>
 80062d8:	2e33      	cmp	r6, #51	; 0x33
 80062da:	dd0b      	ble.n	80062f4 <ceil+0x9c>
 80062dc:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80062e0:	d104      	bne.n	80062ec <ceil+0x94>
 80062e2:	ee10 2a10 	vmov	r2, s0
 80062e6:	460b      	mov	r3, r1
 80062e8:	f7f9 ff74 	bl	80001d4 <__adddf3>
 80062ec:	ec41 0b10 	vmov	d0, r0, r1
 80062f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062f4:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80062f8:	f04f 33ff 	mov.w	r3, #4294967295
 80062fc:	fa23 f707 	lsr.w	r7, r3, r7
 8006300:	4207      	tst	r7, r0
 8006302:	d0f3      	beq.n	80062ec <ceil+0x94>
 8006304:	a312      	add	r3, pc, #72	; (adr r3, 8006350 <ceil+0xf8>)
 8006306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800630a:	f7f9 ff63 	bl	80001d4 <__adddf3>
 800630e:	2200      	movs	r2, #0
 8006310:	2300      	movs	r3, #0
 8006312:	f7fa fba5 	bl	8000a60 <__aeabi_dcmpgt>
 8006316:	2800      	cmp	r0, #0
 8006318:	d0bf      	beq.n	800629a <ceil+0x42>
 800631a:	2c00      	cmp	r4, #0
 800631c:	dd02      	ble.n	8006324 <ceil+0xcc>
 800631e:	2e14      	cmp	r6, #20
 8006320:	d103      	bne.n	800632a <ceil+0xd2>
 8006322:	3401      	adds	r4, #1
 8006324:	ea25 0507 	bic.w	r5, r5, r7
 8006328:	e7b7      	b.n	800629a <ceil+0x42>
 800632a:	2301      	movs	r3, #1
 800632c:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006330:	fa03 f606 	lsl.w	r6, r3, r6
 8006334:	4435      	add	r5, r6
 8006336:	4545      	cmp	r5, r8
 8006338:	bf38      	it	cc
 800633a:	18e4      	addcc	r4, r4, r3
 800633c:	e7f2      	b.n	8006324 <ceil+0xcc>
 800633e:	2500      	movs	r5, #0
 8006340:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8006344:	e7a9      	b.n	800629a <ceil+0x42>
 8006346:	4625      	mov	r5, r4
 8006348:	e7a7      	b.n	800629a <ceil+0x42>
 800634a:	bf00      	nop
 800634c:	f3af 8000 	nop.w
 8006350:	8800759c 	.word	0x8800759c
 8006354:	7e37e43c 	.word	0x7e37e43c
 8006358:	3ff00000 	.word	0x3ff00000
 800635c:	000fffff 	.word	0x000fffff

08006360 <floor>:
 8006360:	ec51 0b10 	vmov	r0, r1, d0
 8006364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006368:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800636c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8006370:	2e13      	cmp	r6, #19
 8006372:	ee10 5a10 	vmov	r5, s0
 8006376:	ee10 8a10 	vmov	r8, s0
 800637a:	460c      	mov	r4, r1
 800637c:	dc32      	bgt.n	80063e4 <floor+0x84>
 800637e:	2e00      	cmp	r6, #0
 8006380:	da14      	bge.n	80063ac <floor+0x4c>
 8006382:	a333      	add	r3, pc, #204	; (adr r3, 8006450 <floor+0xf0>)
 8006384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006388:	f7f9 ff24 	bl	80001d4 <__adddf3>
 800638c:	2200      	movs	r2, #0
 800638e:	2300      	movs	r3, #0
 8006390:	f7fa fb66 	bl	8000a60 <__aeabi_dcmpgt>
 8006394:	b138      	cbz	r0, 80063a6 <floor+0x46>
 8006396:	2c00      	cmp	r4, #0
 8006398:	da57      	bge.n	800644a <floor+0xea>
 800639a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800639e:	431d      	orrs	r5, r3
 80063a0:	d001      	beq.n	80063a6 <floor+0x46>
 80063a2:	4c2d      	ldr	r4, [pc, #180]	; (8006458 <floor+0xf8>)
 80063a4:	2500      	movs	r5, #0
 80063a6:	4621      	mov	r1, r4
 80063a8:	4628      	mov	r0, r5
 80063aa:	e025      	b.n	80063f8 <floor+0x98>
 80063ac:	4f2b      	ldr	r7, [pc, #172]	; (800645c <floor+0xfc>)
 80063ae:	4137      	asrs	r7, r6
 80063b0:	ea01 0307 	and.w	r3, r1, r7
 80063b4:	4303      	orrs	r3, r0
 80063b6:	d01f      	beq.n	80063f8 <floor+0x98>
 80063b8:	a325      	add	r3, pc, #148	; (adr r3, 8006450 <floor+0xf0>)
 80063ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063be:	f7f9 ff09 	bl	80001d4 <__adddf3>
 80063c2:	2200      	movs	r2, #0
 80063c4:	2300      	movs	r3, #0
 80063c6:	f7fa fb4b 	bl	8000a60 <__aeabi_dcmpgt>
 80063ca:	2800      	cmp	r0, #0
 80063cc:	d0eb      	beq.n	80063a6 <floor+0x46>
 80063ce:	2c00      	cmp	r4, #0
 80063d0:	bfbe      	ittt	lt
 80063d2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80063d6:	fa43 f606 	asrlt.w	r6, r3, r6
 80063da:	19a4      	addlt	r4, r4, r6
 80063dc:	ea24 0407 	bic.w	r4, r4, r7
 80063e0:	2500      	movs	r5, #0
 80063e2:	e7e0      	b.n	80063a6 <floor+0x46>
 80063e4:	2e33      	cmp	r6, #51	; 0x33
 80063e6:	dd0b      	ble.n	8006400 <floor+0xa0>
 80063e8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80063ec:	d104      	bne.n	80063f8 <floor+0x98>
 80063ee:	ee10 2a10 	vmov	r2, s0
 80063f2:	460b      	mov	r3, r1
 80063f4:	f7f9 feee 	bl	80001d4 <__adddf3>
 80063f8:	ec41 0b10 	vmov	d0, r0, r1
 80063fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006400:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8006404:	f04f 33ff 	mov.w	r3, #4294967295
 8006408:	fa23 f707 	lsr.w	r7, r3, r7
 800640c:	4207      	tst	r7, r0
 800640e:	d0f3      	beq.n	80063f8 <floor+0x98>
 8006410:	a30f      	add	r3, pc, #60	; (adr r3, 8006450 <floor+0xf0>)
 8006412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006416:	f7f9 fedd 	bl	80001d4 <__adddf3>
 800641a:	2200      	movs	r2, #0
 800641c:	2300      	movs	r3, #0
 800641e:	f7fa fb1f 	bl	8000a60 <__aeabi_dcmpgt>
 8006422:	2800      	cmp	r0, #0
 8006424:	d0bf      	beq.n	80063a6 <floor+0x46>
 8006426:	2c00      	cmp	r4, #0
 8006428:	da02      	bge.n	8006430 <floor+0xd0>
 800642a:	2e14      	cmp	r6, #20
 800642c:	d103      	bne.n	8006436 <floor+0xd6>
 800642e:	3401      	adds	r4, #1
 8006430:	ea25 0507 	bic.w	r5, r5, r7
 8006434:	e7b7      	b.n	80063a6 <floor+0x46>
 8006436:	2301      	movs	r3, #1
 8006438:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800643c:	fa03 f606 	lsl.w	r6, r3, r6
 8006440:	4435      	add	r5, r6
 8006442:	4545      	cmp	r5, r8
 8006444:	bf38      	it	cc
 8006446:	18e4      	addcc	r4, r4, r3
 8006448:	e7f2      	b.n	8006430 <floor+0xd0>
 800644a:	2500      	movs	r5, #0
 800644c:	462c      	mov	r4, r5
 800644e:	e7aa      	b.n	80063a6 <floor+0x46>
 8006450:	8800759c 	.word	0x8800759c
 8006454:	7e37e43c 	.word	0x7e37e43c
 8006458:	bff00000 	.word	0xbff00000
 800645c:	000fffff 	.word	0x000fffff

08006460 <rint>:
 8006460:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006462:	ec51 0b10 	vmov	r0, r1, d0
 8006466:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800646a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800646e:	2e13      	cmp	r6, #19
 8006470:	ee10 4a10 	vmov	r4, s0
 8006474:	460b      	mov	r3, r1
 8006476:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800647a:	dc58      	bgt.n	800652e <rint+0xce>
 800647c:	2e00      	cmp	r6, #0
 800647e:	da2b      	bge.n	80064d8 <rint+0x78>
 8006480:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8006484:	4302      	orrs	r2, r0
 8006486:	d023      	beq.n	80064d0 <rint+0x70>
 8006488:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800648c:	4302      	orrs	r2, r0
 800648e:	4254      	negs	r4, r2
 8006490:	4314      	orrs	r4, r2
 8006492:	0c4b      	lsrs	r3, r1, #17
 8006494:	0b24      	lsrs	r4, r4, #12
 8006496:	045b      	lsls	r3, r3, #17
 8006498:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800649c:	ea44 0103 	orr.w	r1, r4, r3
 80064a0:	4b32      	ldr	r3, [pc, #200]	; (800656c <rint+0x10c>)
 80064a2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80064a6:	e9d3 6700 	ldrd	r6, r7, [r3]
 80064aa:	4602      	mov	r2, r0
 80064ac:	460b      	mov	r3, r1
 80064ae:	4630      	mov	r0, r6
 80064b0:	4639      	mov	r1, r7
 80064b2:	f7f9 fe8f 	bl	80001d4 <__adddf3>
 80064b6:	e9cd 0100 	strd	r0, r1, [sp]
 80064ba:	463b      	mov	r3, r7
 80064bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80064c0:	4632      	mov	r2, r6
 80064c2:	f7f9 fe85 	bl	80001d0 <__aeabi_dsub>
 80064c6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80064ca:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80064ce:	4639      	mov	r1, r7
 80064d0:	ec41 0b10 	vmov	d0, r0, r1
 80064d4:	b003      	add	sp, #12
 80064d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064d8:	4a25      	ldr	r2, [pc, #148]	; (8006570 <rint+0x110>)
 80064da:	4132      	asrs	r2, r6
 80064dc:	ea01 0702 	and.w	r7, r1, r2
 80064e0:	4307      	orrs	r7, r0
 80064e2:	d0f5      	beq.n	80064d0 <rint+0x70>
 80064e4:	0851      	lsrs	r1, r2, #1
 80064e6:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 80064ea:	4314      	orrs	r4, r2
 80064ec:	d00c      	beq.n	8006508 <rint+0xa8>
 80064ee:	ea23 0201 	bic.w	r2, r3, r1
 80064f2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80064f6:	2e13      	cmp	r6, #19
 80064f8:	fa43 f606 	asr.w	r6, r3, r6
 80064fc:	bf0c      	ite	eq
 80064fe:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8006502:	2400      	movne	r4, #0
 8006504:	ea42 0306 	orr.w	r3, r2, r6
 8006508:	4918      	ldr	r1, [pc, #96]	; (800656c <rint+0x10c>)
 800650a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800650e:	4622      	mov	r2, r4
 8006510:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006514:	4620      	mov	r0, r4
 8006516:	4629      	mov	r1, r5
 8006518:	f7f9 fe5c 	bl	80001d4 <__adddf3>
 800651c:	e9cd 0100 	strd	r0, r1, [sp]
 8006520:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006524:	4622      	mov	r2, r4
 8006526:	462b      	mov	r3, r5
 8006528:	f7f9 fe52 	bl	80001d0 <__aeabi_dsub>
 800652c:	e7d0      	b.n	80064d0 <rint+0x70>
 800652e:	2e33      	cmp	r6, #51	; 0x33
 8006530:	dd07      	ble.n	8006542 <rint+0xe2>
 8006532:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006536:	d1cb      	bne.n	80064d0 <rint+0x70>
 8006538:	ee10 2a10 	vmov	r2, s0
 800653c:	f7f9 fe4a 	bl	80001d4 <__adddf3>
 8006540:	e7c6      	b.n	80064d0 <rint+0x70>
 8006542:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8006546:	f04f 36ff 	mov.w	r6, #4294967295
 800654a:	40d6      	lsrs	r6, r2
 800654c:	4230      	tst	r0, r6
 800654e:	d0bf      	beq.n	80064d0 <rint+0x70>
 8006550:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8006554:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8006558:	bf1f      	itttt	ne
 800655a:	ea24 0101 	bicne.w	r1, r4, r1
 800655e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8006562:	fa44 f202 	asrne.w	r2, r4, r2
 8006566:	ea41 0402 	orrne.w	r4, r1, r2
 800656a:	e7cd      	b.n	8006508 <rint+0xa8>
 800656c:	08006758 	.word	0x08006758
 8006570:	000fffff 	.word	0x000fffff

08006574 <_init>:
 8006574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006576:	bf00      	nop
 8006578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800657a:	bc08      	pop	{r3}
 800657c:	469e      	mov	lr, r3
 800657e:	4770      	bx	lr

08006580 <_fini>:
 8006580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006582:	bf00      	nop
 8006584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006586:	bc08      	pop	{r3}
 8006588:	469e      	mov	lr, r3
 800658a:	4770      	bx	lr

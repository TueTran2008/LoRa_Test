
My_Spi_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000666c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  080067f8  080067f8  000167f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a00  08006a00  0002018c  2**0
                  CONTENTS
  4 .ARM          00000008  08006a00  08006a00  00016a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a08  08006a08  0002018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a08  08006a08  00016a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a0c  08006a0c  00016a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000018c  20000000  08006a10  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002018c  2**0
                  CONTENTS
 10 .bss          00000600  2000018c  2000018c  0002018c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000078c  2000078c  0002018c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015786  00000000  00000000  000201bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000036f8  00000000  00000000  00035942  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000db0  00000000  00000000  00039040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000be8  00000000  00000000  00039df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023b9c  00000000  00000000  0003a9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013106  00000000  00000000  0005e574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c97b3  00000000  00000000  0007167a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013ae2d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000037fc  00000000  00000000  0013ae80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000018c 	.word	0x2000018c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080067dc 	.word	0x080067dc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000190 	.word	0x20000190
 80001c4:	080067dc 	.word	0x080067dc

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2uiz>:
 8000a74:	004a      	lsls	r2, r1, #1
 8000a76:	d211      	bcs.n	8000a9c <__aeabi_d2uiz+0x28>
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d211      	bcs.n	8000aa2 <__aeabi_d2uiz+0x2e>
 8000a7e:	d50d      	bpl.n	8000a9c <__aeabi_d2uiz+0x28>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d40e      	bmi.n	8000aa8 <__aeabi_d2uiz+0x34>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d102      	bne.n	8000aae <__aeabi_d2uiz+0x3a>
 8000aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aac:	4770      	bx	lr
 8000aae:	f04f 0000 	mov.w	r0, #0
 8000ab2:	4770      	bx	lr

08000ab4 <__aeabi_uldivmod>:
 8000ab4:	b953      	cbnz	r3, 8000acc <__aeabi_uldivmod+0x18>
 8000ab6:	b94a      	cbnz	r2, 8000acc <__aeabi_uldivmod+0x18>
 8000ab8:	2900      	cmp	r1, #0
 8000aba:	bf08      	it	eq
 8000abc:	2800      	cmpeq	r0, #0
 8000abe:	bf1c      	itt	ne
 8000ac0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ac4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac8:	f000 b96e 	b.w	8000da8 <__aeabi_idiv0>
 8000acc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ad4:	f000 f806 	bl	8000ae4 <__udivmoddi4>
 8000ad8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000adc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae0:	b004      	add	sp, #16
 8000ae2:	4770      	bx	lr

08000ae4 <__udivmoddi4>:
 8000ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae8:	9d08      	ldr	r5, [sp, #32]
 8000aea:	4604      	mov	r4, r0
 8000aec:	468c      	mov	ip, r1
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	f040 8083 	bne.w	8000bfa <__udivmoddi4+0x116>
 8000af4:	428a      	cmp	r2, r1
 8000af6:	4617      	mov	r7, r2
 8000af8:	d947      	bls.n	8000b8a <__udivmoddi4+0xa6>
 8000afa:	fab2 f282 	clz	r2, r2
 8000afe:	b142      	cbz	r2, 8000b12 <__udivmoddi4+0x2e>
 8000b00:	f1c2 0020 	rsb	r0, r2, #32
 8000b04:	fa24 f000 	lsr.w	r0, r4, r0
 8000b08:	4091      	lsls	r1, r2
 8000b0a:	4097      	lsls	r7, r2
 8000b0c:	ea40 0c01 	orr.w	ip, r0, r1
 8000b10:	4094      	lsls	r4, r2
 8000b12:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b16:	0c23      	lsrs	r3, r4, #16
 8000b18:	fbbc f6f8 	udiv	r6, ip, r8
 8000b1c:	fa1f fe87 	uxth.w	lr, r7
 8000b20:	fb08 c116 	mls	r1, r8, r6, ip
 8000b24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b28:	fb06 f10e 	mul.w	r1, r6, lr
 8000b2c:	4299      	cmp	r1, r3
 8000b2e:	d909      	bls.n	8000b44 <__udivmoddi4+0x60>
 8000b30:	18fb      	adds	r3, r7, r3
 8000b32:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b36:	f080 8119 	bcs.w	8000d6c <__udivmoddi4+0x288>
 8000b3a:	4299      	cmp	r1, r3
 8000b3c:	f240 8116 	bls.w	8000d6c <__udivmoddi4+0x288>
 8000b40:	3e02      	subs	r6, #2
 8000b42:	443b      	add	r3, r7
 8000b44:	1a5b      	subs	r3, r3, r1
 8000b46:	b2a4      	uxth	r4, r4
 8000b48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b4c:	fb08 3310 	mls	r3, r8, r0, r3
 8000b50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b58:	45a6      	cmp	lr, r4
 8000b5a:	d909      	bls.n	8000b70 <__udivmoddi4+0x8c>
 8000b5c:	193c      	adds	r4, r7, r4
 8000b5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b62:	f080 8105 	bcs.w	8000d70 <__udivmoddi4+0x28c>
 8000b66:	45a6      	cmp	lr, r4
 8000b68:	f240 8102 	bls.w	8000d70 <__udivmoddi4+0x28c>
 8000b6c:	3802      	subs	r0, #2
 8000b6e:	443c      	add	r4, r7
 8000b70:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b74:	eba4 040e 	sub.w	r4, r4, lr
 8000b78:	2600      	movs	r6, #0
 8000b7a:	b11d      	cbz	r5, 8000b84 <__udivmoddi4+0xa0>
 8000b7c:	40d4      	lsrs	r4, r2
 8000b7e:	2300      	movs	r3, #0
 8000b80:	e9c5 4300 	strd	r4, r3, [r5]
 8000b84:	4631      	mov	r1, r6
 8000b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b8a:	b902      	cbnz	r2, 8000b8e <__udivmoddi4+0xaa>
 8000b8c:	deff      	udf	#255	; 0xff
 8000b8e:	fab2 f282 	clz	r2, r2
 8000b92:	2a00      	cmp	r2, #0
 8000b94:	d150      	bne.n	8000c38 <__udivmoddi4+0x154>
 8000b96:	1bcb      	subs	r3, r1, r7
 8000b98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b9c:	fa1f f887 	uxth.w	r8, r7
 8000ba0:	2601      	movs	r6, #1
 8000ba2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000ba6:	0c21      	lsrs	r1, r4, #16
 8000ba8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bb0:	fb08 f30c 	mul.w	r3, r8, ip
 8000bb4:	428b      	cmp	r3, r1
 8000bb6:	d907      	bls.n	8000bc8 <__udivmoddi4+0xe4>
 8000bb8:	1879      	adds	r1, r7, r1
 8000bba:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0xe2>
 8000bc0:	428b      	cmp	r3, r1
 8000bc2:	f200 80e9 	bhi.w	8000d98 <__udivmoddi4+0x2b4>
 8000bc6:	4684      	mov	ip, r0
 8000bc8:	1ac9      	subs	r1, r1, r3
 8000bca:	b2a3      	uxth	r3, r4
 8000bcc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bd0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bd4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000bd8:	fb08 f800 	mul.w	r8, r8, r0
 8000bdc:	45a0      	cmp	r8, r4
 8000bde:	d907      	bls.n	8000bf0 <__udivmoddi4+0x10c>
 8000be0:	193c      	adds	r4, r7, r4
 8000be2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x10a>
 8000be8:	45a0      	cmp	r8, r4
 8000bea:	f200 80d9 	bhi.w	8000da0 <__udivmoddi4+0x2bc>
 8000bee:	4618      	mov	r0, r3
 8000bf0:	eba4 0408 	sub.w	r4, r4, r8
 8000bf4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bf8:	e7bf      	b.n	8000b7a <__udivmoddi4+0x96>
 8000bfa:	428b      	cmp	r3, r1
 8000bfc:	d909      	bls.n	8000c12 <__udivmoddi4+0x12e>
 8000bfe:	2d00      	cmp	r5, #0
 8000c00:	f000 80b1 	beq.w	8000d66 <__udivmoddi4+0x282>
 8000c04:	2600      	movs	r6, #0
 8000c06:	e9c5 0100 	strd	r0, r1, [r5]
 8000c0a:	4630      	mov	r0, r6
 8000c0c:	4631      	mov	r1, r6
 8000c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c12:	fab3 f683 	clz	r6, r3
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	d14a      	bne.n	8000cb0 <__udivmoddi4+0x1cc>
 8000c1a:	428b      	cmp	r3, r1
 8000c1c:	d302      	bcc.n	8000c24 <__udivmoddi4+0x140>
 8000c1e:	4282      	cmp	r2, r0
 8000c20:	f200 80b8 	bhi.w	8000d94 <__udivmoddi4+0x2b0>
 8000c24:	1a84      	subs	r4, r0, r2
 8000c26:	eb61 0103 	sbc.w	r1, r1, r3
 8000c2a:	2001      	movs	r0, #1
 8000c2c:	468c      	mov	ip, r1
 8000c2e:	2d00      	cmp	r5, #0
 8000c30:	d0a8      	beq.n	8000b84 <__udivmoddi4+0xa0>
 8000c32:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c36:	e7a5      	b.n	8000b84 <__udivmoddi4+0xa0>
 8000c38:	f1c2 0320 	rsb	r3, r2, #32
 8000c3c:	fa20 f603 	lsr.w	r6, r0, r3
 8000c40:	4097      	lsls	r7, r2
 8000c42:	fa01 f002 	lsl.w	r0, r1, r2
 8000c46:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4a:	40d9      	lsrs	r1, r3
 8000c4c:	4330      	orrs	r0, r6
 8000c4e:	0c03      	lsrs	r3, r0, #16
 8000c50:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c54:	fa1f f887 	uxth.w	r8, r7
 8000c58:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c60:	fb06 f108 	mul.w	r1, r6, r8
 8000c64:	4299      	cmp	r1, r3
 8000c66:	fa04 f402 	lsl.w	r4, r4, r2
 8000c6a:	d909      	bls.n	8000c80 <__udivmoddi4+0x19c>
 8000c6c:	18fb      	adds	r3, r7, r3
 8000c6e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c72:	f080 808d 	bcs.w	8000d90 <__udivmoddi4+0x2ac>
 8000c76:	4299      	cmp	r1, r3
 8000c78:	f240 808a 	bls.w	8000d90 <__udivmoddi4+0x2ac>
 8000c7c:	3e02      	subs	r6, #2
 8000c7e:	443b      	add	r3, r7
 8000c80:	1a5b      	subs	r3, r3, r1
 8000c82:	b281      	uxth	r1, r0
 8000c84:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c88:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c8c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c90:	fb00 f308 	mul.w	r3, r0, r8
 8000c94:	428b      	cmp	r3, r1
 8000c96:	d907      	bls.n	8000ca8 <__udivmoddi4+0x1c4>
 8000c98:	1879      	adds	r1, r7, r1
 8000c9a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c9e:	d273      	bcs.n	8000d88 <__udivmoddi4+0x2a4>
 8000ca0:	428b      	cmp	r3, r1
 8000ca2:	d971      	bls.n	8000d88 <__udivmoddi4+0x2a4>
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	4439      	add	r1, r7
 8000ca8:	1acb      	subs	r3, r1, r3
 8000caa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cae:	e778      	b.n	8000ba2 <__udivmoddi4+0xbe>
 8000cb0:	f1c6 0c20 	rsb	ip, r6, #32
 8000cb4:	fa03 f406 	lsl.w	r4, r3, r6
 8000cb8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cbc:	431c      	orrs	r4, r3
 8000cbe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cc2:	fa01 f306 	lsl.w	r3, r1, r6
 8000cc6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cca:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cce:	431f      	orrs	r7, r3
 8000cd0:	0c3b      	lsrs	r3, r7, #16
 8000cd2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cd6:	fa1f f884 	uxth.w	r8, r4
 8000cda:	fb0e 1119 	mls	r1, lr, r9, r1
 8000cde:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ce2:	fb09 fa08 	mul.w	sl, r9, r8
 8000ce6:	458a      	cmp	sl, r1
 8000ce8:	fa02 f206 	lsl.w	r2, r2, r6
 8000cec:	fa00 f306 	lsl.w	r3, r0, r6
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x220>
 8000cf2:	1861      	adds	r1, r4, r1
 8000cf4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cf8:	d248      	bcs.n	8000d8c <__udivmoddi4+0x2a8>
 8000cfa:	458a      	cmp	sl, r1
 8000cfc:	d946      	bls.n	8000d8c <__udivmoddi4+0x2a8>
 8000cfe:	f1a9 0902 	sub.w	r9, r9, #2
 8000d02:	4421      	add	r1, r4
 8000d04:	eba1 010a 	sub.w	r1, r1, sl
 8000d08:	b2bf      	uxth	r7, r7
 8000d0a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d0e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d12:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d16:	fb00 f808 	mul.w	r8, r0, r8
 8000d1a:	45b8      	cmp	r8, r7
 8000d1c:	d907      	bls.n	8000d2e <__udivmoddi4+0x24a>
 8000d1e:	19e7      	adds	r7, r4, r7
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d22e      	bcs.n	8000d84 <__udivmoddi4+0x2a0>
 8000d26:	45b8      	cmp	r8, r7
 8000d28:	d92c      	bls.n	8000d84 <__udivmoddi4+0x2a0>
 8000d2a:	3802      	subs	r0, #2
 8000d2c:	4427      	add	r7, r4
 8000d2e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d32:	eba7 0708 	sub.w	r7, r7, r8
 8000d36:	fba0 8902 	umull	r8, r9, r0, r2
 8000d3a:	454f      	cmp	r7, r9
 8000d3c:	46c6      	mov	lr, r8
 8000d3e:	4649      	mov	r1, r9
 8000d40:	d31a      	bcc.n	8000d78 <__udivmoddi4+0x294>
 8000d42:	d017      	beq.n	8000d74 <__udivmoddi4+0x290>
 8000d44:	b15d      	cbz	r5, 8000d5e <__udivmoddi4+0x27a>
 8000d46:	ebb3 020e 	subs.w	r2, r3, lr
 8000d4a:	eb67 0701 	sbc.w	r7, r7, r1
 8000d4e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d52:	40f2      	lsrs	r2, r6
 8000d54:	ea4c 0202 	orr.w	r2, ip, r2
 8000d58:	40f7      	lsrs	r7, r6
 8000d5a:	e9c5 2700 	strd	r2, r7, [r5]
 8000d5e:	2600      	movs	r6, #0
 8000d60:	4631      	mov	r1, r6
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	462e      	mov	r6, r5
 8000d68:	4628      	mov	r0, r5
 8000d6a:	e70b      	b.n	8000b84 <__udivmoddi4+0xa0>
 8000d6c:	4606      	mov	r6, r0
 8000d6e:	e6e9      	b.n	8000b44 <__udivmoddi4+0x60>
 8000d70:	4618      	mov	r0, r3
 8000d72:	e6fd      	b.n	8000b70 <__udivmoddi4+0x8c>
 8000d74:	4543      	cmp	r3, r8
 8000d76:	d2e5      	bcs.n	8000d44 <__udivmoddi4+0x260>
 8000d78:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d7c:	eb69 0104 	sbc.w	r1, r9, r4
 8000d80:	3801      	subs	r0, #1
 8000d82:	e7df      	b.n	8000d44 <__udivmoddi4+0x260>
 8000d84:	4608      	mov	r0, r1
 8000d86:	e7d2      	b.n	8000d2e <__udivmoddi4+0x24a>
 8000d88:	4660      	mov	r0, ip
 8000d8a:	e78d      	b.n	8000ca8 <__udivmoddi4+0x1c4>
 8000d8c:	4681      	mov	r9, r0
 8000d8e:	e7b9      	b.n	8000d04 <__udivmoddi4+0x220>
 8000d90:	4666      	mov	r6, ip
 8000d92:	e775      	b.n	8000c80 <__udivmoddi4+0x19c>
 8000d94:	4630      	mov	r0, r6
 8000d96:	e74a      	b.n	8000c2e <__udivmoddi4+0x14a>
 8000d98:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d9c:	4439      	add	r1, r7
 8000d9e:	e713      	b.n	8000bc8 <__udivmoddi4+0xe4>
 8000da0:	3802      	subs	r0, #2
 8000da2:	443c      	add	r4, r7
 8000da4:	e724      	b.n	8000bf0 <__udivmoddi4+0x10c>
 8000da6:	bf00      	nop

08000da8 <__aeabi_idiv0>:
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop

08000dac <OnCaDDetectted>:




void OnCaDDetectted(bool channelActivityDetected )
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
	//ChannelDetected = false;
	//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
	if( channelActivityDetected )
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d007      	beq.n	8000dcc <OnCaDDetectted+0x20>
	{
		enable_send = 0;
 8000dbc:	4b07      	ldr	r3, [pc, #28]	; (8000ddc <OnCaDDetectted+0x30>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	701a      	strb	r2, [r3, #0]
		HAL_RNG_GenerateRandomNumber(&hrng, &rnd);
 8000dc2:	4907      	ldr	r1, [pc, #28]	; (8000de0 <OnCaDDetectted+0x34>)
 8000dc4:	4807      	ldr	r0, [pc, #28]	; (8000de4 <OnCaDDetectted+0x38>)
 8000dc6:	f004 ff4b 	bl	8005c60 <HAL_RNG_GenerateRandomNumber>
	}
	else
	{
		enable_send = 1;
	}
}
 8000dca:	e002      	b.n	8000dd2 <OnCaDDetectted+0x26>
		enable_send = 1;
 8000dcc:	4b03      	ldr	r3, [pc, #12]	; (8000ddc <OnCaDDetectted+0x30>)
 8000dce:	2201      	movs	r2, #1
 8000dd0:	701a      	strb	r2, [r3, #0]
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	200001b1 	.word	0x200001b1
 8000de0:	200001ac 	.word	0x200001ac
 8000de4:	200005c0 	.word	0x200005c0

08000de8 <OnTxDone>:
void OnTxDone( void )
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
	SessionID = SESSION_DEFAULT;
 8000dec:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <OnTxDone+0x20>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 8000df2:	2180      	movs	r1, #128	; 0x80
 8000df4:	4805      	ldr	r0, [pc, #20]	; (8000e0c <OnTxDone+0x24>)
 8000df6:	f004 faae 	bl	8005356 <HAL_GPIO_TogglePin>
	Radio.Rx(5000);
 8000dfa:	4b05      	ldr	r3, [pc, #20]	; (8000e10 <OnTxDone+0x28>)
 8000dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dfe:	f241 3088 	movw	r0, #5000	; 0x1388
 8000e02:	4798      	blx	r3
}
 8000e04:	bf00      	nop
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	200001a8 	.word	0x200001a8
 8000e0c:	40020800 	.word	0x40020800
 8000e10:	08006874 	.word	0x08006874

08000e14 <OnRxDone>:
void OnRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	4611      	mov	r1, r2
 8000e20:	461a      	mov	r2, r3
 8000e22:	4603      	mov	r3, r0
 8000e24:	817b      	strh	r3, [r7, #10]
 8000e26:	460b      	mov	r3, r1
 8000e28:	813b      	strh	r3, [r7, #8]
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	71fb      	strb	r3, [r7, #7]
	memcpy(RxBuffer,payload,24);
 8000e2e:	2218      	movs	r2, #24
 8000e30:	68f9      	ldr	r1, [r7, #12]
 8000e32:	4815      	ldr	r0, [pc, #84]	; (8000e88 <OnRxDone+0x74>)
 8000e34:	f005 fa92 	bl	800635c <memcpy>
	if(strncmp(RxBuffer,"START",5) == 0)
 8000e38:	2205      	movs	r2, #5
 8000e3a:	4914      	ldr	r1, [pc, #80]	; (8000e8c <OnRxDone+0x78>)
 8000e3c:	4812      	ldr	r0, [pc, #72]	; (8000e88 <OnRxDone+0x74>)
 8000e3e:	f005 fb1d 	bl	800647c <strncmp>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d10e      	bne.n	8000e66 <OnRxDone+0x52>
	{
		enable_send = 1;
 8000e48:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <OnRxDone+0x7c>)
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	701a      	strb	r2, [r3, #0]
		SessionID = SESSION_RESPONSE;
 8000e4e:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <OnRxDone+0x80>)
 8000e50:	2201      	movs	r2, #1
 8000e52:	701a      	strb	r2, [r3, #0]
		TransmitID = ACK_MESSAGE_T;
 8000e54:	4b10      	ldr	r3, [pc, #64]	; (8000e98 <OnRxDone+0x84>)
 8000e56:	2203      	movs	r2, #3
 8000e58:	701a      	strb	r2, [r3, #0]
		memset(RxBuffer,0,5);
 8000e5a:	2205      	movs	r2, #5
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	480a      	ldr	r0, [pc, #40]	; (8000e88 <OnRxDone+0x74>)
 8000e60:	f005 fa8a 	bl	8006378 <memset>
 8000e64:	e007      	b.n	8000e76 <OnRxDone+0x62>
	}
	else
	{
		SessionID = SESSION_DEFAULT;
 8000e66:	4b0b      	ldr	r3, [pc, #44]	; (8000e94 <OnRxDone+0x80>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	701a      	strb	r2, [r3, #0]
		//TransmitID = ACK_MESSAGE_T;
		memset(RxBuffer,0,5);
 8000e6c:	2205      	movs	r2, #5
 8000e6e:	2100      	movs	r1, #0
 8000e70:	4805      	ldr	r0, [pc, #20]	; (8000e88 <OnRxDone+0x74>)
 8000e72:	f005 fa81 	bl	8006378 <memset>
	}
	Radio.Rx(1);
 8000e76:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <OnRxDone+0x88>)
 8000e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	4798      	blx	r3
}
 8000e7e:	bf00      	nop
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	2000055c 	.word	0x2000055c
 8000e8c:	080067f8 	.word	0x080067f8
 8000e90:	200001b1 	.word	0x200001b1
 8000e94:	200001a8 	.word	0x200001a8
 8000e98:	200001b0 	.word	0x200001b0
 8000e9c:	08006874 	.word	0x08006874

08000ea0 <OnRxTimeout>:




void OnRxTimeout( void )
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
	Radio.Standby();
 8000ea4:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <OnRxTimeout+0x18>)
 8000ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea8:	4798      	blx	r3
	User_Uart_AsyncTransmit(USER_UART_CHANNEL_USART1,(uint8_t*)"RxE\n",5);
 8000eaa:	2205      	movs	r2, #5
 8000eac:	4903      	ldr	r1, [pc, #12]	; (8000ebc <OnRxTimeout+0x1c>)
 8000eae:	2004      	movs	r0, #4
 8000eb0:	f002 ff90 	bl	8003dd4 <User_Uart_AsyncTransmit>

}
 8000eb4:	bf00      	nop
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	08006874 	.word	0x08006874
 8000ebc:	08006800 	.word	0x08006800

08000ec0 <OnRxError>:
void OnRxError( void )
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
	User_Uart_AsyncTransmit(USER_UART_CHANNEL_USART1,(uint8_t*)"RxE\n",9);
 8000ec4:	2209      	movs	r2, #9
 8000ec6:	4903      	ldr	r1, [pc, #12]	; (8000ed4 <OnRxError+0x14>)
 8000ec8:	2004      	movs	r0, #4
 8000eca:	f002 ff83 	bl	8003dd4 <User_Uart_AsyncTransmit>
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	08006800 	.word	0x08006800

08000ed8 <App_TestMain>:



void App_TestMain()
{
 8000ed8:	b590      	push	{r4, r7, lr}
 8000eda:	b093      	sub	sp, #76	; 0x4c
 8000edc:	af0a      	add	r7, sp, #40	; 0x28
	RadioEvents_t RadioEvents = {
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
 8000eec:	615a      	str	r2, [r3, #20]
 8000eee:	619a      	str	r2, [r3, #24]
 8000ef0:	4b32      	ldr	r3, [pc, #200]	; (8000fbc <App_TestMain+0xe4>)
 8000ef2:	607b      	str	r3, [r7, #4]
 8000ef4:	4b32      	ldr	r3, [pc, #200]	; (8000fc0 <App_TestMain+0xe8>)
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	4b32      	ldr	r3, [pc, #200]	; (8000fc4 <App_TestMain+0xec>)
 8000efa:	613b      	str	r3, [r7, #16]
 8000efc:	4b32      	ldr	r3, [pc, #200]	; (8000fc8 <App_TestMain+0xf0>)
 8000efe:	617b      	str	r3, [r7, #20]
 8000f00:	4b32      	ldr	r3, [pc, #200]	; (8000fcc <App_TestMain+0xf4>)
 8000f02:	61fb      	str	r3, [r7, #28]
		.RxTimeout = OnRxTimeout,
		.RxError = OnRxError,
		.CadDone = OnCaDDetectted
	};

	Radio.Init( &RadioEvents );
 8000f04:	4b32      	ldr	r3, [pc, #200]	; (8000fd0 <App_TestMain+0xf8>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	1d3a      	adds	r2, r7, #4
 8000f0a:	4610      	mov	r0, r2
 8000f0c:	4798      	blx	r3
	Radio.SetChannel( RF_FREQUENCY );
 8000f0e:	4b30      	ldr	r3, [pc, #192]	; (8000fd0 <App_TestMain+0xf8>)
 8000f10:	68db      	ldr	r3, [r3, #12]
 8000f12:	4830      	ldr	r0, [pc, #192]	; (8000fd4 <App_TestMain+0xfc>)
 8000f14:	4798      	blx	r3
	Radio.SetTxConfig( MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 8000f16:	4b2e      	ldr	r3, [pc, #184]	; (8000fd0 <App_TestMain+0xf8>)
 8000f18:	69dc      	ldr	r4, [r3, #28]
 8000f1a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000f1e:	9308      	str	r3, [sp, #32]
 8000f20:	2300      	movs	r3, #0
 8000f22:	9307      	str	r3, [sp, #28]
 8000f24:	2300      	movs	r3, #0
 8000f26:	9306      	str	r3, [sp, #24]
 8000f28:	2300      	movs	r3, #0
 8000f2a:	9305      	str	r3, [sp, #20]
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	9304      	str	r3, [sp, #16]
 8000f30:	2300      	movs	r3, #0
 8000f32:	9303      	str	r3, [sp, #12]
 8000f34:	2308      	movs	r3, #8
 8000f36:	9302      	str	r3, [sp, #8]
 8000f38:	2302      	movs	r3, #2
 8000f3a:	9301      	str	r3, [sp, #4]
 8000f3c:	230b      	movs	r3, #11
 8000f3e:	9300      	str	r3, [sp, #0]
 8000f40:	2301      	movs	r3, #1
 8000f42:	2200      	movs	r2, #0
 8000f44:	2116      	movs	r1, #22
 8000f46:	2001      	movs	r0, #1
 8000f48:	47a0      	blx	r4
                     LORA_SPREADING_FACTOR, LORA_CODINGRATE,
                     LORA_PREAMBLE_LENGTH, LORA_FIX_LENGTH_PAYLOAD_ON,
                     true, 0, 0, LORA_IQ_INVERSION_ON, 3000 );
	Radio.SetRxConfig( MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 8000f4a:	4b21      	ldr	r3, [pc, #132]	; (8000fd0 <App_TestMain+0xf8>)
 8000f4c:	699c      	ldr	r4, [r3, #24]
 8000f4e:	2300      	movs	r3, #0
 8000f50:	9309      	str	r3, [sp, #36]	; 0x24
 8000f52:	2300      	movs	r3, #0
 8000f54:	9308      	str	r3, [sp, #32]
 8000f56:	2300      	movs	r3, #0
 8000f58:	9307      	str	r3, [sp, #28]
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	9306      	str	r3, [sp, #24]
 8000f5e:	2301      	movs	r3, #1
 8000f60:	9305      	str	r3, [sp, #20]
 8000f62:	2300      	movs	r3, #0
 8000f64:	9304      	str	r3, [sp, #16]
 8000f66:	2300      	movs	r3, #0
 8000f68:	9303      	str	r3, [sp, #12]
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	9302      	str	r3, [sp, #8]
 8000f6e:	2308      	movs	r3, #8
 8000f70:	9301      	str	r3, [sp, #4]
 8000f72:	2300      	movs	r3, #0
 8000f74:	9300      	str	r3, [sp, #0]
 8000f76:	2302      	movs	r3, #2
 8000f78:	220b      	movs	r2, #11
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	2001      	movs	r0, #1
 8000f7e:	47a0      	blx	r4
                     LORA_CODINGRATE, 0, LORA_PREAMBLE_LENGTH,
                     LORA_SYMBOL_TIMEOUT, LORA_FIX_LENGTH_PAYLOAD_ON,
                     0, true, 0, 0, LORA_IQ_INVERSION_ON, false );
	User_Uart_Init(&User_Uart_ConfigPtr);
 8000f80:	4815      	ldr	r0, [pc, #84]	; (8000fd8 <App_TestMain+0x100>)
 8000f82:	f002 fe89 	bl	8003c98 <User_Uart_Init>
	Init_Timer(&Timer2_Cfg);
 8000f86:	4815      	ldr	r0, [pc, #84]	; (8000fdc <App_TestMain+0x104>)
 8000f88:	f002 fac2 	bl	8003510 <Init_Timer>

	Tim_AddEvent(TIMER2_HW, LoRa_IRQHandle);
 8000f8c:	4914      	ldr	r1, [pc, #80]	; (8000fe0 <App_TestMain+0x108>)
 8000f8e:	2002      	movs	r0, #2
 8000f90:	f002 fdd0 	bl	8003b34 <Tim_AddEvent>
	Tim_AddEvent(TIMER2_HW, Payload_Handle);
 8000f94:	4913      	ldr	r1, [pc, #76]	; (8000fe4 <App_TestMain+0x10c>)
 8000f96:	2002      	movs	r0, #2
 8000f98:	f002 fdcc 	bl	8003b34 <Tim_AddEvent>
	SX126xSetCadParams(0x02, 24, 11, 0, 00);
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	9300      	str	r3, [sp, #0]
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	220b      	movs	r2, #11
 8000fa4:	2118      	movs	r1, #24
 8000fa6:	2002      	movs	r0, #2
 8000fa8:	f002 f9b0 	bl	800330c <SX126xSetCadParams>

	while(1)
	{
		Session_Current[SessionID]();
 8000fac:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <App_TestMain+0x110>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <App_TestMain+0x114>)
 8000fb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fb8:	4798      	blx	r3
 8000fba:	e7f7      	b.n	8000fac <App_TestMain+0xd4>
 8000fbc:	08000de9 	.word	0x08000de9
 8000fc0:	08000e15 	.word	0x08000e15
 8000fc4:	08000ea1 	.word	0x08000ea1
 8000fc8:	08000ec1 	.word	0x08000ec1
 8000fcc:	08000dad 	.word	0x08000dad
 8000fd0:	08006874 	.word	0x08006874
 8000fd4:	19de5080 	.word	0x19de5080
 8000fd8:	20000104 	.word	0x20000104
 8000fdc:	200000fc 	.word	0x200000fc
 8000fe0:	08000ff1 	.word	0x08000ff1
 8000fe4:	08001145 	.word	0x08001145
 8000fe8:	200001a8 	.word	0x200001a8
 8000fec:	20000000 	.word	0x20000000

08000ff0 <LoRa_IRQHandle>:




void LoRa_IRQHandle()
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
	Radio.IrqProcess( );
 8000ff4:	4b02      	ldr	r3, [pc, #8]	; (8001000 <LoRa_IRQHandle+0x10>)
 8000ff6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ff8:	4798      	blx	r3
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	08006874 	.word	0x08006874

08001004 <Session_Response>:

void Session_Response()
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0

	uint32_t time = HAL_GetTick();
 800100a:	f003 fe95 	bl	8004d38 <HAL_GetTick>
 800100e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(SessionID != SESSION_RESPONSE)
 8001010:	4b37      	ldr	r3, [pc, #220]	; (80010f0 <Session_Response+0xec>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b01      	cmp	r3, #1
 8001016:	d166      	bne.n	80010e6 <Session_Response+0xe2>
		{
			break;
		}
		switch(TransmitID)
 8001018:	4b36      	ldr	r3, [pc, #216]	; (80010f4 <Session_Response+0xf0>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b03      	cmp	r3, #3
 800101e:	d002      	beq.n	8001026 <Session_Response+0x22>
 8001020:	2b04      	cmp	r3, #4
 8001022:	d028      	beq.n	8001076 <Session_Response+0x72>
					TransmitID = 0x00;
					SessionID = SESSION_DEFAULT;
				}
				break;
			default:
			break;
 8001024:	e05b      	b.n	80010de <Session_Response+0xda>
				if(HAL_GetTick() - time > ((uint8_t)rnd + 300))
 8001026:	f003 fe87 	bl	8004d38 <HAL_GetTick>
 800102a:	4602      	mov	r2, r0
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	4a31      	ldr	r2, [pc, #196]	; (80010f8 <Session_Response+0xf4>)
 8001032:	6812      	ldr	r2, [r2, #0]
 8001034:	b2d2      	uxtb	r2, r2
 8001036:	f502 7296 	add.w	r2, r2, #300	; 0x12c
 800103a:	4293      	cmp	r3, r2
 800103c:	d94c      	bls.n	80010d8 <Session_Response+0xd4>
					HAL_RNG_GenerateRandomNumber(&hrng, &rnd);
 800103e:	492e      	ldr	r1, [pc, #184]	; (80010f8 <Session_Response+0xf4>)
 8001040:	482e      	ldr	r0, [pc, #184]	; (80010fc <Session_Response+0xf8>)
 8001042:	f004 fe0d 	bl	8005c60 <HAL_RNG_GenerateRandomNumber>
					time = HAL_GetTick();
 8001046:	f003 fe77 	bl	8004d38 <HAL_GetTick>
 800104a:	6078      	str	r0, [r7, #4]
				if(enable_send == 1)
 800104c:	4b2c      	ldr	r3, [pc, #176]	; (8001100 <Session_Response+0xfc>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d141      	bne.n	80010d8 <Session_Response+0xd4>
					enable_send = 0;
 8001054:	4b2a      	ldr	r3, [pc, #168]	; (8001100 <Session_Response+0xfc>)
 8001056:	2200      	movs	r2, #0
 8001058:	701a      	strb	r2, [r3, #0]
					Radio.Send("ACK1",4);
 800105a:	4b2a      	ldr	r3, [pc, #168]	; (8001104 <Session_Response+0x100>)
 800105c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800105e:	2104      	movs	r1, #4
 8001060:	4829      	ldr	r0, [pc, #164]	; (8001108 <Session_Response+0x104>)
 8001062:	4798      	blx	r3
					HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8001064:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001068:	4828      	ldr	r0, [pc, #160]	; (800110c <Session_Response+0x108>)
 800106a:	f004 f974 	bl	8005356 <HAL_GPIO_TogglePin>
					TransmitID = 0x00;
 800106e:	4b21      	ldr	r3, [pc, #132]	; (80010f4 <Session_Response+0xf0>)
 8001070:	2200      	movs	r2, #0
 8001072:	701a      	strb	r2, [r3, #0]
				break;
 8001074:	e030      	b.n	80010d8 <Session_Response+0xd4>
				if(HAL_GetTick() - time > ((uint8_t)rnd + 300))
 8001076:	f003 fe5f 	bl	8004d38 <HAL_GetTick>
 800107a:	4602      	mov	r2, r0
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	4a1d      	ldr	r2, [pc, #116]	; (80010f8 <Session_Response+0xf4>)
 8001082:	6812      	ldr	r2, [r2, #0]
 8001084:	b2d2      	uxtb	r2, r2
 8001086:	f502 7296 	add.w	r2, r2, #300	; 0x12c
 800108a:	4293      	cmp	r3, r2
 800108c:	d90c      	bls.n	80010a8 <Session_Response+0xa4>
					HAL_RNG_GenerateRandomNumber(&hrng, &rnd);
 800108e:	491a      	ldr	r1, [pc, #104]	; (80010f8 <Session_Response+0xf4>)
 8001090:	481a      	ldr	r0, [pc, #104]	; (80010fc <Session_Response+0xf8>)
 8001092:	f004 fde5 	bl	8005c60 <HAL_RNG_GenerateRandomNumber>
					time = HAL_GetTick();
 8001096:	f003 fe4f 	bl	8004d38 <HAL_GetTick>
 800109a:	6078      	str	r0, [r7, #4]
					Radio.StartCad();
 800109c:	4b19      	ldr	r3, [pc, #100]	; (8001104 <Session_Response+0x100>)
 800109e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010a0:	4798      	blx	r3
					HAL_Delay(50);
 80010a2:	2032      	movs	r0, #50	; 0x32
 80010a4:	f003 fe54 	bl	8004d50 <HAL_Delay>
				if(enable_send == 1)
 80010a8:	4b15      	ldr	r3, [pc, #84]	; (8001100 <Session_Response+0xfc>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d115      	bne.n	80010dc <Session_Response+0xd8>
					enable_send = 0;
 80010b0:	4b13      	ldr	r3, [pc, #76]	; (8001100 <Session_Response+0xfc>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	701a      	strb	r2, [r3, #0]
					Radio.Send("HelloFormNode1",14);
 80010b6:	4b13      	ldr	r3, [pc, #76]	; (8001104 <Session_Response+0x100>)
 80010b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ba:	210e      	movs	r1, #14
 80010bc:	4814      	ldr	r0, [pc, #80]	; (8001110 <Session_Response+0x10c>)
 80010be:	4798      	blx	r3
					HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_12);
 80010c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010c4:	4813      	ldr	r0, [pc, #76]	; (8001114 <Session_Response+0x110>)
 80010c6:	f004 f946 	bl	8005356 <HAL_GPIO_TogglePin>
					TransmitID = 0x00;
 80010ca:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <Session_Response+0xf0>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	701a      	strb	r2, [r3, #0]
					SessionID = SESSION_DEFAULT;
 80010d0:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <Session_Response+0xec>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	701a      	strb	r2, [r3, #0]
				break;
 80010d6:	e001      	b.n	80010dc <Session_Response+0xd8>
				break;
 80010d8:	bf00      	nop
 80010da:	e000      	b.n	80010de <Session_Response+0xda>
				break;
 80010dc:	bf00      	nop
		}
	HAL_Delay(1);
 80010de:	2001      	movs	r0, #1
 80010e0:	f003 fe36 	bl	8004d50 <HAL_Delay>
		if(SessionID != SESSION_RESPONSE)
 80010e4:	e794      	b.n	8001010 <Session_Response+0xc>
			break;
 80010e6:	bf00      	nop
	}
}
 80010e8:	bf00      	nop
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	200001a8 	.word	0x200001a8
 80010f4:	200001b0 	.word	0x200001b0
 80010f8:	200001ac 	.word	0x200001ac
 80010fc:	200005c0 	.word	0x200005c0
 8001100:	200001b1 	.word	0x200001b1
 8001104:	08006874 	.word	0x08006874
 8001108:	08006808 	.word	0x08006808
 800110c:	40020c00 	.word	0x40020c00
 8001110:	08006810 	.word	0x08006810
 8001114:	40021400 	.word	0x40021400

08001118 <Session_Default>:


void Session_Default()
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
	Radio.Rx(1000);
 800111c:	4b07      	ldr	r3, [pc, #28]	; (800113c <Session_Default+0x24>)
 800111e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001120:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001124:	4798      	blx	r3
	while(1)
	{
		if(SessionID != SESSION_DEFAULT)
 8001126:	4b06      	ldr	r3, [pc, #24]	; (8001140 <Session_Default+0x28>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d103      	bne.n	8001136 <Session_Default+0x1e>
		{
			break;
		}
		HAL_Delay(1);
 800112e:	2001      	movs	r0, #1
 8001130:	f003 fe0e 	bl	8004d50 <HAL_Delay>
		if(SessionID != SESSION_DEFAULT)
 8001134:	e7f7      	b.n	8001126 <Session_Default+0xe>
			break;
 8001136:	bf00      	nop
	}
}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}
 800113c:	08006874 	.word	0x08006874
 8001140:	200001a8 	.word	0x200001a8

08001144 <Payload_Handle>:
void Payload_Handle()
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
	//{
	//	SessionID = SESSION_DEFAULT;
		//TransmitID = ACK_MESSAGE_T;
		//memset(RxBuffer,0,5);
	//}
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
	...

08001154 <MX_GPIO_Init>:
     PB10   ------> SPI2_SCK
     PB6   ------> USART1_TX
     PB7   ------> USART1_RX
*/
void MX_GPIO_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08a      	sub	sp, #40	; 0x28
 8001158:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115a:	f107 0314 	add.w	r3, r7, #20
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]
 8001166:	60da      	str	r2, [r3, #12]
 8001168:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	613b      	str	r3, [r7, #16]
 800116e:	4b6d      	ldr	r3, [pc, #436]	; (8001324 <MX_GPIO_Init+0x1d0>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a6c      	ldr	r2, [pc, #432]	; (8001324 <MX_GPIO_Init+0x1d0>)
 8001174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b6a      	ldr	r3, [pc, #424]	; (8001324 <MX_GPIO_Init+0x1d0>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001182:	613b      	str	r3, [r7, #16]
 8001184:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	4b66      	ldr	r3, [pc, #408]	; (8001324 <MX_GPIO_Init+0x1d0>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	4a65      	ldr	r2, [pc, #404]	; (8001324 <MX_GPIO_Init+0x1d0>)
 8001190:	f043 0304 	orr.w	r3, r3, #4
 8001194:	6313      	str	r3, [r2, #48]	; 0x30
 8001196:	4b63      	ldr	r3, [pc, #396]	; (8001324 <MX_GPIO_Init+0x1d0>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	f003 0304 	and.w	r3, r3, #4
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	60bb      	str	r3, [r7, #8]
 80011a6:	4b5f      	ldr	r3, [pc, #380]	; (8001324 <MX_GPIO_Init+0x1d0>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	4a5e      	ldr	r2, [pc, #376]	; (8001324 <MX_GPIO_Init+0x1d0>)
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	6313      	str	r3, [r2, #48]	; 0x30
 80011b2:	4b5c      	ldr	r3, [pc, #368]	; (8001324 <MX_GPIO_Init+0x1d0>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	60bb      	str	r3, [r7, #8]
 80011bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	607b      	str	r3, [r7, #4]
 80011c2:	4b58      	ldr	r3, [pc, #352]	; (8001324 <MX_GPIO_Init+0x1d0>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	4a57      	ldr	r2, [pc, #348]	; (8001324 <MX_GPIO_Init+0x1d0>)
 80011c8:	f043 0302 	orr.w	r3, r3, #2
 80011cc:	6313      	str	r3, [r2, #48]	; 0x30
 80011ce:	4b55      	ldr	r3, [pc, #340]	; (8001324 <MX_GPIO_Init+0x1d0>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	603b      	str	r3, [r7, #0]
 80011de:	4b51      	ldr	r3, [pc, #324]	; (8001324 <MX_GPIO_Init+0x1d0>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	4a50      	ldr	r2, [pc, #320]	; (8001324 <MX_GPIO_Init+0x1d0>)
 80011e4:	f043 0308 	orr.w	r3, r3, #8
 80011e8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ea:	4b4e      	ldr	r3, [pc, #312]	; (8001324 <MX_GPIO_Init+0x1d0>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	f003 0308 	and.w	r3, r3, #8
 80011f2:	603b      	str	r3, [r7, #0]
 80011f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CSS_Pin_GPIO_Port, SPI_CSS_Pin_Pin, GPIO_PIN_RESET);
 80011f6:	2200      	movs	r2, #0
 80011f8:	2110      	movs	r1, #16
 80011fa:	484b      	ldr	r0, [pc, #300]	; (8001328 <MX_GPIO_Init+0x1d4>)
 80011fc:	f004 f892 	bl	8005324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SX1278_RST_PIN_INDEX_GPIO_Port, SX1278_RST_PIN_INDEX_Pin, GPIO_PIN_SET);
 8001200:	2201      	movs	r2, #1
 8001202:	2102      	movs	r1, #2
 8001204:	4849      	ldr	r0, [pc, #292]	; (800132c <MX_GPIO_Init+0x1d8>)
 8001206:	f004 f88d 	bl	8005324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_SET);
 800120a:	2201      	movs	r2, #1
 800120c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001210:	4847      	ldr	r0, [pc, #284]	; (8001330 <MX_GPIO_Init+0x1dc>)
 8001212:	f004 f887 	bl	8005324 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001216:	230c      	movs	r3, #12
 8001218:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121a:	2302      	movs	r3, #2
 800121c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001222:	2303      	movs	r3, #3
 8001224:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001226:	2305      	movs	r3, #5
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800122a:	f107 0314 	add.w	r3, r7, #20
 800122e:	4619      	mov	r1, r3
 8001230:	4840      	ldr	r0, [pc, #256]	; (8001334 <MX_GPIO_Init+0x1e0>)
 8001232:	f003 fec3 	bl	8004fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001236:	2301      	movs	r3, #1
 8001238:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800123a:	2300      	movs	r3, #0
 800123c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001242:	f107 0314 	add.w	r3, r7, #20
 8001246:	4619      	mov	r1, r3
 8001248:	4837      	ldr	r0, [pc, #220]	; (8001328 <MX_GPIO_Init+0x1d4>)
 800124a:	f003 feb7 	bl	8004fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CSS_Pin_Pin;
 800124e:	2310      	movs	r3, #16
 8001250:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001252:	2301      	movs	r3, #1
 8001254:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800125a:	2302      	movs	r3, #2
 800125c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CSS_Pin_GPIO_Port, &GPIO_InitStruct);
 800125e:	f107 0314 	add.w	r3, r7, #20
 8001262:	4619      	mov	r1, r3
 8001264:	4830      	ldr	r0, [pc, #192]	; (8001328 <MX_GPIO_Init+0x1d4>)
 8001266:	f003 fea9 	bl	8004fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800126a:	2305      	movs	r3, #5
 800126c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800126e:	2300      	movs	r3, #0
 8001270:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001276:	f107 0314 	add.w	r3, r7, #20
 800127a:	4619      	mov	r1, r3
 800127c:	482b      	ldr	r0, [pc, #172]	; (800132c <MX_GPIO_Init+0x1d8>)
 800127e:	f003 fe9d 	bl	8004fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SX1278_RST_PIN_INDEX_Pin;
 8001282:	2302      	movs	r3, #2
 8001284:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001286:	2301      	movs	r3, #1
 8001288:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800128e:	2301      	movs	r3, #1
 8001290:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SX1278_RST_PIN_INDEX_GPIO_Port, &GPIO_InitStruct);
 8001292:	f107 0314 	add.w	r3, r7, #20
 8001296:	4619      	mov	r1, r3
 8001298:	4824      	ldr	r0, [pc, #144]	; (800132c <MX_GPIO_Init+0x1d8>)
 800129a:	f003 fe8f 	bl	8004fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800129e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a4:	2302      	movs	r3, #2
 80012a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ac:	2303      	movs	r3, #3
 80012ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012b0:	2305      	movs	r3, #5
 80012b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b4:	f107 0314 	add.w	r3, r7, #20
 80012b8:	4619      	mov	r1, r3
 80012ba:	481c      	ldr	r0, [pc, #112]	; (800132c <MX_GPIO_Init+0x1d8>)
 80012bc:	f003 fe7e 	bl	8004fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80012c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c6:	2301      	movs	r3, #1
 80012c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012ce:	2302      	movs	r3, #2
 80012d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012d2:	f107 0314 	add.w	r3, r7, #20
 80012d6:	4619      	mov	r1, r3
 80012d8:	4815      	ldr	r0, [pc, #84]	; (8001330 <MX_GPIO_Init+0x1dc>)
 80012da:	f003 fe6f 	bl	8004fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80012de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e4:	2301      	movs	r3, #1
 80012e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80012ec:	2301      	movs	r3, #1
 80012ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012f0:	f107 0314 	add.w	r3, r7, #20
 80012f4:	4619      	mov	r1, r3
 80012f6:	480e      	ldr	r0, [pc, #56]	; (8001330 <MX_GPIO_Init+0x1dc>)
 80012f8:	f003 fe60 	bl	8004fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012fc:	23c0      	movs	r3, #192	; 0xc0
 80012fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001300:	2302      	movs	r3, #2
 8001302:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001308:	2303      	movs	r3, #3
 800130a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800130c:	2307      	movs	r3, #7
 800130e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	4619      	mov	r1, r3
 8001316:	4805      	ldr	r0, [pc, #20]	; (800132c <MX_GPIO_Init+0x1d8>)
 8001318:	f003 fe50 	bl	8004fbc <HAL_GPIO_Init>

}
 800131c:	bf00      	nop
 800131e:	3728      	adds	r7, #40	; 0x28
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40023800 	.word	0x40023800
 8001328:	40020000 	.word	0x40020000
 800132c:	40020400 	.word	0x40020400
 8001330:	40020c00 	.word	0x40020c00
 8001334:	40020800 	.word	0x40020800

08001338 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800133c:	f003 fc96 	bl	8004c6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001340:	f000 f80a 	bl	8001358 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001344:	f7ff ff06 	bl	8001154 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001348:	f000 f8ac 	bl	80014a4 <MX_SPI1_Init>
  MX_RNG_Init();
 800134c:	f000 f874 	bl	8001438 <MX_RNG_Init>



  while (1)
  {
	 App_TestMain();
 8001350:	f7ff fdc2 	bl	8000ed8 <App_TestMain>
 8001354:	e7fc      	b.n	8001350 <main+0x18>
	...

08001358 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b094      	sub	sp, #80	; 0x50
 800135c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800135e:	f107 0320 	add.w	r3, r7, #32
 8001362:	2230      	movs	r2, #48	; 0x30
 8001364:	2100      	movs	r1, #0
 8001366:	4618      	mov	r0, r3
 8001368:	f005 f806 	bl	8006378 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800136c:	f107 030c 	add.w	r3, r7, #12
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800137c:	2300      	movs	r3, #0
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	4b28      	ldr	r3, [pc, #160]	; (8001424 <SystemClock_Config+0xcc>)
 8001382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001384:	4a27      	ldr	r2, [pc, #156]	; (8001424 <SystemClock_Config+0xcc>)
 8001386:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800138a:	6413      	str	r3, [r2, #64]	; 0x40
 800138c:	4b25      	ldr	r3, [pc, #148]	; (8001424 <SystemClock_Config+0xcc>)
 800138e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001394:	60bb      	str	r3, [r7, #8]
 8001396:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001398:	2300      	movs	r3, #0
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	4b22      	ldr	r3, [pc, #136]	; (8001428 <SystemClock_Config+0xd0>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a21      	ldr	r2, [pc, #132]	; (8001428 <SystemClock_Config+0xd0>)
 80013a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013a6:	6013      	str	r3, [r2, #0]
 80013a8:	4b1f      	ldr	r3, [pc, #124]	; (8001428 <SystemClock_Config+0xd0>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013b4:	2301      	movs	r3, #1
 80013b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013be:	2302      	movs	r3, #2
 80013c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80013c8:	2304      	movs	r3, #4
 80013ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80013cc:	23a8      	movs	r3, #168	; 0xa8
 80013ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013d0:	2302      	movs	r3, #2
 80013d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80013d4:	2307      	movs	r3, #7
 80013d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013d8:	f107 0320 	add.w	r3, r7, #32
 80013dc:	4618      	mov	r0, r3
 80013de:	f003 ffd5 	bl	800538c <HAL_RCC_OscConfig>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80013e8:	f000 f820 	bl	800142c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ec:	230f      	movs	r3, #15
 80013ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013f0:	2302      	movs	r3, #2
 80013f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013f8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001402:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001404:	f107 030c 	add.w	r3, r7, #12
 8001408:	2105      	movs	r1, #5
 800140a:	4618      	mov	r0, r3
 800140c:	f004 fa36 	bl	800587c <HAL_RCC_ClockConfig>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001416:	f000 f809 	bl	800142c <Error_Handler>
  }
}
 800141a:	bf00      	nop
 800141c:	3750      	adds	r7, #80	; 0x50
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40023800 	.word	0x40023800
 8001428:	40007000 	.word	0x40007000

0800142c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001430:	b672      	cpsid	i
}
 8001432:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001434:	e7fe      	b.n	8001434 <Error_Handler+0x8>
	...

08001438 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800143c:	4b06      	ldr	r3, [pc, #24]	; (8001458 <MX_RNG_Init+0x20>)
 800143e:	4a07      	ldr	r2, [pc, #28]	; (800145c <MX_RNG_Init+0x24>)
 8001440:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001442:	4805      	ldr	r0, [pc, #20]	; (8001458 <MX_RNG_Init+0x20>)
 8001444:	f004 fbe2 	bl	8005c0c <HAL_RNG_Init>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800144e:	f7ff ffed 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	200005c0 	.word	0x200005c0
 800145c:	50060800 	.word	0x50060800

08001460 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a0b      	ldr	r2, [pc, #44]	; (800149c <HAL_RNG_MspInit+0x3c>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d10d      	bne.n	800148e <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	4b0a      	ldr	r3, [pc, #40]	; (80014a0 <HAL_RNG_MspInit+0x40>)
 8001478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800147a:	4a09      	ldr	r2, [pc, #36]	; (80014a0 <HAL_RNG_MspInit+0x40>)
 800147c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001480:	6353      	str	r3, [r2, #52]	; 0x34
 8001482:	4b07      	ldr	r3, [pc, #28]	; (80014a0 <HAL_RNG_MspInit+0x40>)
 8001484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 800148e:	bf00      	nop
 8001490:	3714      	adds	r7, #20
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	50060800 	.word	0x50060800
 80014a0:	40023800 	.word	0x40023800

080014a4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80014a8:	4b17      	ldr	r3, [pc, #92]	; (8001508 <MX_SPI1_Init+0x64>)
 80014aa:	4a18      	ldr	r2, [pc, #96]	; (800150c <MX_SPI1_Init+0x68>)
 80014ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014ae:	4b16      	ldr	r3, [pc, #88]	; (8001508 <MX_SPI1_Init+0x64>)
 80014b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014b6:	4b14      	ldr	r3, [pc, #80]	; (8001508 <MX_SPI1_Init+0x64>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014bc:	4b12      	ldr	r3, [pc, #72]	; (8001508 <MX_SPI1_Init+0x64>)
 80014be:	2200      	movs	r2, #0
 80014c0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014c2:	4b11      	ldr	r3, [pc, #68]	; (8001508 <MX_SPI1_Init+0x64>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014c8:	4b0f      	ldr	r3, [pc, #60]	; (8001508 <MX_SPI1_Init+0x64>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014ce:	4b0e      	ldr	r3, [pc, #56]	; (8001508 <MX_SPI1_Init+0x64>)
 80014d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014d4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80014d6:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <MX_SPI1_Init+0x64>)
 80014d8:	2228      	movs	r2, #40	; 0x28
 80014da:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014dc:	4b0a      	ldr	r3, [pc, #40]	; (8001508 <MX_SPI1_Init+0x64>)
 80014de:	2200      	movs	r2, #0
 80014e0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014e2:	4b09      	ldr	r3, [pc, #36]	; (8001508 <MX_SPI1_Init+0x64>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014e8:	4b07      	ldr	r3, [pc, #28]	; (8001508 <MX_SPI1_Init+0x64>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80014ee:	4b06      	ldr	r3, [pc, #24]	; (8001508 <MX_SPI1_Init+0x64>)
 80014f0:	220a      	movs	r2, #10
 80014f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014f4:	4804      	ldr	r0, [pc, #16]	; (8001508 <MX_SPI1_Init+0x64>)
 80014f6:	f004 fc09 	bl	8005d0c <HAL_SPI_Init>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001500:	f7ff ff94 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001504:	bf00      	nop
 8001506:	bd80      	pop	{r7, pc}
 8001508:	200005d0 	.word	0x200005d0
 800150c:	40013000 	.word	0x40013000

08001510 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08a      	sub	sp, #40	; 0x28
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a19      	ldr	r2, [pc, #100]	; (8001594 <HAL_SPI_MspInit+0x84>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d12b      	bne.n	800158a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	613b      	str	r3, [r7, #16]
 8001536:	4b18      	ldr	r3, [pc, #96]	; (8001598 <HAL_SPI_MspInit+0x88>)
 8001538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153a:	4a17      	ldr	r2, [pc, #92]	; (8001598 <HAL_SPI_MspInit+0x88>)
 800153c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001540:	6453      	str	r3, [r2, #68]	; 0x44
 8001542:	4b15      	ldr	r3, [pc, #84]	; (8001598 <HAL_SPI_MspInit+0x88>)
 8001544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001546:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800154a:	613b      	str	r3, [r7, #16]
 800154c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	4b11      	ldr	r3, [pc, #68]	; (8001598 <HAL_SPI_MspInit+0x88>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	4a10      	ldr	r2, [pc, #64]	; (8001598 <HAL_SPI_MspInit+0x88>)
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	6313      	str	r3, [r2, #48]	; 0x30
 800155e:	4b0e      	ldr	r3, [pc, #56]	; (8001598 <HAL_SPI_MspInit+0x88>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800156a:	23e0      	movs	r3, #224	; 0xe0
 800156c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156e:	2302      	movs	r3, #2
 8001570:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001576:	2303      	movs	r3, #3
 8001578:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800157a:	2305      	movs	r3, #5
 800157c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157e:	f107 0314 	add.w	r3, r7, #20
 8001582:	4619      	mov	r1, r3
 8001584:	4805      	ldr	r0, [pc, #20]	; (800159c <HAL_SPI_MspInit+0x8c>)
 8001586:	f003 fd19 	bl	8004fbc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800158a:	bf00      	nop
 800158c:	3728      	adds	r7, #40	; 0x28
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40013000 	.word	0x40013000
 8001598:	40023800 	.word	0x40023800
 800159c:	40020000 	.word	0x40020000

080015a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	607b      	str	r3, [r7, #4]
 80015aa:	4b10      	ldr	r3, [pc, #64]	; (80015ec <HAL_MspInit+0x4c>)
 80015ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ae:	4a0f      	ldr	r2, [pc, #60]	; (80015ec <HAL_MspInit+0x4c>)
 80015b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015b4:	6453      	str	r3, [r2, #68]	; 0x44
 80015b6:	4b0d      	ldr	r3, [pc, #52]	; (80015ec <HAL_MspInit+0x4c>)
 80015b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015be:	607b      	str	r3, [r7, #4]
 80015c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	603b      	str	r3, [r7, #0]
 80015c6:	4b09      	ldr	r3, [pc, #36]	; (80015ec <HAL_MspInit+0x4c>)
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	4a08      	ldr	r2, [pc, #32]	; (80015ec <HAL_MspInit+0x4c>)
 80015cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d0:	6413      	str	r3, [r2, #64]	; 0x40
 80015d2:	4b06      	ldr	r3, [pc, #24]	; (80015ec <HAL_MspInit+0x4c>)
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015da:	603b      	str	r3, [r7, #0]
 80015dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015de:	bf00      	nop
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	40023800 	.word	0x40023800

080015f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015f4:	e7fe      	b.n	80015f4 <NMI_Handler+0x4>

080015f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015fa:	e7fe      	b.n	80015fa <HardFault_Handler+0x4>

080015fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001600:	e7fe      	b.n	8001600 <MemManage_Handler+0x4>

08001602 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001606:	e7fe      	b.n	8001606 <BusFault_Handler+0x4>

08001608 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800160c:	e7fe      	b.n	800160c <UsageFault_Handler+0x4>

0800160e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800160e:	b480      	push	{r7}
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800162a:	b480      	push	{r7}
 800162c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800163c:	f003 fb68 	bl	8004d10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001640:	bf00      	nop
 8001642:	bd80      	pop	{r7, pc}

08001644 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800164c:	4a14      	ldr	r2, [pc, #80]	; (80016a0 <_sbrk+0x5c>)
 800164e:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <_sbrk+0x60>)
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001658:	4b13      	ldr	r3, [pc, #76]	; (80016a8 <_sbrk+0x64>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d102      	bne.n	8001666 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001660:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <_sbrk+0x64>)
 8001662:	4a12      	ldr	r2, [pc, #72]	; (80016ac <_sbrk+0x68>)
 8001664:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001666:	4b10      	ldr	r3, [pc, #64]	; (80016a8 <_sbrk+0x64>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4413      	add	r3, r2
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	429a      	cmp	r2, r3
 8001672:	d207      	bcs.n	8001684 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001674:	f004 fe48 	bl	8006308 <__errno>
 8001678:	4603      	mov	r3, r0
 800167a:	220c      	movs	r2, #12
 800167c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800167e:	f04f 33ff 	mov.w	r3, #4294967295
 8001682:	e009      	b.n	8001698 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001684:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <_sbrk+0x64>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800168a:	4b07      	ldr	r3, [pc, #28]	; (80016a8 <_sbrk+0x64>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4413      	add	r3, r2
 8001692:	4a05      	ldr	r2, [pc, #20]	; (80016a8 <_sbrk+0x64>)
 8001694:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001696:	68fb      	ldr	r3, [r7, #12]
}
 8001698:	4618      	mov	r0, r3
 800169a:	3718      	adds	r7, #24
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20020000 	.word	0x20020000
 80016a4:	00000400 	.word	0x00000400
 80016a8:	200001b4 	.word	0x200001b4
 80016ac:	20000790 	.word	0x20000790

080016b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <SystemInit+0x20>)
 80016b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ba:	4a05      	ldr	r2, [pc, #20]	; (80016d0 <SystemInit+0x20>)
 80016bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80016d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800170c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016d8:	480d      	ldr	r0, [pc, #52]	; (8001710 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016da:	490e      	ldr	r1, [pc, #56]	; (8001714 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016dc:	4a0e      	ldr	r2, [pc, #56]	; (8001718 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016e0:	e002      	b.n	80016e8 <LoopCopyDataInit>

080016e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016e6:	3304      	adds	r3, #4

080016e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016ec:	d3f9      	bcc.n	80016e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ee:	4a0b      	ldr	r2, [pc, #44]	; (800171c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016f0:	4c0b      	ldr	r4, [pc, #44]	; (8001720 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016f4:	e001      	b.n	80016fa <LoopFillZerobss>

080016f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016f8:	3204      	adds	r2, #4

080016fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016fc:	d3fb      	bcc.n	80016f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016fe:	f7ff ffd7 	bl	80016b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001702:	f004 fe07 	bl	8006314 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001706:	f7ff fe17 	bl	8001338 <main>
  bx  lr    
 800170a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800170c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001710:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001714:	2000018c 	.word	0x2000018c
  ldr r2, =_sidata
 8001718:	08006a10 	.word	0x08006a10
  ldr r2, =_sbss
 800171c:	2000018c 	.word	0x2000018c
  ldr r4, =_ebss
 8001720:	2000078c 	.word	0x2000078c

08001724 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001724:	e7fe      	b.n	8001724 <ADC_IRQHandler>

08001726 <DelayMs>:

#include "my_delay.h"

void DelayMs(uint32_t delayMS){
 8001726:	b580      	push	{r7, lr}
 8001728:	b082      	sub	sp, #8
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
	HAL_Delay(1000*delayMS);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001734:	fb02 f303 	mul.w	r3, r2, r3
 8001738:	4618      	mov	r0, r3
 800173a:	f003 fb09 	bl	8004d50 <HAL_Delay>
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
	...

08001748 <RadioGetFskBandwidthRegValue>:
 *
 * \param [IN] bandwidth Bandwidth value in Hz
 * \retval regValue Bandwidth register value.
 */
static uint8_t RadioGetFskBandwidthRegValue( uint32_t bandwidth )
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <RadioGetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 8001756:	231f      	movs	r3, #31
 8001758:	e01f      	b.n	800179a <RadioGetFskBandwidthRegValue+0x52>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 800175a:	2300      	movs	r3, #0
 800175c:	73fb      	strb	r3, [r7, #15]
 800175e:	e018      	b.n	8001792 <RadioGetFskBandwidthRegValue+0x4a>
    {
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 8001760:	7bfb      	ldrb	r3, [r7, #15]
 8001762:	4a11      	ldr	r2, [pc, #68]	; (80017a8 <RadioGetFskBandwidthRegValue+0x60>)
 8001764:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	429a      	cmp	r2, r3
 800176c:	d30e      	bcc.n	800178c <RadioGetFskBandwidthRegValue+0x44>
 800176e:	7bfb      	ldrb	r3, [r7, #15]
 8001770:	3301      	adds	r3, #1
 8001772:	4a0d      	ldr	r2, [pc, #52]	; (80017a8 <RadioGetFskBandwidthRegValue+0x60>)
 8001774:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	429a      	cmp	r2, r3
 800177c:	d206      	bcs.n	800178c <RadioGetFskBandwidthRegValue+0x44>
        {
            return FskBandwidths[i+1].RegValue;
 800177e:	7bfb      	ldrb	r3, [r7, #15]
 8001780:	3301      	adds	r3, #1
 8001782:	4a09      	ldr	r2, [pc, #36]	; (80017a8 <RadioGetFskBandwidthRegValue+0x60>)
 8001784:	00db      	lsls	r3, r3, #3
 8001786:	4413      	add	r3, r2
 8001788:	791b      	ldrb	r3, [r3, #4]
 800178a:	e006      	b.n	800179a <RadioGetFskBandwidthRegValue+0x52>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 800178c:	7bfb      	ldrb	r3, [r7, #15]
 800178e:	3301      	adds	r3, #1
 8001790:	73fb      	strb	r3, [r7, #15]
 8001792:	7bfb      	ldrb	r3, [r7, #15]
 8001794:	2b14      	cmp	r3, #20
 8001796:	d9e3      	bls.n	8001760 <RadioGetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 8001798:	e7fe      	b.n	8001798 <RadioGetFskBandwidthRegValue+0x50>
}
 800179a:	4618      	mov	r0, r3
 800179c:	3714      	adds	r7, #20
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	080068e0 	.word	0x080068e0

080017ac <RadioInit>:

void RadioInit( RadioEvents_t *events )
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 80017b4:	4a11      	ldr	r2, [pc, #68]	; (80017fc <RadioInit+0x50>)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6013      	str	r3, [r2, #0]
    
    SX126xInit( RadioOnDioIrq );
 80017ba:	4811      	ldr	r0, [pc, #68]	; (8001800 <RadioInit+0x54>)
 80017bc:	f001 f8f0 	bl	80029a0 <SX126xInit>
    SX126xSetStandby( STDBY_RC );
 80017c0:	2000      	movs	r0, #0
 80017c2:	f001 fa03 	bl	8002bcc <SX126xSetStandby>
    SX126xSetRegulatorMode( USE_DCDC );
 80017c6:	2001      	movs	r0, #1
 80017c8:	f001 fae1 	bl	8002d8e <SX126xSetRegulatorMode>
    
    SX126xSetBufferBaseAddress( 0x00, 0x00 );
 80017cc:	2100      	movs	r1, #0
 80017ce:	2000      	movs	r0, #0
 80017d0:	f001 fdce 	bl	8003370 <SX126xSetBufferBaseAddress>
    SX126xSetTxParams( 0, RADIO_RAMP_200_US );
 80017d4:	2104      	movs	r1, #4
 80017d6:	2000      	movs	r0, #0
 80017d8:	f001 fc14 	bl	8003004 <SX126xSetTxParams>
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80017dc:	2300      	movs	r3, #0
 80017de:	2200      	movs	r2, #0
 80017e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80017e4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80017e8:	f001 fb48 	bl	8002e7c <SX126xSetDioIrqParams>
    
    //Initialize driver timeout timers
    //TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
    //TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
    
    IrqFired = false;
 80017ec:	4b05      	ldr	r3, [pc, #20]	; (8001804 <RadioInit+0x58>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	701a      	strb	r2, [r3, #0]
}
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	200001c8 	.word	0x200001c8
 8001800:	08002335 	.word	0x08002335
 8001804:	200001c0 	.word	0x200001c0

08001808 <RadioGetStatus>:

RadioState_t RadioGetStatus( void )
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
    switch( SX126xGetOperatingMode( ) )
 800180c:	f001 f8e0 	bl	80029d0 <SX126xGetOperatingMode>
 8001810:	4603      	mov	r3, r0
 8001812:	2b05      	cmp	r3, #5
 8001814:	d007      	beq.n	8001826 <RadioGetStatus+0x1e>
 8001816:	2b05      	cmp	r3, #5
 8001818:	dc09      	bgt.n	800182e <RadioGetStatus+0x26>
 800181a:	2b03      	cmp	r3, #3
 800181c:	d005      	beq.n	800182a <RadioGetStatus+0x22>
 800181e:	2b04      	cmp	r3, #4
 8001820:	d105      	bne.n	800182e <RadioGetStatus+0x26>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8001822:	2302      	movs	r3, #2
 8001824:	e004      	b.n	8001830 <RadioGetStatus+0x28>
        case MODE_RX:
            return RF_RX_RUNNING;
 8001826:	2301      	movs	r3, #1
 8001828:	e002      	b.n	8001830 <RadioGetStatus+0x28>
        case RF_CAD:
            return RF_CAD;
 800182a:	2303      	movs	r3, #3
 800182c:	e000      	b.n	8001830 <RadioGetStatus+0x28>
        default:
            return RF_IDLE;
 800182e:	2300      	movs	r3, #0
    }
}
 8001830:	4618      	mov	r0, r3
 8001832:	bd80      	pop	{r7, pc}

08001834 <RadioSetModem>:

void RadioSetModem( RadioModems_t modem )
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	71fb      	strb	r3, [r7, #7]
    switch( modem )
 800183e:	79fb      	ldrb	r3, [r7, #7]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d006      	beq.n	8001852 <RadioSetModem+0x1e>
    {
    default:
    case MODEM_FSK:
        SX126xSetPacketType( PACKET_TYPE_GFSK );
 8001844:	2000      	movs	r0, #0
 8001846:	f001 fbbd 	bl	8002fc4 <SX126xSetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        RadioPublicNetwork.Current = false;
 800184a:	4b0d      	ldr	r3, [pc, #52]	; (8001880 <RadioSetModem+0x4c>)
 800184c:	2200      	movs	r2, #0
 800184e:	705a      	strb	r2, [r3, #1]
        break;
 8001850:	e012      	b.n	8001878 <RadioSetModem+0x44>
    case MODEM_LORA:
        SX126xSetPacketType( PACKET_TYPE_LORA );
 8001852:	2001      	movs	r0, #1
 8001854:	f001 fbb6 	bl	8002fc4 <SX126xSetPacketType>
        // Public/Private network register is reset when switching modems
        if( RadioPublicNetwork.Current != RadioPublicNetwork.Previous )
 8001858:	4b09      	ldr	r3, [pc, #36]	; (8001880 <RadioSetModem+0x4c>)
 800185a:	785a      	ldrb	r2, [r3, #1]
 800185c:	4b08      	ldr	r3, [pc, #32]	; (8001880 <RadioSetModem+0x4c>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	429a      	cmp	r2, r3
 8001862:	d008      	beq.n	8001876 <RadioSetModem+0x42>
        {
            RadioPublicNetwork.Current = RadioPublicNetwork.Previous;
 8001864:	4b06      	ldr	r3, [pc, #24]	; (8001880 <RadioSetModem+0x4c>)
 8001866:	781a      	ldrb	r2, [r3, #0]
 8001868:	4b05      	ldr	r3, [pc, #20]	; (8001880 <RadioSetModem+0x4c>)
 800186a:	705a      	strb	r2, [r3, #1]
            RadioSetPublicNetwork( RadioPublicNetwork.Current );
 800186c:	4b04      	ldr	r3, [pc, #16]	; (8001880 <RadioSetModem+0x4c>)
 800186e:	785b      	ldrb	r3, [r3, #1]
 8001870:	4618      	mov	r0, r3
 8001872:	f000 fd29 	bl	80022c8 <RadioSetPublicNetwork>
        }
        break;
 8001876:	bf00      	nop
    }
}
 8001878:	bf00      	nop
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	200001c4 	.word	0x200001c4

08001884 <RadioSetChannel>:

void RadioSetChannel( uint32_t freq )
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
    SX126xSetRfFrequency( freq );
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f001 fb53 	bl	8002f38 <SX126xSetRfFrequency>
}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <RadioIsChannelFree>:

bool RadioIsChannelFree( RadioModems_t modem, uint32_t freq, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 800189a:	b580      	push	{r7, lr}
 800189c:	b086      	sub	sp, #24
 800189e:	af00      	add	r7, sp, #0
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607b      	str	r3, [r7, #4]
 80018a4:	4603      	mov	r3, r0
 80018a6:	73fb      	strb	r3, [r7, #15]
 80018a8:	4613      	mov	r3, r2
 80018aa:	81bb      	strh	r3, [r7, #12]
    bool status = true;
 80018ac:	2301      	movs	r3, #1
 80018ae:	75fb      	strb	r3, [r7, #23]
   // int16_t rssi = 0;
   // uint32_t carrierSenseTime = 0;

    RadioSetModem( modem );
 80018b0:	7bfb      	ldrb	r3, [r7, #15]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff ffbe 	bl	8001834 <RadioSetModem>

    RadioSetChannel( freq );
 80018b8:	68b8      	ldr	r0, [r7, #8]
 80018ba:	f7ff ffe3 	bl	8001884 <RadioSetChannel>

    RadioRx( 0 );
 80018be:	2000      	movs	r0, #0
 80018c0:	f000 fc16 	bl	80020f0 <RadioRx>

    DelayMs( 1 );
 80018c4:	2001      	movs	r0, #1
 80018c6:	f7ff ff2e 	bl	8001726 <DelayMs>
//        {
//            status = false;
//            break;
//        }
//    }
    RadioSleep( );
 80018ca:	f000 fbf7 	bl	80020bc <RadioSleep>
    return status;
 80018ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3718      	adds	r7, #24
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <RadioRandom>:

uint32_t RadioRandom( void )
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
    uint8_t i;
    uint32_t rnd = 0;
 80018de:	2300      	movs	r3, #0
 80018e0:	603b      	str	r3, [r7, #0]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    RadioSetModem( MODEM_LORA );
 80018e2:	2001      	movs	r0, #1
 80018e4:	f7ff ffa6 	bl	8001834 <RadioSetModem>

    // Set radio in continuous reception
    SX126xSetRx( 0 );
 80018e8:	2000      	movs	r0, #0
 80018ea:	f001 f9ab 	bl	8002c44 <SX126xSetRx>

    for( i = 0; i < 32; i++ )
 80018ee:	2300      	movs	r3, #0
 80018f0:	71fb      	strb	r3, [r7, #7]
 80018f2:	e011      	b.n	8001918 <RadioRandom+0x40>
    {
        DelayMs( 1 );
 80018f4:	2001      	movs	r0, #1
 80018f6:	f7ff ff16 	bl	8001726 <DelayMs>
        // Unfiltered RSSI value reading. Only takes the LSB value
        rnd |= ( ( uint32_t )SX126xGetRssiInst( ) & 0x01 ) << i;
 80018fa:	f001 fd50 	bl	800339e <SX126xGetRssiInst>
 80018fe:	4603      	mov	r3, r0
 8001900:	b2db      	uxtb	r3, r3
 8001902:	f003 0201 	and.w	r2, r3, #1
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	683a      	ldr	r2, [r7, #0]
 800190e:	4313      	orrs	r3, r2
 8001910:	603b      	str	r3, [r7, #0]
    for( i = 0; i < 32; i++ )
 8001912:	79fb      	ldrb	r3, [r7, #7]
 8001914:	3301      	adds	r3, #1
 8001916:	71fb      	strb	r3, [r7, #7]
 8001918:	79fb      	ldrb	r3, [r7, #7]
 800191a:	2b1f      	cmp	r3, #31
 800191c:	d9ea      	bls.n	80018f4 <RadioRandom+0x1c>
    }

    RadioSleep( );
 800191e:	f000 fbcd 	bl	80020bc <RadioSleep>

    return rnd;
 8001922:	683b      	ldr	r3, [r7, #0]
}
 8001924:	4618      	mov	r0, r3
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <RadioSetRxConfig>:
                         uint32_t bandwidthAfc, uint16_t preambleLen,
                         uint16_t symbTimeout, bool fixLen,
                         uint8_t payloadLen,
                         bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                         bool iqInverted, bool rxContinuous )
{
 800192c:	b5b0      	push	{r4, r5, r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	60b9      	str	r1, [r7, #8]
 8001934:	607a      	str	r2, [r7, #4]
 8001936:	461a      	mov	r2, r3
 8001938:	4603      	mov	r3, r0
 800193a:	73fb      	strb	r3, [r7, #15]
 800193c:	4613      	mov	r3, r2
 800193e:	73bb      	strb	r3, [r7, #14]
	uint8_t syncWordByte[] ={ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8001940:	4a92      	ldr	r2, [pc, #584]	; (8001b8c <RadioSetRxConfig+0x260>)
 8001942:	f107 0310 	add.w	r3, r7, #16
 8001946:	e892 0003 	ldmia.w	r2, {r0, r1}
 800194a:	e883 0003 	stmia.w	r3, {r0, r1}
	
    RxContinuous = rxContinuous;
 800194e:	4a90      	ldr	r2, [pc, #576]	; (8001b90 <RadioSetRxConfig+0x264>)
 8001950:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001954:	7013      	strb	r3, [r2, #0]

    if( fixLen == true )
 8001956:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800195a:	2b00      	cmp	r3, #0
 800195c:	d004      	beq.n	8001968 <RadioSetRxConfig+0x3c>
    {
        MaxPayloadLength = payloadLen;
 800195e:	4a8d      	ldr	r2, [pc, #564]	; (8001b94 <RadioSetRxConfig+0x268>)
 8001960:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001964:	7013      	strb	r3, [r2, #0]
 8001966:	e002      	b.n	800196e <RadioSetRxConfig+0x42>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8001968:	4b8a      	ldr	r3, [pc, #552]	; (8001b94 <RadioSetRxConfig+0x268>)
 800196a:	22ff      	movs	r2, #255	; 0xff
 800196c:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 800196e:	7bfb      	ldrb	r3, [r7, #15]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d003      	beq.n	800197c <RadioSetRxConfig+0x50>
 8001974:	2b01      	cmp	r3, #1
 8001976:	f000 8090 	beq.w	8001a9a <RadioSetRxConfig+0x16e>
            // Timeout Max, Timeout handled directly in SetRx function
             RxTimeout = 0xFFFF;

            break;
    }
}
 800197a:	e103      	b.n	8001b84 <RadioSetRxConfig+0x258>
            SX126xSetStopRxTimerOnPreambleDetect( false );
 800197c:	2000      	movs	r0, #0
 800197e:	f001 f9e8 	bl	8002d52 <SX126xSetStopRxTimerOnPreambleDetect>
            SX126x.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8001982:	4b85      	ldr	r3, [pc, #532]	; (8001b98 <RadioSetRxConfig+0x26c>)
 8001984:	2200      	movs	r2, #0
 8001986:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            SX126x.ModulationParams.Params.Gfsk.BitRate = datarate;
 800198a:	4a83      	ldr	r2, [pc, #524]	; (8001b98 <RadioSetRxConfig+0x26c>)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	62d3      	str	r3, [r2, #44]	; 0x2c
            SX126x.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8001990:	4b81      	ldr	r3, [pc, #516]	; (8001b98 <RadioSetRxConfig+0x26c>)
 8001992:	220b      	movs	r2, #11
 8001994:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            SX126x.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue( bandwidth );
 8001998:	68b8      	ldr	r0, [r7, #8]
 800199a:	f7ff fed5 	bl	8001748 <RadioGetFskBandwidthRegValue>
 800199e:	4603      	mov	r3, r0
 80019a0:	461a      	mov	r2, r3
 80019a2:	4b7d      	ldr	r3, [pc, #500]	; (8001b98 <RadioSetRxConfig+0x26c>)
 80019a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            SX126x.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80019a8:	4b7b      	ldr	r3, [pc, #492]	; (8001b98 <RadioSetRxConfig+0x26c>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	701a      	strb	r2, [r3, #0]
            SX126x.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80019ae:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80019b0:	00db      	lsls	r3, r3, #3
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	4b78      	ldr	r3, [pc, #480]	; (8001b98 <RadioSetRxConfig+0x26c>)
 80019b6:	805a      	strh	r2, [r3, #2]
            SX126x.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80019b8:	4b77      	ldr	r3, [pc, #476]	; (8001b98 <RadioSetRxConfig+0x26c>)
 80019ba:	2204      	movs	r2, #4
 80019bc:	711a      	strb	r2, [r3, #4]
            SX126x.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 80019be:	4b76      	ldr	r3, [pc, #472]	; (8001b98 <RadioSetRxConfig+0x26c>)
 80019c0:	2218      	movs	r2, #24
 80019c2:	715a      	strb	r2, [r3, #5]
            SX126x.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80019c4:	4b74      	ldr	r3, [pc, #464]	; (8001b98 <RadioSetRxConfig+0x26c>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	719a      	strb	r2, [r3, #6]
            SX126x.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80019ca:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80019ce:	f083 0301 	eor.w	r3, r3, #1
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	461a      	mov	r2, r3
 80019d6:	4b70      	ldr	r3, [pc, #448]	; (8001b98 <RadioSetRxConfig+0x26c>)
 80019d8:	71da      	strb	r2, [r3, #7]
            SX126x.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80019da:	4b6e      	ldr	r3, [pc, #440]	; (8001b94 <RadioSetRxConfig+0x268>)
 80019dc:	781a      	ldrb	r2, [r3, #0]
 80019de:	4b6e      	ldr	r3, [pc, #440]	; (8001b98 <RadioSetRxConfig+0x26c>)
 80019e0:	721a      	strb	r2, [r3, #8]
            if( crcOn == true )
 80019e2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d003      	beq.n	80019f2 <RadioSetRxConfig+0xc6>
                SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80019ea:	4b6b      	ldr	r3, [pc, #428]	; (8001b98 <RadioSetRxConfig+0x26c>)
 80019ec:	22f2      	movs	r2, #242	; 0xf2
 80019ee:	725a      	strb	r2, [r3, #9]
 80019f0:	e002      	b.n	80019f8 <RadioSetRxConfig+0xcc>
                SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80019f2:	4b69      	ldr	r3, [pc, #420]	; (8001b98 <RadioSetRxConfig+0x26c>)
 80019f4:	2201      	movs	r2, #1
 80019f6:	725a      	strb	r2, [r3, #9]
            SX126x.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 80019f8:	4b67      	ldr	r3, [pc, #412]	; (8001b98 <RadioSetRxConfig+0x26c>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	729a      	strb	r2, [r3, #10]
            RadioStandby( );
 80019fe:	f000 fb70 	bl	80020e2 <RadioStandby>
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8001a02:	4b65      	ldr	r3, [pc, #404]	; (8001b98 <RadioSetRxConfig+0x26c>)
 8001a04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	bf14      	ite	ne
 8001a0c:	2301      	movne	r3, #1
 8001a0e:	2300      	moveq	r3, #0
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff ff0e 	bl	8001834 <RadioSetModem>
            SX126xSetModulationParams( &SX126x.ModulationParams );
 8001a18:	4860      	ldr	r0, [pc, #384]	; (8001b9c <RadioSetRxConfig+0x270>)
 8001a1a:	f001 fb51 	bl	80030c0 <SX126xSetModulationParams>
            SX126xSetPacketParams( &SX126x.PacketParams );
 8001a1e:	485e      	ldr	r0, [pc, #376]	; (8001b98 <RadioSetRxConfig+0x26c>)
 8001a20:	f001 fbec 	bl	80031fc <SX126xSetPacketParams>
            SX126xSetSyncWord( syncWordByte );
 8001a24:	f107 0310 	add.w	r3, r7, #16
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f001 f836 	bl	8002a9a <SX126xSetSyncWord>
            SX126xSetWhiteningSeed( 0x01FF );
 8001a2e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a32:	f001 f881 	bl	8002b38 <SX126xSetWhiteningSeed>
            RxTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 8001a36:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7fe fd17 	bl	800046c <__aeabi_i2d>
 8001a3e:	4604      	mov	r4, r0
 8001a40:	460d      	mov	r5, r1
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7fe fd02 	bl	800044c <__aeabi_ui2d>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	f04f 0000 	mov.w	r0, #0
 8001a50:	4953      	ldr	r1, [pc, #332]	; (8001ba0 <RadioSetRxConfig+0x274>)
 8001a52:	f7fe fe9f 	bl	8000794 <__aeabi_ddiv>
 8001a56:	4602      	mov	r2, r0
 8001a58:	460b      	mov	r3, r1
 8001a5a:	4610      	mov	r0, r2
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	f04f 0200 	mov.w	r2, #0
 8001a62:	4b50      	ldr	r3, [pc, #320]	; (8001ba4 <RadioSetRxConfig+0x278>)
 8001a64:	f7fe fd6c 	bl	8000540 <__aeabi_dmul>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	4620      	mov	r0, r4
 8001a6e:	4629      	mov	r1, r5
 8001a70:	f7fe fd66 	bl	8000540 <__aeabi_dmul>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	4610      	mov	r0, r2
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	f04f 0200 	mov.w	r2, #0
 8001a80:	4b49      	ldr	r3, [pc, #292]	; (8001ba8 <RadioSetRxConfig+0x27c>)
 8001a82:	f7fe fd5d 	bl	8000540 <__aeabi_dmul>
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	4610      	mov	r0, r2
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	f7fe fff1 	bl	8000a74 <__aeabi_d2uiz>
 8001a92:	4603      	mov	r3, r0
 8001a94:	4a45      	ldr	r2, [pc, #276]	; (8001bac <RadioSetRxConfig+0x280>)
 8001a96:	6013      	str	r3, [r2, #0]
            break;
 8001a98:	e074      	b.n	8001b84 <RadioSetRxConfig+0x258>
            SX126xSetStopRxTimerOnPreambleDetect( false );
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	f001 f959 	bl	8002d52 <SX126xSetStopRxTimerOnPreambleDetect>
            SX126xSetLoRaSymbNumTimeout( symbTimeout );
 8001aa0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f001 f963 	bl	8002d70 <SX126xSetLoRaSymbNumTimeout>
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8001aaa:	4b3b      	ldr	r3, [pc, #236]	; (8001b98 <RadioSetRxConfig+0x26c>)
 8001aac:	2201      	movs	r2, #1
 8001aae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            SX126x.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	b2da      	uxtb	r2, r3
 8001ab6:	4b38      	ldr	r3, [pc, #224]	; (8001b98 <RadioSetRxConfig+0x26c>)
 8001ab8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SX126x.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8001abc:	4a3c      	ldr	r2, [pc, #240]	; (8001bb0 <RadioSetRxConfig+0x284>)
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	781a      	ldrb	r2, [r3, #0]
 8001ac4:	4b34      	ldr	r3, [pc, #208]	; (8001b98 <RadioSetRxConfig+0x26c>)
 8001ac6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            SX126x.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8001aca:	4a33      	ldr	r2, [pc, #204]	; (8001b98 <RadioSetRxConfig+0x26c>)
 8001acc:	7bbb      	ldrb	r3, [r7, #14]
 8001ace:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d105      	bne.n	8001ae4 <RadioSetRxConfig+0x1b8>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2b0b      	cmp	r3, #11
 8001adc:	d008      	beq.n	8001af0 <RadioSetRxConfig+0x1c4>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2b0c      	cmp	r3, #12
 8001ae2:	d005      	beq.n	8001af0 <RadioSetRxConfig+0x1c4>
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d107      	bne.n	8001afa <RadioSetRxConfig+0x1ce>
            ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2b0c      	cmp	r3, #12
 8001aee:	d104      	bne.n	8001afa <RadioSetRxConfig+0x1ce>
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8001af0:	4b29      	ldr	r3, [pc, #164]	; (8001b98 <RadioSetRxConfig+0x26c>)
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8001af8:	e003      	b.n	8001b02 <RadioSetRxConfig+0x1d6>
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8001afa:	4b27      	ldr	r3, [pc, #156]	; (8001b98 <RadioSetRxConfig+0x26c>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
            SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 8001b02:	4b25      	ldr	r3, [pc, #148]	; (8001b98 <RadioSetRxConfig+0x26c>)
 8001b04:	2201      	movs	r2, #1
 8001b06:	701a      	strb	r2, [r3, #0]
            if( ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8001b08:	4b23      	ldr	r3, [pc, #140]	; (8001b98 <RadioSetRxConfig+0x26c>)
 8001b0a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b0e:	2b05      	cmp	r3, #5
 8001b10:	d004      	beq.n	8001b1c <RadioSetRxConfig+0x1f0>
                ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8001b12:	4b21      	ldr	r3, [pc, #132]	; (8001b98 <RadioSetRxConfig+0x26c>)
 8001b14:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
            if( ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8001b18:	2b06      	cmp	r3, #6
 8001b1a:	d10a      	bne.n	8001b32 <RadioSetRxConfig+0x206>
                if( preambleLen < 12 )
 8001b1c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001b1e:	2b0b      	cmp	r3, #11
 8001b20:	d803      	bhi.n	8001b2a <RadioSetRxConfig+0x1fe>
                    SX126x.PacketParams.Params.LoRa.PreambleLength = 12;
 8001b22:	4b1d      	ldr	r3, [pc, #116]	; (8001b98 <RadioSetRxConfig+0x26c>)
 8001b24:	220c      	movs	r2, #12
 8001b26:	819a      	strh	r2, [r3, #12]
                if( preambleLen < 12 )
 8001b28:	e006      	b.n	8001b38 <RadioSetRxConfig+0x20c>
                    SX126x.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8001b2a:	4a1b      	ldr	r2, [pc, #108]	; (8001b98 <RadioSetRxConfig+0x26c>)
 8001b2c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001b2e:	8193      	strh	r3, [r2, #12]
                if( preambleLen < 12 )
 8001b30:	e002      	b.n	8001b38 <RadioSetRxConfig+0x20c>
                SX126x.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8001b32:	4a19      	ldr	r2, [pc, #100]	; (8001b98 <RadioSetRxConfig+0x26c>)
 8001b34:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001b36:	8193      	strh	r3, [r2, #12]
            SX126x.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8001b38:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8001b3c:	4b16      	ldr	r3, [pc, #88]	; (8001b98 <RadioSetRxConfig+0x26c>)
 8001b3e:	739a      	strb	r2, [r3, #14]
            SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8001b40:	4b14      	ldr	r3, [pc, #80]	; (8001b94 <RadioSetRxConfig+0x268>)
 8001b42:	781a      	ldrb	r2, [r3, #0]
 8001b44:	4b14      	ldr	r3, [pc, #80]	; (8001b98 <RadioSetRxConfig+0x26c>)
 8001b46:	73da      	strb	r2, [r3, #15]
            SX126x.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8001b48:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8001b4c:	4b12      	ldr	r3, [pc, #72]	; (8001b98 <RadioSetRxConfig+0x26c>)
 8001b4e:	741a      	strb	r2, [r3, #16]
            SX126x.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8001b50:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 8001b54:	4b10      	ldr	r3, [pc, #64]	; (8001b98 <RadioSetRxConfig+0x26c>)
 8001b56:	745a      	strb	r2, [r3, #17]
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8001b58:	4b0f      	ldr	r3, [pc, #60]	; (8001b98 <RadioSetRxConfig+0x26c>)
 8001b5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	bf14      	ite	ne
 8001b62:	2301      	movne	r3, #1
 8001b64:	2300      	moveq	r3, #0
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff fe63 	bl	8001834 <RadioSetModem>
            SX126xSetModulationParams( &SX126x.ModulationParams );
 8001b6e:	480b      	ldr	r0, [pc, #44]	; (8001b9c <RadioSetRxConfig+0x270>)
 8001b70:	f001 faa6 	bl	80030c0 <SX126xSetModulationParams>
            SX126xSetPacketParams( &SX126x.PacketParams );
 8001b74:	4808      	ldr	r0, [pc, #32]	; (8001b98 <RadioSetRxConfig+0x26c>)
 8001b76:	f001 fb41 	bl	80031fc <SX126xSetPacketParams>
             RxTimeout = 0xFFFF;
 8001b7a:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <RadioSetRxConfig+0x280>)
 8001b7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b80:	601a      	str	r2, [r3, #0]
            break;
 8001b82:	bf00      	nop
}
 8001b84:	bf00      	nop
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bdb0      	pop	{r4, r5, r7, pc}
 8001b8c:	08006820 	.word	0x08006820
 8001b90:	200000a1 	.word	0x200000a1
 8001b94:	200000a0 	.word	0x200000a0
 8001b98:	20000628 	.word	0x20000628
 8001b9c:	20000650 	.word	0x20000650
 8001ba0:	3ff00000 	.word	0x3ff00000
 8001ba4:	40200000 	.word	0x40200000
 8001ba8:	408f4000 	.word	0x408f4000
 8001bac:	200001bc 	.word	0x200001bc
 8001bb0:	08006990 	.word	0x08006990

08001bb4 <RadioSetTxConfig>:
void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                        uint32_t bandwidth, uint32_t datarate,
                        uint8_t coderate, uint16_t preambleLen,
                        bool fixLen, bool crcOn, bool freqHopOn,
                        uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60ba      	str	r2, [r7, #8]
 8001bbc:	607b      	str	r3, [r7, #4]
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	73fb      	strb	r3, [r7, #15]
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	73bb      	strb	r3, [r7, #14]
	uint8_t syncWordByte[] ={ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8001bc6:	4a6f      	ldr	r2, [pc, #444]	; (8001d84 <RadioSetTxConfig+0x1d0>)
 8001bc8:	f107 0310 	add.w	r3, r7, #16
 8001bcc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001bd0:	e883 0003 	stmia.w	r3, {r0, r1}
	
    switch( modem )
 8001bd4:	7bfb      	ldrb	r3, [r7, #15]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d002      	beq.n	8001be0 <RadioSetTxConfig+0x2c>
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d05a      	beq.n	8001c94 <RadioSetTxConfig+0xe0>
 8001bde:	e0c5      	b.n	8001d6c <RadioSetTxConfig+0x1b8>
    {
        case MODEM_FSK:
            SX126x.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8001be0:	4b69      	ldr	r3, [pc, #420]	; (8001d88 <RadioSetTxConfig+0x1d4>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            SX126x.ModulationParams.Params.Gfsk.BitRate = datarate;
 8001be8:	4a67      	ldr	r2, [pc, #412]	; (8001d88 <RadioSetTxConfig+0x1d4>)
 8001bea:	6a3b      	ldr	r3, [r7, #32]
 8001bec:	62d3      	str	r3, [r2, #44]	; 0x2c

            SX126x.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8001bee:	4b66      	ldr	r3, [pc, #408]	; (8001d88 <RadioSetTxConfig+0x1d4>)
 8001bf0:	220b      	movs	r2, #11
 8001bf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            SX126x.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue( bandwidth );
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7ff fda6 	bl	8001748 <RadioGetFskBandwidthRegValue>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	461a      	mov	r2, r3
 8001c00:	4b61      	ldr	r3, [pc, #388]	; (8001d88 <RadioSetTxConfig+0x1d4>)
 8001c02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            SX126x.ModulationParams.Params.Gfsk.Fdev = fdev;
 8001c06:	4a60      	ldr	r2, [pc, #384]	; (8001d88 <RadioSetTxConfig+0x1d4>)
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	6313      	str	r3, [r2, #48]	; 0x30

            SX126x.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8001c0c:	4b5e      	ldr	r3, [pc, #376]	; (8001d88 <RadioSetTxConfig+0x1d4>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	701a      	strb	r2, [r3, #0]
            SX126x.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8001c12:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001c14:	00db      	lsls	r3, r3, #3
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	4b5b      	ldr	r3, [pc, #364]	; (8001d88 <RadioSetTxConfig+0x1d4>)
 8001c1a:	805a      	strh	r2, [r3, #2]
            SX126x.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8001c1c:	4b5a      	ldr	r3, [pc, #360]	; (8001d88 <RadioSetTxConfig+0x1d4>)
 8001c1e:	2204      	movs	r2, #4
 8001c20:	711a      	strb	r2, [r3, #4]
            SX126x.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8001c22:	4b59      	ldr	r3, [pc, #356]	; (8001d88 <RadioSetTxConfig+0x1d4>)
 8001c24:	2218      	movs	r2, #24
 8001c26:	715a      	strb	r2, [r3, #5]
            SX126x.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8001c28:	4b57      	ldr	r3, [pc, #348]	; (8001d88 <RadioSetTxConfig+0x1d4>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	719a      	strb	r2, [r3, #6]
            SX126x.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8001c2e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001c32:	f083 0301 	eor.w	r3, r3, #1
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	461a      	mov	r2, r3
 8001c3a:	4b53      	ldr	r3, [pc, #332]	; (8001d88 <RadioSetTxConfig+0x1d4>)
 8001c3c:	71da      	strb	r2, [r3, #7]

            if( crcOn == true )
 8001c3e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <RadioSetTxConfig+0x9a>
            {
                SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8001c46:	4b50      	ldr	r3, [pc, #320]	; (8001d88 <RadioSetTxConfig+0x1d4>)
 8001c48:	22f2      	movs	r2, #242	; 0xf2
 8001c4a:	725a      	strb	r2, [r3, #9]
 8001c4c:	e002      	b.n	8001c54 <RadioSetTxConfig+0xa0>
            }
            else
            {
                SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8001c4e:	4b4e      	ldr	r3, [pc, #312]	; (8001d88 <RadioSetTxConfig+0x1d4>)
 8001c50:	2201      	movs	r2, #1
 8001c52:	725a      	strb	r2, [r3, #9]
            }
            SX126x.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8001c54:	4b4c      	ldr	r3, [pc, #304]	; (8001d88 <RadioSetTxConfig+0x1d4>)
 8001c56:	2201      	movs	r2, #1
 8001c58:	729a      	strb	r2, [r3, #10]

            RadioStandby( );
 8001c5a:	f000 fa42 	bl	80020e2 <RadioStandby>
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8001c5e:	4b4a      	ldr	r3, [pc, #296]	; (8001d88 <RadioSetTxConfig+0x1d4>)
 8001c60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	bf14      	ite	ne
 8001c68:	2301      	movne	r3, #1
 8001c6a:	2300      	moveq	r3, #0
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff fde0 	bl	8001834 <RadioSetModem>
            SX126xSetModulationParams( &SX126x.ModulationParams );
 8001c74:	4845      	ldr	r0, [pc, #276]	; (8001d8c <RadioSetTxConfig+0x1d8>)
 8001c76:	f001 fa23 	bl	80030c0 <SX126xSetModulationParams>
            SX126xSetPacketParams( &SX126x.PacketParams );
 8001c7a:	4843      	ldr	r0, [pc, #268]	; (8001d88 <RadioSetTxConfig+0x1d4>)
 8001c7c:	f001 fabe 	bl	80031fc <SX126xSetPacketParams>
            SX126xSetSyncWord( syncWordByte );
 8001c80:	f107 0310 	add.w	r3, r7, #16
 8001c84:	4618      	mov	r0, r3
 8001c86:	f000 ff08 	bl	8002a9a <SX126xSetSyncWord>
            SX126xSetWhiteningSeed( 0x01FF );
 8001c8a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001c8e:	f000 ff53 	bl	8002b38 <SX126xSetWhiteningSeed>
            break;
 8001c92:	e06b      	b.n	8001d6c <RadioSetTxConfig+0x1b8>

        case MODEM_LORA:
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8001c94:	4b3c      	ldr	r3, [pc, #240]	; (8001d88 <RadioSetTxConfig+0x1d4>)
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            SX126x.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8001c9c:	6a3b      	ldr	r3, [r7, #32]
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	4b39      	ldr	r3, [pc, #228]	; (8001d88 <RadioSetTxConfig+0x1d4>)
 8001ca2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SX126x.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8001ca6:	4a3a      	ldr	r2, [pc, #232]	; (8001d90 <RadioSetTxConfig+0x1dc>)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4413      	add	r3, r2
 8001cac:	781a      	ldrb	r2, [r3, #0]
 8001cae:	4b36      	ldr	r3, [pc, #216]	; (8001d88 <RadioSetTxConfig+0x1d4>)
 8001cb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            SX126x.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8001cb4:	4a34      	ldr	r2, [pc, #208]	; (8001d88 <RadioSetTxConfig+0x1d4>)
 8001cb6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001cba:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a

            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d105      	bne.n	8001cd0 <RadioSetTxConfig+0x11c>
 8001cc4:	6a3b      	ldr	r3, [r7, #32]
 8001cc6:	2b0b      	cmp	r3, #11
 8001cc8:	d008      	beq.n	8001cdc <RadioSetTxConfig+0x128>
 8001cca:	6a3b      	ldr	r3, [r7, #32]
 8001ccc:	2b0c      	cmp	r3, #12
 8001cce:	d005      	beq.n	8001cdc <RadioSetTxConfig+0x128>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d107      	bne.n	8001ce6 <RadioSetTxConfig+0x132>
            ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8001cd6:	6a3b      	ldr	r3, [r7, #32]
 8001cd8:	2b0c      	cmp	r3, #12
 8001cda:	d104      	bne.n	8001ce6 <RadioSetTxConfig+0x132>
            {
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8001cdc:	4b2a      	ldr	r3, [pc, #168]	; (8001d88 <RadioSetTxConfig+0x1d4>)
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8001ce4:	e003      	b.n	8001cee <RadioSetTxConfig+0x13a>
            }
            else
            {
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8001ce6:	4b28      	ldr	r3, [pc, #160]	; (8001d88 <RadioSetTxConfig+0x1d4>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
            }

            SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 8001cee:	4b26      	ldr	r3, [pc, #152]	; (8001d88 <RadioSetTxConfig+0x1d4>)
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	701a      	strb	r2, [r3, #0]

            if( ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8001cf4:	4b24      	ldr	r3, [pc, #144]	; (8001d88 <RadioSetTxConfig+0x1d4>)
 8001cf6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001cfa:	2b05      	cmp	r3, #5
 8001cfc:	d004      	beq.n	8001d08 <RadioSetTxConfig+0x154>
                ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8001cfe:	4b22      	ldr	r3, [pc, #136]	; (8001d88 <RadioSetTxConfig+0x1d4>)
 8001d00:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
            if( ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8001d04:	2b06      	cmp	r3, #6
 8001d06:	d10a      	bne.n	8001d1e <RadioSetTxConfig+0x16a>
            {
                if( preambleLen < 12 )
 8001d08:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001d0a:	2b0b      	cmp	r3, #11
 8001d0c:	d803      	bhi.n	8001d16 <RadioSetTxConfig+0x162>
                {
                    SX126x.PacketParams.Params.LoRa.PreambleLength = 12;
 8001d0e:	4b1e      	ldr	r3, [pc, #120]	; (8001d88 <RadioSetTxConfig+0x1d4>)
 8001d10:	220c      	movs	r2, #12
 8001d12:	819a      	strh	r2, [r3, #12]
                if( preambleLen < 12 )
 8001d14:	e006      	b.n	8001d24 <RadioSetTxConfig+0x170>
                }
                else
                {
                    SX126x.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8001d16:	4a1c      	ldr	r2, [pc, #112]	; (8001d88 <RadioSetTxConfig+0x1d4>)
 8001d18:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001d1a:	8193      	strh	r3, [r2, #12]
                if( preambleLen < 12 )
 8001d1c:	e002      	b.n	8001d24 <RadioSetTxConfig+0x170>
                }
            }
            else
            {
                SX126x.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8001d1e:	4a1a      	ldr	r2, [pc, #104]	; (8001d88 <RadioSetTxConfig+0x1d4>)
 8001d20:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001d22:	8193      	strh	r3, [r2, #12]
            }

            SX126x.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8001d24:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001d28:	4b17      	ldr	r3, [pc, #92]	; (8001d88 <RadioSetTxConfig+0x1d4>)
 8001d2a:	739a      	strb	r2, [r3, #14]
            SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8001d2c:	4b19      	ldr	r3, [pc, #100]	; (8001d94 <RadioSetTxConfig+0x1e0>)
 8001d2e:	781a      	ldrb	r2, [r3, #0]
 8001d30:	4b15      	ldr	r3, [pc, #84]	; (8001d88 <RadioSetTxConfig+0x1d4>)
 8001d32:	73da      	strb	r2, [r3, #15]
            SX126x.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8001d34:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001d38:	4b13      	ldr	r3, [pc, #76]	; (8001d88 <RadioSetTxConfig+0x1d4>)
 8001d3a:	741a      	strb	r2, [r3, #16]
            SX126x.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8001d3c:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8001d40:	4b11      	ldr	r3, [pc, #68]	; (8001d88 <RadioSetTxConfig+0x1d4>)
 8001d42:	745a      	strb	r2, [r3, #17]

            RadioStandby( );
 8001d44:	f000 f9cd 	bl	80020e2 <RadioStandby>
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8001d48:	4b0f      	ldr	r3, [pc, #60]	; (8001d88 <RadioSetTxConfig+0x1d4>)
 8001d4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	bf14      	ite	ne
 8001d52:	2301      	movne	r3, #1
 8001d54:	2300      	moveq	r3, #0
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff fd6b 	bl	8001834 <RadioSetModem>
            SX126xSetModulationParams( &SX126x.ModulationParams );
 8001d5e:	480b      	ldr	r0, [pc, #44]	; (8001d8c <RadioSetTxConfig+0x1d8>)
 8001d60:	f001 f9ae 	bl	80030c0 <SX126xSetModulationParams>
            SX126xSetPacketParams( &SX126x.PacketParams );
 8001d64:	4808      	ldr	r0, [pc, #32]	; (8001d88 <RadioSetTxConfig+0x1d4>)
 8001d66:	f001 fa49 	bl	80031fc <SX126xSetPacketParams>
            break;
 8001d6a:	bf00      	nop
    }
    SX126xSetRfTxPower( power );
 8001d6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f000 fded 	bl	8002950 <SX126xSetRfTxPower>
    TxTimeout = timeout;
 8001d76:	4a08      	ldr	r2, [pc, #32]	; (8001d98 <RadioSetTxConfig+0x1e4>)
 8001d78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d7a:	6013      	str	r3, [r2, #0]
}
 8001d7c:	bf00      	nop
 8001d7e:	3718      	adds	r7, #24
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	08006820 	.word	0x08006820
 8001d88:	20000628 	.word	0x20000628
 8001d8c:	20000650 	.word	0x20000650
 8001d90:	08006990 	.word	0x08006990
 8001d94:	200000a0 	.word	0x200000a0
 8001d98:	200001b8 	.word	0x200001b8

08001d9c <RadioCheckRfFrequency>:

bool RadioCheckRfFrequency( uint32_t frequency )
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
    return true;
 8001da4:	2301      	movs	r3, #1
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	0000      	movs	r0, r0
 8001db4:	0000      	movs	r0, r0
	...

08001db8 <RadioTimeOnAir>:

uint32_t RadioTimeOnAir( RadioModems_t modem, uint8_t pktLen )
{
 8001db8:	b5b0      	push	{r4, r5, r7, lr}
 8001dba:	b090      	sub	sp, #64	; 0x40
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	460a      	mov	r2, r1
 8001dc2:	71fb      	strb	r3, [r7, #7]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	71bb      	strb	r3, [r7, #6]
    uint32_t airTime = 0;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	63fb      	str	r3, [r7, #60]	; 0x3c

    switch( modem )
 8001dcc:	79fb      	ldrb	r3, [r7, #7]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d002      	beq.n	8001dd8 <RadioTimeOnAir+0x20>
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d072      	beq.n	8001ebc <RadioTimeOnAir+0x104>
 8001dd6:	e132      	b.n	800203e <RadioTimeOnAir+0x286>
    {
    case MODEM_FSK:
        {
           airTime = rint( ( 8 * ( SX126x.PacketParams.Params.Gfsk.PreambleLength +
 8001dd8:	4b9d      	ldr	r3, [pc, #628]	; (8002050 <RadioTimeOnAir+0x298>)
 8001dda:	885b      	ldrh	r3, [r3, #2]
 8001ddc:	461a      	mov	r2, r3
                                     ( SX126x.PacketParams.Params.Gfsk.SyncWordLength >> 3 ) +
 8001dde:	4b9c      	ldr	r3, [pc, #624]	; (8002050 <RadioTimeOnAir+0x298>)
 8001de0:	795b      	ldrb	r3, [r3, #5]
 8001de2:	08db      	lsrs	r3, r3, #3
 8001de4:	b2db      	uxtb	r3, r3
           airTime = rint( ( 8 * ( SX126x.PacketParams.Params.Gfsk.PreambleLength +
 8001de6:	4413      	add	r3, r2
                                     ( SX126x.PacketParams.Params.Gfsk.SyncWordLength >> 3 ) +
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7fe fb3f 	bl	800046c <__aeabi_i2d>
 8001dee:	4602      	mov	r2, r0
 8001df0:	460b      	mov	r3, r1
                                     ( ( SX126x.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_FIXED_LENGTH ) ? 0.0 : 1.0 ) +
 8001df2:	4997      	ldr	r1, [pc, #604]	; (8002050 <RadioTimeOnAir+0x298>)
 8001df4:	79c9      	ldrb	r1, [r1, #7]
 8001df6:	2900      	cmp	r1, #0
 8001df8:	d104      	bne.n	8001e04 <RadioTimeOnAir+0x4c>
 8001dfa:	f04f 0000 	mov.w	r0, #0
 8001dfe:	f04f 0100 	mov.w	r1, #0
 8001e02:	e002      	b.n	8001e0a <RadioTimeOnAir+0x52>
 8001e04:	f04f 0000 	mov.w	r0, #0
 8001e08:	4992      	ldr	r1, [pc, #584]	; (8002054 <RadioTimeOnAir+0x29c>)
                                     ( SX126x.PacketParams.Params.Gfsk.SyncWordLength >> 3 ) +
 8001e0a:	f7fe f9e3 	bl	80001d4 <__adddf3>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	460b      	mov	r3, r1
 8001e12:	4614      	mov	r4, r2
 8001e14:	461d      	mov	r5, r3
                                     ( ( SX126x.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_FIXED_LENGTH ) ? 0.0 : 1.0 ) +
 8001e16:	79bb      	ldrb	r3, [r7, #6]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7fe fb27 	bl	800046c <__aeabi_i2d>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	460b      	mov	r3, r1
 8001e22:	4620      	mov	r0, r4
 8001e24:	4629      	mov	r1, r5
 8001e26:	f7fe f9d5 	bl	80001d4 <__adddf3>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	4614      	mov	r4, r2
 8001e30:	461d      	mov	r5, r3
                                     pktLen +
                                     ( ( SX126x.PacketParams.Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES ) ? 2.0 : 0 ) ) /
 8001e32:	4b87      	ldr	r3, [pc, #540]	; (8002050 <RadioTimeOnAir+0x298>)
 8001e34:	7a5b      	ldrb	r3, [r3, #9]
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d104      	bne.n	8001e44 <RadioTimeOnAir+0x8c>
 8001e3a:	f04f 0000 	mov.w	r0, #0
 8001e3e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001e42:	e003      	b.n	8001e4c <RadioTimeOnAir+0x94>
 8001e44:	f04f 0000 	mov.w	r0, #0
 8001e48:	f04f 0100 	mov.w	r1, #0
                                     pktLen +
 8001e4c:	4622      	mov	r2, r4
 8001e4e:	462b      	mov	r3, r5
 8001e50:	f7fe f9c0 	bl	80001d4 <__adddf3>
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	4610      	mov	r0, r2
 8001e5a:	4619      	mov	r1, r3
           airTime = rint( ( 8 * ( SX126x.PacketParams.Params.Gfsk.PreambleLength +
 8001e5c:	f04f 0200 	mov.w	r2, #0
 8001e60:	4b7d      	ldr	r3, [pc, #500]	; (8002058 <RadioTimeOnAir+0x2a0>)
 8001e62:	f7fe fb6d 	bl	8000540 <__aeabi_dmul>
 8001e66:	4602      	mov	r2, r0
 8001e68:	460b      	mov	r3, r1
 8001e6a:	4614      	mov	r4, r2
 8001e6c:	461d      	mov	r5, r3
                                     SX126x.ModulationParams.Params.Gfsk.BitRate ) * 1e3 );
 8001e6e:	4b78      	ldr	r3, [pc, #480]	; (8002050 <RadioTimeOnAir+0x298>)
 8001e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                                     ( ( SX126x.PacketParams.Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES ) ? 2.0 : 0 ) ) /
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7fe faea 	bl	800044c <__aeabi_ui2d>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	4620      	mov	r0, r4
 8001e7e:	4629      	mov	r1, r5
 8001e80:	f7fe fc88 	bl	8000794 <__aeabi_ddiv>
 8001e84:	4602      	mov	r2, r0
 8001e86:	460b      	mov	r3, r1
 8001e88:	4610      	mov	r0, r2
 8001e8a:	4619      	mov	r1, r3
           airTime = rint( ( 8 * ( SX126x.PacketParams.Params.Gfsk.PreambleLength +
 8001e8c:	f04f 0200 	mov.w	r2, #0
 8001e90:	4b72      	ldr	r3, [pc, #456]	; (800205c <RadioTimeOnAir+0x2a4>)
 8001e92:	f7fe fb55 	bl	8000540 <__aeabi_dmul>
 8001e96:	4602      	mov	r2, r0
 8001e98:	460b      	mov	r3, r1
 8001e9a:	ec43 2b17 	vmov	d7, r2, r3
 8001e9e:	eeb0 0a47 	vmov.f32	s0, s14
 8001ea2:	eef0 0a67 	vmov.f32	s1, s15
 8001ea6:	f004 fc0f 	bl	80066c8 <rint>
 8001eaa:	ec53 2b10 	vmov	r2, r3, d0
 8001eae:	4610      	mov	r0, r2
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	f7fe fddf 	bl	8000a74 <__aeabi_d2uiz>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        break;
 8001eba:	e0c0      	b.n	800203e <RadioTimeOnAir+0x286>
    case MODEM_LORA:
        {
            double ts = RadioLoRaSymbTime[SX126x.ModulationParams.Params.LoRa.Bandwidth - 4][12 - SX126x.ModulationParams.Params.LoRa.SpreadingFactor];
 8001ebc:	4b64      	ldr	r3, [pc, #400]	; (8002050 <RadioTimeOnAir+0x298>)
 8001ebe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ec2:	1f1a      	subs	r2, r3, #4
 8001ec4:	4b62      	ldr	r3, [pc, #392]	; (8002050 <RadioTimeOnAir+0x298>)
 8001ec6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001eca:	f1c3 010c 	rsb	r1, r3, #12
 8001ece:	4864      	ldr	r0, [pc, #400]	; (8002060 <RadioTimeOnAir+0x2a8>)
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	4413      	add	r3, r2
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	440b      	add	r3, r1
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	4403      	add	r3, r0
 8001ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
            // time of preamble
            double tPreamble = ( SX126x.PacketParams.Params.LoRa.PreambleLength + 4.25 ) * ts;
 8001ee6:	4b5a      	ldr	r3, [pc, #360]	; (8002050 <RadioTimeOnAir+0x298>)
 8001ee8:	899b      	ldrh	r3, [r3, #12]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7fe fabe 	bl	800046c <__aeabi_i2d>
 8001ef0:	f04f 0200 	mov.w	r2, #0
 8001ef4:	4b5b      	ldr	r3, [pc, #364]	; (8002064 <RadioTimeOnAir+0x2ac>)
 8001ef6:	f7fe f96d 	bl	80001d4 <__adddf3>
 8001efa:	4602      	mov	r2, r0
 8001efc:	460b      	mov	r3, r1
 8001efe:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001f02:	f7fe fb1d 	bl	8000540 <__aeabi_dmul>
 8001f06:	4602      	mov	r2, r0
 8001f08:	460b      	mov	r3, r1
 8001f0a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
            // Symbol length of payload and time
            double tmp = ceil( ( 8 * pktLen - 4 * SX126x.ModulationParams.Params.LoRa.SpreadingFactor +
 8001f0e:	79bb      	ldrb	r3, [r7, #6]
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	4a4f      	ldr	r2, [pc, #316]	; (8002050 <RadioTimeOnAir+0x298>)
 8001f14:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 8001f18:	1a9b      	subs	r3, r3, r2
 8001f1a:	1dda      	adds	r2, r3, #7
                                 28 + 16 * SX126x.PacketParams.Params.LoRa.CrcMode -
 8001f1c:	4b4c      	ldr	r3, [pc, #304]	; (8002050 <RadioTimeOnAir+0x298>)
 8001f1e:	7c1b      	ldrb	r3, [r3, #16]
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	4413      	add	r3, r2
 8001f24:	009a      	lsls	r2, r3, #2
                                 ( ( SX126x.PacketParams.Params.LoRa.HeaderType == LORA_PACKET_FIXED_LENGTH ) ? 20 : 0 ) ) /
 8001f26:	4b4a      	ldr	r3, [pc, #296]	; (8002050 <RadioTimeOnAir+0x298>)
 8001f28:	7b9b      	ldrb	r3, [r3, #14]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d101      	bne.n	8001f32 <RadioTimeOnAir+0x17a>
 8001f2e:	2314      	movs	r3, #20
 8001f30:	e000      	b.n	8001f34 <RadioTimeOnAir+0x17c>
 8001f32:	2300      	movs	r3, #0
                                 28 + 16 * SX126x.PacketParams.Params.LoRa.CrcMode -
 8001f34:	1ad3      	subs	r3, r2, r3
            double tmp = ceil( ( 8 * pktLen - 4 * SX126x.ModulationParams.Params.LoRa.SpreadingFactor +
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7fe fa98 	bl	800046c <__aeabi_i2d>
 8001f3c:	4604      	mov	r4, r0
 8001f3e:	460d      	mov	r5, r1
                                 ( double )( 4 * ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor -
 8001f40:	4b43      	ldr	r3, [pc, #268]	; (8002050 <RadioTimeOnAir+0x298>)
 8001f42:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f46:	461a      	mov	r2, r3
                                 ( ( SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 8001f48:	4b41      	ldr	r3, [pc, #260]	; (8002050 <RadioTimeOnAir+0x298>)
 8001f4a:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <RadioTimeOnAir+0x19e>
 8001f52:	2302      	movs	r3, #2
 8001f54:	e000      	b.n	8001f58 <RadioTimeOnAir+0x1a0>
 8001f56:	2300      	movs	r3, #0
                                 ( double )( 4 * ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor -
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7fe fa85 	bl	800046c <__aeabi_i2d>
 8001f62:	4602      	mov	r2, r0
 8001f64:	460b      	mov	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX126x.ModulationParams.Params.LoRa.SpreadingFactor +
 8001f66:	4620      	mov	r0, r4
 8001f68:	4629      	mov	r1, r5
 8001f6a:	f7fe fc13 	bl	8000794 <__aeabi_ddiv>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	460b      	mov	r3, r1
 8001f72:	ec43 2b17 	vmov	d7, r2, r3
 8001f76:	eeb0 0a47 	vmov.f32	s0, s14
 8001f7a:	eef0 0a67 	vmov.f32	s1, s15
 8001f7e:	f004 fa9f 	bl	80064c0 <ceil>
 8001f82:	ec55 4b10 	vmov	r4, r5, d0
                                 ( ( SX126x.ModulationParams.Params.LoRa.CodingRate % 4 ) + 4 );
 8001f86:	4b32      	ldr	r3, [pc, #200]	; (8002050 <RadioTimeOnAir+0x298>)
 8001f88:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001f8c:	f003 0303 	and.w	r3, r3, #3
 8001f90:	3304      	adds	r3, #4
                                 ( ( SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7fe fa6a 	bl	800046c <__aeabi_i2d>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	460b      	mov	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX126x.ModulationParams.Params.LoRa.SpreadingFactor +
 8001f9c:	4620      	mov	r0, r4
 8001f9e:	4629      	mov	r1, r5
 8001fa0:	f7fe face 	bl	8000540 <__aeabi_dmul>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	e9c7 2308 	strd	r2, r3, [r7, #32]
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 8001fac:	f04f 0200 	mov.w	r2, #0
 8001fb0:	f04f 0300 	mov.w	r3, #0
 8001fb4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001fb8:	f7fe fd52 	bl	8000a60 <__aeabi_dcmpgt>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d002      	beq.n	8001fc8 <RadioTimeOnAir+0x210>
 8001fc2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001fc6:	e003      	b.n	8001fd0 <RadioTimeOnAir+0x218>
 8001fc8:	f04f 0000 	mov.w	r0, #0
 8001fcc:	f04f 0100 	mov.w	r1, #0
 8001fd0:	f04f 0200 	mov.w	r2, #0
 8001fd4:	4b20      	ldr	r3, [pc, #128]	; (8002058 <RadioTimeOnAir+0x2a0>)
 8001fd6:	f7fe f8fd 	bl	80001d4 <__adddf3>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	460b      	mov	r3, r1
 8001fde:	e9c7 2306 	strd	r2, r3, [r7, #24]
            double tPayload = nPayload * ts;
 8001fe2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001fe6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001fea:	f7fe faa9 	bl	8000540 <__aeabi_dmul>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	e9c7 2304 	strd	r2, r3, [r7, #16]
            // Time on air
            double tOnAir = tPreamble + tPayload;
 8001ff6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ffa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001ffe:	f7fe f8e9 	bl	80001d4 <__adddf3>
 8002002:	4602      	mov	r2, r0
 8002004:	460b      	mov	r3, r1
 8002006:	e9c7 2302 	strd	r2, r3, [r7, #8]
            // return milli seconds
            airTime = floor( tOnAir + 0.999 );
 800200a:	a30f      	add	r3, pc, #60	; (adr r3, 8002048 <RadioTimeOnAir+0x290>)
 800200c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002010:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002014:	f7fe f8de 	bl	80001d4 <__adddf3>
 8002018:	4602      	mov	r2, r0
 800201a:	460b      	mov	r3, r1
 800201c:	ec43 2b17 	vmov	d7, r2, r3
 8002020:	eeb0 0a47 	vmov.f32	s0, s14
 8002024:	eef0 0a67 	vmov.f32	s1, s15
 8002028:	f004 face 	bl	80065c8 <floor>
 800202c:	ec53 2b10 	vmov	r2, r3, d0
 8002030:	4610      	mov	r0, r2
 8002032:	4619      	mov	r1, r3
 8002034:	f7fe fd1e 	bl	8000a74 <__aeabi_d2uiz>
 8002038:	4603      	mov	r3, r0
 800203a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        break;
 800203c:	bf00      	nop
    }
    return airTime;
 800203e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002040:	4618      	mov	r0, r3
 8002042:	3740      	adds	r7, #64	; 0x40
 8002044:	46bd      	mov	sp, r7
 8002046:	bdb0      	pop	{r4, r5, r7, pc}
 8002048:	d916872b 	.word	0xd916872b
 800204c:	3feff7ce 	.word	0x3feff7ce
 8002050:	20000628 	.word	0x20000628
 8002054:	3ff00000 	.word	0x3ff00000
 8002058:	40200000 	.word	0x40200000
 800205c:	408f4000 	.word	0x408f4000
 8002060:	20000010 	.word	0x20000010
 8002064:	40110000 	.word	0x40110000

08002068 <RadioSend>:

void RadioSend( uint8_t *buffer, uint8_t size )
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	460b      	mov	r3, r1
 8002072:	70fb      	strb	r3, [r7, #3]
    SX126xSetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 8002074:	2300      	movs	r3, #0
 8002076:	2200      	movs	r2, #0
 8002078:	f240 2101 	movw	r1, #513	; 0x201
 800207c:	f240 2001 	movw	r0, #513	; 0x201
 8002080:	f000 fefc 	bl	8002e7c <SX126xSetDioIrqParams>
                           IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
                           IRQ_RADIO_NONE,
                           IRQ_RADIO_NONE );

    if( SX126xGetPacketType( ) == PACKET_TYPE_LORA )
 8002084:	f000 ffb2 	bl	8002fec <SX126xGetPacketType>
 8002088:	4603      	mov	r3, r0
 800208a:	2b01      	cmp	r3, #1
 800208c:	d103      	bne.n	8002096 <RadioSend+0x2e>
    {
        SX126x.PacketParams.Params.LoRa.PayloadLength = size;
 800208e:	4a0a      	ldr	r2, [pc, #40]	; (80020b8 <RadioSend+0x50>)
 8002090:	78fb      	ldrb	r3, [r7, #3]
 8002092:	73d3      	strb	r3, [r2, #15]
 8002094:	e002      	b.n	800209c <RadioSend+0x34>
    }
    else
    {
        SX126x.PacketParams.Params.Gfsk.PayloadLength = size;
 8002096:	4a08      	ldr	r2, [pc, #32]	; (80020b8 <RadioSend+0x50>)
 8002098:	78fb      	ldrb	r3, [r7, #3]
 800209a:	7213      	strb	r3, [r2, #8]
    }
    SX126xSetPacketParams( &SX126x.PacketParams );
 800209c:	4806      	ldr	r0, [pc, #24]	; (80020b8 <RadioSend+0x50>)
 800209e:	f001 f8ad 	bl	80031fc <SX126xSetPacketParams>

    SX126xSendPayload( buffer, size, 0 );
 80020a2:	78fb      	ldrb	r3, [r7, #3]
 80020a4:	2200      	movs	r2, #0
 80020a6:	4619      	mov	r1, r3
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f000 fce3 	bl	8002a74 <SX126xSendPayload>
}
 80020ae:	bf00      	nop
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	20000628 	.word	0x20000628

080020bc <RadioSleep>:

void RadioSleep( void )
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 80020c2:	2300      	movs	r3, #0
 80020c4:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 80020c6:	793b      	ldrb	r3, [r7, #4]
 80020c8:	f043 0304 	orr.w	r3, r3, #4
 80020cc:	713b      	strb	r3, [r7, #4]
    SX126xSetSleep( params );
 80020ce:	7938      	ldrb	r0, [r7, #4]
 80020d0:	f000 fd66 	bl	8002ba0 <SX126xSetSleep>

    DelayMs( 2 );
 80020d4:	2002      	movs	r0, #2
 80020d6:	f7ff fb26 	bl	8001726 <DelayMs>
}
 80020da:	bf00      	nop
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <RadioStandby>:

void RadioStandby( void )
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	af00      	add	r7, sp, #0
    SX126xSetStandby( STDBY_RC );
 80020e6:	2000      	movs	r0, #0
 80020e8:	f000 fd70 	bl	8002bcc <SX126xSetStandby>
}
 80020ec:	bf00      	nop
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <RadioRx>:

void RadioRx( uint32_t timeout )
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 80020f8:	2300      	movs	r3, #0
 80020fa:	2200      	movs	r2, #0
 80020fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002100:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002104:	f000 feba 	bl	8002e7c <SX126xSetDioIrqParams>
                           IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
                           IRQ_RADIO_NONE,
                           IRQ_RADIO_NONE );
    
    RxContinuous = true;
 8002108:	4b0a      	ldr	r3, [pc, #40]	; (8002134 <RadioRx+0x44>)
 800210a:	2201      	movs	r2, #1
 800210c:	701a      	strb	r2, [r3, #0]
    if( RxContinuous == true )
 800210e:	4b09      	ldr	r3, [pc, #36]	; (8002134 <RadioRx+0x44>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d004      	beq.n	8002120 <RadioRx+0x30>
    {
        SX126xSetRx( 0xFFFFFF ); // Rx Continuous
 8002116:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800211a:	f000 fd93 	bl	8002c44 <SX126xSetRx>
    }
    else
    {
        SX126xSetRx( timeout << 6 );
    }
}
 800211e:	e004      	b.n	800212a <RadioRx+0x3a>
        SX126xSetRx( timeout << 6 );
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	019b      	lsls	r3, r3, #6
 8002124:	4618      	mov	r0, r3
 8002126:	f000 fd8d 	bl	8002c44 <SX126xSetRx>
}
 800212a:	bf00      	nop
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	200000a1 	.word	0x200000a1

08002138 <RadioRxBoosted>:

void RadioRxBoosted( uint32_t timeout )
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 8002140:	2300      	movs	r3, #0
 8002142:	2200      	movs	r2, #0
 8002144:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002148:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800214c:	f000 fe96 	bl	8002e7c <SX126xSetDioIrqParams>
                           IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
                           IRQ_RADIO_NONE,
                           IRQ_RADIO_NONE );


    if( RxContinuous == true )
 8002150:	4b08      	ldr	r3, [pc, #32]	; (8002174 <RadioRxBoosted+0x3c>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d004      	beq.n	8002162 <RadioRxBoosted+0x2a>
    {
        SX126xSetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8002158:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800215c:	f000 fd92 	bl	8002c84 <SX126xSetRxBoosted>
    }
    else
    {
        SX126xSetRxBoosted( timeout << 6 );
    }
}
 8002160:	e004      	b.n	800216c <RadioRxBoosted+0x34>
        SX126xSetRxBoosted( timeout << 6 );
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	019b      	lsls	r3, r3, #6
 8002166:	4618      	mov	r0, r3
 8002168:	f000 fd8c 	bl	8002c84 <SX126xSetRxBoosted>
}
 800216c:	bf00      	nop
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	200000a1 	.word	0x200000a1

08002178 <RadioSetRxDutyCycle>:

void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
    SX126xSetRxDutyCycle( rxTime, sleepTime );
 8002182:	6839      	ldr	r1, [r7, #0]
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f000 fda1 	bl	8002ccc <SX126xSetRxDutyCycle>
}
 800218a:	bf00      	nop
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <RadioStartCad>:

void RadioStartCad( void )
{
 8002192:	b580      	push	{r7, lr}
 8002194:	af00      	add	r7, sp, #0
    SX126xSetCad( );
 8002196:	f000 fdc5 	bl	8002d24 <SX126xSetCad>
}
 800219a:	bf00      	nop
 800219c:	bd80      	pop	{r7, pc}

0800219e <RadioSetTxContinuousWave>:
{
    SX126xSetTx( timeout << 6 );
}

void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b082      	sub	sp, #8
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
 80021a6:	460b      	mov	r3, r1
 80021a8:	70fb      	strb	r3, [r7, #3]
 80021aa:	4613      	mov	r3, r2
 80021ac:	803b      	strh	r3, [r7, #0]
    SX126xSetRfFrequency( freq );
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 fec2 	bl	8002f38 <SX126xSetRfFrequency>
    SX126xSetRfTxPower( power );
 80021b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f000 fbc9 	bl	8002950 <SX126xSetRfTxPower>
    SX126xSetTxContinuousWave( );
 80021be:	f000 fdbf 	bl	8002d40 <SX126xSetTxContinuousWave>

//    TimerSetValue( &RxTimeoutTimer, time  * 1e3 );
//    TimerStart( &RxTimeoutTimer );
}
 80021c2:	bf00      	nop
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <RadioRssi>:

int16_t RadioRssi( RadioModems_t modem )
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b082      	sub	sp, #8
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	4603      	mov	r3, r0
 80021d2:	71fb      	strb	r3, [r7, #7]
    return SX126xGetRssiInst( );
 80021d4:	f001 f8e3 	bl	800339e <SX126xGetRssiInst>
 80021d8:	4603      	mov	r3, r0
 80021da:	b21b      	sxth	r3, r3
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3708      	adds	r7, #8
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <RadioWrite>:

void RadioWrite( uint16_t addr, uint8_t data )
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	4603      	mov	r3, r0
 80021ec:	460a      	mov	r2, r1
 80021ee:	80fb      	strh	r3, [r7, #6]
 80021f0:	4613      	mov	r3, r2
 80021f2:	717b      	strb	r3, [r7, #5]
    SX126xWriteRegister( addr, data );
 80021f4:	797a      	ldrb	r2, [r7, #5]
 80021f6:	88fb      	ldrh	r3, [r7, #6]
 80021f8:	4611      	mov	r1, r2
 80021fa:	4618      	mov	r0, r3
 80021fc:	f000 fabc 	bl	8002778 <SX126xWriteRegister>
}
 8002200:	bf00      	nop
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <RadioRead>:

uint8_t RadioRead( uint16_t addr )
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	4603      	mov	r3, r0
 8002210:	80fb      	strh	r3, [r7, #6]
    return SX126xReadRegister( addr );
 8002212:	88fb      	ldrh	r3, [r7, #6]
 8002214:	4618      	mov	r0, r3
 8002216:	f000 fb0b 	bl	8002830 <SX126xReadRegister>
 800221a:	4603      	mov	r3, r0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <RadioWriteBuffer>:

void RadioWriteBuffer( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	4603      	mov	r3, r0
 800222c:	6039      	str	r1, [r7, #0]
 800222e:	80fb      	strh	r3, [r7, #6]
 8002230:	4613      	mov	r3, r2
 8002232:	717b      	strb	r3, [r7, #5]
    SX126xWriteRegisters( addr, buffer, size );
 8002234:	797b      	ldrb	r3, [r7, #5]
 8002236:	b29a      	uxth	r2, r3
 8002238:	88fb      	ldrh	r3, [r7, #6]
 800223a:	6839      	ldr	r1, [r7, #0]
 800223c:	4618      	mov	r0, r3
 800223e:	f000 fa57 	bl	80026f0 <SX126xWriteRegisters>
}
 8002242:	bf00      	nop
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <RadioReadBuffer>:

void RadioReadBuffer( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b082      	sub	sp, #8
 800224e:	af00      	add	r7, sp, #0
 8002250:	4603      	mov	r3, r0
 8002252:	6039      	str	r1, [r7, #0]
 8002254:	80fb      	strh	r3, [r7, #6]
 8002256:	4613      	mov	r3, r2
 8002258:	717b      	strb	r3, [r7, #5]
    SX126xReadRegisters( addr, buffer, size );
 800225a:	797b      	ldrb	r3, [r7, #5]
 800225c:	b29a      	uxth	r2, r3
 800225e:	88fb      	ldrh	r3, [r7, #6]
 8002260:	6839      	ldr	r1, [r7, #0]
 8002262:	4618      	mov	r0, r3
 8002264:	f000 fa9a 	bl	800279c <SX126xReadRegisters>
}
 8002268:	bf00      	nop
 800226a:	3708      	adds	r7, #8
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <RadioSetMaxPayloadLength>:
{
    SX126xReadBuffer( 0, buffer, size );
}

void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	4603      	mov	r3, r0
 8002278:	460a      	mov	r2, r1
 800227a:	71fb      	strb	r3, [r7, #7]
 800227c:	4613      	mov	r3, r2
 800227e:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8002280:	79fb      	ldrb	r3, [r7, #7]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d10a      	bne.n	800229c <RadioSetMaxPayloadLength+0x2c>
    {
        SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8002286:	4a0e      	ldr	r2, [pc, #56]	; (80022c0 <RadioSetMaxPayloadLength+0x50>)
 8002288:	79bb      	ldrb	r3, [r7, #6]
 800228a:	7013      	strb	r3, [r2, #0]
 800228c:	4b0c      	ldr	r3, [pc, #48]	; (80022c0 <RadioSetMaxPayloadLength+0x50>)
 800228e:	781a      	ldrb	r2, [r3, #0]
 8002290:	4b0c      	ldr	r3, [pc, #48]	; (80022c4 <RadioSetMaxPayloadLength+0x54>)
 8002292:	73da      	strb	r2, [r3, #15]
        SX126xSetPacketParams( &SX126x.PacketParams );
 8002294:	480b      	ldr	r0, [pc, #44]	; (80022c4 <RadioSetMaxPayloadLength+0x54>)
 8002296:	f000 ffb1 	bl	80031fc <SX126xSetPacketParams>
        {
            SX126x.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SX126xSetPacketParams( &SX126x.PacketParams );
        }
    }
}
 800229a:	e00d      	b.n	80022b8 <RadioSetMaxPayloadLength+0x48>
        if( SX126x.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 800229c:	4b09      	ldr	r3, [pc, #36]	; (80022c4 <RadioSetMaxPayloadLength+0x54>)
 800229e:	79db      	ldrb	r3, [r3, #7]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d109      	bne.n	80022b8 <RadioSetMaxPayloadLength+0x48>
            SX126x.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 80022a4:	4a06      	ldr	r2, [pc, #24]	; (80022c0 <RadioSetMaxPayloadLength+0x50>)
 80022a6:	79bb      	ldrb	r3, [r7, #6]
 80022a8:	7013      	strb	r3, [r2, #0]
 80022aa:	4b05      	ldr	r3, [pc, #20]	; (80022c0 <RadioSetMaxPayloadLength+0x50>)
 80022ac:	781a      	ldrb	r2, [r3, #0]
 80022ae:	4b05      	ldr	r3, [pc, #20]	; (80022c4 <RadioSetMaxPayloadLength+0x54>)
 80022b0:	721a      	strb	r2, [r3, #8]
            SX126xSetPacketParams( &SX126x.PacketParams );
 80022b2:	4804      	ldr	r0, [pc, #16]	; (80022c4 <RadioSetMaxPayloadLength+0x54>)
 80022b4:	f000 ffa2 	bl	80031fc <SX126xSetPacketParams>
}
 80022b8:	bf00      	nop
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	200000a0 	.word	0x200000a0
 80022c4:	20000628 	.word	0x20000628

080022c8 <RadioSetPublicNetwork>:

void RadioSetPublicNetwork( bool enable )
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	4603      	mov	r3, r0
 80022d0:	71fb      	strb	r3, [r7, #7]
    RadioPublicNetwork.Current = RadioPublicNetwork.Previous = enable;
 80022d2:	4a13      	ldr	r2, [pc, #76]	; (8002320 <RadioSetPublicNetwork+0x58>)
 80022d4:	79fb      	ldrb	r3, [r7, #7]
 80022d6:	7013      	strb	r3, [r2, #0]
 80022d8:	4b11      	ldr	r3, [pc, #68]	; (8002320 <RadioSetPublicNetwork+0x58>)
 80022da:	781a      	ldrb	r2, [r3, #0]
 80022dc:	4b10      	ldr	r3, [pc, #64]	; (8002320 <RadioSetPublicNetwork+0x58>)
 80022de:	705a      	strb	r2, [r3, #1]

    RadioSetModem( MODEM_LORA );
 80022e0:	2001      	movs	r0, #1
 80022e2:	f7ff faa7 	bl	8001834 <RadioSetModem>
    if( enable == true )
 80022e6:	79fb      	ldrb	r3, [r7, #7]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d00a      	beq.n	8002302 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SX126xWriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 80022ec:	2134      	movs	r1, #52	; 0x34
 80022ee:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 80022f2:	f000 fa41 	bl	8002778 <SX126xWriteRegister>
        SX126xWriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 80022f6:	2144      	movs	r1, #68	; 0x44
 80022f8:	f240 7041 	movw	r0, #1857	; 0x741
 80022fc:	f000 fa3c 	bl	8002778 <SX126xWriteRegister>
    {
        // Change LoRa modem SyncWord
        SX126xWriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SX126xWriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8002300:	e009      	b.n	8002316 <RadioSetPublicNetwork+0x4e>
        SX126xWriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8002302:	2114      	movs	r1, #20
 8002304:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8002308:	f000 fa36 	bl	8002778 <SX126xWriteRegister>
        SX126xWriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 800230c:	2124      	movs	r1, #36	; 0x24
 800230e:	f240 7041 	movw	r0, #1857	; 0x741
 8002312:	f000 fa31 	bl	8002778 <SX126xWriteRegister>
}
 8002316:	bf00      	nop
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	200001c4 	.word	0x200001c4

08002324 <RadioGetWakeupTime>:

uint32_t RadioGetWakeupTime( void )
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
    return( RADIO_TCXO_SETUP_TIME + RADIO_WAKEUP_TIME );
 8002328:	2303      	movs	r3, #3
}
 800232a:	4618      	mov	r0, r3
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <RadioOnDioIrq>:
        RadioEvents->RxTimeout( );
    }
}

void RadioOnDioIrq( void )
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
    IrqFired = true;
 8002338:	4b03      	ldr	r3, [pc, #12]	; (8002348 <RadioOnDioIrq+0x14>)
 800233a:	2201      	movs	r2, #1
 800233c:	701a      	strb	r2, [r3, #0]
}
 800233e:	bf00      	nop
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	200001c0 	.word	0x200001c0

0800234c <RadioIrqProcess>:

void RadioIrqProcess( void )
{
 800234c:	b590      	push	{r4, r7, lr}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
	uint16_t irqRegs=0;
 8002352:	2300      	movs	r3, #0
 8002354:	80fb      	strh	r3, [r7, #6]
   // if( IrqFired == true )
    if(HAL_GPIO_ReadPin(RADIO_DIO1_PORT, RADIO_DIO1_PIN) == GPIO_PIN_SET)
 8002356:	2104      	movs	r1, #4
 8002358:	4870      	ldr	r0, [pc, #448]	; (800251c <RadioIrqProcess+0x1d0>)
 800235a:	f002 ffcb 	bl	80052f4 <HAL_GPIO_ReadPin>
 800235e:	4603      	mov	r3, r0
 8002360:	2b01      	cmp	r3, #1
 8002362:	f040 80d6 	bne.w	8002512 <RadioIrqProcess+0x1c6>
    {
        IrqFired = false;
 8002366:	4b6e      	ldr	r3, [pc, #440]	; (8002520 <RadioIrqProcess+0x1d4>)
 8002368:	2200      	movs	r2, #0
 800236a:	701a      	strb	r2, [r3, #0]

        irqRegs = SX126xGetIrqStatus( );
 800236c:	f000 fdc0 	bl	8002ef0 <SX126xGetIrqStatus>
 8002370:	4603      	mov	r3, r0
 8002372:	80fb      	strh	r3, [r7, #6]
        SX126xClearIrqStatus( IRQ_RADIO_ALL );
 8002374:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002378:	f001 f8b2 	bl	80034e0 <SX126xClearIrqStatus>
        
        if( ( irqRegs & IRQ_TX_DONE ) == IRQ_TX_DONE )
 800237c:	88fb      	ldrh	r3, [r7, #6]
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00c      	beq.n	80023a0 <RadioIrqProcess+0x54>
        {
 
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8002386:	4b67      	ldr	r3, [pc, #412]	; (8002524 <RadioIrqProcess+0x1d8>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d008      	beq.n	80023a0 <RadioIrqProcess+0x54>
 800238e:	4b65      	ldr	r3, [pc, #404]	; (8002524 <RadioIrqProcess+0x1d8>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d003      	beq.n	80023a0 <RadioIrqProcess+0x54>
            {
                RadioEvents->TxDone( );
 8002398:	4b62      	ldr	r3, [pc, #392]	; (8002524 <RadioIrqProcess+0x1d8>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4798      	blx	r3
            }
        }

        if( ( irqRegs & IRQ_RX_DONE ) == IRQ_RX_DONE )
 80023a0:	88fb      	ldrh	r3, [r7, #6]
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d022      	beq.n	80023f0 <RadioIrqProcess+0xa4>
        {
            uint8_t size;

            SX126xGetPayload( RadioRxPayload, &size , 255 );
 80023aa:	1d7b      	adds	r3, r7, #5
 80023ac:	22ff      	movs	r2, #255	; 0xff
 80023ae:	4619      	mov	r1, r3
 80023b0:	485d      	ldr	r0, [pc, #372]	; (8002528 <RadioIrqProcess+0x1dc>)
 80023b2:	f000 fb3d 	bl	8002a30 <SX126xGetPayload>
            SX126xGetPacketStatus( &RadioPktStatus );
 80023b6:	485d      	ldr	r0, [pc, #372]	; (800252c <RadioIrqProcess+0x1e0>)
 80023b8:	f001 f834 	bl	8003424 <SX126xGetPacketStatus>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80023bc:	4b59      	ldr	r3, [pc, #356]	; (8002524 <RadioIrqProcess+0x1d8>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d012      	beq.n	80023ea <RadioIrqProcess+0x9e>
 80023c4:	4b57      	ldr	r3, [pc, #348]	; (8002524 <RadioIrqProcess+0x1d8>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00d      	beq.n	80023ea <RadioIrqProcess+0x9e>
            {
                RadioEvents->RxDone( RadioRxPayload, size, RadioPktStatus.Params.LoRa.RssiPkt, RadioPktStatus.Params.LoRa.SnrPkt );
 80023ce:	4b55      	ldr	r3, [pc, #340]	; (8002524 <RadioIrqProcess+0x1d8>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	689c      	ldr	r4, [r3, #8]
 80023d4:	797b      	ldrb	r3, [r7, #5]
 80023d6:	b299      	uxth	r1, r3
 80023d8:	4b54      	ldr	r3, [pc, #336]	; (800252c <RadioIrqProcess+0x1e0>)
 80023da:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80023de:	b21a      	sxth	r2, r3
 80023e0:	4b52      	ldr	r3, [pc, #328]	; (800252c <RadioIrqProcess+0x1e0>)
 80023e2:	f993 300d 	ldrsb.w	r3, [r3, #13]
 80023e6:	4850      	ldr	r0, [pc, #320]	; (8002528 <RadioIrqProcess+0x1dc>)
 80023e8:	47a0      	blx	r4
            }
            SX126xClearIrqStatus( IRQ_RX_DONE );
 80023ea:	2002      	movs	r0, #2
 80023ec:	f001 f878 	bl	80034e0 <SX126xClearIrqStatus>
        }

        if( ( irqRegs & IRQ_CRC_ERROR ) == IRQ_CRC_ERROR )
 80023f0:	88fb      	ldrh	r3, [r7, #6]
 80023f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d011      	beq.n	800241e <RadioIrqProcess+0xd2>
        {
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 80023fa:	4b4a      	ldr	r3, [pc, #296]	; (8002524 <RadioIrqProcess+0x1d8>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d008      	beq.n	8002414 <RadioIrqProcess+0xc8>
 8002402:	4b48      	ldr	r3, [pc, #288]	; (8002524 <RadioIrqProcess+0x1d8>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d003      	beq.n	8002414 <RadioIrqProcess+0xc8>
            {
                RadioEvents->RxError( );
 800240c:	4b45      	ldr	r3, [pc, #276]	; (8002524 <RadioIrqProcess+0x1d8>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	4798      	blx	r3
            }
            User_Uart_AsyncTransmit(USER_UART_CHANNEL_USART1,(uint8_t*)"CRC\n",5);
 8002414:	2205      	movs	r2, #5
 8002416:	4946      	ldr	r1, [pc, #280]	; (8002530 <RadioIrqProcess+0x1e4>)
 8002418:	2004      	movs	r0, #4
 800241a:	f001 fcdb 	bl	8003dd4 <User_Uart_AsyncTransmit>
        }

        if( ( irqRegs & IRQ_CAD_DONE ) == IRQ_CAD_DONE )
 800241e:	88fb      	ldrh	r3, [r7, #6]
 8002420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002424:	2b00      	cmp	r3, #0
 8002426:	d015      	beq.n	8002454 <RadioIrqProcess+0x108>
        {
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8002428:	4b3e      	ldr	r3, [pc, #248]	; (8002524 <RadioIrqProcess+0x1d8>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d011      	beq.n	8002454 <RadioIrqProcess+0x108>
 8002430:	4b3c      	ldr	r3, [pc, #240]	; (8002524 <RadioIrqProcess+0x1d8>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d00c      	beq.n	8002454 <RadioIrqProcess+0x108>
            {
                RadioEvents->CadDone( ( ( irqRegs & IRQ_CAD_ACTIVITY_DETECTED ) == IRQ_CAD_ACTIVITY_DETECTED ) );
 800243a:	4b3a      	ldr	r3, [pc, #232]	; (8002524 <RadioIrqProcess+0x1d8>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	88fa      	ldrh	r2, [r7, #6]
 8002442:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8002446:	2a00      	cmp	r2, #0
 8002448:	bf14      	ite	ne
 800244a:	2201      	movne	r2, #1
 800244c:	2200      	moveq	r2, #0
 800244e:	b2d2      	uxtb	r2, r2
 8002450:	4610      	mov	r0, r2
 8002452:	4798      	blx	r3
            }
        }

        if( ( irqRegs & IRQ_RX_TX_TIMEOUT ) == IRQ_RX_TX_TIMEOUT )
 8002454:	88fb      	ldrh	r3, [r7, #6]
 8002456:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800245a:	2b00      	cmp	r3, #0
 800245c:	d024      	beq.n	80024a8 <RadioIrqProcess+0x15c>
        {
            if( SX126xGetOperatingMode( ) == MODE_TX )
 800245e:	f000 fab7 	bl	80029d0 <SX126xGetOperatingMode>
 8002462:	4603      	mov	r3, r0
 8002464:	2b04      	cmp	r3, #4
 8002466:	d10d      	bne.n	8002484 <RadioIrqProcess+0x138>
            {
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8002468:	4b2e      	ldr	r3, [pc, #184]	; (8002524 <RadioIrqProcess+0x1d8>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d01b      	beq.n	80024a8 <RadioIrqProcess+0x15c>
 8002470:	4b2c      	ldr	r3, [pc, #176]	; (8002524 <RadioIrqProcess+0x1d8>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d016      	beq.n	80024a8 <RadioIrqProcess+0x15c>
                {
                    RadioEvents->TxTimeout( );
 800247a:	4b2a      	ldr	r3, [pc, #168]	; (8002524 <RadioIrqProcess+0x1d8>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	4798      	blx	r3
 8002482:	e011      	b.n	80024a8 <RadioIrqProcess+0x15c>
                }
            }
            else if( SX126xGetOperatingMode( ) == MODE_RX )
 8002484:	f000 faa4 	bl	80029d0 <SX126xGetOperatingMode>
 8002488:	4603      	mov	r3, r0
 800248a:	2b05      	cmp	r3, #5
 800248c:	d10c      	bne.n	80024a8 <RadioIrqProcess+0x15c>
            {
 
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800248e:	4b25      	ldr	r3, [pc, #148]	; (8002524 <RadioIrqProcess+0x1d8>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d008      	beq.n	80024a8 <RadioIrqProcess+0x15c>
 8002496:	4b23      	ldr	r3, [pc, #140]	; (8002524 <RadioIrqProcess+0x1d8>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d003      	beq.n	80024a8 <RadioIrqProcess+0x15c>
                {
                    RadioEvents->RxTimeout( );
 80024a0:	4b20      	ldr	r3, [pc, #128]	; (8002524 <RadioIrqProcess+0x1d8>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	4798      	blx	r3
                }
            }
        }

        if( ( irqRegs & IRQ_PREAMBLE_DETECTED ) == IRQ_PREAMBLE_DETECTED )
 80024a8:	88fb      	ldrh	r3, [r7, #6]
 80024aa:	f003 0304 	and.w	r3, r3, #4
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d004      	beq.n	80024bc <RadioIrqProcess+0x170>
        {
            //__NOP( );
        	User_Uart_AsyncTransmit(USER_UART_CHANNEL_USART1,(uint8_t*)"PRE\n",5);
 80024b2:	2205      	movs	r2, #5
 80024b4:	491f      	ldr	r1, [pc, #124]	; (8002534 <RadioIrqProcess+0x1e8>)
 80024b6:	2004      	movs	r0, #4
 80024b8:	f001 fc8c 	bl	8003dd4 <User_Uart_AsyncTransmit>
        }

        if( ( irqRegs & IRQ_SYNCWORD_VALID ) == IRQ_SYNCWORD_VALID )
 80024bc:	88fb      	ldrh	r3, [r7, #6]
 80024be:	f003 0308 	and.w	r3, r3, #8
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d004      	beq.n	80024d0 <RadioIrqProcess+0x184>
        {
            //__NOP( );
        	User_Uart_AsyncTransmit(USER_UART_CHANNEL_USART1,(uint8_t*)"SYN\n",5);
 80024c6:	2205      	movs	r2, #5
 80024c8:	491b      	ldr	r1, [pc, #108]	; (8002538 <RadioIrqProcess+0x1ec>)
 80024ca:	2004      	movs	r0, #4
 80024cc:	f001 fc82 	bl	8003dd4 <User_Uart_AsyncTransmit>
        }

        if( ( irqRegs & IRQ_HEADER_VALID ) == IRQ_HEADER_VALID )
 80024d0:	88fb      	ldrh	r3, [r7, #6]
 80024d2:	f003 0310 	and.w	r3, r3, #16
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d004      	beq.n	80024e4 <RadioIrqProcess+0x198>
        {
            //__NOP( );
        	User_Uart_AsyncTransmit(USER_UART_CHANNEL_USART1,(uint8_t*)"HDV\n",5);
 80024da:	2205      	movs	r2, #5
 80024dc:	4917      	ldr	r1, [pc, #92]	; (800253c <RadioIrqProcess+0x1f0>)
 80024de:	2004      	movs	r0, #4
 80024e0:	f001 fc78 	bl	8003dd4 <User_Uart_AsyncTransmit>
        }

        if( ( irqRegs & IRQ_HEADER_ERROR ) == IRQ_HEADER_ERROR )
 80024e4:	88fb      	ldrh	r3, [r7, #6]
 80024e6:	f003 0320 	and.w	r3, r3, #32
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d011      	beq.n	8002512 <RadioIrqProcess+0x1c6>
        {
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80024ee:	4b0d      	ldr	r3, [pc, #52]	; (8002524 <RadioIrqProcess+0x1d8>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d008      	beq.n	8002508 <RadioIrqProcess+0x1bc>
 80024f6:	4b0b      	ldr	r3, [pc, #44]	; (8002524 <RadioIrqProcess+0x1d8>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d003      	beq.n	8002508 <RadioIrqProcess+0x1bc>
            {
                RadioEvents->RxTimeout( );
 8002500:	4b08      	ldr	r3, [pc, #32]	; (8002524 <RadioIrqProcess+0x1d8>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	4798      	blx	r3
            }
            User_Uart_AsyncTransmit(USER_UART_CHANNEL_USART1,(uint8_t*)"HDE\n",5);
 8002508:	2205      	movs	r2, #5
 800250a:	490d      	ldr	r1, [pc, #52]	; (8002540 <RadioIrqProcess+0x1f4>)
 800250c:	2004      	movs	r0, #4
 800250e:	f001 fc61 	bl	8003dd4 <User_Uart_AsyncTransmit>
        }
    }
}
 8002512:	bf00      	nop
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	bd90      	pop	{r4, r7, pc}
 800251a:	bf00      	nop
 800251c:	40020400 	.word	0x40020400
 8002520:	200001c0 	.word	0x200001c0
 8002524:	200001c8 	.word	0x200001c8
 8002528:	20000664 	.word	0x20000664
 800252c:	20000764 	.word	0x20000764
 8002530:	08006828 	.word	0x08006828
 8002534:	08006830 	.word	0x08006830
 8002538:	08006838 	.word	0x08006838
 800253c:	08006840 	.word	0x08006840
 8002540:	08006848 	.word	0x08006848

08002544 <HALSpiInOut>:




uint8_t HALSpiInOut(SPI_HandleTypeDef *hspi, uint8_t transmitdata)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af02      	add	r7, sp, #8
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	460b      	mov	r3, r1
 800254e:	70fb      	strb	r3, [r7, #3]
	uint8_t *data = &transmitdata;
 8002550:	1cfb      	adds	r3, r7, #3
 8002552:	60fb      	str	r3, [r7, #12]
	uint8_t receive_data = 0;
 8002554:	2300      	movs	r3, #0
 8002556:	72fb      	strb	r3, [r7, #11]
	HAL_SPI_TransmitReceive(hspi, data, &receive_data, 1, 200);
 8002558:	f107 020b 	add.w	r2, r7, #11
 800255c:	23c8      	movs	r3, #200	; 0xc8
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	2301      	movs	r3, #1
 8002562:	68f9      	ldr	r1, [r7, #12]
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f003 fc5a 	bl	8005e1e <HAL_SPI_TransmitReceive>
	return receive_data;
 800256a:	7afb      	ldrb	r3, [r7, #11]
}
 800256c:	4618      	mov	r0, r3
 800256e:	3710      	adds	r7, #16
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <SX126xReset>:




void SX126xReset( void )
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
    DelayMs( 1 );
 8002578:	2001      	movs	r0, #1
 800257a:	f7ff f8d4 	bl	8001726 <DelayMs>
    HAL_GPIO_WritePin(SX1278_RST_PIN_INDEX_GPIO_Port, SX1278_RST_PIN_INDEX_GPIO_Port, GPIO_PIN_RESET);
 800257e:	2200      	movs	r2, #0
 8002580:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002584:	4808      	ldr	r0, [pc, #32]	; (80025a8 <SX126xReset+0x34>)
 8002586:	f002 fecd 	bl	8005324 <HAL_GPIO_WritePin>
    DelayMs( 2 );
 800258a:	2002      	movs	r0, #2
 800258c:	f7ff f8cb 	bl	8001726 <DelayMs>
    HAL_GPIO_WritePin(SX1278_RST_PIN_INDEX_GPIO_Port, SX1278_RST_PIN_INDEX_GPIO_Port, GPIO_PIN_SET);
 8002590:	2201      	movs	r2, #1
 8002592:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002596:	4804      	ldr	r0, [pc, #16]	; (80025a8 <SX126xReset+0x34>)
 8002598:	f002 fec4 	bl	8005324 <HAL_GPIO_WritePin>
    DelayMs( 1);
 800259c:	2001      	movs	r0, #1
 800259e:	f7ff f8c2 	bl	8001726 <DelayMs>
}
 80025a2:	bf00      	nop
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	40020400 	.word	0x40020400

080025ac <SX126xWaitOnBusy>:

void SX126xWaitOnBusy( void )
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
   while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0));
 80025b0:	bf00      	nop
 80025b2:	2101      	movs	r1, #1
 80025b4:	4804      	ldr	r0, [pc, #16]	; (80025c8 <SX126xWaitOnBusy+0x1c>)
 80025b6:	f002 fe9d 	bl	80052f4 <HAL_GPIO_ReadPin>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1f8      	bne.n	80025b2 <SX126xWaitOnBusy+0x6>
}
 80025c0:	bf00      	nop
 80025c2:	bf00      	nop
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	40020400 	.word	0x40020400

080025cc <SX126xWakeup>:


void SX126xWakeup( void )
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin( SPI_CSS_Pin_GPIO_Port, SPI_CSS_Pin_Pin,GPIO_PIN_RESET);
 80025d0:	2200      	movs	r2, #0
 80025d2:	2110      	movs	r1, #16
 80025d4:	4809      	ldr	r0, [pc, #36]	; (80025fc <SX126xWakeup+0x30>)
 80025d6:	f002 fea5 	bl	8005324 <HAL_GPIO_WritePin>
   
    HALSpiInOut(&hspi1,RADIO_GET_STATUS);
 80025da:	21c0      	movs	r1, #192	; 0xc0
 80025dc:	4808      	ldr	r0, [pc, #32]	; (8002600 <SX126xWakeup+0x34>)
 80025de:	f7ff ffb1 	bl	8002544 <HALSpiInOut>
    HALSpiInOut(&hspi1,0);
 80025e2:	2100      	movs	r1, #0
 80025e4:	4806      	ldr	r0, [pc, #24]	; (8002600 <SX126xWakeup+0x34>)
 80025e6:	f7ff ffad 	bl	8002544 <HALSpiInOut>
    
    HAL_GPIO_WritePin( SPI_CSS_Pin_GPIO_Port, SPI_CSS_Pin_Pin,GPIO_PIN_SET);
 80025ea:	2201      	movs	r2, #1
 80025ec:	2110      	movs	r1, #16
 80025ee:	4803      	ldr	r0, [pc, #12]	; (80025fc <SX126xWakeup+0x30>)
 80025f0:	f002 fe98 	bl	8005324 <HAL_GPIO_WritePin>

    // Wait for chip to be ready.
    SX126xWaitOnBusy( );
 80025f4:	f7ff ffda 	bl	80025ac <SX126xWaitOnBusy>
}
 80025f8:	bf00      	nop
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	40020000 	.word	0x40020000
 8002600:	200005d0 	.word	0x200005d0

08002604 <SX126xWriteCommand>:

void SX126xWriteCommand( RadioCommands_t command, uint8_t *buffer, uint16_t size )
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	4603      	mov	r3, r0
 800260c:	6039      	str	r1, [r7, #0]
 800260e:	71fb      	strb	r3, [r7, #7]
 8002610:	4613      	mov	r3, r2
 8002612:	80bb      	strh	r3, [r7, #4]
	uint16_t i = 0;
 8002614:	2300      	movs	r3, #0
 8002616:	81fb      	strh	r3, [r7, #14]
    SX126xCheckDeviceReady( );
 8002618:	f000 f9e6 	bl	80029e8 <SX126xCheckDeviceReady>

    HAL_GPIO_WritePin( SPI_CSS_Pin_GPIO_Port, SPI_CSS_Pin_Pin,GPIO_PIN_RESET);
 800261c:	2200      	movs	r2, #0
 800261e:	2110      	movs	r1, #16
 8002620:	4813      	ldr	r0, [pc, #76]	; (8002670 <SX126xWriteCommand+0x6c>)
 8002622:	f002 fe7f 	bl	8005324 <HAL_GPIO_WritePin>

    HALSpiInOut(&hspi1,( uint8_t )command );
 8002626:	79fb      	ldrb	r3, [r7, #7]
 8002628:	4619      	mov	r1, r3
 800262a:	4812      	ldr	r0, [pc, #72]	; (8002674 <SX126xWriteCommand+0x70>)
 800262c:	f7ff ff8a 	bl	8002544 <HALSpiInOut>

    for( i = 0; i < size; i++ )
 8002630:	2300      	movs	r3, #0
 8002632:	81fb      	strh	r3, [r7, #14]
 8002634:	e00a      	b.n	800264c <SX126xWriteCommand+0x48>
    {
        HALSpiInOut(&hspi1,buffer[i] );
 8002636:	89fb      	ldrh	r3, [r7, #14]
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	4413      	add	r3, r2
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	4619      	mov	r1, r3
 8002640:	480c      	ldr	r0, [pc, #48]	; (8002674 <SX126xWriteCommand+0x70>)
 8002642:	f7ff ff7f 	bl	8002544 <HALSpiInOut>
    for( i = 0; i < size; i++ )
 8002646:	89fb      	ldrh	r3, [r7, #14]
 8002648:	3301      	adds	r3, #1
 800264a:	81fb      	strh	r3, [r7, #14]
 800264c:	89fa      	ldrh	r2, [r7, #14]
 800264e:	88bb      	ldrh	r3, [r7, #4]
 8002650:	429a      	cmp	r2, r3
 8002652:	d3f0      	bcc.n	8002636 <SX126xWriteCommand+0x32>
    }

    HAL_GPIO_WritePin( SPI_CSS_Pin_GPIO_Port, SPI_CSS_Pin_Pin,GPIO_PIN_SET);
 8002654:	2201      	movs	r2, #1
 8002656:	2110      	movs	r1, #16
 8002658:	4805      	ldr	r0, [pc, #20]	; (8002670 <SX126xWriteCommand+0x6c>)
 800265a:	f002 fe63 	bl	8005324 <HAL_GPIO_WritePin>
    
    if( command != RADIO_SET_SLEEP )
 800265e:	79fb      	ldrb	r3, [r7, #7]
 8002660:	2b84      	cmp	r3, #132	; 0x84
 8002662:	d001      	beq.n	8002668 <SX126xWriteCommand+0x64>
    {
        SX126xWaitOnBusy( );
 8002664:	f7ff ffa2 	bl	80025ac <SX126xWaitOnBusy>
    }
}
 8002668:	bf00      	nop
 800266a:	3710      	adds	r7, #16
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40020000 	.word	0x40020000
 8002674:	200005d0 	.word	0x200005d0

08002678 <SX126xReadCommand>:

void SX126xReadCommand( RadioCommands_t command, uint8_t *buffer, uint16_t size )
{
 8002678:	b590      	push	{r4, r7, lr}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	6039      	str	r1, [r7, #0]
 8002682:	71fb      	strb	r3, [r7, #7]
 8002684:	4613      	mov	r3, r2
 8002686:	80bb      	strh	r3, [r7, #4]
	uint16_t i = 0;
 8002688:	2300      	movs	r3, #0
 800268a:	81fb      	strh	r3, [r7, #14]
    SX126xCheckDeviceReady( );
 800268c:	f000 f9ac 	bl	80029e8 <SX126xCheckDeviceReady>

    HAL_GPIO_WritePin( SPI_CSS_Pin_GPIO_Port, SPI_CSS_Pin_Pin,GPIO_PIN_RESET);
 8002690:	2200      	movs	r2, #0
 8002692:	2110      	movs	r1, #16
 8002694:	4814      	ldr	r0, [pc, #80]	; (80026e8 <SX126xReadCommand+0x70>)
 8002696:	f002 fe45 	bl	8005324 <HAL_GPIO_WritePin>

    HALSpiInOut(&hspi1,( uint8_t )command );
 800269a:	79fb      	ldrb	r3, [r7, #7]
 800269c:	4619      	mov	r1, r3
 800269e:	4813      	ldr	r0, [pc, #76]	; (80026ec <SX126xReadCommand+0x74>)
 80026a0:	f7ff ff50 	bl	8002544 <HALSpiInOut>
    HALSpiInOut(&hspi1,0x00 );
 80026a4:	2100      	movs	r1, #0
 80026a6:	4811      	ldr	r0, [pc, #68]	; (80026ec <SX126xReadCommand+0x74>)
 80026a8:	f7ff ff4c 	bl	8002544 <HALSpiInOut>
    for( i = 0; i < size; i++ )
 80026ac:	2300      	movs	r3, #0
 80026ae:	81fb      	strh	r3, [r7, #14]
 80026b0:	e00b      	b.n	80026ca <SX126xReadCommand+0x52>
    {
        buffer[i] = HALSpiInOut(&hspi1,0 );
 80026b2:	89fb      	ldrh	r3, [r7, #14]
 80026b4:	683a      	ldr	r2, [r7, #0]
 80026b6:	18d4      	adds	r4, r2, r3
 80026b8:	2100      	movs	r1, #0
 80026ba:	480c      	ldr	r0, [pc, #48]	; (80026ec <SX126xReadCommand+0x74>)
 80026bc:	f7ff ff42 	bl	8002544 <HALSpiInOut>
 80026c0:	4603      	mov	r3, r0
 80026c2:	7023      	strb	r3, [r4, #0]
    for( i = 0; i < size; i++ )
 80026c4:	89fb      	ldrh	r3, [r7, #14]
 80026c6:	3301      	adds	r3, #1
 80026c8:	81fb      	strh	r3, [r7, #14]
 80026ca:	89fa      	ldrh	r2, [r7, #14]
 80026cc:	88bb      	ldrh	r3, [r7, #4]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d3ef      	bcc.n	80026b2 <SX126xReadCommand+0x3a>
    }

    HAL_GPIO_WritePin( SPI_CSS_Pin_GPIO_Port, SPI_CSS_Pin_Pin,GPIO_PIN_SET);
 80026d2:	2201      	movs	r2, #1
 80026d4:	2110      	movs	r1, #16
 80026d6:	4804      	ldr	r0, [pc, #16]	; (80026e8 <SX126xReadCommand+0x70>)
 80026d8:	f002 fe24 	bl	8005324 <HAL_GPIO_WritePin>

    SX126xWaitOnBusy( );
 80026dc:	f7ff ff66 	bl	80025ac <SX126xWaitOnBusy>
}
 80026e0:	bf00      	nop
 80026e2:	3714      	adds	r7, #20
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd90      	pop	{r4, r7, pc}
 80026e8:	40020000 	.word	0x40020000
 80026ec:	200005d0 	.word	0x200005d0

080026f0 <SX126xWriteRegisters>:

void SX126xWriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	4603      	mov	r3, r0
 80026f8:	6039      	str	r1, [r7, #0]
 80026fa:	80fb      	strh	r3, [r7, #6]
 80026fc:	4613      	mov	r3, r2
 80026fe:	80bb      	strh	r3, [r7, #4]
	uint16_t i = 0;
 8002700:	2300      	movs	r3, #0
 8002702:	81fb      	strh	r3, [r7, #14]
	
    SX126xCheckDeviceReady( );
 8002704:	f000 f970 	bl	80029e8 <SX126xCheckDeviceReady>

    HAL_GPIO_WritePin( SPI_CSS_Pin_GPIO_Port, SPI_CSS_Pin_Pin,GPIO_PIN_RESET);
 8002708:	2200      	movs	r2, #0
 800270a:	2110      	movs	r1, #16
 800270c:	4818      	ldr	r0, [pc, #96]	; (8002770 <SX126xWriteRegisters+0x80>)
 800270e:	f002 fe09 	bl	8005324 <HAL_GPIO_WritePin>
    
    HALSpiInOut(&hspi1,RADIO_WRITE_REGISTER );
 8002712:	210d      	movs	r1, #13
 8002714:	4817      	ldr	r0, [pc, #92]	; (8002774 <SX126xWriteRegisters+0x84>)
 8002716:	f7ff ff15 	bl	8002544 <HALSpiInOut>
    HALSpiInOut(&hspi1,( address & 0xFF00 ) >> 8 );
 800271a:	88fb      	ldrh	r3, [r7, #6]
 800271c:	0a1b      	lsrs	r3, r3, #8
 800271e:	b29b      	uxth	r3, r3
 8002720:	b2db      	uxtb	r3, r3
 8002722:	4619      	mov	r1, r3
 8002724:	4813      	ldr	r0, [pc, #76]	; (8002774 <SX126xWriteRegisters+0x84>)
 8002726:	f7ff ff0d 	bl	8002544 <HALSpiInOut>
    HALSpiInOut(&hspi1, address & 0x00FF );
 800272a:	88fb      	ldrh	r3, [r7, #6]
 800272c:	b2db      	uxtb	r3, r3
 800272e:	4619      	mov	r1, r3
 8002730:	4810      	ldr	r0, [pc, #64]	; (8002774 <SX126xWriteRegisters+0x84>)
 8002732:	f7ff ff07 	bl	8002544 <HALSpiInOut>
    
    for( i = 0; i < size; i++ )
 8002736:	2300      	movs	r3, #0
 8002738:	81fb      	strh	r3, [r7, #14]
 800273a:	e00a      	b.n	8002752 <SX126xWriteRegisters+0x62>
    {
        HALSpiInOut(&hspi1,buffer[i] );
 800273c:	89fb      	ldrh	r3, [r7, #14]
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	4413      	add	r3, r2
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	4619      	mov	r1, r3
 8002746:	480b      	ldr	r0, [pc, #44]	; (8002774 <SX126xWriteRegisters+0x84>)
 8002748:	f7ff fefc 	bl	8002544 <HALSpiInOut>
    for( i = 0; i < size; i++ )
 800274c:	89fb      	ldrh	r3, [r7, #14]
 800274e:	3301      	adds	r3, #1
 8002750:	81fb      	strh	r3, [r7, #14]
 8002752:	89fa      	ldrh	r2, [r7, #14]
 8002754:	88bb      	ldrh	r3, [r7, #4]
 8002756:	429a      	cmp	r2, r3
 8002758:	d3f0      	bcc.n	800273c <SX126xWriteRegisters+0x4c>
    }


    HAL_GPIO_WritePin( SPI_CSS_Pin_GPIO_Port, SPI_CSS_Pin_Pin,GPIO_PIN_SET);
 800275a:	2201      	movs	r2, #1
 800275c:	2110      	movs	r1, #16
 800275e:	4804      	ldr	r0, [pc, #16]	; (8002770 <SX126xWriteRegisters+0x80>)
 8002760:	f002 fde0 	bl	8005324 <HAL_GPIO_WritePin>

    SX126xWaitOnBusy( );
 8002764:	f7ff ff22 	bl	80025ac <SX126xWaitOnBusy>
}
 8002768:	bf00      	nop
 800276a:	3710      	adds	r7, #16
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	40020000 	.word	0x40020000
 8002774:	200005d0 	.word	0x200005d0

08002778 <SX126xWriteRegister>:

void SX126xWriteRegister( uint16_t address, uint8_t value )
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	4603      	mov	r3, r0
 8002780:	460a      	mov	r2, r1
 8002782:	80fb      	strh	r3, [r7, #6]
 8002784:	4613      	mov	r3, r2
 8002786:	717b      	strb	r3, [r7, #5]
    SX126xWriteRegisters( address, &value, 1 );
 8002788:	1d79      	adds	r1, r7, #5
 800278a:	88fb      	ldrh	r3, [r7, #6]
 800278c:	2201      	movs	r2, #1
 800278e:	4618      	mov	r0, r3
 8002790:	f7ff ffae 	bl	80026f0 <SX126xWriteRegisters>
}
 8002794:	bf00      	nop
 8002796:	3708      	adds	r7, #8
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <SX126xReadRegisters>:

void SX126xReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800279c:	b590      	push	{r4, r7, lr}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	4603      	mov	r3, r0
 80027a4:	6039      	str	r1, [r7, #0]
 80027a6:	80fb      	strh	r3, [r7, #6]
 80027a8:	4613      	mov	r3, r2
 80027aa:	80bb      	strh	r3, [r7, #4]
	uint16_t i = 0;
 80027ac:	2300      	movs	r3, #0
 80027ae:	81fb      	strh	r3, [r7, #14]
    SX126xCheckDeviceReady( );
 80027b0:	f000 f91a 	bl	80029e8 <SX126xCheckDeviceReady>

    HAL_GPIO_WritePin( SPI_CSS_Pin_GPIO_Port, SPI_CSS_Pin_Pin,GPIO_PIN_RESET);
 80027b4:	2200      	movs	r2, #0
 80027b6:	2110      	movs	r1, #16
 80027b8:	481b      	ldr	r0, [pc, #108]	; (8002828 <SX126xReadRegisters+0x8c>)
 80027ba:	f002 fdb3 	bl	8005324 <HAL_GPIO_WritePin>

    HALSpiInOut(&hspi1,RADIO_READ_REGISTER );
 80027be:	211d      	movs	r1, #29
 80027c0:	481a      	ldr	r0, [pc, #104]	; (800282c <SX126xReadRegisters+0x90>)
 80027c2:	f7ff febf 	bl	8002544 <HALSpiInOut>
    HALSpiInOut(&hspi1,( address & 0xFF00 ) >> 8 );
 80027c6:	88fb      	ldrh	r3, [r7, #6]
 80027c8:	0a1b      	lsrs	r3, r3, #8
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	4619      	mov	r1, r3
 80027d0:	4816      	ldr	r0, [pc, #88]	; (800282c <SX126xReadRegisters+0x90>)
 80027d2:	f7ff feb7 	bl	8002544 <HALSpiInOut>
    HALSpiInOut(&hspi1, address & 0x00FF );
 80027d6:	88fb      	ldrh	r3, [r7, #6]
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	4619      	mov	r1, r3
 80027dc:	4813      	ldr	r0, [pc, #76]	; (800282c <SX126xReadRegisters+0x90>)
 80027de:	f7ff feb1 	bl	8002544 <HALSpiInOut>
    HALSpiInOut(&hspi1, 0 );
 80027e2:	2100      	movs	r1, #0
 80027e4:	4811      	ldr	r0, [pc, #68]	; (800282c <SX126xReadRegisters+0x90>)
 80027e6:	f7ff fead 	bl	8002544 <HALSpiInOut>
    for( i = 0; i < size; i++ )
 80027ea:	2300      	movs	r3, #0
 80027ec:	81fb      	strh	r3, [r7, #14]
 80027ee:	e00b      	b.n	8002808 <SX126xReadRegisters+0x6c>
    {
        buffer[i] = HALSpiInOut(&hspi1,0 );
 80027f0:	89fb      	ldrh	r3, [r7, #14]
 80027f2:	683a      	ldr	r2, [r7, #0]
 80027f4:	18d4      	adds	r4, r2, r3
 80027f6:	2100      	movs	r1, #0
 80027f8:	480c      	ldr	r0, [pc, #48]	; (800282c <SX126xReadRegisters+0x90>)
 80027fa:	f7ff fea3 	bl	8002544 <HALSpiInOut>
 80027fe:	4603      	mov	r3, r0
 8002800:	7023      	strb	r3, [r4, #0]
    for( i = 0; i < size; i++ )
 8002802:	89fb      	ldrh	r3, [r7, #14]
 8002804:	3301      	adds	r3, #1
 8002806:	81fb      	strh	r3, [r7, #14]
 8002808:	89fa      	ldrh	r2, [r7, #14]
 800280a:	88bb      	ldrh	r3, [r7, #4]
 800280c:	429a      	cmp	r2, r3
 800280e:	d3ef      	bcc.n	80027f0 <SX126xReadRegisters+0x54>
    }

    HAL_GPIO_WritePin( SPI_CSS_Pin_GPIO_Port, SPI_CSS_Pin_Pin,GPIO_PIN_SET);
 8002810:	2201      	movs	r2, #1
 8002812:	2110      	movs	r1, #16
 8002814:	4804      	ldr	r0, [pc, #16]	; (8002828 <SX126xReadRegisters+0x8c>)
 8002816:	f002 fd85 	bl	8005324 <HAL_GPIO_WritePin>

    SX126xWaitOnBusy( );
 800281a:	f7ff fec7 	bl	80025ac <SX126xWaitOnBusy>
}
 800281e:	bf00      	nop
 8002820:	3714      	adds	r7, #20
 8002822:	46bd      	mov	sp, r7
 8002824:	bd90      	pop	{r4, r7, pc}
 8002826:	bf00      	nop
 8002828:	40020000 	.word	0x40020000
 800282c:	200005d0 	.word	0x200005d0

08002830 <SX126xReadRegister>:

uint8_t SX126xReadRegister( uint16_t address )
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	4603      	mov	r3, r0
 8002838:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    SX126xReadRegisters( address, &data, 1 );
 800283a:	f107 010f 	add.w	r1, r7, #15
 800283e:	88fb      	ldrh	r3, [r7, #6]
 8002840:	2201      	movs	r2, #1
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff ffaa 	bl	800279c <SX126xReadRegisters>
    return data;
 8002848:	7bfb      	ldrb	r3, [r7, #15]
}
 800284a:	4618      	mov	r0, r3
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
	...

08002854 <SX126xWriteBuffer>:

void SX126xWriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	4603      	mov	r3, r0
 800285c:	6039      	str	r1, [r7, #0]
 800285e:	71fb      	strb	r3, [r7, #7]
 8002860:	4613      	mov	r3, r2
 8002862:	71bb      	strb	r3, [r7, #6]
	uint16_t i = 0;
 8002864:	2300      	movs	r3, #0
 8002866:	81fb      	strh	r3, [r7, #14]
    SX126xCheckDeviceReady( );
 8002868:	f000 f8be 	bl	80029e8 <SX126xCheckDeviceReady>

    HAL_GPIO_WritePin( SPI_CSS_Pin_GPIO_Port, SPI_CSS_Pin_Pin,GPIO_PIN_RESET);
 800286c:	2200      	movs	r2, #0
 800286e:	2110      	movs	r1, #16
 8002870:	4814      	ldr	r0, [pc, #80]	; (80028c4 <SX126xWriteBuffer+0x70>)
 8002872:	f002 fd57 	bl	8005324 <HAL_GPIO_WritePin>
    
    HALSpiInOut(&hspi1, RADIO_WRITE_BUFFER );
 8002876:	210e      	movs	r1, #14
 8002878:	4813      	ldr	r0, [pc, #76]	; (80028c8 <SX126xWriteBuffer+0x74>)
 800287a:	f7ff fe63 	bl	8002544 <HALSpiInOut>
    HALSpiInOut(&hspi1, offset );
 800287e:	79fb      	ldrb	r3, [r7, #7]
 8002880:	4619      	mov	r1, r3
 8002882:	4811      	ldr	r0, [pc, #68]	; (80028c8 <SX126xWriteBuffer+0x74>)
 8002884:	f7ff fe5e 	bl	8002544 <HALSpiInOut>
    for( i = 0; i < size; i++ )
 8002888:	2300      	movs	r3, #0
 800288a:	81fb      	strh	r3, [r7, #14]
 800288c:	e00a      	b.n	80028a4 <SX126xWriteBuffer+0x50>
    {
        HALSpiInOut(&hspi1, buffer[i] );
 800288e:	89fb      	ldrh	r3, [r7, #14]
 8002890:	683a      	ldr	r2, [r7, #0]
 8002892:	4413      	add	r3, r2
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	4619      	mov	r1, r3
 8002898:	480b      	ldr	r0, [pc, #44]	; (80028c8 <SX126xWriteBuffer+0x74>)
 800289a:	f7ff fe53 	bl	8002544 <HALSpiInOut>
    for( i = 0; i < size; i++ )
 800289e:	89fb      	ldrh	r3, [r7, #14]
 80028a0:	3301      	adds	r3, #1
 80028a2:	81fb      	strh	r3, [r7, #14]
 80028a4:	79bb      	ldrb	r3, [r7, #6]
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	89fa      	ldrh	r2, [r7, #14]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d3ef      	bcc.n	800288e <SX126xWriteBuffer+0x3a>
    }

    HAL_GPIO_WritePin( SPI_CSS_Pin_GPIO_Port, SPI_CSS_Pin_Pin,GPIO_PIN_SET);
 80028ae:	2201      	movs	r2, #1
 80028b0:	2110      	movs	r1, #16
 80028b2:	4804      	ldr	r0, [pc, #16]	; (80028c4 <SX126xWriteBuffer+0x70>)
 80028b4:	f002 fd36 	bl	8005324 <HAL_GPIO_WritePin>

    SX126xWaitOnBusy( );
 80028b8:	f7ff fe78 	bl	80025ac <SX126xWaitOnBusy>
}
 80028bc:	bf00      	nop
 80028be:	3710      	adds	r7, #16
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	40020000 	.word	0x40020000
 80028c8:	200005d0 	.word	0x200005d0

080028cc <SX126xReadBuffer>:

void SX126xReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 80028cc:	b590      	push	{r4, r7, lr}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	4603      	mov	r3, r0
 80028d4:	6039      	str	r1, [r7, #0]
 80028d6:	71fb      	strb	r3, [r7, #7]
 80028d8:	4613      	mov	r3, r2
 80028da:	71bb      	strb	r3, [r7, #6]
	uint16_t i = 0;
 80028dc:	2300      	movs	r3, #0
 80028de:	81fb      	strh	r3, [r7, #14]
	
    SX126xCheckDeviceReady( );
 80028e0:	f000 f882 	bl	80029e8 <SX126xCheckDeviceReady>

    HAL_GPIO_WritePin( SPI_CSS_Pin_GPIO_Port, SPI_CSS_Pin_Pin,GPIO_PIN_RESET);
 80028e4:	2200      	movs	r2, #0
 80028e6:	2110      	movs	r1, #16
 80028e8:	4817      	ldr	r0, [pc, #92]	; (8002948 <SX126xReadBuffer+0x7c>)
 80028ea:	f002 fd1b 	bl	8005324 <HAL_GPIO_WritePin>

    HALSpiInOut(&hspi1,  RADIO_READ_BUFFER );
 80028ee:	211e      	movs	r1, #30
 80028f0:	4816      	ldr	r0, [pc, #88]	; (800294c <SX126xReadBuffer+0x80>)
 80028f2:	f7ff fe27 	bl	8002544 <HALSpiInOut>
    HALSpiInOut(&hspi1,  offset );
 80028f6:	79fb      	ldrb	r3, [r7, #7]
 80028f8:	4619      	mov	r1, r3
 80028fa:	4814      	ldr	r0, [pc, #80]	; (800294c <SX126xReadBuffer+0x80>)
 80028fc:	f7ff fe22 	bl	8002544 <HALSpiInOut>
    HALSpiInOut(&hspi1,  0 );
 8002900:	2100      	movs	r1, #0
 8002902:	4812      	ldr	r0, [pc, #72]	; (800294c <SX126xReadBuffer+0x80>)
 8002904:	f7ff fe1e 	bl	8002544 <HALSpiInOut>
    for( i = 0; i < size; i++ )
 8002908:	2300      	movs	r3, #0
 800290a:	81fb      	strh	r3, [r7, #14]
 800290c:	e00b      	b.n	8002926 <SX126xReadBuffer+0x5a>
    {
        buffer[i] = HALSpiInOut(&hspi1, 0 );
 800290e:	89fb      	ldrh	r3, [r7, #14]
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	18d4      	adds	r4, r2, r3
 8002914:	2100      	movs	r1, #0
 8002916:	480d      	ldr	r0, [pc, #52]	; (800294c <SX126xReadBuffer+0x80>)
 8002918:	f7ff fe14 	bl	8002544 <HALSpiInOut>
 800291c:	4603      	mov	r3, r0
 800291e:	7023      	strb	r3, [r4, #0]
    for( i = 0; i < size; i++ )
 8002920:	89fb      	ldrh	r3, [r7, #14]
 8002922:	3301      	adds	r3, #1
 8002924:	81fb      	strh	r3, [r7, #14]
 8002926:	79bb      	ldrb	r3, [r7, #6]
 8002928:	b29b      	uxth	r3, r3
 800292a:	89fa      	ldrh	r2, [r7, #14]
 800292c:	429a      	cmp	r2, r3
 800292e:	d3ee      	bcc.n	800290e <SX126xReadBuffer+0x42>
    }

    HAL_GPIO_WritePin( SPI_CSS_Pin_GPIO_Port, SPI_CSS_Pin_Pin,GPIO_PIN_SET);
 8002930:	2201      	movs	r2, #1
 8002932:	2110      	movs	r1, #16
 8002934:	4804      	ldr	r0, [pc, #16]	; (8002948 <SX126xReadBuffer+0x7c>)
 8002936:	f002 fcf5 	bl	8005324 <HAL_GPIO_WritePin>
    
    SX126xWaitOnBusy( );
 800293a:	f7ff fe37 	bl	80025ac <SX126xWaitOnBusy>
}
 800293e:	bf00      	nop
 8002940:	3714      	adds	r7, #20
 8002942:	46bd      	mov	sp, r7
 8002944:	bd90      	pop	{r4, r7, pc}
 8002946:	bf00      	nop
 8002948:	40020000 	.word	0x40020000
 800294c:	200005d0 	.word	0x200005d0

08002950 <SX126xSetRfTxPower>:

void SX126xSetRfTxPower( int8_t power )
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	4603      	mov	r3, r0
 8002958:	71fb      	strb	r3, [r7, #7]
    SX126xSetTxParams( power, RADIO_RAMP_40_US );
 800295a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295e:	2102      	movs	r1, #2
 8002960:	4618      	mov	r0, r3
 8002962:	f000 fb4f 	bl	8003004 <SX126xSetTxParams>
}
 8002966:	bf00      	nop
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <SX126xGetPaSelect>:

uint8_t SX126xGetPaSelect( uint32_t channel )
{
 800296e:	b480      	push	{r7}
 8002970:	b083      	sub	sp, #12
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
//    else
//    {
//        return SX1262;
//    }
  
  return SX1262;
 8002976:	2302      	movs	r3, #2
}
 8002978:	4618      	mov	r0, r3
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <SX126xAntSwOn>:

void SX126xAntSwOn( void )
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
    //GpioInit( &AntPow, ANT_SWITCH_POWER, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 1 );
}
 8002988:	bf00      	nop
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr

08002992 <SX126xAntSwOff>:

void SX126xAntSwOff( void )
{
 8002992:	b480      	push	{r7}
 8002994:	af00      	add	r7, sp, #0
   // GpioInit( &AntPow, ANT_SWITCH_POWER, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
}
 8002996:	bf00      	nop
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <SX126xInit>:
 */
void SX126xProcessIrqs( void );


void SX126xInit( DioIrqHandler dioIrq )
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
    SX126xReset( );
 80029a8:	f7ff fde4 	bl	8002574 <SX126xReset>
    SX126xWakeup( );
 80029ac:	f7ff fe0e 	bl	80025cc <SX126xWakeup>
    SX126xSetStandby( STDBY_RC );
 80029b0:	2000      	movs	r0, #0
 80029b2:	f000 f90b 	bl	8002bcc <SX126xSetStandby>
    calibParam.Value = 0x7F;    
    SX126xCalibrate( calibParam );

#endif
    
    SX126xSetDio2AsRfSwitchCtrl( true );
 80029b6:	2001      	movs	r0, #1
 80029b8:	f000 faaf 	bl	8002f1a <SX126xSetDio2AsRfSwitchCtrl>
    OperatingMode = MODE_STDBY_RC;
 80029bc:	4b03      	ldr	r3, [pc, #12]	; (80029cc <SX126xInit+0x2c>)
 80029be:	2201      	movs	r2, #1
 80029c0:	701a      	strb	r2, [r3, #0]
}
 80029c2:	bf00      	nop
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	200001cc 	.word	0x200001cc

080029d0 <SX126xGetOperatingMode>:

RadioOperatingModes_t SX126xGetOperatingMode( void )
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
    return OperatingMode;
 80029d4:	4b03      	ldr	r3, [pc, #12]	; (80029e4 <SX126xGetOperatingMode+0x14>)
 80029d6:	781b      	ldrb	r3, [r3, #0]
}
 80029d8:	4618      	mov	r0, r3
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	200001cc 	.word	0x200001cc

080029e8 <SX126xCheckDeviceReady>:

void SX126xCheckDeviceReady( void )
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
    if( ( SX126xGetOperatingMode( ) == MODE_SLEEP ) || ( SX126xGetOperatingMode( ) == MODE_RX_DC ) )
 80029ec:	f7ff fff0 	bl	80029d0 <SX126xGetOperatingMode>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d004      	beq.n	8002a00 <SX126xCheckDeviceReady+0x18>
 80029f6:	f7ff ffeb 	bl	80029d0 <SX126xGetOperatingMode>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b06      	cmp	r3, #6
 80029fe:	d103      	bne.n	8002a08 <SX126xCheckDeviceReady+0x20>
    {
        SX126xWakeup( );
 8002a00:	f7ff fde4 	bl	80025cc <SX126xWakeup>
        // Switch is turned off when device is in sleep mode and turned on is all other modes
        SX126xAntSwOn( );
 8002a04:	f7ff ffbe 	bl	8002984 <SX126xAntSwOn>
    }
    SX126xWaitOnBusy( );
 8002a08:	f7ff fdd0 	bl	80025ac <SX126xWaitOnBusy>
}
 8002a0c:	bf00      	nop
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <SX126xSetPayload>:

void SX126xSetPayload( uint8_t *payload, uint8_t size )
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	460b      	mov	r3, r1
 8002a1a:	70fb      	strb	r3, [r7, #3]
    SX126xWriteBuffer( 0x00, payload, size );
 8002a1c:	78fb      	ldrb	r3, [r7, #3]
 8002a1e:	461a      	mov	r2, r3
 8002a20:	6879      	ldr	r1, [r7, #4]
 8002a22:	2000      	movs	r0, #0
 8002a24:	f7ff ff16 	bl	8002854 <SX126xWriteBuffer>
}
 8002a28:	bf00      	nop
 8002a2a:	3708      	adds	r7, #8
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <SX126xGetPayload>:

uint8_t SX126xGetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b086      	sub	sp, #24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	75fb      	strb	r3, [r7, #23]

    SX126xGetRxBufferStatus( size, &offset );
 8002a42:	f107 0317 	add.w	r3, r7, #23
 8002a46:	4619      	mov	r1, r3
 8002a48:	68b8      	ldr	r0, [r7, #8]
 8002a4a:	f000 fcbd 	bl	80033c8 <SX126xGetRxBufferStatus>
    if( *size > maxSize )
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	79fa      	ldrb	r2, [r7, #7]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d201      	bcs.n	8002a5c <SX126xGetPayload+0x2c>
    {
        return 1;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e007      	b.n	8002a6c <SX126xGetPayload+0x3c>
    }
    SX126xReadBuffer( offset, buffer, *size );
 8002a5c:	7df8      	ldrb	r0, [r7, #23]
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	461a      	mov	r2, r3
 8002a64:	68f9      	ldr	r1, [r7, #12]
 8002a66:	f7ff ff31 	bl	80028cc <SX126xReadBuffer>
    return 0;
 8002a6a:	2300      	movs	r3, #0
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3718      	adds	r7, #24
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <SX126xSendPayload>:

void SX126xSendPayload( uint8_t *payload, uint8_t size, uint32_t timeout )
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	607a      	str	r2, [r7, #4]
 8002a80:	72fb      	strb	r3, [r7, #11]
    SX126xSetPayload( payload, size );
 8002a82:	7afb      	ldrb	r3, [r7, #11]
 8002a84:	4619      	mov	r1, r3
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	f7ff ffc2 	bl	8002a10 <SX126xSetPayload>
    SX126xSetTx( timeout );
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 f8b9 	bl	8002c04 <SX126xSetTx>
}
 8002a92:	bf00      	nop
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <SX126xSetSyncWord>:

uint8_t SX126xSetSyncWord( uint8_t *syncWord )
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b082      	sub	sp, #8
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
    SX126xWriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8002aa2:	2208      	movs	r2, #8
 8002aa4:	6879      	ldr	r1, [r7, #4]
 8002aa6:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 8002aaa:	f7ff fe21 	bl	80026f0 <SX126xWriteRegisters>
    return 0;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3708      	adds	r7, #8
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <SX126xSetCrcSeed>:

void SX126xSetCrcSeed( uint16_t seed )
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	4603      	mov	r3, r0
 8002ac0:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8002ac2:	88fb      	ldrh	r3, [r7, #6]
 8002ac4:	0a1b      	lsrs	r3, r3, #8
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8002acc:	88fb      	ldrh	r3, [r7, #6]
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	737b      	strb	r3, [r7, #13]

    switch( SX126xGetPacketType( ) )
 8002ad2:	f000 fa8b 	bl	8002fec <SX126xGetPacketType>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d108      	bne.n	8002aee <SX126xSetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SX126xWriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8002adc:	f107 030c 	add.w	r3, r7, #12
 8002ae0:	2202      	movs	r2, #2
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8002ae8:	f7ff fe02 	bl	80026f0 <SX126xWriteRegisters>
            break;
 8002aec:	e000      	b.n	8002af0 <SX126xSetCrcSeed+0x38>

        default:
            break;
 8002aee:	bf00      	nop
    }
}
 8002af0:	bf00      	nop
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <SX126xSetCrcPolynomial>:

void SX126xSetCrcPolynomial( uint16_t polynomial )
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	4603      	mov	r3, r0
 8002b00:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8002b02:	88fb      	ldrh	r3, [r7, #6]
 8002b04:	0a1b      	lsrs	r3, r3, #8
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8002b0c:	88fb      	ldrh	r3, [r7, #6]
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	737b      	strb	r3, [r7, #13]

    switch( SX126xGetPacketType( ) )
 8002b12:	f000 fa6b 	bl	8002fec <SX126xGetPacketType>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d108      	bne.n	8002b2e <SX126xSetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SX126xWriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8002b1c:	f107 030c 	add.w	r3, r7, #12
 8002b20:	2202      	movs	r2, #2
 8002b22:	4619      	mov	r1, r3
 8002b24:	f240 60be 	movw	r0, #1726	; 0x6be
 8002b28:	f7ff fde2 	bl	80026f0 <SX126xWriteRegisters>
            break;
 8002b2c:	e000      	b.n	8002b30 <SX126xSetCrcPolynomial+0x38>

        default:
            break;
 8002b2e:	bf00      	nop
    }
}
 8002b30:	bf00      	nop
 8002b32:	3710      	adds	r7, #16
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <SX126xSetWhiteningSeed>:

void SX126xSetWhiteningSeed( uint16_t seed )
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	4603      	mov	r3, r0
 8002b40:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 8002b42:	2300      	movs	r3, #0
 8002b44:	73fb      	strb	r3, [r7, #15]
    
    switch( SX126xGetPacketType( ) )
 8002b46:	f000 fa51 	bl	8002fec <SX126xGetPacketType>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d121      	bne.n	8002b94 <SX126xSetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SX126xReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8002b50:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8002b54:	f7ff fe6c 	bl	8002830 <SX126xReadRegister>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	f023 0301 	bic.w	r3, r3, #1
 8002b5e:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8002b60:	88fb      	ldrh	r3, [r7, #6]
 8002b62:	0a1b      	lsrs	r3, r3, #8
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	b25b      	sxtb	r3, r3
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	b25a      	sxtb	r2, r3
 8002b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	b25b      	sxtb	r3, r3
 8002b76:	73fb      	strb	r3, [r7, #15]
            SX126xWriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8002b78:	7bfb      	ldrb	r3, [r7, #15]
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8002b80:	f7ff fdfa 	bl	8002778 <SX126xWriteRegister>
            SX126xWriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, ( uint8_t )seed );
 8002b84:	88fb      	ldrh	r3, [r7, #6]
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	4619      	mov	r1, r3
 8002b8a:	f240 60b9 	movw	r0, #1721	; 0x6b9
 8002b8e:	f7ff fdf3 	bl	8002778 <SX126xWriteRegister>
            break;
 8002b92:	e000      	b.n	8002b96 <SX126xSetWhiteningSeed+0x5e>

        default:
            break;
 8002b94:	bf00      	nop
    }
}
 8002b96:	bf00      	nop
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
	...

08002ba0 <SX126xSetSleep>:

    return ( buf[0] << 24 ) | ( buf[1] << 16 ) | ( buf[2] << 8 ) | buf[3];
}

void SX126xSetSleep( SleepParams_t sleepConfig )
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	7138      	strb	r0, [r7, #4]
    SX126xAntSwOff( );
 8002ba8:	f7ff fef3 	bl	8002992 <SX126xAntSwOff>

    SX126xWriteCommand( RADIO_SET_SLEEP, &sleepConfig.Value, 1 );
 8002bac:	1d3b      	adds	r3, r7, #4
 8002bae:	2201      	movs	r2, #1
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	2084      	movs	r0, #132	; 0x84
 8002bb4:	f7ff fd26 	bl	8002604 <SX126xWriteCommand>
    OperatingMode = MODE_SLEEP;
 8002bb8:	4b03      	ldr	r3, [pc, #12]	; (8002bc8 <SX126xSetSleep+0x28>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	701a      	strb	r2, [r3, #0]
}
 8002bbe:	bf00      	nop
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	200001cc 	.word	0x200001cc

08002bcc <SX126xSetStandby>:

void SX126xSetStandby( RadioStandbyModes_t standbyConfig )
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	71fb      	strb	r3, [r7, #7]
    SX126xWriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8002bd6:	1dfb      	adds	r3, r7, #7
 8002bd8:	2201      	movs	r2, #1
 8002bda:	4619      	mov	r1, r3
 8002bdc:	2080      	movs	r0, #128	; 0x80
 8002bde:	f7ff fd11 	bl	8002604 <SX126xWriteCommand>
    if( standbyConfig == STDBY_RC )
 8002be2:	79fb      	ldrb	r3, [r7, #7]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d103      	bne.n	8002bf0 <SX126xSetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8002be8:	4b05      	ldr	r3, [pc, #20]	; (8002c00 <SX126xSetStandby+0x34>)
 8002bea:	2201      	movs	r2, #1
 8002bec:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8002bee:	e002      	b.n	8002bf6 <SX126xSetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8002bf0:	4b03      	ldr	r3, [pc, #12]	; (8002c00 <SX126xSetStandby+0x34>)
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	701a      	strb	r2, [r3, #0]
}
 8002bf6:	bf00      	nop
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	200001cc 	.word	0x200001cc

08002c04 <SX126xSetTx>:
    SX126xWriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SX126xSetTx( uint32_t timeout )
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8002c0c:	4b0c      	ldr	r3, [pc, #48]	; (8002c40 <SX126xSetTx+0x3c>)
 8002c0e:	2204      	movs	r2, #4
 8002c10:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	0c1b      	lsrs	r3, r3, #16
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	0a1b      	lsrs	r3, r3, #8
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	73bb      	strb	r3, [r7, #14]
    SX126xWriteCommand( RADIO_SET_TX, buf, 3 );
 8002c28:	f107 030c 	add.w	r3, r7, #12
 8002c2c:	2203      	movs	r2, #3
 8002c2e:	4619      	mov	r1, r3
 8002c30:	2083      	movs	r0, #131	; 0x83
 8002c32:	f7ff fce7 	bl	8002604 <SX126xWriteCommand>
}
 8002c36:	bf00      	nop
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	200001cc 	.word	0x200001cc

08002c44 <SX126xSetRx>:

void SX126xSetRx( uint32_t timeout )
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8002c4c:	4b0c      	ldr	r3, [pc, #48]	; (8002c80 <SX126xSetRx+0x3c>)
 8002c4e:	2205      	movs	r2, #5
 8002c50:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	0c1b      	lsrs	r3, r3, #16
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	0a1b      	lsrs	r3, r3, #8
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	73bb      	strb	r3, [r7, #14]
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
 8002c68:	f107 030c 	add.w	r3, r7, #12
 8002c6c:	2203      	movs	r2, #3
 8002c6e:	4619      	mov	r1, r3
 8002c70:	2082      	movs	r0, #130	; 0x82
 8002c72:	f7ff fcc7 	bl	8002604 <SX126xWriteCommand>
}
 8002c76:	bf00      	nop
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	200001cc 	.word	0x200001cc

08002c84 <SX126xSetRxBoosted>:

void SX126xSetRxBoosted( uint32_t timeout )
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8002c8c:	4b0e      	ldr	r3, [pc, #56]	; (8002cc8 <SX126xSetRxBoosted+0x44>)
 8002c8e:	2205      	movs	r2, #5
 8002c90:	701a      	strb	r2, [r3, #0]

    SX126xWriteRegister( REG_RX_GAIN, 0x96 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensivity
 8002c92:	2196      	movs	r1, #150	; 0x96
 8002c94:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8002c98:	f7ff fd6e 	bl	8002778 <SX126xWriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	0c1b      	lsrs	r3, r3, #16
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	0a1b      	lsrs	r3, r3, #8
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	73bb      	strb	r3, [r7, #14]
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
 8002cb2:	f107 030c 	add.w	r3, r7, #12
 8002cb6:	2203      	movs	r2, #3
 8002cb8:	4619      	mov	r1, r3
 8002cba:	2082      	movs	r0, #130	; 0x82
 8002cbc:	f7ff fca2 	bl	8002604 <SX126xWriteCommand>
}
 8002cc0:	bf00      	nop
 8002cc2:	3710      	adds	r7, #16
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	200001cc 	.word	0x200001cc

08002ccc <SX126xSetRxDutyCycle>:

void SX126xSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	0c1b      	lsrs	r3, r3, #16
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	0a1b      	lsrs	r3, r3, #8
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	0c1b      	lsrs	r3, r3, #16
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	0a1b      	lsrs	r3, r3, #8
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	737b      	strb	r3, [r7, #13]
    SX126xWriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8002d02:	f107 0308 	add.w	r3, r7, #8
 8002d06:	2206      	movs	r2, #6
 8002d08:	4619      	mov	r1, r3
 8002d0a:	2094      	movs	r0, #148	; 0x94
 8002d0c:	f7ff fc7a 	bl	8002604 <SX126xWriteCommand>
    OperatingMode = MODE_RX_DC;
 8002d10:	4b03      	ldr	r3, [pc, #12]	; (8002d20 <SX126xSetRxDutyCycle+0x54>)
 8002d12:	2206      	movs	r2, #6
 8002d14:	701a      	strb	r2, [r3, #0]
}
 8002d16:	bf00      	nop
 8002d18:	3710      	adds	r7, #16
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	200001cc 	.word	0x200001cc

08002d24 <SX126xSetCad>:

void SX126xSetCad( void )
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
    SX126xWriteCommand( RADIO_SET_CAD, 0, 0 );
 8002d28:	2200      	movs	r2, #0
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	20c5      	movs	r0, #197	; 0xc5
 8002d2e:	f7ff fc69 	bl	8002604 <SX126xWriteCommand>
    OperatingMode = MODE_CAD;
 8002d32:	4b02      	ldr	r3, [pc, #8]	; (8002d3c <SX126xSetCad+0x18>)
 8002d34:	2207      	movs	r2, #7
 8002d36:	701a      	strb	r2, [r3, #0]
}
 8002d38:	bf00      	nop
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	200001cc 	.word	0x200001cc

08002d40 <SX126xSetTxContinuousWave>:

void SX126xSetTxContinuousWave( void )
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
    SX126xWriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8002d44:	2200      	movs	r2, #0
 8002d46:	2100      	movs	r1, #0
 8002d48:	20d1      	movs	r0, #209	; 0xd1
 8002d4a:	f7ff fc5b 	bl	8002604 <SX126xWriteCommand>
}
 8002d4e:	bf00      	nop
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <SX126xSetStopRxTimerOnPreambleDetect>:
{
    SX126xWriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
}

void SX126xSetStopRxTimerOnPreambleDetect( bool enable )
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b082      	sub	sp, #8
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	4603      	mov	r3, r0
 8002d5a:	71fb      	strb	r3, [r7, #7]
    SX126xWriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8002d5c:	1dfb      	adds	r3, r7, #7
 8002d5e:	2201      	movs	r2, #1
 8002d60:	4619      	mov	r1, r3
 8002d62:	209f      	movs	r0, #159	; 0x9f
 8002d64:	f7ff fc4e 	bl	8002604 <SX126xWriteCommand>
}
 8002d68:	bf00      	nop
 8002d6a:	3708      	adds	r7, #8
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <SX126xSetLoRaSymbNumTimeout>:

void SX126xSetLoRaSymbNumTimeout( uint8_t SymbNum )
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	4603      	mov	r3, r0
 8002d78:	71fb      	strb	r3, [r7, #7]
    SX126xWriteCommand( RADIO_SET_LORASYMBTIMEOUT, &SymbNum, 1 );
 8002d7a:	1dfb      	adds	r3, r7, #7
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	4619      	mov	r1, r3
 8002d80:	20a0      	movs	r0, #160	; 0xa0
 8002d82:	f7ff fc3f 	bl	8002604 <SX126xWriteCommand>
}
 8002d86:	bf00      	nop
 8002d88:	3708      	adds	r7, #8
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <SX126xSetRegulatorMode>:

void SX126xSetRegulatorMode( RadioRegulatorMode_t mode )
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b082      	sub	sp, #8
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	4603      	mov	r3, r0
 8002d96:	71fb      	strb	r3, [r7, #7]
    SX126xWriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8002d98:	1dfb      	adds	r3, r7, #7
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	2096      	movs	r0, #150	; 0x96
 8002da0:	f7ff fc30 	bl	8002604 <SX126xWriteCommand>
}
 8002da4:	bf00      	nop
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <SX126xCalibrateImage>:
{
    SX126xWriteCommand( RADIO_CALIBRATE, ( uint8_t* )&calibParam, 1 );
}

void SX126xCalibrateImage( uint32_t freq )
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4a1b      	ldr	r2, [pc, #108]	; (8002e24 <SX126xCalibrateImage+0x78>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d904      	bls.n	8002dc6 <SX126xCalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8002dbc:	23e1      	movs	r3, #225	; 0xe1
 8002dbe:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8002dc0:	23e9      	movs	r3, #233	; 0xe9
 8002dc2:	737b      	strb	r3, [r7, #13]
 8002dc4:	e022      	b.n	8002e0c <SX126xCalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a17      	ldr	r2, [pc, #92]	; (8002e28 <SX126xCalibrateImage+0x7c>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d904      	bls.n	8002dd8 <SX126xCalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 8002dce:	23d7      	movs	r3, #215	; 0xd7
 8002dd0:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xD8;
 8002dd2:	23d8      	movs	r3, #216	; 0xd8
 8002dd4:	737b      	strb	r3, [r7, #13]
 8002dd6:	e019      	b.n	8002e0c <SX126xCalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a14      	ldr	r2, [pc, #80]	; (8002e2c <SX126xCalibrateImage+0x80>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d904      	bls.n	8002dea <SX126xCalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8002de0:	23c1      	movs	r3, #193	; 0xc1
 8002de2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8002de4:	23c5      	movs	r3, #197	; 0xc5
 8002de6:	737b      	strb	r3, [r7, #13]
 8002de8:	e010      	b.n	8002e0c <SX126xCalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a10      	ldr	r2, [pc, #64]	; (8002e30 <SX126xCalibrateImage+0x84>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d904      	bls.n	8002dfc <SX126xCalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 8002df2:	2375      	movs	r3, #117	; 0x75
 8002df4:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 8002df6:	2381      	movs	r3, #129	; 0x81
 8002df8:	737b      	strb	r3, [r7, #13]
 8002dfa:	e007      	b.n	8002e0c <SX126xCalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a0d      	ldr	r2, [pc, #52]	; (8002e34 <SX126xCalibrateImage+0x88>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d903      	bls.n	8002e0c <SX126xCalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 8002e04:	236b      	movs	r3, #107	; 0x6b
 8002e06:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8002e08:	236f      	movs	r3, #111	; 0x6f
 8002e0a:	737b      	strb	r3, [r7, #13]
    }
    SX126xWriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8002e0c:	f107 030c 	add.w	r3, r7, #12
 8002e10:	2202      	movs	r2, #2
 8002e12:	4619      	mov	r1, r3
 8002e14:	2098      	movs	r0, #152	; 0x98
 8002e16:	f7ff fbf5 	bl	8002604 <SX126xWriteCommand>
}
 8002e1a:	bf00      	nop
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	35a4e900 	.word	0x35a4e900
 8002e28:	32a9f880 	.word	0x32a9f880
 8002e2c:	2de54480 	.word	0x2de54480
 8002e30:	1b6b0b00 	.word	0x1b6b0b00
 8002e34:	1954fc40 	.word	0x1954fc40

08002e38 <SX126xSetPaConfig>:

void SX126xSetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8002e38:	b590      	push	{r4, r7, lr}
 8002e3a:	b085      	sub	sp, #20
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	4604      	mov	r4, r0
 8002e40:	4608      	mov	r0, r1
 8002e42:	4611      	mov	r1, r2
 8002e44:	461a      	mov	r2, r3
 8002e46:	4623      	mov	r3, r4
 8002e48:	71fb      	strb	r3, [r7, #7]
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	71bb      	strb	r3, [r7, #6]
 8002e4e:	460b      	mov	r3, r1
 8002e50:	717b      	strb	r3, [r7, #5]
 8002e52:	4613      	mov	r3, r2
 8002e54:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 8002e56:	79fb      	ldrb	r3, [r7, #7]
 8002e58:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8002e5a:	79bb      	ldrb	r3, [r7, #6]
 8002e5c:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8002e5e:	797b      	ldrb	r3, [r7, #5]
 8002e60:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 8002e62:	793b      	ldrb	r3, [r7, #4]
 8002e64:	73fb      	strb	r3, [r7, #15]
    SX126xWriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8002e66:	f107 030c 	add.w	r3, r7, #12
 8002e6a:	2204      	movs	r2, #4
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	2095      	movs	r0, #149	; 0x95
 8002e70:	f7ff fbc8 	bl	8002604 <SX126xWriteCommand>
}
 8002e74:	bf00      	nop
 8002e76:	3714      	adds	r7, #20
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd90      	pop	{r4, r7, pc}

08002e7c <SX126xSetDioIrqParams>:
{
    SX126xWriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SX126xSetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8002e7c:	b590      	push	{r4, r7, lr}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	4604      	mov	r4, r0
 8002e84:	4608      	mov	r0, r1
 8002e86:	4611      	mov	r1, r2
 8002e88:	461a      	mov	r2, r3
 8002e8a:	4623      	mov	r3, r4
 8002e8c:	80fb      	strh	r3, [r7, #6]
 8002e8e:	4603      	mov	r3, r0
 8002e90:	80bb      	strh	r3, [r7, #4]
 8002e92:	460b      	mov	r3, r1
 8002e94:	807b      	strh	r3, [r7, #2]
 8002e96:	4613      	mov	r3, r2
 8002e98:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8002e9a:	88fb      	ldrh	r3, [r7, #6]
 8002e9c:	0a1b      	lsrs	r3, r3, #8
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8002ea4:	88fb      	ldrh	r3, [r7, #6]
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8002eaa:	88bb      	ldrh	r3, [r7, #4]
 8002eac:	0a1b      	lsrs	r3, r3, #8
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8002eb4:	88bb      	ldrh	r3, [r7, #4]
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8002eba:	887b      	ldrh	r3, [r7, #2]
 8002ebc:	0a1b      	lsrs	r3, r3, #8
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8002ec4:	887b      	ldrh	r3, [r7, #2]
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8002eca:	883b      	ldrh	r3, [r7, #0]
 8002ecc:	0a1b      	lsrs	r3, r3, #8
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8002ed4:	883b      	ldrh	r3, [r7, #0]
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	73fb      	strb	r3, [r7, #15]
    SX126xWriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8002eda:	f107 0308 	add.w	r3, r7, #8
 8002ede:	2208      	movs	r2, #8
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	2008      	movs	r0, #8
 8002ee4:	f7ff fb8e 	bl	8002604 <SX126xWriteCommand>
}
 8002ee8:	bf00      	nop
 8002eea:	3714      	adds	r7, #20
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd90      	pop	{r4, r7, pc}

08002ef0 <SX126xGetIrqStatus>:

uint16_t SX126xGetIrqStatus( void )
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
    uint8_t irqStatus[2];

    SX126xReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
 8002ef6:	1d3b      	adds	r3, r7, #4
 8002ef8:	2202      	movs	r2, #2
 8002efa:	4619      	mov	r1, r3
 8002efc:	2012      	movs	r0, #18
 8002efe:	f7ff fbbb 	bl	8002678 <SX126xReadCommand>
    return ( irqStatus[0] << 8 ) | irqStatus[1];
 8002f02:	793b      	ldrb	r3, [r7, #4]
 8002f04:	021b      	lsls	r3, r3, #8
 8002f06:	b21a      	sxth	r2, r3
 8002f08:	797b      	ldrb	r3, [r7, #5]
 8002f0a:	b21b      	sxth	r3, r3
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	b21b      	sxth	r3, r3
 8002f10:	b29b      	uxth	r3, r3
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <SX126xSetDio2AsRfSwitchCtrl>:

void SX126xSetDio2AsRfSwitchCtrl( uint8_t enable )
{
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b082      	sub	sp, #8
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	4603      	mov	r3, r0
 8002f22:	71fb      	strb	r3, [r7, #7]
    SX126xWriteCommand( RADIO_SET_RFSWITCHMODE, &enable, 1 );
 8002f24:	1dfb      	adds	r3, r7, #7
 8002f26:	2201      	movs	r2, #1
 8002f28:	4619      	mov	r1, r3
 8002f2a:	209d      	movs	r0, #157	; 0x9d
 8002f2c:	f7ff fb6a 	bl	8002604 <SX126xWriteCommand>
}
 8002f30:	bf00      	nop
 8002f32:	3708      	adds	r7, #8
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <SX126xSetRfFrequency>:

    SX126xWriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
}

void SX126xSetRfFrequency( uint32_t frequency )
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t freq = 0;
 8002f40:	2300      	movs	r3, #0
 8002f42:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 8002f44:	4b1e      	ldr	r3, [pc, #120]	; (8002fc0 <SX126xSetRfFrequency+0x88>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	f083 0301 	eor.w	r3, r3, #1
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d005      	beq.n	8002f5e <SX126xSetRfFrequency+0x26>
    {
        SX126xCalibrateImage( frequency );
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f7ff ff2a 	bl	8002dac <SX126xCalibrateImage>
        ImageCalibrated = true;
 8002f58:	4b19      	ldr	r3, [pc, #100]	; (8002fc0 <SX126xSetRfFrequency+0x88>)
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	701a      	strb	r2, [r3, #0]
    }

    freq = ( uint32_t )( ( double )frequency / ( double )FREQ_STEP );
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f7fd fa74 	bl	800044c <__aeabi_ui2d>
 8002f64:	a314      	add	r3, pc, #80	; (adr r3, 8002fb8 <SX126xSetRfFrequency+0x80>)
 8002f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f6a:	f7fd fc13 	bl	8000794 <__aeabi_ddiv>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	460b      	mov	r3, r1
 8002f72:	4610      	mov	r0, r2
 8002f74:	4619      	mov	r1, r3
 8002f76:	f7fd fd7d 	bl	8000a74 <__aeabi_d2uiz>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( freq >> 24 ) & 0xFF );
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	0e1b      	lsrs	r3, r3, #24
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( freq >> 16 ) & 0xFF );
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	0c1b      	lsrs	r3, r3, #16
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( freq >> 8 ) & 0xFF );
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	0a1b      	lsrs	r3, r3, #8
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( freq & 0xFF );
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	72fb      	strb	r3, [r7, #11]
    SX126xWriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8002f9c:	f107 0308 	add.w	r3, r7, #8
 8002fa0:	2204      	movs	r2, #4
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	2086      	movs	r0, #134	; 0x86
 8002fa6:	f7ff fb2d 	bl	8002604 <SX126xWriteCommand>
}
 8002faa:	bf00      	nop
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	f3af 8000 	nop.w
 8002fb8:	00000000 	.word	0x00000000
 8002fbc:	3fee8480 	.word	0x3fee8480
 8002fc0:	200001d4 	.word	0x200001d4

08002fc4 <SX126xSetPacketType>:

void SX126xSetPacketType( RadioPacketTypes_t packetType )
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	4603      	mov	r3, r0
 8002fcc:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8002fce:	79fa      	ldrb	r2, [r7, #7]
 8002fd0:	4b05      	ldr	r3, [pc, #20]	; (8002fe8 <SX126xSetPacketType+0x24>)
 8002fd2:	701a      	strb	r2, [r3, #0]
    SX126xWriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8002fd4:	1dfb      	adds	r3, r7, #7
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	4619      	mov	r1, r3
 8002fda:	208a      	movs	r0, #138	; 0x8a
 8002fdc:	f7ff fb12 	bl	8002604 <SX126xWriteCommand>
}
 8002fe0:	bf00      	nop
 8002fe2:	3708      	adds	r7, #8
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	200001cd 	.word	0x200001cd

08002fec <SX126xGetPacketType>:

RadioPacketTypes_t SX126xGetPacketType( void )
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
    return PacketType;
 8002ff0:	4b03      	ldr	r3, [pc, #12]	; (8003000 <SX126xGetPacketType+0x14>)
 8002ff2:	781b      	ldrb	r3, [r3, #0]
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	200001cd 	.word	0x200001cd

08003004 <SX126xSetTxParams>:

void SX126xSetTxParams( int8_t power, RadioRampTimes_t rampTime )
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	4603      	mov	r3, r0
 800300c:	460a      	mov	r2, r1
 800300e:	71fb      	strb	r3, [r7, #7]
 8003010:	4613      	mov	r3, r2
 8003012:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    if( SX126xGetPaSelect( 0 ) == SX1261 )
 8003014:	2000      	movs	r0, #0
 8003016:	f7ff fcaa 	bl	800296e <SX126xGetPaSelect>
 800301a:	4603      	mov	r3, r0
 800301c:	2b01      	cmp	r3, #1
 800301e:	d124      	bne.n	800306a <SX126xSetTxParams+0x66>
    {
        if( power == 15 )
 8003020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003024:	2b0f      	cmp	r3, #15
 8003026:	d106      	bne.n	8003036 <SX126xSetTxParams+0x32>
        {
            SX126xSetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 8003028:	2301      	movs	r3, #1
 800302a:	2201      	movs	r2, #1
 800302c:	2100      	movs	r1, #0
 800302e:	2006      	movs	r0, #6
 8003030:	f7ff ff02 	bl	8002e38 <SX126xSetPaConfig>
 8003034:	e005      	b.n	8003042 <SX126xSetTxParams+0x3e>
        }
        else
        {
            SX126xSetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 8003036:	2301      	movs	r3, #1
 8003038:	2201      	movs	r2, #1
 800303a:	2100      	movs	r1, #0
 800303c:	2004      	movs	r0, #4
 800303e:	f7ff fefb 	bl	8002e38 <SX126xSetPaConfig>
        }
        if( power >= 14 )
 8003042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003046:	2b0d      	cmp	r3, #13
 8003048:	dd02      	ble.n	8003050 <SX126xSetTxParams+0x4c>
        {
            power = 14;
 800304a:	230e      	movs	r3, #14
 800304c:	71fb      	strb	r3, [r7, #7]
 800304e:	e006      	b.n	800305e <SX126xSetTxParams+0x5a>
        }
        else if( power < -3 )
 8003050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003054:	f113 0f03 	cmn.w	r3, #3
 8003058:	da01      	bge.n	800305e <SX126xSetTxParams+0x5a>
        {
            power = -3;
 800305a:	23fd      	movs	r3, #253	; 0xfd
 800305c:	71fb      	strb	r3, [r7, #7]
        }
        SX126xWriteRegister( REG_OCP, 0x18 ); // current max is 80 mA for the whole device
 800305e:	2118      	movs	r1, #24
 8003060:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8003064:	f7ff fb88 	bl	8002778 <SX126xWriteRegister>
 8003068:	e018      	b.n	800309c <SX126xSetTxParams+0x98>
    }
    else // sx1262
    {
        SX126xSetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 800306a:	2301      	movs	r3, #1
 800306c:	2200      	movs	r2, #0
 800306e:	2107      	movs	r1, #7
 8003070:	2004      	movs	r0, #4
 8003072:	f7ff fee1 	bl	8002e38 <SX126xSetPaConfig>
        if( power > 22 )
 8003076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800307a:	2b16      	cmp	r3, #22
 800307c:	dd02      	ble.n	8003084 <SX126xSetTxParams+0x80>
        {
            power = 22;
 800307e:	2316      	movs	r3, #22
 8003080:	71fb      	strb	r3, [r7, #7]
 8003082:	e006      	b.n	8003092 <SX126xSetTxParams+0x8e>
        }
        else if( power < -3 )
 8003084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003088:	f113 0f03 	cmn.w	r3, #3
 800308c:	da01      	bge.n	8003092 <SX126xSetTxParams+0x8e>
        {
            power = -3;
 800308e:	23fd      	movs	r3, #253	; 0xfd
 8003090:	71fb      	strb	r3, [r7, #7]
        }
        SX126xWriteRegister( REG_OCP, 0x38 ); // current max 160mA for the whole device
 8003092:	2138      	movs	r1, #56	; 0x38
 8003094:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8003098:	f7ff fb6e 	bl	8002778 <SX126xWriteRegister>
    }
    buf[0] = power;
 800309c:	79fb      	ldrb	r3, [r7, #7]
 800309e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )rampTime;
 80030a0:	79bb      	ldrb	r3, [r7, #6]
 80030a2:	737b      	strb	r3, [r7, #13]
    SX126xWriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 80030a4:	f107 030c 	add.w	r3, r7, #12
 80030a8:	2202      	movs	r2, #2
 80030aa:	4619      	mov	r1, r3
 80030ac:	208e      	movs	r0, #142	; 0x8e
 80030ae:	f7ff faa9 	bl	8002604 <SX126xWriteCommand>
}
 80030b2:	bf00      	nop
 80030b4:	3710      	adds	r7, #16
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	0000      	movs	r0, r0
 80030bc:	0000      	movs	r0, r0
	...

080030c0 <SX126xSetModulationParams>:

void SX126xSetModulationParams( ModulationParams_t *modulationParams )
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 80030c8:	2300      	movs	r3, #0
 80030ca:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80030cc:	4a48      	ldr	r2, [pc, #288]	; (80031f0 <SX126xSetModulationParams+0x130>)
 80030ce:	f107 0308 	add.w	r3, r7, #8
 80030d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80030d6:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	781a      	ldrb	r2, [r3, #0]
 80030de:	4b45      	ldr	r3, [pc, #276]	; (80031f4 <SX126xSetModulationParams+0x134>)
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d004      	beq.n	80030f0 <SX126xSetModulationParams+0x30>
    {
        SX126xSetPacketType( modulationParams->PacketType );
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7ff ff6a 	bl	8002fc4 <SX126xSetPacketType>
    }

    switch( modulationParams->PacketType )
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d002      	beq.n	80030fe <SX126xSetModulationParams+0x3e>
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d056      	beq.n	80031aa <SX126xSetModulationParams+0xea>
        SX126xWriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );

        break;
    default:
    case PACKET_TYPE_NONE:
        return;
 80030fc:	e06c      	b.n	80031d8 <SX126xSetModulationParams+0x118>
        n = 8;
 80030fe:	2308      	movs	r3, #8
 8003100:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )( 32 * ( ( double )XTAL_FREQ / ( double )modulationParams->Params.Gfsk.BitRate ) );
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	4618      	mov	r0, r3
 8003108:	f7fd f9a0 	bl	800044c <__aeabi_ui2d>
 800310c:	4602      	mov	r2, r0
 800310e:	460b      	mov	r3, r1
 8003110:	a133      	add	r1, pc, #204	; (adr r1, 80031e0 <SX126xSetModulationParams+0x120>)
 8003112:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003116:	f7fd fb3d 	bl	8000794 <__aeabi_ddiv>
 800311a:	4602      	mov	r2, r0
 800311c:	460b      	mov	r3, r1
 800311e:	4610      	mov	r0, r2
 8003120:	4619      	mov	r1, r3
 8003122:	f04f 0200 	mov.w	r2, #0
 8003126:	4b34      	ldr	r3, [pc, #208]	; (80031f8 <SX126xSetModulationParams+0x138>)
 8003128:	f7fd fa0a 	bl	8000540 <__aeabi_dmul>
 800312c:	4602      	mov	r2, r0
 800312e:	460b      	mov	r3, r1
 8003130:	4610      	mov	r0, r2
 8003132:	4619      	mov	r1, r3
 8003134:	f7fd fc9e 	bl	8000a74 <__aeabi_d2uiz>
 8003138:	4603      	mov	r3, r0
 800313a:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	0c1b      	lsrs	r3, r3, #16
 8003140:	b2db      	uxtb	r3, r3
 8003142:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	0a1b      	lsrs	r3, r3, #8
 8003148:	b2db      	uxtb	r3, r3
 800314a:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	b2db      	uxtb	r3, r3
 8003150:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	7b1b      	ldrb	r3, [r3, #12]
 8003156:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	7b5b      	ldrb	r3, [r3, #13]
 800315c:	733b      	strb	r3, [r7, #12]
        tempVal = ( uint32_t )( ( double )modulationParams->Params.Gfsk.Fdev / ( double )FREQ_STEP );
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	4618      	mov	r0, r3
 8003164:	f7fd f972 	bl	800044c <__aeabi_ui2d>
 8003168:	a31f      	add	r3, pc, #124	; (adr r3, 80031e8 <SX126xSetModulationParams+0x128>)
 800316a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800316e:	f7fd fb11 	bl	8000794 <__aeabi_ddiv>
 8003172:	4602      	mov	r2, r0
 8003174:	460b      	mov	r3, r1
 8003176:	4610      	mov	r0, r2
 8003178:	4619      	mov	r1, r3
 800317a:	f7fd fc7b 	bl	8000a74 <__aeabi_d2uiz>
 800317e:	4603      	mov	r3, r0
 8003180:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	0c1b      	lsrs	r3, r3, #16
 8003186:	b2db      	uxtb	r3, r3
 8003188:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	0a1b      	lsrs	r3, r3, #8
 800318e:	b2db      	uxtb	r3, r3
 8003190:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	b2db      	uxtb	r3, r3
 8003196:	73fb      	strb	r3, [r7, #15]
        SX126xWriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8003198:	7cfb      	ldrb	r3, [r7, #19]
 800319a:	b29a      	uxth	r2, r3
 800319c:	f107 0308 	add.w	r3, r7, #8
 80031a0:	4619      	mov	r1, r3
 80031a2:	208b      	movs	r0, #139	; 0x8b
 80031a4:	f7ff fa2e 	bl	8002604 <SX126xWriteCommand>
        break;
 80031a8:	e016      	b.n	80031d8 <SX126xSetModulationParams+0x118>
        n = 4;
 80031aa:	2304      	movs	r3, #4
 80031ac:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	7c1b      	ldrb	r3, [r3, #16]
 80031b2:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	7c5b      	ldrb	r3, [r3, #17]
 80031b8:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	7c9b      	ldrb	r3, [r3, #18]
 80031be:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	7cdb      	ldrb	r3, [r3, #19]
 80031c4:	72fb      	strb	r3, [r7, #11]
        SX126xWriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80031c6:	7cfb      	ldrb	r3, [r7, #19]
 80031c8:	b29a      	uxth	r2, r3
 80031ca:	f107 0308 	add.w	r3, r7, #8
 80031ce:	4619      	mov	r1, r3
 80031d0:	208b      	movs	r0, #139	; 0x8b
 80031d2:	f7ff fa17 	bl	8002604 <SX126xWriteCommand>
        break;
 80031d6:	bf00      	nop
    }
}
 80031d8:	3718      	adds	r7, #24
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	00000000 	.word	0x00000000
 80031e4:	417e8480 	.word	0x417e8480
 80031e8:	00000000 	.word	0x00000000
 80031ec:	3fee8480 	.word	0x3fee8480
 80031f0:	08006850 	.word	0x08006850
 80031f4:	200001cd 	.word	0x200001cd
 80031f8:	40400000 	.word	0x40400000

080031fc <SX126xSetPacketParams>:

void SX126xSetPacketParams( PacketParams_t *packetParams )
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8003204:	2300      	movs	r3, #0
 8003206:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8003208:	4a3e      	ldr	r2, [pc, #248]	; (8003304 <SX126xSetPacketParams+0x108>)
 800320a:	f107 030c 	add.w	r3, r7, #12
 800320e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003210:	c303      	stmia	r3!, {r0, r1}
 8003212:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	781a      	ldrb	r2, [r3, #0]
 8003218:	4b3b      	ldr	r3, [pc, #236]	; (8003308 <SX126xSetPacketParams+0x10c>)
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	429a      	cmp	r2, r3
 800321e:	d004      	beq.n	800322a <SX126xSetPacketParams+0x2e>
    {
        SX126xSetPacketType( packetParams->PacketType );
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	4618      	mov	r0, r3
 8003226:	f7ff fecd 	bl	8002fc4 <SX126xSetPacketType>
    }

    switch( packetParams->PacketType )
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d002      	beq.n	8003238 <SX126xSetPacketParams+0x3c>
 8003232:	2b01      	cmp	r3, #1
 8003234:	d042      	beq.n	80032bc <SX126xSetPacketParams+0xc0>
        buf[4] = packetParams->Params.LoRa.CrcMode;
        buf[5] = packetParams->Params.LoRa.InvertIQ;
        break;
    default:
    case PACKET_TYPE_NONE:
        return;
 8003236:	e062      	b.n	80032fe <SX126xSetPacketParams+0x102>
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	7a5b      	ldrb	r3, [r3, #9]
 800323c:	2bf1      	cmp	r3, #241	; 0xf1
 800323e:	d10a      	bne.n	8003256 <SX126xSetPacketParams+0x5a>
            SX126xSetCrcSeed( CRC_IBM_SEED );
 8003240:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003244:	f7ff fc38 	bl	8002ab8 <SX126xSetCrcSeed>
            SX126xSetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8003248:	f248 0005 	movw	r0, #32773	; 0x8005
 800324c:	f7ff fc54 	bl	8002af8 <SX126xSetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8003250:	2302      	movs	r3, #2
 8003252:	75bb      	strb	r3, [r7, #22]
 8003254:	e011      	b.n	800327a <SX126xSetPacketParams+0x7e>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	7a5b      	ldrb	r3, [r3, #9]
 800325a:	2bf2      	cmp	r3, #242	; 0xf2
 800325c:	d10a      	bne.n	8003274 <SX126xSetPacketParams+0x78>
            SX126xSetCrcSeed( CRC_CCITT_SEED );
 800325e:	f641 500f 	movw	r0, #7439	; 0x1d0f
 8003262:	f7ff fc29 	bl	8002ab8 <SX126xSetCrcSeed>
            SX126xSetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8003266:	f241 0021 	movw	r0, #4129	; 0x1021
 800326a:	f7ff fc45 	bl	8002af8 <SX126xSetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 800326e:	2306      	movs	r3, #6
 8003270:	75bb      	strb	r3, [r7, #22]
 8003272:	e002      	b.n	800327a <SX126xSetPacketParams+0x7e>
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	7a5b      	ldrb	r3, [r3, #9]
 8003278:	75bb      	strb	r3, [r7, #22]
        n = 9;
 800327a:	2309      	movs	r3, #9
 800327c:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	885b      	ldrh	r3, [r3, #2]
 8003282:	0a1b      	lsrs	r3, r3, #8
 8003284:	b29b      	uxth	r3, r3
 8003286:	b2db      	uxtb	r3, r3
 8003288:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	885b      	ldrh	r3, [r3, #2]
 800328e:	b2db      	uxtb	r3, r3
 8003290:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	791b      	ldrb	r3, [r3, #4]
 8003296:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	795b      	ldrb	r3, [r3, #5]
 800329c:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	799b      	ldrb	r3, [r3, #6]
 80032a2:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	79db      	ldrb	r3, [r3, #7]
 80032a8:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	7a1b      	ldrb	r3, [r3, #8]
 80032ae:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 80032b0:	7dbb      	ldrb	r3, [r7, #22]
 80032b2:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	7a9b      	ldrb	r3, [r3, #10]
 80032b8:	753b      	strb	r3, [r7, #20]
        break;
 80032ba:	e018      	b.n	80032ee <SX126xSetPacketParams+0xf2>
        n = 6;
 80032bc:	2306      	movs	r3, #6
 80032be:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	899b      	ldrh	r3, [r3, #12]
 80032c4:	0a1b      	lsrs	r3, r3, #8
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	899b      	ldrh	r3, [r3, #12]
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.LoRa.HeaderType;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	7b9b      	ldrb	r3, [r3, #14]
 80032d8:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	7bdb      	ldrb	r3, [r3, #15]
 80032de:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	7c1b      	ldrb	r3, [r3, #16]
 80032e4:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	7c5b      	ldrb	r3, [r3, #17]
 80032ea:	747b      	strb	r3, [r7, #17]
        break;
 80032ec:	bf00      	nop
    }
    SX126xWriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 80032ee:	7dfb      	ldrb	r3, [r7, #23]
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	f107 030c 	add.w	r3, r7, #12
 80032f6:	4619      	mov	r1, r3
 80032f8:	208c      	movs	r0, #140	; 0x8c
 80032fa:	f7ff f983 	bl	8002604 <SX126xWriteCommand>
}
 80032fe:	3718      	adds	r7, #24
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	08006858 	.word	0x08006858
 8003308:	200001cd 	.word	0x200001cd

0800330c <SX126xSetCadParams>:

void SX126xSetCadParams( RadioLoRaCadSymbols_t cadSymbolNum, uint8_t cadDetPeak, uint8_t cadDetMin, RadioCadExitModes_t cadExitMode, uint32_t cadTimeout )
{
 800330c:	b590      	push	{r4, r7, lr}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
 8003312:	4604      	mov	r4, r0
 8003314:	4608      	mov	r0, r1
 8003316:	4611      	mov	r1, r2
 8003318:	461a      	mov	r2, r3
 800331a:	4623      	mov	r3, r4
 800331c:	71fb      	strb	r3, [r7, #7]
 800331e:	4603      	mov	r3, r0
 8003320:	71bb      	strb	r3, [r7, #6]
 8003322:	460b      	mov	r3, r1
 8003324:	717b      	strb	r3, [r7, #5]
 8003326:	4613      	mov	r3, r2
 8003328:	713b      	strb	r3, [r7, #4]
    uint8_t buf[7];

    buf[0] = ( uint8_t )cadSymbolNum;
 800332a:	79fb      	ldrb	r3, [r7, #7]
 800332c:	723b      	strb	r3, [r7, #8]
    buf[1] = cadDetPeak;
 800332e:	79bb      	ldrb	r3, [r7, #6]
 8003330:	727b      	strb	r3, [r7, #9]
    buf[2] = cadDetMin;
 8003332:	797b      	ldrb	r3, [r7, #5]
 8003334:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )cadExitMode;
 8003336:	793b      	ldrb	r3, [r7, #4]
 8003338:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( cadTimeout >> 16 ) & 0xFF );
 800333a:	6a3b      	ldr	r3, [r7, #32]
 800333c:	0c1b      	lsrs	r3, r3, #16
 800333e:	b2db      	uxtb	r3, r3
 8003340:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( ( cadTimeout >> 8 ) & 0xFF );
 8003342:	6a3b      	ldr	r3, [r7, #32]
 8003344:	0a1b      	lsrs	r3, r3, #8
 8003346:	b2db      	uxtb	r3, r3
 8003348:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( cadTimeout & 0xFF );
 800334a:	6a3b      	ldr	r3, [r7, #32]
 800334c:	b2db      	uxtb	r3, r3
 800334e:	73bb      	strb	r3, [r7, #14]
    SX126xWriteCommand( RADIO_SET_CADPARAMS, buf, 5 );
 8003350:	f107 0308 	add.w	r3, r7, #8
 8003354:	2205      	movs	r2, #5
 8003356:	4619      	mov	r1, r3
 8003358:	2088      	movs	r0, #136	; 0x88
 800335a:	f7ff f953 	bl	8002604 <SX126xWriteCommand>
    OperatingMode = MODE_CAD;
 800335e:	4b03      	ldr	r3, [pc, #12]	; (800336c <SX126xSetCadParams+0x60>)
 8003360:	2207      	movs	r2, #7
 8003362:	701a      	strb	r2, [r3, #0]
}
 8003364:	bf00      	nop
 8003366:	3714      	adds	r7, #20
 8003368:	46bd      	mov	sp, r7
 800336a:	bd90      	pop	{r4, r7, pc}
 800336c:	200001cc 	.word	0x200001cc

08003370 <SX126xSetBufferBaseAddress>:

void SX126xSetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	4603      	mov	r3, r0
 8003378:	460a      	mov	r2, r1
 800337a:	71fb      	strb	r3, [r7, #7]
 800337c:	4613      	mov	r3, r2
 800337e:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8003380:	79fb      	ldrb	r3, [r7, #7]
 8003382:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8003384:	79bb      	ldrb	r3, [r7, #6]
 8003386:	737b      	strb	r3, [r7, #13]
    SX126xWriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8003388:	f107 030c 	add.w	r3, r7, #12
 800338c:	2202      	movs	r2, #2
 800338e:	4619      	mov	r1, r3
 8003390:	208f      	movs	r0, #143	; 0x8f
 8003392:	f7ff f937 	bl	8002604 <SX126xWriteCommand>
}
 8003396:	bf00      	nop
 8003398:	3710      	adds	r7, #16
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <SX126xGetRssiInst>:
    status.Value = stat;
    return status;
}

int8_t SX126xGetRssiInst( void )
{
 800339e:	b580      	push	{r7, lr}
 80033a0:	b082      	sub	sp, #8
 80033a2:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 80033a4:	2300      	movs	r3, #0
 80033a6:	71fb      	strb	r3, [r7, #7]

    SX126xReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 80033a8:	1d3b      	adds	r3, r7, #4
 80033aa:	2201      	movs	r2, #1
 80033ac:	4619      	mov	r1, r3
 80033ae:	2015      	movs	r0, #21
 80033b0:	f7ff f962 	bl	8002678 <SX126xReadCommand>
    rssi = -buf[0] >> 1;
 80033b4:	793b      	ldrb	r3, [r7, #4]
 80033b6:	425b      	negs	r3, r3
 80033b8:	105b      	asrs	r3, r3, #1
 80033ba:	71fb      	strb	r3, [r7, #7]
    return rssi;
 80033bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3708      	adds	r7, #8
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <SX126xGetRxBufferStatus>:

void SX126xGetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SX126xReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 80033d2:	f107 030c 	add.w	r3, r7, #12
 80033d6:	2202      	movs	r2, #2
 80033d8:	4619      	mov	r1, r3
 80033da:	2013      	movs	r0, #19
 80033dc:	f7ff f94c 	bl	8002678 <SX126xReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SX126xGetPacketType( ) == PACKET_TYPE_LORA ) && ( SX126xReadRegister( REG_LR_PACKETPARAMS ) >> 7 == 1 ) )
 80033e0:	f7ff fe04 	bl	8002fec <SX126xGetPacketType>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d111      	bne.n	800340e <SX126xGetRxBufferStatus+0x46>
 80033ea:	f240 7004 	movw	r0, #1796	; 0x704
 80033ee:	f7ff fa1f 	bl	8002830 <SX126xReadRegister>
 80033f2:	4603      	mov	r3, r0
 80033f4:	09db      	lsrs	r3, r3, #7
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d108      	bne.n	800340e <SX126xGetRxBufferStatus+0x46>
    {
        *payloadLength = SX126xReadRegister( REG_LR_PAYLOADLENGTH );
 80033fc:	f240 7002 	movw	r0, #1794	; 0x702
 8003400:	f7ff fa16 	bl	8002830 <SX126xReadRegister>
 8003404:	4603      	mov	r3, r0
 8003406:	461a      	mov	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	701a      	strb	r2, [r3, #0]
 800340c:	e002      	b.n	8003414 <SX126xGetRxBufferStatus+0x4c>
    }
    else
    {
        *payloadLength = status[0];
 800340e:	7b3a      	ldrb	r2, [r7, #12]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8003414:	7b7a      	ldrb	r2, [r7, #13]
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	701a      	strb	r2, [r3, #0]
}
 800341a:	bf00      	nop
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
	...

08003424 <SX126xGetPacketStatus>:

void SX126xGetPacketStatus( PacketStatus_t *pktStatus )
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SX126xReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800342c:	f107 030c 	add.w	r3, r7, #12
 8003430:	2203      	movs	r2, #3
 8003432:	4619      	mov	r1, r3
 8003434:	2014      	movs	r0, #20
 8003436:	f7ff f91f 	bl	8002678 <SX126xReadCommand>

    pktStatus->packetType = SX126xGetPacketType( );
 800343a:	f7ff fdd7 	bl	8002fec <SX126xGetPacketType>
 800343e:	4603      	mov	r3, r0
 8003440:	461a      	mov	r2, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d002      	beq.n	8003454 <SX126xGetPacketStatus+0x30>
 800344e:	2b01      	cmp	r3, #1
 8003450:	d013      	beq.n	800347a <SX126xGetPacketStatus+0x56>
 8003452:	e035      	b.n	80034c0 <SX126xGetPacketStatus+0x9c>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8003454:	7b3a      	ldrb	r2, [r7, #12]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800345a:	7b7b      	ldrb	r3, [r7, #13]
 800345c:	425b      	negs	r3, r3
 800345e:	105b      	asrs	r3, r3, #1
 8003460:	b25a      	sxtb	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8003466:	7bbb      	ldrb	r3, [r7, #14]
 8003468:	425b      	negs	r3, r3
 800346a:	105b      	asrs	r3, r3, #1
 800346c:	b25a      	sxtb	r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	609a      	str	r2, [r3, #8]
            break;
 8003478:	e02b      	b.n	80034d2 <SX126xGetPacketStatus+0xae>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800347a:	7b3b      	ldrb	r3, [r7, #12]
 800347c:	425b      	negs	r3, r3
 800347e:	105b      	asrs	r3, r3, #1
 8003480:	b25a      	sxtb	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	731a      	strb	r2, [r3, #12]
            ( status[1] < 128 ) ? ( pktStatus->Params.LoRa.SnrPkt = status[1] >> 2 ) : ( pktStatus->Params.LoRa.SnrPkt = ( ( status[1] - 256 ) >> 2 ) );
 8003486:	7b7b      	ldrb	r3, [r7, #13]
 8003488:	b25b      	sxtb	r3, r3
 800348a:	2b00      	cmp	r3, #0
 800348c:	db06      	blt.n	800349c <SX126xGetPacketStatus+0x78>
 800348e:	7b7b      	ldrb	r3, [r7, #13]
 8003490:	089b      	lsrs	r3, r3, #2
 8003492:	b2db      	uxtb	r3, r3
 8003494:	b25a      	sxtb	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	735a      	strb	r2, [r3, #13]
 800349a:	e006      	b.n	80034aa <SX126xGetPacketStatus+0x86>
 800349c:	7b7b      	ldrb	r3, [r7, #13]
 800349e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80034a2:	109b      	asrs	r3, r3, #2
 80034a4:	b25a      	sxtb	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 80034aa:	7bbb      	ldrb	r3, [r7, #14]
 80034ac:	425b      	negs	r3, r3
 80034ae:	105b      	asrs	r3, r3, #1
 80034b0:	b25a      	sxtb	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 80034b6:	4b09      	ldr	r3, [pc, #36]	; (80034dc <SX126xGetPacketStatus+0xb8>)
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	611a      	str	r2, [r3, #16]
            break;
 80034be:	e008      	b.n	80034d2 <SX126xGetPacketStatus+0xae>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            memset( pktStatus, 0, sizeof( PacketStatus_t ) );
 80034c0:	2214      	movs	r2, #20
 80034c2:	2100      	movs	r1, #0
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f002 ff57 	bl	8006378 <memset>
            pktStatus->packetType = PACKET_TYPE_NONE;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	220f      	movs	r2, #15
 80034ce:	701a      	strb	r2, [r3, #0]
            break;
 80034d0:	bf00      	nop
    }
}
 80034d2:	bf00      	nop
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	200001d0 	.word	0x200001d0

080034e0 <SX126xClearIrqStatus>:
    uint8_t buf[2] = { 0x00, 0x00 };
    SX126xWriteCommand( RADIO_CLR_ERROR, buf, 2 );
}

void SX126xClearIrqStatus( uint16_t irq )
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	4603      	mov	r3, r0
 80034e8:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( ( uint16_t )irq >> 8 ) & 0x00FF );
 80034ea:	88fb      	ldrh	r3, [r7, #6]
 80034ec:	0a1b      	lsrs	r3, r3, #8
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
 80034f4:	88fb      	ldrh	r3, [r7, #6]
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	737b      	strb	r3, [r7, #13]
    SX126xWriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
 80034fa:	f107 030c 	add.w	r3, r7, #12
 80034fe:	2202      	movs	r2, #2
 8003500:	4619      	mov	r1, r3
 8003502:	2002      	movs	r0, #2
 8003504:	f7ff f87e 	bl	8002604 <SX126xWriteCommand>
}
 8003508:	bf00      	nop
 800350a:	3710      	adds	r7, #16
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <Init_Timer>:


static EventInt EventInterrupt[TIM_MAX_HW][MAX_EVENT_ALL_TIM];

void Init_Timer(Tim_CfgTypes *Timer_Cfg)
{
 8003510:	b590      	push	{r4, r7, lr}
 8003512:	b097      	sub	sp, #92	; 0x5c
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
     TIM_TypeDef *hw;
     uint32_t tmpcr1 = 0U;
 8003518:	2300      	movs	r3, #0
 800351a:	64fb      	str	r3, [r7, #76]	; 0x4c
    
     Tim_OCCMode_CfgTypes  OCCMode_Cfg_local;
     Tim_ICCMode_CfgTypes  ICCMode_Cfg_local;
     Tim_TRIGMode_CfgTypes TRIGMode_Cfg_local;
    
     for(uint8_t i = 0; i < Timer_Cfg->Number_HW; i++) 
 800351c:	2300      	movs	r3, #0
 800351e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8003522:	e2fa      	b.n	8003b1a <Init_Timer+0x60a>
     {
         /*get base address of hw*/
         switch(Timer_Cfg->Hw_Config[i].HW)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6859      	ldr	r1, [r3, #4]
 8003528:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 800352c:	4613      	mov	r3, r2
 800352e:	005b      	lsls	r3, r3, #1
 8003530:	4413      	add	r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	440b      	add	r3, r1
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	3b01      	subs	r3, #1
 800353a:	2b03      	cmp	r3, #3
 800353c:	d83e      	bhi.n	80035bc <Init_Timer+0xac>
 800353e:	a201      	add	r2, pc, #4	; (adr r2, 8003544 <Init_Timer+0x34>)
 8003540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003544:	08003555 	.word	0x08003555
 8003548:	08003577 	.word	0x08003577
 800354c:	0800359b 	.word	0x0800359b
 8003550:	080035bd 	.word	0x080035bd
         {
             case TIMER1_HW : 
                 hw = TIM1;
 8003554:	4bb6      	ldr	r3, [pc, #728]	; (8003830 <Init_Timer+0x320>)
 8003556:	657b      	str	r3, [r7, #84]	; 0x54
                 __HAL_RCC_TIM1_CLK_ENABLE();
 8003558:	2300      	movs	r3, #0
 800355a:	613b      	str	r3, [r7, #16]
 800355c:	4bb5      	ldr	r3, [pc, #724]	; (8003834 <Init_Timer+0x324>)
 800355e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003560:	4ab4      	ldr	r2, [pc, #720]	; (8003834 <Init_Timer+0x324>)
 8003562:	f043 0301 	orr.w	r3, r3, #1
 8003566:	6453      	str	r3, [r2, #68]	; 0x44
 8003568:	4bb2      	ldr	r3, [pc, #712]	; (8003834 <Init_Timer+0x324>)
 800356a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356c:	f003 0301 	and.w	r3, r3, #1
 8003570:	613b      	str	r3, [r7, #16]
 8003572:	693b      	ldr	r3, [r7, #16]
                 break;
 8003574:	e023      	b.n	80035be <Init_Timer+0xae>
             case TIMER2_HW : 
                 hw = (TIM_TypeDef *)TIM2;
 8003576:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800357a:	657b      	str	r3, [r7, #84]	; 0x54
                 __HAL_RCC_TIM2_CLK_ENABLE();
 800357c:	2300      	movs	r3, #0
 800357e:	60fb      	str	r3, [r7, #12]
 8003580:	4bac      	ldr	r3, [pc, #688]	; (8003834 <Init_Timer+0x324>)
 8003582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003584:	4aab      	ldr	r2, [pc, #684]	; (8003834 <Init_Timer+0x324>)
 8003586:	f043 0301 	orr.w	r3, r3, #1
 800358a:	6413      	str	r3, [r2, #64]	; 0x40
 800358c:	4ba9      	ldr	r3, [pc, #676]	; (8003834 <Init_Timer+0x324>)
 800358e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003590:	f003 0301 	and.w	r3, r3, #1
 8003594:	60fb      	str	r3, [r7, #12]
 8003596:	68fb      	ldr	r3, [r7, #12]
                 break;      
 8003598:	e011      	b.n	80035be <Init_Timer+0xae>
             case TIMER3_HW : 
                 hw = (TIM_TypeDef *)TIM3;
 800359a:	4ba7      	ldr	r3, [pc, #668]	; (8003838 <Init_Timer+0x328>)
 800359c:	657b      	str	r3, [r7, #84]	; 0x54
                 __HAL_RCC_TIM3_CLK_ENABLE();
 800359e:	2300      	movs	r3, #0
 80035a0:	60bb      	str	r3, [r7, #8]
 80035a2:	4ba4      	ldr	r3, [pc, #656]	; (8003834 <Init_Timer+0x324>)
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	4aa3      	ldr	r2, [pc, #652]	; (8003834 <Init_Timer+0x324>)
 80035a8:	f043 0302 	orr.w	r3, r3, #2
 80035ac:	6413      	str	r3, [r2, #64]	; 0x40
 80035ae:	4ba1      	ldr	r3, [pc, #644]	; (8003834 <Init_Timer+0x324>)
 80035b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	60bb      	str	r3, [r7, #8]
 80035b8:	68bb      	ldr	r3, [r7, #8]
                 break;
 80035ba:	e000      	b.n	80035be <Init_Timer+0xae>
             case TIMER4_HW : 
                 //hw = (TIM_TypeDef *)TIM4;
                 break;
             default :
                 break;
 80035bc:	bf00      	nop
         }
         /*cau hinh prescaler/period cho timer*/
         tmpcr1 = hw->CR1;
 80035be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	64fb      	str	r3, [r7, #76]	; 0x4c
         tmpcr1 &= ~TIM_CR1_ARPE_Msk;
 80035c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035ca:	64fb      	str	r3, [r7, #76]	; 0x4c
         tmpcr1 |= TIM_CR1_ARPE_Msk;
 80035cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035d2:	64fb      	str	r3, [r7, #76]	; 0x4c
         hw->CR1 = tmpcr1;
 80035d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035d8:	601a      	str	r2, [r3, #0]
         hw->PSC = (uint32_t)Timer_Cfg->Hw_Config[i].Base_Cfg->Prescaler;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6859      	ldr	r1, [r3, #4]
 80035de:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 80035e2:	4613      	mov	r3, r2
 80035e4:	005b      	lsls	r3, r3, #1
 80035e6:	4413      	add	r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	440b      	add	r3, r1
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035f2:	629a      	str	r2, [r3, #40]	; 0x28
         hw->ARR = (uint32_t)Timer_Cfg->Hw_Config[i].Base_Cfg->Period ;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6859      	ldr	r1, [r3, #4]
 80035f8:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 80035fc:	4613      	mov	r3, r2
 80035fe:	005b      	lsls	r3, r3, #1
 8003600:	4413      	add	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	440b      	add	r3, r1
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	685a      	ldr	r2, [r3, #4]
 800360a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800360c:	62da      	str	r2, [r3, #44]	; 0x2c
         hw->EGR = TIM_EGR_UG_Msk;
 800360e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003610:	2201      	movs	r2, #1
 8003612:	615a      	str	r2, [r3, #20]
         /* check bien enable ngat de cau hinh ngat*/
         if(Timer_Cfg->Hw_Config[i].Base_Cfg->Int_Enable == TIME_INT_ENABLE)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6859      	ldr	r1, [r3, #4]
 8003618:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 800361c:	4613      	mov	r3, r2
 800361e:	005b      	lsls	r3, r3, #1
 8003620:	4413      	add	r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	440b      	add	r3, r1
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	7a1b      	ldrb	r3, [r3, #8]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d121      	bne.n	8003672 <Init_Timer+0x162>
         {
             if((hw==TIM2)||(hw==TIM3))
 800362e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003634:	d003      	beq.n	800363e <Init_Timer+0x12e>
 8003636:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003638:	4a7f      	ldr	r2, [pc, #508]	; (8003838 <Init_Timer+0x328>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d119      	bne.n	8003672 <Init_Timer+0x162>
             {
                 tmpdier = hw->DIER;
 800363e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	64bb      	str	r3, [r7, #72]	; 0x48
                 tmpdier |= TIM_DIER_UIE;
 8003644:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003646:	f043 0301 	orr.w	r3, r3, #1
 800364a:	64bb      	str	r3, [r7, #72]	; 0x48
                 hw->DIER = tmpdier;
 800364c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800364e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003650:	60da      	str	r2, [r3, #12]
             	 HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003652:	201c      	movs	r0, #28
 8003654:	f001 fc97 	bl	8004f86 <HAL_NVIC_EnableIRQ>
             	 HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003658:	201d      	movs	r0, #29
 800365a:	f001 fc94 	bl	8004f86 <HAL_NVIC_EnableIRQ>

             	 HAL_NVIC_SetPriority(TIM3_IRQn,5u,0u);
 800365e:	2200      	movs	r2, #0
 8003660:	2105      	movs	r1, #5
 8003662:	201d      	movs	r0, #29
 8003664:	f001 fc73 	bl	8004f4e <HAL_NVIC_SetPriority>
             	 HAL_NVIC_SetPriority(TIM2_IRQn,5u,0u);
 8003668:	2200      	movs	r2, #0
 800366a:	2105      	movs	r1, #5
 800366c:	201c      	movs	r0, #28
 800366e:	f001 fc6e 	bl	8004f4e <HAL_NVIC_SetPriority>
             {
                 
             }
         }
         /* config chanel of hw*/
         for(uint8_t j = 0; j < Timer_Cfg->Hw_Config[i].Number_Chanel; j++)
 8003672:	2300      	movs	r3, #0
 8003674:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 8003678:	e235      	b.n	8003ae6 <Init_Timer+0x5d6>
         {
             chanel=Timer_Cfg->Hw_Config[i].Chanel_Config[j].Chanel_ID;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6859      	ldr	r1, [r3, #4]
 800367e:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8003682:	4613      	mov	r3, r2
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	4413      	add	r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	440b      	add	r3, r1
 800368c:	689a      	ldr	r2, [r3, #8]
 800368e:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8003692:	011b      	lsls	r3, r3, #4
 8003694:	4413      	add	r3, r2
 8003696:	785b      	ldrb	r3, [r3, #1]
 8003698:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
             switch(Timer_Cfg->Hw_Config[i].Chanel_Config[j].Mode)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6859      	ldr	r1, [r3, #4]
 80036a0:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 80036a4:	4613      	mov	r3, r2
 80036a6:	005b      	lsls	r3, r3, #1
 80036a8:	4413      	add	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	440b      	add	r3, r1
 80036ae:	689a      	ldr	r2, [r3, #8]
 80036b0:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 80036b4:	011b      	lsls	r3, r3, #4
 80036b6:	4413      	add	r3, r2
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	3b01      	subs	r3, #1
 80036bc:	2b03      	cmp	r3, #3
 80036be:	f200 820c 	bhi.w	8003ada <Init_Timer+0x5ca>
 80036c2:	a201      	add	r2, pc, #4	; (adr r2, 80036c8 <Init_Timer+0x1b8>)
 80036c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c8:	080036d9 	.word	0x080036d9
 80036cc:	08003861 	.word	0x08003861
 80036d0:	08003a37 	.word	0x08003a37
 80036d4:	08003adb 	.word	0x08003adb
             {
                 case OCC_MODE :
                     /*cau hinh thanh ghi cho output compare mode*/
                                     OCCMode_Cfg_local= *(Timer_Cfg->Hw_Config[i].Chanel_Config[j].OCCMode_Cfg);               
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6859      	ldr	r1, [r3, #4]
 80036dc:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 80036e0:	4613      	mov	r3, r2
 80036e2:	005b      	lsls	r3, r3, #1
 80036e4:	4413      	add	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	440b      	add	r3, r1
 80036ea:	689a      	ldr	r2, [r3, #8]
 80036ec:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 80036f0:	011b      	lsls	r3, r3, #4
 80036f2:	4413      	add	r3, r2
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80036fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                     hw->CCER &= ~(TIM_CCER_CC1E<<((chanel-1)*4));
 8003700:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003702:	6a1a      	ldr	r2, [r3, #32]
 8003704:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003708:	3b01      	subs	r3, #1
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	2101      	movs	r1, #1
 800370e:	fa01 f303 	lsl.w	r3, r1, r3
 8003712:	43db      	mvns	r3, r3
 8003714:	401a      	ands	r2, r3
 8003716:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003718:	621a      	str	r2, [r3, #32]
                     tmpccer = hw->CCER;
 800371a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	63fb      	str	r3, [r7, #60]	; 0x3c
                     /*cau hinh mode/compare_value/OCPolarity */
                     if(chanel<3)
 8003720:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003724:	2b02      	cmp	r3, #2
 8003726:	d82d      	bhi.n	8003784 <Init_Timer+0x274>
                     {
                         tmpccmrx = hw->CCMR1;
 8003728:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800372a:	699b      	ldr	r3, [r3, #24]
 800372c:	643b      	str	r3, [r7, #64]	; 0x40
                         tmpccmrx &= ~(TIM_CCMR1_OC1M<<((chanel-1)*8));
 800372e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003732:	3b01      	subs	r3, #1
 8003734:	00db      	lsls	r3, r3, #3
 8003736:	2270      	movs	r2, #112	; 0x70
 8003738:	fa02 f303 	lsl.w	r3, r2, r3
 800373c:	43db      	mvns	r3, r3
 800373e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003740:	4013      	ands	r3, r2
 8003742:	643b      	str	r3, [r7, #64]	; 0x40
                         tmpccmrx &= ~(TIM_CCMR1_CC1S<<((chanel-1)*8));
 8003744:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003748:	3b01      	subs	r3, #1
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	2203      	movs	r2, #3
 800374e:	fa02 f303 	lsl.w	r3, r2, r3
 8003752:	43db      	mvns	r3, r3
 8003754:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003756:	4013      	ands	r3, r2
 8003758:	643b      	str	r3, [r7, #64]	; 0x40
                         tmpccmrx |= (OCCMode_Cfg_local.OCMode<<((chanel-1)*8))|(TIM_CCMR1_OC1PE<<((chanel-1)*8));
 800375a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800375c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003760:	3b01      	subs	r3, #1
 8003762:	00db      	lsls	r3, r3, #3
 8003764:	409a      	lsls	r2, r3
 8003766:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800376a:	3b01      	subs	r3, #1
 800376c:	00db      	lsls	r3, r3, #3
 800376e:	2108      	movs	r1, #8
 8003770:	fa01 f303 	lsl.w	r3, r1, r3
 8003774:	4313      	orrs	r3, r2
 8003776:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003778:	4313      	orrs	r3, r2
 800377a:	643b      	str	r3, [r7, #64]	; 0x40
                         hw->CCMR1 = tmpccmrx;
 800377c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800377e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003780:	619a      	str	r2, [r3, #24]
 8003782:	e02c      	b.n	80037de <Init_Timer+0x2ce>
                     }   
                     else
                     {   
                         tmpccmrx = hw->CCMR2;
 8003784:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003786:	69db      	ldr	r3, [r3, #28]
 8003788:	643b      	str	r3, [r7, #64]	; 0x40
                         tmpccmrx &= ~(TIM_CCMR1_OC1M<<((chanel-3)*8));
 800378a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800378e:	3b03      	subs	r3, #3
 8003790:	00db      	lsls	r3, r3, #3
 8003792:	2270      	movs	r2, #112	; 0x70
 8003794:	fa02 f303 	lsl.w	r3, r2, r3
 8003798:	43db      	mvns	r3, r3
 800379a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800379c:	4013      	ands	r3, r2
 800379e:	643b      	str	r3, [r7, #64]	; 0x40
                         tmpccmrx &= ~(TIM_CCMR1_CC1S<<((chanel-3)*8));
 80037a0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80037a4:	3b03      	subs	r3, #3
 80037a6:	00db      	lsls	r3, r3, #3
 80037a8:	2203      	movs	r2, #3
 80037aa:	fa02 f303 	lsl.w	r3, r2, r3
 80037ae:	43db      	mvns	r3, r3
 80037b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037b2:	4013      	ands	r3, r2
 80037b4:	643b      	str	r3, [r7, #64]	; 0x40
                         tmpccmrx |= (OCCMode_Cfg_local.OCMode<<((chanel-3)*8))|(TIM_CCMR1_OC1PE<<((chanel-3)*8));
 80037b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037b8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80037bc:	3b03      	subs	r3, #3
 80037be:	00db      	lsls	r3, r3, #3
 80037c0:	409a      	lsls	r2, r3
 80037c2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80037c6:	3b03      	subs	r3, #3
 80037c8:	00db      	lsls	r3, r3, #3
 80037ca:	2108      	movs	r1, #8
 80037cc:	fa01 f303 	lsl.w	r3, r1, r3
 80037d0:	4313      	orrs	r3, r2
 80037d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037d4:	4313      	orrs	r3, r2
 80037d6:	643b      	str	r3, [r7, #64]	; 0x40
                         hw->CCMR2 = tmpccmrx;
 80037d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037dc:	61da      	str	r2, [r3, #28]
                     }
                     tmpccer &= ~(TIM_CCER_CC1P<<((chanel-1)*4));
 80037de:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80037e2:	3b01      	subs	r3, #1
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	2202      	movs	r2, #2
 80037e8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ec:	43db      	mvns	r3, r3
 80037ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80037f0:	4013      	ands	r3, r2
 80037f2:	63fb      	str	r3, [r7, #60]	; 0x3c
                     tmpccer |= (OCCMode_Cfg_local.OCPolarity<<((chanel-1)*4));
 80037f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037f6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80037fa:	3b01      	subs	r3, #1
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003802:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003804:	4313      	orrs	r3, r2
 8003806:	63fb      	str	r3, [r7, #60]	; 0x3c
                     hw->CCER = tmpccer;
 8003808:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800380a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800380c:	621a      	str	r2, [r3, #32]
                     switch(chanel)
 800380e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003812:	3b01      	subs	r3, #1
 8003814:	2b03      	cmp	r3, #3
 8003816:	d821      	bhi.n	800385c <Init_Timer+0x34c>
 8003818:	a201      	add	r2, pc, #4	; (adr r2, 8003820 <Init_Timer+0x310>)
 800381a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800381e:	bf00      	nop
 8003820:	0800383d 	.word	0x0800383d
 8003824:	08003845 	.word	0x08003845
 8003828:	0800384d 	.word	0x0800384d
 800382c:	08003855 	.word	0x08003855
 8003830:	40010000 	.word	0x40010000
 8003834:	40023800 	.word	0x40023800
 8003838:	40000400 	.word	0x40000400
                     {
                         case CHANNEL1_HW : hw->CCR1 = OCCMode_Cfg_local.Compare_value;
 800383c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800383e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003840:	635a      	str	r2, [r3, #52]	; 0x34
                         break;
 8003842:	e00c      	b.n	800385e <Init_Timer+0x34e>
                         case CHANNEL2_HW : hw->CCR2 = OCCMode_Cfg_local.Compare_value;
 8003844:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003846:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003848:	639a      	str	r2, [r3, #56]	; 0x38
                         break;      
 800384a:	e008      	b.n	800385e <Init_Timer+0x34e>
                         case CHANNEL3_HW : hw->CCR3 = OCCMode_Cfg_local.Compare_value;
 800384c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800384e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003850:	63da      	str	r2, [r3, #60]	; 0x3c
                         break;
 8003852:	e004      	b.n	800385e <Init_Timer+0x34e>
                         case CHANNEL4_HW : hw->CCR4 = OCCMode_Cfg_local.Compare_value;
 8003854:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003856:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003858:	641a      	str	r2, [r3, #64]	; 0x40
                         break;
 800385a:	e000      	b.n	800385e <Init_Timer+0x34e>
                         default :
                         break;
 800385c:	bf00      	nop
                     }
                     break;
 800385e:	e13d      	b.n	8003adc <Init_Timer+0x5cc>
                 case ICC_MODE :
                     /*cau hinh thanh ghi cho input capture mode*/
                     ICCMode_Cfg_local= *(Timer_Cfg->Hw_Config[i].Chanel_Config[j].ICCMode_Cfg);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6859      	ldr	r1, [r3, #4]
 8003864:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8003868:	4613      	mov	r3, r2
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	4413      	add	r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	440b      	add	r3, r1
 8003872:	689a      	ldr	r2, [r3, #8]
 8003874:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8003878:	011b      	lsls	r3, r3, #4
 800387a:	4413      	add	r3, r2
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f107 041c 	add.w	r4, r7, #28
 8003882:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003884:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                     hw->CCER &= ~(TIM_CCER_CC1E<<((chanel-1)*4));
 8003888:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800388a:	6a1a      	ldr	r2, [r3, #32]
 800388c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003890:	3b01      	subs	r3, #1
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	2101      	movs	r1, #1
 8003896:	fa01 f303 	lsl.w	r3, r1, r3
 800389a:	43db      	mvns	r3, r3
 800389c:	401a      	ands	r2, r3
 800389e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038a0:	621a      	str	r2, [r3, #32]
                     /*Reset counter value*/
                     switch(chanel)
 80038a2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80038a6:	3b01      	subs	r3, #1
 80038a8:	2b03      	cmp	r3, #3
 80038aa:	d81b      	bhi.n	80038e4 <Init_Timer+0x3d4>
 80038ac:	a201      	add	r2, pc, #4	; (adr r2, 80038b4 <Init_Timer+0x3a4>)
 80038ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b2:	bf00      	nop
 80038b4:	080038c5 	.word	0x080038c5
 80038b8:	080038cd 	.word	0x080038cd
 80038bc:	080038d5 	.word	0x080038d5
 80038c0:	080038dd 	.word	0x080038dd
                     {
                         case CHANNEL1_HW : hw->CCR1 = 0;
 80038c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038c6:	2200      	movs	r2, #0
 80038c8:	635a      	str	r2, [r3, #52]	; 0x34
                         break;
 80038ca:	e00c      	b.n	80038e6 <Init_Timer+0x3d6>
                         case CHANNEL2_HW : hw->CCR2 = 0;
 80038cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038ce:	2200      	movs	r2, #0
 80038d0:	639a      	str	r2, [r3, #56]	; 0x38
                         break;      
 80038d2:	e008      	b.n	80038e6 <Init_Timer+0x3d6>
                         case CHANNEL3_HW : hw->CCR3 = 0;
 80038d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038d6:	2200      	movs	r2, #0
 80038d8:	63da      	str	r2, [r3, #60]	; 0x3c
                         break;
 80038da:	e004      	b.n	80038e6 <Init_Timer+0x3d6>
                         case CHANNEL4_HW : hw->CCR4 = 0;
 80038dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038de:	2200      	movs	r2, #0
 80038e0:	641a      	str	r2, [r3, #64]	; 0x40
                         break;
 80038e2:	e000      	b.n	80038e6 <Init_Timer+0x3d6>
                         default :
                         break;
 80038e4:	bf00      	nop
                     }
                     /*cau hinh filter/ICPrescaler/ICPolarity source input*/
                     tmpccmrx = hw->CCMR1;
 80038e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	643b      	str	r3, [r7, #64]	; 0x40
                     tmpccer = hw->CCER;
 80038ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038ee:	6a1b      	ldr	r3, [r3, #32]
 80038f0:	63fb      	str	r3, [r7, #60]	; 0x3c
                     if(chanel<3)
 80038f2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d842      	bhi.n	8003980 <Init_Timer+0x470>
                     {
                         tmpccmrx = hw->CCMR1;
 80038fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	643b      	str	r3, [r7, #64]	; 0x40
                         tmpccmrx &= ~(TIM_CCMR1_IC1F<<((chanel-1)*8));
 8003900:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003904:	3b01      	subs	r3, #1
 8003906:	00db      	lsls	r3, r3, #3
 8003908:	22f0      	movs	r2, #240	; 0xf0
 800390a:	fa02 f303 	lsl.w	r3, r2, r3
 800390e:	43db      	mvns	r3, r3
 8003910:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003912:	4013      	ands	r3, r2
 8003914:	643b      	str	r3, [r7, #64]	; 0x40
                         tmpccmrx &= ~(TIM_CCMR1_IC1PSC<<((chanel-1)*8));
 8003916:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800391a:	3b01      	subs	r3, #1
 800391c:	00db      	lsls	r3, r3, #3
 800391e:	220c      	movs	r2, #12
 8003920:	fa02 f303 	lsl.w	r3, r2, r3
 8003924:	43db      	mvns	r3, r3
 8003926:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003928:	4013      	ands	r3, r2
 800392a:	643b      	str	r3, [r7, #64]	; 0x40
                         tmpccmrx |= (ICCMode_Cfg_local.ICFilter<<((chanel-1)*8))|(ICCMode_Cfg_local.ICPrescaler<<((chanel-1)*8));
 800392c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800392e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003932:	3b01      	subs	r3, #1
 8003934:	00db      	lsls	r3, r3, #3
 8003936:	409a      	lsls	r2, r3
 8003938:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800393a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800393e:	3b01      	subs	r3, #1
 8003940:	00db      	lsls	r3, r3, #3
 8003942:	fa01 f303 	lsl.w	r3, r1, r3
 8003946:	4313      	orrs	r3, r2
 8003948:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800394a:	4313      	orrs	r3, r2
 800394c:	643b      	str	r3, [r7, #64]	; 0x40
                         tmpccmrx &= ~(TIM_CCMR1_CC1S<<((chanel-1)*8));
 800394e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003952:	3b01      	subs	r3, #1
 8003954:	00db      	lsls	r3, r3, #3
 8003956:	2203      	movs	r2, #3
 8003958:	fa02 f303 	lsl.w	r3, r2, r3
 800395c:	43db      	mvns	r3, r3
 800395e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003960:	4013      	ands	r3, r2
 8003962:	643b      	str	r3, [r7, #64]	; 0x40
                         tmpccmrx |= ICCMode_Cfg_local.ICSelection<<((chanel-3)*8);
 8003964:	6a3a      	ldr	r2, [r7, #32]
 8003966:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800396a:	3b03      	subs	r3, #3
 800396c:	00db      	lsls	r3, r3, #3
 800396e:	fa02 f303 	lsl.w	r3, r2, r3
 8003972:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003974:	4313      	orrs	r3, r2
 8003976:	643b      	str	r3, [r7, #64]	; 0x40
                         hw->CCMR1 = tmpccmrx;
 8003978:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800397a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800397c:	619a      	str	r2, [r3, #24]
 800397e:	e041      	b.n	8003a04 <Init_Timer+0x4f4>
                     }   
                     else
                     {   
                         tmpccmrx = hw->CCMR2;
 8003980:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003982:	69db      	ldr	r3, [r3, #28]
 8003984:	643b      	str	r3, [r7, #64]	; 0x40
                         tmpccmrx &= ~(TIM_CCMR1_IC1F<<((chanel-3)*8));
 8003986:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800398a:	3b03      	subs	r3, #3
 800398c:	00db      	lsls	r3, r3, #3
 800398e:	22f0      	movs	r2, #240	; 0xf0
 8003990:	fa02 f303 	lsl.w	r3, r2, r3
 8003994:	43db      	mvns	r3, r3
 8003996:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003998:	4013      	ands	r3, r2
 800399a:	643b      	str	r3, [r7, #64]	; 0x40
                         tmpccmrx &= ~(TIM_CCMR1_IC1PSC<<((chanel-3)*8));
 800399c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80039a0:	3b03      	subs	r3, #3
 80039a2:	00db      	lsls	r3, r3, #3
 80039a4:	220c      	movs	r2, #12
 80039a6:	fa02 f303 	lsl.w	r3, r2, r3
 80039aa:	43db      	mvns	r3, r3
 80039ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80039ae:	4013      	ands	r3, r2
 80039b0:	643b      	str	r3, [r7, #64]	; 0x40
                         tmpccmrx |= (ICCMode_Cfg_local.ICFilter<<((chanel-3)*8))|(ICCMode_Cfg_local.ICPrescaler<<((chanel-3)*8));
 80039b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80039b8:	3b03      	subs	r3, #3
 80039ba:	00db      	lsls	r3, r3, #3
 80039bc:	409a      	lsls	r2, r3
 80039be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80039c4:	3b03      	subs	r3, #3
 80039c6:	00db      	lsls	r3, r3, #3
 80039c8:	fa01 f303 	lsl.w	r3, r1, r3
 80039cc:	4313      	orrs	r3, r2
 80039ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80039d0:	4313      	orrs	r3, r2
 80039d2:	643b      	str	r3, [r7, #64]	; 0x40
                         tmpccmrx &= ~(TIM_CCMR1_CC1S<<((chanel-3)*8));
 80039d4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80039d8:	3b03      	subs	r3, #3
 80039da:	00db      	lsls	r3, r3, #3
 80039dc:	2203      	movs	r2, #3
 80039de:	fa02 f303 	lsl.w	r3, r2, r3
 80039e2:	43db      	mvns	r3, r3
 80039e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80039e6:	4013      	ands	r3, r2
 80039e8:	643b      	str	r3, [r7, #64]	; 0x40
                         tmpccmrx |= ICCMode_Cfg_local.ICSelection<<((chanel-3)*8);
 80039ea:	6a3a      	ldr	r2, [r7, #32]
 80039ec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80039f0:	3b03      	subs	r3, #3
 80039f2:	00db      	lsls	r3, r3, #3
 80039f4:	fa02 f303 	lsl.w	r3, r2, r3
 80039f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80039fa:	4313      	orrs	r3, r2
 80039fc:	643b      	str	r3, [r7, #64]	; 0x40
                         hw->CCMR2 = tmpccmrx;
 80039fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a02:	61da      	str	r2, [r3, #28]
                     }
                     tmpccer  &= ~(TIM_CCER_CC1P<<((chanel-1)*4));
 8003a04:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	2202      	movs	r2, #2
 8003a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a12:	43db      	mvns	r3, r3
 8003a14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a16:	4013      	ands	r3, r2
 8003a18:	63fb      	str	r3, [r7, #60]	; 0x3c
                     tmpccer  |= (ICCMode_Cfg_local.ICPolarity<<((chanel-1)*4));
 8003a1a:	69fa      	ldr	r2, [r7, #28]
 8003a1c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003a20:	3b01      	subs	r3, #1
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	fa02 f303 	lsl.w	r3, r2, r3
 8003a28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
                     hw->CCER  = tmpccer;
 8003a2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a32:	621a      	str	r2, [r3, #32]
                     break;
 8003a34:	e052      	b.n	8003adc <Init_Timer+0x5cc>
                 case TRIGER_MODE :
                     /*cau hinh thanh ghi cho trigger  mode*/
                     /*get config*/
                     TRIGMode_Cfg_local= *(Timer_Cfg->Hw_Config[i].Chanel_Config[j].TRIGMode_Cfg);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6859      	ldr	r1, [r3, #4]
 8003a3a:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8003a3e:	4613      	mov	r3, r2
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	4413      	add	r3, r2
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	440b      	add	r3, r1
 8003a48:	689a      	ldr	r2, [r3, #8]
 8003a4a:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8003a4e:	011b      	lsls	r3, r3, #4
 8003a50:	4413      	add	r3, r2
 8003a52:	68da      	ldr	r2, [r3, #12]
 8003a54:	f107 0314 	add.w	r3, r7, #20
 8003a58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003a5c:	e883 0003 	stmia.w	r3, {r0, r1}
                     /*cau hinh compare_value */
                     switch(chanel)
 8003a60:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003a64:	3b01      	subs	r3, #1
 8003a66:	2b03      	cmp	r3, #3
 8003a68:	d81a      	bhi.n	8003aa0 <Init_Timer+0x590>
 8003a6a:	a201      	add	r2, pc, #4	; (adr r2, 8003a70 <Init_Timer+0x560>)
 8003a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a70:	08003a81 	.word	0x08003a81
 8003a74:	08003a89 	.word	0x08003a89
 8003a78:	08003a91 	.word	0x08003a91
 8003a7c:	08003a99 	.word	0x08003a99
                     {
                         case CHANNEL1_HW : hw->CCR1 = TRIGMode_Cfg_local.Compare_value;
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a84:	635a      	str	r2, [r3, #52]	; 0x34
                         break;
 8003a86:	e00c      	b.n	8003aa2 <Init_Timer+0x592>
                         case CHANNEL2_HW : hw->CCR2 = TRIGMode_Cfg_local.Compare_value;
 8003a88:	697a      	ldr	r2, [r7, #20]
 8003a8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a8c:	639a      	str	r2, [r3, #56]	; 0x38
                         break;      
 8003a8e:	e008      	b.n	8003aa2 <Init_Timer+0x592>
                         case CHANNEL3_HW : hw->CCR3 = TRIGMode_Cfg_local.Compare_value;
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a94:	63da      	str	r2, [r3, #60]	; 0x3c
                         break;
 8003a96:	e004      	b.n	8003aa2 <Init_Timer+0x592>
                         case CHANNEL4_HW : hw->CCR4 = TRIGMode_Cfg_local.Compare_value;
 8003a98:	697a      	ldr	r2, [r7, #20]
 8003a9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a9c:	641a      	str	r2, [r3, #64]	; 0x40
                         break;
 8003a9e:	e000      	b.n	8003aa2 <Init_Timer+0x592>
                         default :
                         break;
 8003aa0:	bf00      	nop
                     }
                     /*Enable source trigger dma*/
                     tmpdier = hw->DIER;
 8003aa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	64bb      	str	r3, [r7, #72]	; 0x48
                     tmpdier &= ~(TIM_DIER_CC1DE<<(chanel+8));
 8003aa8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003aac:	3308      	adds	r3, #8
 8003aae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab6:	43db      	mvns	r3, r3
 8003ab8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003aba:	4013      	ands	r3, r2
 8003abc:	64bb      	str	r3, [r7, #72]	; 0x48
                     tmpdier |= TIM_DIER_CC1DE<<(chanel+8);
 8003abe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003ac2:	3308      	adds	r3, #8
 8003ac4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8003acc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	64bb      	str	r3, [r7, #72]	; 0x48
                     hw->DIER =tmpdier;
 8003ad2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ad4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ad6:	60da      	str	r2, [r3, #12]
                     break;
 8003ad8:	e000      	b.n	8003adc <Init_Timer+0x5cc>
                 case DEFAULT_MODE : /*Do nothing*/                                     
                     break;
                 default :
                     break;
 8003ada:	bf00      	nop
         for(uint8_t j = 0; j < Timer_Cfg->Hw_Config[i].Number_Chanel; j++)
 8003adc:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6859      	ldr	r1, [r3, #4]
 8003aea:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8003aee:	4613      	mov	r3, r2
 8003af0:	005b      	lsls	r3, r3, #1
 8003af2:	4413      	add	r3, r2
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	440b      	add	r3, r1
 8003af8:	785b      	ldrb	r3, [r3, #1]
 8003afa:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 8003afe:	429a      	cmp	r2, r3
 8003b00:	f4ff adbb 	bcc.w	800367a <Init_Timer+0x16a>
             }                
         }
         /*Enable timer*/
         hw->CR1|=TIM_CR1_CEN;
 8003b04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f043 0201 	orr.w	r2, r3, #1
 8003b0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b0e:	601a      	str	r2, [r3, #0]
     for(uint8_t i = 0; i < Timer_Cfg->Number_HW; i++) 
 8003b10:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8003b14:	3301      	adds	r3, #1
 8003b16:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8003b22:	429a      	cmp	r2, r3
 8003b24:	f4ff acfe 	bcc.w	8003524 <Init_Timer+0x14>
     }
}
 8003b28:	bf00      	nop
 8003b2a:	bf00      	nop
 8003b2c:	375c      	adds	r7, #92	; 0x5c
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd90      	pop	{r4, r7, pc}
 8003b32:	bf00      	nop

08003b34 <Tim_AddEvent>:
}



Std_ReturnType Tim_AddEvent(uint8_t tim_instance,void (*fun)())
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	6039      	str	r1, [r7, #0]
 8003b3e:	71fb      	strb	r3, [r7, #7]
    static uint8_t count_event[TIM_MAX_HW] ;
    /*Add callback func*/
    EventInterrupt[tim_instance][count_event[tim_instance]] = fun;
 8003b40:	79fa      	ldrb	r2, [r7, #7]
 8003b42:	79fb      	ldrb	r3, [r7, #7]
 8003b44:	4913      	ldr	r1, [pc, #76]	; (8003b94 <Tim_AddEvent+0x60>)
 8003b46:	5ccb      	ldrb	r3, [r1, r3]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	4913      	ldr	r1, [pc, #76]	; (8003b98 <Tim_AddEvent+0x64>)
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	4413      	add	r3, r2
 8003b52:	4403      	add	r3, r0
 8003b54:	683a      	ldr	r2, [r7, #0]
 8003b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      if(++ count_event[tim_instance] >= Max_Event_Time[tim_instance])
 8003b5a:	79fb      	ldrb	r3, [r7, #7]
 8003b5c:	4a0d      	ldr	r2, [pc, #52]	; (8003b94 <Tim_AddEvent+0x60>)
 8003b5e:	5cd2      	ldrb	r2, [r2, r3]
 8003b60:	3201      	adds	r2, #1
 8003b62:	b2d1      	uxtb	r1, r2
 8003b64:	4a0b      	ldr	r2, [pc, #44]	; (8003b94 <Tim_AddEvent+0x60>)
 8003b66:	54d1      	strb	r1, [r2, r3]
 8003b68:	4a0a      	ldr	r2, [pc, #40]	; (8003b94 <Tim_AddEvent+0x60>)
 8003b6a:	5cd2      	ldrb	r2, [r2, r3]
 8003b6c:	79fb      	ldrb	r3, [r7, #7]
 8003b6e:	490b      	ldr	r1, [pc, #44]	; (8003b9c <Tim_AddEvent+0x68>)
 8003b70:	5ccb      	ldrb	r3, [r1, r3]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d307      	bcc.n	8003b86 <Tim_AddEvent+0x52>
        {
            count_event[tim_instance] = Max_Event_Time[tim_instance];
 8003b76:	79fa      	ldrb	r2, [r7, #7]
 8003b78:	79fb      	ldrb	r3, [r7, #7]
 8003b7a:	4908      	ldr	r1, [pc, #32]	; (8003b9c <Tim_AddEvent+0x68>)
 8003b7c:	5c89      	ldrb	r1, [r1, r2]
 8003b7e:	4a05      	ldr	r2, [pc, #20]	; (8003b94 <Tim_AddEvent+0x60>)
 8003b80:	54d1      	strb	r1, [r2, r3]
            return E_NOT_OK;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e000      	b.n	8003b88 <Tim_AddEvent+0x54>
        }
        return E_OK;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr
 8003b94:	2000023c 	.word	0x2000023c
 8003b98:	200001d8 	.word	0x200001d8
 8003b9c:	08006994 	.word	0x08006994

08003ba0 <TIM2_IRQHandler>:
        EventInterrupt[TIMER_HW][i] = NULL;
    }
}

void TIM2_IRQHandler()
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
    /* Run call back func */
    for(uint8_t i = 0; i< Max_Event_Time[TIMER2_HW]; i++)
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	71fb      	strb	r3, [r7, #7]
 8003baa:	e00f      	b.n	8003bcc <TIM2_IRQHandler+0x2c>
    {
        if(EventInterrupt[TIMER2_HW][i]!=NULL)
 8003bac:	79fb      	ldrb	r3, [r7, #7]
 8003bae:	4a10      	ldr	r2, [pc, #64]	; (8003bf0 <TIM2_IRQHandler+0x50>)
 8003bb0:	330a      	adds	r3, #10
 8003bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d005      	beq.n	8003bc6 <TIM2_IRQHandler+0x26>
        EventInterrupt[TIMER2_HW][i]();
 8003bba:	79fb      	ldrb	r3, [r7, #7]
 8003bbc:	4a0c      	ldr	r2, [pc, #48]	; (8003bf0 <TIM2_IRQHandler+0x50>)
 8003bbe:	330a      	adds	r3, #10
 8003bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bc4:	4798      	blx	r3
    for(uint8_t i = 0; i< Max_Event_Time[TIMER2_HW]; i++)
 8003bc6:	79fb      	ldrb	r3, [r7, #7]
 8003bc8:	3301      	adds	r3, #1
 8003bca:	71fb      	strb	r3, [r7, #7]
 8003bcc:	4b09      	ldr	r3, [pc, #36]	; (8003bf4 <TIM2_IRQHandler+0x54>)
 8003bce:	789b      	ldrb	r3, [r3, #2]
 8003bd0:	79fa      	ldrb	r2, [r7, #7]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d3ea      	bcc.n	8003bac <TIM2_IRQHandler+0xc>
    }
    TIM2->SR&=(~TIM_SR_UIF);
 8003bd6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003be0:	f023 0301 	bic.w	r3, r3, #1
 8003be4:	6113      	str	r3, [r2, #16]

}
 8003be6:	bf00      	nop
 8003be8:	3708      	adds	r7, #8
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	200001d8 	.word	0x200001d8
 8003bf4:	08006994 	.word	0x08006994

08003bf8 <TIM3_IRQHandler>:

void TIM3_IRQHandler()
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
    /* Run call back func */
    for(uint8_t i = 0; i< Max_Event_Time[TIMER3_HW]; i++)
 8003bfe:	2300      	movs	r3, #0
 8003c00:	71fb      	strb	r3, [r7, #7]
 8003c02:	e00f      	b.n	8003c24 <TIM3_IRQHandler+0x2c>
    {
        if(EventInterrupt[TIMER3_HW][i]!=NULL)
 8003c04:	79fb      	ldrb	r3, [r7, #7]
 8003c06:	4a0f      	ldr	r2, [pc, #60]	; (8003c44 <TIM3_IRQHandler+0x4c>)
 8003c08:	330f      	adds	r3, #15
 8003c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d005      	beq.n	8003c1e <TIM3_IRQHandler+0x26>
        EventInterrupt[TIMER3_HW][i]();
 8003c12:	79fb      	ldrb	r3, [r7, #7]
 8003c14:	4a0b      	ldr	r2, [pc, #44]	; (8003c44 <TIM3_IRQHandler+0x4c>)
 8003c16:	330f      	adds	r3, #15
 8003c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c1c:	4798      	blx	r3
    for(uint8_t i = 0; i< Max_Event_Time[TIMER3_HW]; i++)
 8003c1e:	79fb      	ldrb	r3, [r7, #7]
 8003c20:	3301      	adds	r3, #1
 8003c22:	71fb      	strb	r3, [r7, #7]
 8003c24:	4b08      	ldr	r3, [pc, #32]	; (8003c48 <TIM3_IRQHandler+0x50>)
 8003c26:	78db      	ldrb	r3, [r3, #3]
 8003c28:	79fa      	ldrb	r2, [r7, #7]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d3ea      	bcc.n	8003c04 <TIM3_IRQHandler+0xc>
    }
    TIM3->SR&=(~TIM_SR_UIF);
 8003c2e:	4b07      	ldr	r3, [pc, #28]	; (8003c4c <TIM3_IRQHandler+0x54>)
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	4a06      	ldr	r2, [pc, #24]	; (8003c4c <TIM3_IRQHandler+0x54>)
 8003c34:	f023 0301 	bic.w	r3, r3, #1
 8003c38:	6113      	str	r3, [r2, #16]
}
 8003c3a:	bf00      	nop
 8003c3c:	3708      	adds	r7, #8
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	200001d8 	.word	0x200001d8
 8003c48:	08006994 	.word	0x08006994
 8003c4c:	40000400 	.word	0x40000400

08003c50 <TIM4_IRQHandler>:

void TIM4_IRQHandler()
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
    /* Run call back func */
    for(uint8_t i = 0; i < Max_Event_Time[TIMER4_HW]; i++)
 8003c56:	2300      	movs	r3, #0
 8003c58:	71fb      	strb	r3, [r7, #7]
 8003c5a:	e00f      	b.n	8003c7c <TIM4_IRQHandler+0x2c>
    {
        if(EventInterrupt[TIMER4_HW][i]!=NULL)
 8003c5c:	79fb      	ldrb	r3, [r7, #7]
 8003c5e:	4a0c      	ldr	r2, [pc, #48]	; (8003c90 <TIM4_IRQHandler+0x40>)
 8003c60:	3314      	adds	r3, #20
 8003c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d005      	beq.n	8003c76 <TIM4_IRQHandler+0x26>
        EventInterrupt[TIMER4_HW][i]();
 8003c6a:	79fb      	ldrb	r3, [r7, #7]
 8003c6c:	4a08      	ldr	r2, [pc, #32]	; (8003c90 <TIM4_IRQHandler+0x40>)
 8003c6e:	3314      	adds	r3, #20
 8003c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c74:	4798      	blx	r3
    for(uint8_t i = 0; i < Max_Event_Time[TIMER4_HW]; i++)
 8003c76:	79fb      	ldrb	r3, [r7, #7]
 8003c78:	3301      	adds	r3, #1
 8003c7a:	71fb      	strb	r3, [r7, #7]
 8003c7c:	4b05      	ldr	r3, [pc, #20]	; (8003c94 <TIM4_IRQHandler+0x44>)
 8003c7e:	791b      	ldrb	r3, [r3, #4]
 8003c80:	79fa      	ldrb	r2, [r7, #7]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d3ea      	bcc.n	8003c5c <TIM4_IRQHandler+0xc>
    }
   // TIM4->SR&=(~TIM_SR_UIF);
}
 8003c86:	bf00      	nop
 8003c88:	bf00      	nop
 8003c8a:	3708      	adds	r7, #8
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	200001d8 	.word	0x200001d8
 8003c94:	08006994 	.word	0x08006994

08003c98 <User_Uart_Init>:
#include "./protocol/slip/User_Slip.h"

static User_Uart_ConfigType *UartConfigPtr = NULL;

void User_Uart_Init(User_Uart_ConfigType *UartConfig)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b08c      	sub	sp, #48	; 0x30
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
    uint8_t u8ChannelCount;
    User_Uart_HWConfigType  HWConfig;


    __HAL_RCC_USART1_CLK_ENABLE();
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	61bb      	str	r3, [r7, #24]
 8003ca4:	4b49      	ldr	r3, [pc, #292]	; (8003dcc <User_Uart_Init+0x134>)
 8003ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca8:	4a48      	ldr	r2, [pc, #288]	; (8003dcc <User_Uart_Init+0x134>)
 8003caa:	f043 0310 	orr.w	r3, r3, #16
 8003cae:	6453      	str	r3, [r2, #68]	; 0x44
 8003cb0:	4b46      	ldr	r3, [pc, #280]	; (8003dcc <User_Uart_Init+0x134>)
 8003cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb4:	f003 0310 	and.w	r3, r3, #16
 8003cb8:	61bb      	str	r3, [r7, #24]
 8003cba:	69bb      	ldr	r3, [r7, #24]
    //__HAL_RCC_USART2_CLK_ENABLE();
    __HAL_RCC_USART3_CLK_ENABLE();
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	617b      	str	r3, [r7, #20]
 8003cc0:	4b42      	ldr	r3, [pc, #264]	; (8003dcc <User_Uart_Init+0x134>)
 8003cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc4:	4a41      	ldr	r2, [pc, #260]	; (8003dcc <User_Uart_Init+0x134>)
 8003cc6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cca:	6413      	str	r3, [r2, #64]	; 0x40
 8003ccc:	4b3f      	ldr	r3, [pc, #252]	; (8003dcc <User_Uart_Init+0x134>)
 8003cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cd4:	617b      	str	r3, [r7, #20]
 8003cd6:	697b      	ldr	r3, [r7, #20]
    //__HAL_RCC_USART6_CLK_ENABLE();
    __HAL_RCC_UART4_CLK_ENABLE();
 8003cd8:	2300      	movs	r3, #0
 8003cda:	613b      	str	r3, [r7, #16]
 8003cdc:	4b3b      	ldr	r3, [pc, #236]	; (8003dcc <User_Uart_Init+0x134>)
 8003cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce0:	4a3a      	ldr	r2, [pc, #232]	; (8003dcc <User_Uart_Init+0x134>)
 8003ce2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003ce6:	6413      	str	r3, [r2, #64]	; 0x40
 8003ce8:	4b38      	ldr	r3, [pc, #224]	; (8003dcc <User_Uart_Init+0x134>)
 8003cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cf0:	613b      	str	r3, [r7, #16]
 8003cf2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_UART5_CLK_ENABLE();
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	60fb      	str	r3, [r7, #12]
 8003cf8:	4b34      	ldr	r3, [pc, #208]	; (8003dcc <User_Uart_Init+0x134>)
 8003cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfc:	4a33      	ldr	r2, [pc, #204]	; (8003dcc <User_Uart_Init+0x134>)
 8003cfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d02:	6413      	str	r3, [r2, #64]	; 0x40
 8003d04:	4b31      	ldr	r3, [pc, #196]	; (8003dcc <User_Uart_Init+0x134>)
 8003d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d0c:	60fb      	str	r3, [r7, #12]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
    //__HAL_RCC_UART7_CLK_ENABLE();
    //__HAL_RCC_UART8_CLK_ENABLE();

    UartConfigPtr = UartConfig;
 8003d10:	4a2f      	ldr	r2, [pc, #188]	; (8003dd0 <User_Uart_Init+0x138>)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6013      	str	r3, [r2, #0]

    for(u8ChannelCount = 0u; u8ChannelCount < UartConfigPtr->numberChannel; u8ChannelCount++)
 8003d16:	2300      	movs	r3, #0
 8003d18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003d1c:	e04a      	b.n	8003db4 <User_Uart_Init+0x11c>
    {
    	HWConfig.ParityMode = UartConfigPtr->ChannelConfig[u8ChannelCount].ParityMode;
 8003d1e:	4b2c      	ldr	r3, [pc, #176]	; (8003dd0 <User_Uart_Init+0x138>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	685a      	ldr	r2, [r3, #4]
 8003d24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003d28:	011b      	lsls	r3, r3, #4
 8003d2a:	4413      	add	r3, r2
 8003d2c:	7b1b      	ldrb	r3, [r3, #12]
 8003d2e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    	HWConfig.StopBitCount = UartConfigPtr->ChannelConfig[u8ChannelCount].StopBitCount;
 8003d32:	4b27      	ldr	r3, [pc, #156]	; (8003dd0 <User_Uart_Init+0x138>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	685a      	ldr	r2, [r3, #4]
 8003d38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003d3c:	011b      	lsls	r3, r3, #4
 8003d3e:	4413      	add	r3, r2
 8003d40:	7b5b      	ldrb	r3, [r3, #13]
 8003d42:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    	HWConfig.u32SourceClock = UartConfigPtr->ChannelConfig[u8ChannelCount].u32SourceClock;
 8003d46:	4b22      	ldr	r3, [pc, #136]	; (8003dd0 <User_Uart_Init+0x138>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	685a      	ldr	r2, [r3, #4]
 8003d4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003d50:	011b      	lsls	r3, r3, #4
 8003d52:	4413      	add	r3, r2
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	623b      	str	r3, [r7, #32]
    	HWConfig.u32Baudrate = UartConfigPtr->ChannelConfig[u8ChannelCount].u32Baudrate;
 8003d58:	4b1d      	ldr	r3, [pc, #116]	; (8003dd0 <User_Uart_Init+0x138>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	685a      	ldr	r2, [r3, #4]
 8003d5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003d62:	011b      	lsls	r3, r3, #4
 8003d64:	4413      	add	r3, r2
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	627b      	str	r3, [r7, #36]	; 0x24
    	HWConfig.SlipStatus = UartConfigPtr->ChannelConfig[u8ChannelCount].SlipStatus;
 8003d6a:	4b19      	ldr	r3, [pc, #100]	; (8003dd0 <User_Uart_Init+0x138>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	685a      	ldr	r2, [r3, #4]
 8003d70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003d74:	011b      	lsls	r3, r3, #4
 8003d76:	4413      	add	r3, r2
 8003d78:	7b9b      	ldrb	r3, [r3, #14]
 8003d7a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    	HWConfig.u8HwChannelID = UartConfigPtr->ChannelConfig[u8ChannelCount].u8HwChannelID;
 8003d7e:	4b14      	ldr	r3, [pc, #80]	; (8003dd0 <User_Uart_Init+0x138>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003d88:	011b      	lsls	r3, r3, #4
 8003d8a:	4413      	add	r3, r2
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	773b      	strb	r3, [r7, #28]
		if(HWConfig.SlipStatus == USER_UART_SLIP_ENABLE)
 8003d90:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d103      	bne.n	8003da0 <User_Uart_Init+0x108>
		{
        	User_Slip_Init(HWConfig.u8HwChannelID);
 8003d98:	7f3b      	ldrb	r3, [r7, #28]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f000 feb0 	bl	8004b00 <User_Slip_Init>
		}
        User_Uart_Ipw_Init(&HWConfig);
 8003da0:	f107 031c 	add.w	r3, r7, #28
 8003da4:	4618      	mov	r0, r3
 8003da6:	f000 f867 	bl	8003e78 <User_Uart_Ipw_Init>
    for(u8ChannelCount = 0u; u8ChannelCount < UartConfigPtr->numberChannel; u8ChannelCount++)
 8003daa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003dae:	3301      	adds	r3, #1
 8003db0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003db4:	4b06      	ldr	r3, [pc, #24]	; (8003dd0 <User_Uart_Init+0x138>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d3ad      	bcc.n	8003d1e <User_Uart_Init+0x86>
    }
}
 8003dc2:	bf00      	nop
 8003dc4:	bf00      	nop
 8003dc6:	3730      	adds	r7, #48	; 0x30
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	40023800 	.word	0x40023800
 8003dd0:	20000244 	.word	0x20000244

08003dd4 <User_Uart_AsyncTransmit>:

Std_ReturnType User_Uart_AsyncTransmit(uint8_t u8ChannelId, uint8_t *DataPtr, uint16_t DataLen)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	4603      	mov	r3, r0
 8003ddc:	6039      	str	r1, [r7, #0]
 8003dde:	71fb      	strb	r3, [r7, #7]
 8003de0:	4613      	mov	r3, r2
 8003de2:	80bb      	strh	r3, [r7, #4]
	uint8_t u8count;
	uint8_t ChannelID = 0xFFu;
 8003de4:	23ff      	movs	r3, #255	; 0xff
 8003de6:	73bb      	strb	r3, [r7, #14]
	Std_ReturnType ret = E_NOT_OK;
 8003de8:	2301      	movs	r3, #1
 8003dea:	737b      	strb	r3, [r7, #13]

	if(UartConfigPtr == NULL)
 8003dec:	4b21      	ldr	r3, [pc, #132]	; (8003e74 <User_Uart_AsyncTransmit+0xa0>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d101      	bne.n	8003df8 <User_Uart_AsyncTransmit+0x24>
	{
		return E_NOT_OK;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e039      	b.n	8003e6c <User_Uart_AsyncTransmit+0x98>
	}

	for(u8count = 0;u8count < UartConfigPtr->numberChannel;u8count++)
 8003df8:	2300      	movs	r3, #0
 8003dfa:	73fb      	strb	r3, [r7, #15]
 8003dfc:	e00f      	b.n	8003e1e <User_Uart_AsyncTransmit+0x4a>
	{
		if(UartConfigPtr->ChannelConfig[u8count].u8HwChannelID == u8ChannelId)
 8003dfe:	4b1d      	ldr	r3, [pc, #116]	; (8003e74 <User_Uart_AsyncTransmit+0xa0>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	685a      	ldr	r2, [r3, #4]
 8003e04:	7bfb      	ldrb	r3, [r7, #15]
 8003e06:	011b      	lsls	r3, r3, #4
 8003e08:	4413      	add	r3, r2
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	79fa      	ldrb	r2, [r7, #7]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d102      	bne.n	8003e18 <User_Uart_AsyncTransmit+0x44>
		{
			ChannelID = u8count;
 8003e12:	7bfb      	ldrb	r3, [r7, #15]
 8003e14:	73bb      	strb	r3, [r7, #14]
			break;
 8003e16:	e008      	b.n	8003e2a <User_Uart_AsyncTransmit+0x56>
	for(u8count = 0;u8count < UartConfigPtr->numberChannel;u8count++)
 8003e18:	7bfb      	ldrb	r3, [r7, #15]
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	73fb      	strb	r3, [r7, #15]
 8003e1e:	4b15      	ldr	r3, [pc, #84]	; (8003e74 <User_Uart_AsyncTransmit+0xa0>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	7bfa      	ldrb	r2, [r7, #15]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d3e9      	bcc.n	8003dfe <User_Uart_AsyncTransmit+0x2a>
		}
	}

	if(ChannelID == 0xFF)
 8003e2a:	7bbb      	ldrb	r3, [r7, #14]
 8003e2c:	2bff      	cmp	r3, #255	; 0xff
 8003e2e:	d101      	bne.n	8003e34 <User_Uart_AsyncTransmit+0x60>
	{
		return E_NOT_OK;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e01b      	b.n	8003e6c <User_Uart_AsyncTransmit+0x98>
	}

	if(UartConfigPtr->ChannelConfig[ChannelID].SlipStatus == USER_UART_SLIP_ENABLE)
 8003e34:	4b0f      	ldr	r3, [pc, #60]	; (8003e74 <User_Uart_AsyncTransmit+0xa0>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	685a      	ldr	r2, [r3, #4]
 8003e3a:	7bbb      	ldrb	r3, [r7, #14]
 8003e3c:	011b      	lsls	r3, r3, #4
 8003e3e:	4413      	add	r3, r2
 8003e40:	7b9b      	ldrb	r3, [r3, #14]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d108      	bne.n	8003e58 <User_Uart_AsyncTransmit+0x84>
	{
		ret = User_Slip_SendFrame(u8ChannelId,DataPtr,DataLen);
 8003e46:	88ba      	ldrh	r2, [r7, #4]
 8003e48:	79fb      	ldrb	r3, [r7, #7]
 8003e4a:	6839      	ldr	r1, [r7, #0]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f000 fe89 	bl	8004b64 <User_Slip_SendFrame>
 8003e52:	4603      	mov	r3, r0
 8003e54:	737b      	strb	r3, [r7, #13]
 8003e56:	e008      	b.n	8003e6a <User_Uart_AsyncTransmit+0x96>
	}
	else
	{
		ret = User_Uart_Ipw_AsyncTransmit(u8ChannelId,DataPtr,DataLen);
 8003e58:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003e5c:	79fb      	ldrb	r3, [r7, #7]
 8003e5e:	6839      	ldr	r1, [r7, #0]
 8003e60:	4618      	mov	r0, r3
 8003e62:	f000 f82c 	bl	8003ebe <User_Uart_Ipw_AsyncTransmit>
 8003e66:	4603      	mov	r3, r0
 8003e68:	737b      	strb	r3, [r7, #13]
	}
    return ret;
 8003e6a:	7b7b      	ldrb	r3, [r7, #13]
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3710      	adds	r7, #16
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	20000244 	.word	0x20000244

08003e78 <User_Uart_Ipw_Init>:
#include "User_Uart_Ipw.h"

void User_Uart_Ipw_Init(User_Uart_HWConfigType *HwConfig)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
	if(HwConfig->u8HwChannelID < 3U)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d916      	bls.n	8003eb6 <User_Uart_Ipw_Init+0x3e>
	{
		//User_Ip_LPuart_Init(HwConfig);
	}
	else if(HwConfig->u8HwChannelID < 9U)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	2b08      	cmp	r3, #8
 8003e8e:	d809      	bhi.n	8003ea4 <User_Uart_Ipw_Init+0x2c>
	{
		HwConfig->u8HwChannelID = HwConfig->u8HwChannelID - 3U;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	3b03      	subs	r3, #3
 8003e96:	b2da      	uxtb	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	701a      	strb	r2, [r3, #0]
		User_Ip_Usart_Init(HwConfig);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 fbfd 	bl	800469c <User_Ip_Usart_Init>
	else
	{
		HwConfig->u8HwChannelID = HwConfig->u8HwChannelID - 10U;
		User_Ip_Uart_Init(HwConfig);
	}
}
 8003ea2:	e008      	b.n	8003eb6 <User_Uart_Ipw_Init+0x3e>
		HwConfig->u8HwChannelID = HwConfig->u8HwChannelID - 10U;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	3b0a      	subs	r3, #10
 8003eaa:	b2da      	uxtb	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	701a      	strb	r2, [r3, #0]
		User_Ip_Uart_Init(HwConfig);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f000 f909 	bl	80040c8 <User_Ip_Uart_Init>
}
 8003eb6:	bf00      	nop
 8003eb8:	3708      	adds	r7, #8
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <User_Uart_Ipw_AsyncTransmit>:

Std_ReturnType User_Uart_Ipw_AsyncTransmit(uint8_t u8ChannelId, const uint8_t *u8DataPtr, int16_t u16DataLen)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b084      	sub	sp, #16
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	6039      	str	r1, [r7, #0]
 8003ec8:	71fb      	strb	r3, [r7, #7]
 8003eca:	4613      	mov	r3, r2
 8003ecc:	80bb      	strh	r3, [r7, #4]
	Std_ReturnType ret = E_NOT_OK;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	73fb      	strb	r3, [r7, #15]
	uint8_t channelID = u8ChannelId;
 8003ed2:	79fb      	ldrb	r3, [r7, #7]
 8003ed4:	73bb      	strb	r3, [r7, #14]

	if(channelID < 3U)
 8003ed6:	7bbb      	ldrb	r3, [r7, #14]
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d91b      	bls.n	8003f14 <User_Uart_Ipw_AsyncTransmit+0x56>
	{
		//ret = User_Ip_LPuart_WriteBuffer(channelID,u8DataPtr,u16DataLen);
	}
	else if(channelID < 9U)
 8003edc:	7bbb      	ldrb	r3, [r7, #14]
 8003ede:	2b08      	cmp	r3, #8
 8003ee0:	d80c      	bhi.n	8003efc <User_Uart_Ipw_AsyncTransmit+0x3e>
	{
		channelID = channelID - 3u;
 8003ee2:	7bbb      	ldrb	r3, [r7, #14]
 8003ee4:	3b03      	subs	r3, #3
 8003ee6:	73bb      	strb	r3, [r7, #14]
		ret = User_Ip_Usart_WriteBuffer(channelID,u8DataPtr,u16DataLen);
 8003ee8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003eec:	7bbb      	ldrb	r3, [r7, #14]
 8003eee:	6839      	ldr	r1, [r7, #0]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f000 fcb3 	bl	800485c <User_Ip_Usart_WriteBuffer>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	73fb      	strb	r3, [r7, #15]
 8003efa:	e00b      	b.n	8003f14 <User_Uart_Ipw_AsyncTransmit+0x56>
	}
	else
	{
		channelID = channelID - 10u;
 8003efc:	7bbb      	ldrb	r3, [r7, #14]
 8003efe:	3b0a      	subs	r3, #10
 8003f00:	73bb      	strb	r3, [r7, #14]
		ret = User_Ip_Uart_WriteBuffer(channelID,u8DataPtr,u16DataLen);
 8003f02:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003f06:	7bbb      	ldrb	r3, [r7, #14]
 8003f08:	6839      	ldr	r1, [r7, #0]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f000 f9b2 	bl	8004274 <User_Ip_Uart_WriteBuffer>
 8003f10:	4603      	mov	r3, r0
 8003f12:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8003f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3710      	adds	r7, #16
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
	...

08003f20 <User_Ip_Uart_SetBaudrate>:

static inline void User_Ip_Uart_PutChar(User_Ip_Uart_Type * Uart_channel, uint8_t u8Data);
static inline void User_Ip_Uart_TransmitBuffer(uint8_t u8ChannelId);

static Std_ReturnType User_Ip_Uart_SetBaudrate(User_Ip_Uart_Type *HwChannel, uint32_t UartSourceClock, uint32_t baudrate)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b089      	sub	sp, #36	; 0x24
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
	/* Check Source Clock */
	uint32_t BaudrateDiv = 0;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	61bb      	str	r3, [r7, #24]
	uint8_t  Value = 0;
 8003f30:	2300      	movs	r3, #0
 8003f32:	77fb      	strb	r3, [r7, #31]
	uint32_t  UartDiv_Mant = 0;
 8003f34:	2300      	movs	r3, #0
 8003f36:	617b      	str	r3, [r7, #20]
	uint32_t  UartDiv_Frac = 0;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	613b      	str	r3, [r7, #16]

	Value = (HwChannel->CR1 & USER_IP_USART_CR1_OVER8_MASK) >> USER_IP_USART_CR1_OVER8_SHIFT;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	0bdb      	lsrs	r3, r3, #15
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	f003 0301 	and.w	r3, r3, #1
 8003f48:	77fb      	strb	r3, [r7, #31]
    Value = 2 - Value;
 8003f4a:	7ffb      	ldrb	r3, [r7, #31]
 8003f4c:	f1c3 0302 	rsb	r3, r3, #2
 8003f50:	77fb      	strb	r3, [r7, #31]

	BaudrateDiv = UartSourceClock / (baudrate/100);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a23      	ldr	r2, [pc, #140]	; (8003fe4 <User_Ip_Uart_SetBaudrate+0xc4>)
 8003f56:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5a:	095b      	lsrs	r3, r3, #5
 8003f5c:	68ba      	ldr	r2, [r7, #8]
 8003f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f62:	61bb      	str	r3, [r7, #24]
	BaudrateDiv = BaudrateDiv / (8 * Value);
 8003f64:	7ffb      	ldrb	r3, [r7, #31]
 8003f66:	00db      	lsls	r3, r3, #3
 8003f68:	461a      	mov	r2, r3
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f70:	61bb      	str	r3, [r7, #24]

    UartDiv_Mant  = BaudrateDiv /100;
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	4a1b      	ldr	r2, [pc, #108]	; (8003fe4 <User_Ip_Uart_SetBaudrate+0xc4>)
 8003f76:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7a:	095b      	lsrs	r3, r3, #5
 8003f7c:	617b      	str	r3, [r7, #20]
	UartDiv_Frac  = BaudrateDiv - 100 * UartDiv_Mant;
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	2264      	movs	r2, #100	; 0x64
 8003f82:	fb02 f303 	mul.w	r3, r2, r3
 8003f86:	69ba      	ldr	r2, [r7, #24]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	613b      	str	r3, [r7, #16]

	Value  = (UartDiv_Frac * 16)/100;
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	011b      	lsls	r3, r3, #4
 8003f90:	4a14      	ldr	r2, [pc, #80]	; (8003fe4 <User_Ip_Uart_SetBaudrate+0xc4>)
 8003f92:	fba2 2303 	umull	r2, r3, r2, r3
 8003f96:	095b      	lsrs	r3, r3, #5
 8003f98:	77fb      	strb	r3, [r7, #31]

	if((UartDiv_Frac * 16)%100 >= 50)
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	011a      	lsls	r2, r3, #4
 8003f9e:	4b11      	ldr	r3, [pc, #68]	; (8003fe4 <User_Ip_Uart_SetBaudrate+0xc4>)
 8003fa0:	fba3 1302 	umull	r1, r3, r3, r2
 8003fa4:	095b      	lsrs	r3, r3, #5
 8003fa6:	2164      	movs	r1, #100	; 0x64
 8003fa8:	fb01 f303 	mul.w	r3, r1, r3
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b31      	cmp	r3, #49	; 0x31
 8003fb0:	d902      	bls.n	8003fb8 <User_Ip_Uart_SetBaudrate+0x98>
	{
		Value = Value + 1;
 8003fb2:	7ffb      	ldrb	r3, [r7, #31]
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	77fb      	strb	r3, [r7, #31]
	}
    UartDiv_Frac = Value;
 8003fb8:	7ffb      	ldrb	r3, [r7, #31]
 8003fba:	613b      	str	r3, [r7, #16]

	HwChannel->BRR = (UartDiv_Mant << USER_IP_USART_BRR_MANT_SHIFT) & USER_IP_USART_BRR_MANT_MASK;
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	011b      	lsls	r3, r3, #4
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	609a      	str	r2, [r3, #8]
	HwChannel->BRR |= (Value << USER_IP_USART_BRR_FRAC_SHIFT) & USER_IP_USART_BRR_FRAC_MASK;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	689a      	ldr	r2, [r3, #8]
 8003fca:	7ffb      	ldrb	r3, [r7, #31]
 8003fcc:	f003 030f 	and.w	r3, r3, #15
 8003fd0:	431a      	orrs	r2, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	609a      	str	r2, [r3, #8]

	return E_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3724      	adds	r7, #36	; 0x24
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr
 8003fe4:	51eb851f 	.word	0x51eb851f

08003fe8 <User_Ip_Uart_SetParityMode>:

static void User_Ip_Uart_SetParityMode(User_Ip_Uart_Type *HwChannel, User_Uart_ParityMode_t parityMode)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	70fb      	strb	r3, [r7, #3]
	uint8_t u8ParityMode = 0u;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	73fb      	strb	r3, [r7, #15]
	if(parityMode == USER_UART_PARITY_NONE)
 8003ff8:	78fb      	ldrb	r3, [r7, #3]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d106      	bne.n	800400c <User_Ip_Uart_SetParityMode+0x24>
	{
		HwChannel->CR1 &= ~USER_IP_UART_CR1_PCE_MASK;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	60da      	str	r2, [r3, #12]
		u8ParityMode = parityMode - 1u;
		HwChannel->CR1 &= ~USER_IP_UART_CR1_PS_MASK;
		HwChannel->CR1 |= (u8ParityMode << USER_IP_UART_CR1_PS_SHIFT) & USER_IP_UART_CR1_PS_MASK;
		HwChannel->CR1 |= USER_IP_UART_CR1_PCE_MASK;
	}
}
 800400a:	e017      	b.n	800403c <User_Ip_Uart_SetParityMode+0x54>
		u8ParityMode = parityMode - 1u;
 800400c:	78fb      	ldrb	r3, [r7, #3]
 800400e:	3b01      	subs	r3, #1
 8004010:	73fb      	strb	r3, [r7, #15]
		HwChannel->CR1 &= ~USER_IP_UART_CR1_PS_MASK;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	60da      	str	r2, [r3, #12]
		HwChannel->CR1 |= (u8ParityMode << USER_IP_UART_CR1_PS_SHIFT) & USER_IP_UART_CR1_PS_MASK;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	68da      	ldr	r2, [r3, #12]
 8004022:	7bfb      	ldrb	r3, [r7, #15]
 8004024:	025b      	lsls	r3, r3, #9
 8004026:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800402a:	431a      	orrs	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	60da      	str	r2, [r3, #12]
		HwChannel->CR1 |= USER_IP_UART_CR1_PCE_MASK;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	60da      	str	r2, [r3, #12]
}
 800403c:	bf00      	nop
 800403e:	3714      	adds	r7, #20
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <User_Ip_Uart_SetStopBitCount>:

static void User_Ip_Uart_SetStopBitCount(User_Ip_Uart_Type *HwChannel, User_Uart_StopBitCount_t stopBitCount)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	460b      	mov	r3, r1
 8004052:	70fb      	strb	r3, [r7, #3]
	HwChannel->CR2 &= ~USER_IP_UART_CR2_STOP_MASK;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	611a      	str	r2, [r3, #16]
	HwChannel->CR2 |= (stopBitCount << USER_IP_UART_CR2_STOP_SHIFT) & USER_IP_UART_CR2_STOP_MASK;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	691a      	ldr	r2, [r3, #16]
 8004064:	78fb      	ldrb	r3, [r7, #3]
 8004066:	031b      	lsls	r3, r3, #12
 8004068:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800406c:	431a      	orrs	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	611a      	str	r2, [r3, #16]
}
 8004072:	bf00      	nop
 8004074:	370c      	adds	r7, #12
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
	...

08004080 <User_Ip_Uart_DeInit>:

void User_Ip_Uart_DeInit(User_Ip_Uart_Type *HwChannel)
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]

	User_Ip_Uart_RingBuffer_t *BufferChannel;

	HwChannel->CR1 = USER_IP_UART_RESET_VALUE;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	60da      	str	r2, [r3, #12]
	HwChannel->CR2 = USER_IP_UART_RESET_VALUE;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	611a      	str	r2, [r3, #16]
	HwChannel->CR3 = USER_IP_UART_RESET_VALUE;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	615a      	str	r2, [r3, #20]
	HwChannel->BRR = USER_IP_UART_RESET_VALUE;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	609a      	str	r2, [r3, #8]



	BufferChannel = &Buffer_Uart4Channel;
 80040a0:	4b08      	ldr	r3, [pc, #32]	; (80040c4 <User_Ip_Uart_DeInit+0x44>)
 80040a2:	60fb      	str	r3, [r7, #12]

	BufferChannel->TxHead = 0u;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	815a      	strh	r2, [r3, #10]
	BufferChannel->TxTail = 0u;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	811a      	strh	r2, [r3, #8]
	BufferChannel->Status = UART_BUFFER_UNLOCK;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2200      	movs	r2, #0
 80040b4:	741a      	strb	r2, [r3, #16]
}
 80040b6:	bf00      	nop
 80040b8:	3714      	adds	r7, #20
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	20000248 	.word	0x20000248

080040c8 <User_Ip_Uart_Init>:

void User_Ip_Uart_Init(User_Uart_HWConfigType *HwConfig)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b086      	sub	sp, #24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
	uint8_t u8ChannelId = HwConfig->u8HwChannelID;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	75fb      	strb	r3, [r7, #23]
	User_Ip_Uart_Type *Uart = User_Ip_Uart_BaseAddress[u8ChannelId];
 80040d6:	7dfb      	ldrb	r3, [r7, #23]
 80040d8:	4a2f      	ldr	r2, [pc, #188]	; (8004198 <User_Ip_Uart_Init+0xd0>)
 80040da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040de:	613b      	str	r3, [r7, #16]
	
	User_Ip_Uart_DeInit(Uart);
 80040e0:	6938      	ldr	r0, [r7, #16]
 80040e2:	f7ff ffcd 	bl	8004080 <User_Ip_Uart_DeInit>
	Uart->CR1 &= ~USER_IP_UART_CR1_TE_MASK;
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	f023 0208 	bic.w	r2, r3, #8
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	60da      	str	r2, [r3, #12]
	Uart->CR1 &= ~USER_IP_UART_CR1_RE_MASK;
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	f023 0204 	bic.w	r2, r3, #4
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	60da      	str	r2, [r3, #12]

	User_Ip_Uart_SetBaudrate (
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6859      	ldr	r1, [r3, #4]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	461a      	mov	r2, r3
 8004108:	6938      	ldr	r0, [r7, #16]
 800410a:	f7ff ff09 	bl	8003f20 <User_Ip_Uart_SetBaudrate>
								   Uart,
								   HwConfig->u32SourceClock,
								   HwConfig->u32Baudrate
	                           );

	User_Ip_Uart_SetParityMode (
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	7b1b      	ldrb	r3, [r3, #12]
 8004112:	4619      	mov	r1, r3
 8004114:	6938      	ldr	r0, [r7, #16]
 8004116:	f7ff ff67 	bl	8003fe8 <User_Ip_Uart_SetParityMode>
									Uart,
									HwConfig->ParityMode
			                     );

	User_Ip_Uart_SetStopBitCount (
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	7b5b      	ldrb	r3, [r3, #13]
 800411e:	4619      	mov	r1, r3
 8004120:	6938      	ldr	r0, [r7, #16]
 8004122:	f7ff ff91 	bl	8004048 <User_Ip_Uart_SetStopBitCount>
									  Uart,
									  HwConfig->StopBitCount
			                       );
	User_Ip_Uart_RingBuffer_t *BufferChannel;
	BufferChannel = User_Ip_Uart_GetBuffer(u8ChannelId);
 8004126:	7dfb      	ldrb	r3, [r7, #23]
 8004128:	4618      	mov	r0, r3
 800412a:	f000 f875 	bl	8004218 <User_Ip_Uart_GetBuffer>
 800412e:	60f8      	str	r0, [r7, #12]
	BufferChannel->RingTxBufferChannel = (uint8_t *)calloc(USER_IP_UART_SIZE_RINGBUFF,sizeof(uint8_t));
 8004130:	2101      	movs	r1, #1
 8004132:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004136:	f002 f8df 	bl	80062f8 <calloc>
 800413a:	4603      	mov	r3, r0
 800413c:	461a      	mov	r2, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	601a      	str	r2, [r3, #0]
	BufferChannel->RingRxBufferChannel = (uint8_t *)calloc(USER_IP_UART_SIZE_RINGBUFF,sizeof(uint8_t));
 8004142:	2101      	movs	r1, #1
 8004144:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004148:	f002 f8d6 	bl	80062f8 <calloc>
 800414c:	4603      	mov	r3, r0
 800414e:	461a      	mov	r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	605a      	str	r2, [r3, #4]
	



	Uart->CR3 |= (
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	695b      	ldr	r3, [r3, #20]
 8004158:	f043 0201 	orr.w	r2, r3, #1
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	615a      	str	r2, [r3, #20]
						 USER_IP_UART_CR3_EIE_MASK
					);

	Uart->CR1 |= (
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004168:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	60d3      	str	r3, [r2, #12]
						 USER_IP_UART_CR1_RE_MASK |
						 USER_IP_UART_CR1_UE_MASK
					  );

	/* Enable Interrupt*/
	HAL_NVIC_EnableIRQ(User_Uart_IRQn[u8ChannelId]);
 8004170:	7dfb      	ldrb	r3, [r7, #23]
 8004172:	4a0a      	ldr	r2, [pc, #40]	; (800419c <User_Ip_Uart_Init+0xd4>)
 8004174:	5cd3      	ldrb	r3, [r2, r3]
 8004176:	b25b      	sxtb	r3, r3
 8004178:	4618      	mov	r0, r3
 800417a:	f000 ff04 	bl	8004f86 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(User_Uart_IRQn[u8ChannelId],USER_IP_UART_PRIORITY,0u);
 800417e:	7dfb      	ldrb	r3, [r7, #23]
 8004180:	4a06      	ldr	r2, [pc, #24]	; (800419c <User_Ip_Uart_Init+0xd4>)
 8004182:	5cd3      	ldrb	r3, [r2, r3]
 8004184:	b25b      	sxtb	r3, r3
 8004186:	2200      	movs	r2, #0
 8004188:	2101      	movs	r1, #1
 800418a:	4618      	mov	r0, r3
 800418c:	f000 fedf 	bl	8004f4e <HAL_NVIC_SetPriority>

}
 8004190:	bf00      	nop
 8004192:	3718      	adds	r7, #24
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	080069ac 	.word	0x080069ac
 800419c:	2000010c 	.word	0x2000010c

080041a0 <User_Ip_Uart_GetChar>:

static inline uint8_t User_Ip_Uart_GetChar(User_Ip_Uart_Type * Uart_channel)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
	return (Uart_channel->DR);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	b2db      	uxtb	r3, r3
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	370c      	adds	r7, #12
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr

080041ba <User_Ip_Uart_PutChar>:

static inline void User_Ip_Uart_PutChar(User_Ip_Uart_Type *Uart_channel, uint8_t u8Data)
{
 80041ba:	b480      	push	{r7}
 80041bc:	b083      	sub	sp, #12
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
 80041c2:	460b      	mov	r3, r1
 80041c4:	70fb      	strb	r3, [r7, #3]
	Uart_channel->DR = u8Data;
 80041c6:	78fa      	ldrb	r2, [r7, #3]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	605a      	str	r2, [r3, #4]
}
 80041cc:	bf00      	nop
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <User_Ip_Uart_StartAsyncTransmit>:

void User_Ip_Uart_StartAsyncTransmit(User_Ip_Uart_Type *Uart_channel)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
	Uart_channel->CR1 |= USER_IP_UART_CR1_TXEIE_MASK;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	60da      	str	r2, [r3, #12]
}
 80041ec:	bf00      	nop
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <User_Ip_Uart_StopAsyncTransmit>:

static inline void User_Ip_Uart_StopAsyncTransmit(User_Ip_Uart_Type *Uart_channel)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
	Uart_channel->CR1 &= ~USER_IP_UART_CR1_TXEIE_MASK;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	60da      	str	r2, [r3, #12]
}
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <User_Ip_Uart_GetBuffer>:

static User_Ip_Uart_RingBuffer_t *User_Ip_Uart_GetBuffer(uint8_t u8ChannelId)
{
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	4603      	mov	r3, r0
 8004220:	71fb      	strb	r3, [r7, #7]
	User_Ip_Uart_RingBuffer_t *BufferChannel;

	if(u8ChannelId == USER_IP_UART_CHANNELID_4)
 8004222:	79fb      	ldrb	r3, [r7, #7]
 8004224:	2b04      	cmp	r3, #4
 8004226:	d102      	bne.n	800422e <User_Ip_Uart_GetBuffer+0x16>
	{
		BufferChannel = &Buffer_Uart4Channel;
 8004228:	4b0e      	ldr	r3, [pc, #56]	; (8004264 <User_Ip_Uart_GetBuffer+0x4c>)
 800422a:	60fb      	str	r3, [r7, #12]
 800422c:	e013      	b.n	8004256 <User_Ip_Uart_GetBuffer+0x3e>
	}
	else if(u8ChannelId == USER_IP_UART_CHANNELID_5)
 800422e:	79fb      	ldrb	r3, [r7, #7]
 8004230:	2b05      	cmp	r3, #5
 8004232:	d102      	bne.n	800423a <User_Ip_Uart_GetBuffer+0x22>
	{
		BufferChannel = &Buffer_Uart5Channel;
 8004234:	4b0c      	ldr	r3, [pc, #48]	; (8004268 <User_Ip_Uart_GetBuffer+0x50>)
 8004236:	60fb      	str	r3, [r7, #12]
 8004238:	e00d      	b.n	8004256 <User_Ip_Uart_GetBuffer+0x3e>
	}
	else if(u8ChannelId == USER_IP_UART_CHANNELID_7)
 800423a:	79fb      	ldrb	r3, [r7, #7]
 800423c:	2b07      	cmp	r3, #7
 800423e:	d102      	bne.n	8004246 <User_Ip_Uart_GetBuffer+0x2e>
	{
		BufferChannel = &Buffer_Uart7Channel;
 8004240:	4b0a      	ldr	r3, [pc, #40]	; (800426c <User_Ip_Uart_GetBuffer+0x54>)
 8004242:	60fb      	str	r3, [r7, #12]
 8004244:	e007      	b.n	8004256 <User_Ip_Uart_GetBuffer+0x3e>
	}
	else if(u8ChannelId == USER_IP_UART_CHANNELID_8)
 8004246:	79fb      	ldrb	r3, [r7, #7]
 8004248:	2b08      	cmp	r3, #8
 800424a:	d102      	bne.n	8004252 <User_Ip_Uart_GetBuffer+0x3a>
	{
		BufferChannel = &Buffer_Uart8Channel;
 800424c:	4b08      	ldr	r3, [pc, #32]	; (8004270 <User_Ip_Uart_GetBuffer+0x58>)
 800424e:	60fb      	str	r3, [r7, #12]
 8004250:	e001      	b.n	8004256 <User_Ip_Uart_GetBuffer+0x3e>
	}
	else
	{
		BufferChannel = NULL;
 8004252:	2300      	movs	r3, #0
 8004254:	60fb      	str	r3, [r7, #12]
	}

	return BufferChannel;
 8004256:	68fb      	ldr	r3, [r7, #12]
}
 8004258:	4618      	mov	r0, r3
 800425a:	3714      	adds	r7, #20
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr
 8004264:	20000248 	.word	0x20000248
 8004268:	2000025c 	.word	0x2000025c
 800426c:	20000270 	.word	0x20000270
 8004270:	20000284 	.word	0x20000284

08004274 <User_Ip_Uart_WriteBuffer>:


Std_ReturnType User_Ip_Uart_WriteBuffer(uint8_t u8ChannelId, const uint8_t *u8DataPtr, int16_t u16DataLen)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b086      	sub	sp, #24
 8004278:	af00      	add	r7, sp, #0
 800427a:	4603      	mov	r3, r0
 800427c:	6039      	str	r1, [r7, #0]
 800427e:	71fb      	strb	r3, [r7, #7]
 8004280:	4613      	mov	r3, r2
 8004282:	80bb      	strh	r3, [r7, #4]
    Std_ReturnType ret = E_NOT_OK;
 8004284:	2301      	movs	r3, #1
 8004286:	75fb      	strb	r3, [r7, #23]
    uint16_t u16CountLen = 0u;
 8004288:	2300      	movs	r3, #0
 800428a:	82bb      	strh	r3, [r7, #20]
    uint16_t u16AvailableLen = 0u;
 800428c:	2300      	movs	r3, #0
 800428e:	827b      	strh	r3, [r7, #18]
    User_Ip_Uart_RingBuffer_t *BufferChannel;
    BufferChannel = User_Ip_Uart_GetBuffer(u8ChannelId);
 8004290:	79fb      	ldrb	r3, [r7, #7]
 8004292:	4618      	mov	r0, r3
 8004294:	f7ff ffc0 	bl	8004218 <User_Ip_Uart_GetBuffer>
 8004298:	60f8      	str	r0, [r7, #12]
    if(BufferChannel == NULL)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d101      	bne.n	80042a4 <User_Ip_Uart_WriteBuffer+0x30>
	{
		return E_NOT_OK;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e05d      	b.n	8004360 <User_Ip_Uart_WriteBuffer+0xec>
	}

	if(u8DataPtr == NULL || u16DataLen == 0u)
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d003      	beq.n	80042b2 <User_Ip_Uart_WriteBuffer+0x3e>
 80042aa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d101      	bne.n	80042b6 <User_Ip_Uart_WriteBuffer+0x42>
	{
		return E_NOT_OK;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e054      	b.n	8004360 <User_Ip_Uart_WriteBuffer+0xec>
	}

	if(UART_BUFFER_UNLOCK == BufferChannel->Status)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	7c1b      	ldrb	r3, [r3, #16]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d14f      	bne.n	800435e <User_Ip_Uart_WriteBuffer+0xea>
	{
		if(BufferChannel->TxHead > BufferChannel->TxTail)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	895b      	ldrh	r3, [r3, #10]
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	891b      	ldrh	r3, [r3, #8]
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d908      	bls.n	80042e0 <User_Ip_Uart_WriteBuffer+0x6c>
		{
			u16AvailableLen = BufferChannel->TxHead - BufferChannel->TxTail;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	895b      	ldrh	r3, [r3, #10]
 80042d2:	b29a      	uxth	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	891b      	ldrh	r3, [r3, #8]
 80042d8:	b29b      	uxth	r3, r3
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	827b      	strh	r3, [r7, #18]
 80042de:	e00a      	b.n	80042f6 <User_Ip_Uart_WriteBuffer+0x82>
		}
		else
		{
			u16AvailableLen = (USER_IP_UART_SIZE_RINGBUFF - BufferChannel->TxTail) + BufferChannel->TxHead;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	895b      	ldrh	r3, [r3, #10]
 80042e4:	b29a      	uxth	r2, r3
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	891b      	ldrh	r3, [r3, #8]
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042f4:	827b      	strh	r3, [r7, #18]
		}

		if(u16AvailableLen >= u16DataLen)
 80042f6:	8a7a      	ldrh	r2, [r7, #18]
 80042f8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	db2e      	blt.n	800435e <User_Ip_Uart_WriteBuffer+0xea>
		{
			BufferChannel->Status = UART_BUFFER_LOCK;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2201      	movs	r2, #1
 8004304:	741a      	strb	r2, [r3, #16]
			for(u16CountLen = 0u;u16CountLen < u16DataLen;u16CountLen ++)
 8004306:	2300      	movs	r3, #0
 8004308:	82bb      	strh	r3, [r7, #20]
 800430a:	e017      	b.n	800433c <User_Ip_Uart_WriteBuffer+0xc8>
			{
				BufferChannel->RingTxBufferChannel[BufferChannel->TxTail] = u8DataPtr[u16CountLen];
 800430c:	8abb      	ldrh	r3, [r7, #20]
 800430e:	683a      	ldr	r2, [r7, #0]
 8004310:	441a      	add	r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68f9      	ldr	r1, [r7, #12]
 8004318:	8909      	ldrh	r1, [r1, #8]
 800431a:	b289      	uxth	r1, r1
 800431c:	440b      	add	r3, r1
 800431e:	7812      	ldrb	r2, [r2, #0]
 8004320:	701a      	strb	r2, [r3, #0]
				BufferChannel->TxTail = (BufferChannel->TxTail + 1U) & (USER_IP_UART_SIZE_RINGBUFF - 1U);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	891b      	ldrh	r3, [r3, #8]
 8004326:	b29b      	uxth	r3, r3
 8004328:	3301      	adds	r3, #1
 800432a:	b29b      	uxth	r3, r3
 800432c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004330:	b29a      	uxth	r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	811a      	strh	r2, [r3, #8]
			for(u16CountLen = 0u;u16CountLen < u16DataLen;u16CountLen ++)
 8004336:	8abb      	ldrh	r3, [r7, #20]
 8004338:	3301      	adds	r3, #1
 800433a:	82bb      	strh	r3, [r7, #20]
 800433c:	8aba      	ldrh	r2, [r7, #20]
 800433e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004342:	429a      	cmp	r2, r3
 8004344:	dbe2      	blt.n	800430c <User_Ip_Uart_WriteBuffer+0x98>

			}
			BufferChannel->Status = UART_BUFFER_UNLOCK;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	741a      	strb	r2, [r3, #16]
			User_Ip_Uart_StartAsyncTransmit(User_Ip_Uart_BaseAddress[u8ChannelId]);
 800434c:	79fb      	ldrb	r3, [r7, #7]
 800434e:	4a06      	ldr	r2, [pc, #24]	; (8004368 <User_Ip_Uart_WriteBuffer+0xf4>)
 8004350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004354:	4618      	mov	r0, r3
 8004356:	f7ff ff3f 	bl	80041d8 <User_Ip_Uart_StartAsyncTransmit>
			ret = E_OK;
 800435a:	2300      	movs	r3, #0
 800435c:	75fb      	strb	r3, [r7, #23]
		}
	}
    return ret;
 800435e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004360:	4618      	mov	r0, r3
 8004362:	3718      	adds	r7, #24
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}
 8004368:	080069ac 	.word	0x080069ac

0800436c <User_Ip_Uart_TransmitBuffer>:

    return E_OK;
}

static inline void User_Ip_Uart_TransmitBuffer(uint8_t u8ChannelId)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	4603      	mov	r3, r0
 8004374:	71fb      	strb	r3, [r7, #7]
	User_Ip_Uart_RingBuffer_t *BufferChannel;
	User_Ip_Uart_Type *HwChannel = User_Ip_Uart_BaseAddress[u8ChannelId];
 8004376:	79fb      	ldrb	r3, [r7, #7]
 8004378:	4a19      	ldr	r2, [pc, #100]	; (80043e0 <User_Ip_Uart_TransmitBuffer+0x74>)
 800437a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800437e:	60fb      	str	r3, [r7, #12]

    BufferChannel = User_Ip_Uart_GetBuffer(u8ChannelId);
 8004380:	79fb      	ldrb	r3, [r7, #7]
 8004382:	4618      	mov	r0, r3
 8004384:	f7ff ff48 	bl	8004218 <User_Ip_Uart_GetBuffer>
 8004388:	60b8      	str	r0, [r7, #8]
    if(BufferChannel == NULL)
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d022      	beq.n	80043d6 <User_Ip_Uart_TransmitBuffer+0x6a>
	{
		return;
	}

	if(BufferChannel->TxTail != BufferChannel->TxHead)
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	891b      	ldrh	r3, [r3, #8]
 8004394:	b29a      	uxth	r2, r3
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	895b      	ldrh	r3, [r3, #10]
 800439a:	b29b      	uxth	r3, r3
 800439c:	429a      	cmp	r2, r3
 800439e:	d016      	beq.n	80043ce <User_Ip_Uart_TransmitBuffer+0x62>
	{
		User_Ip_Uart_PutChar(HwChannel,BufferChannel->RingTxBufferChannel[BufferChannel->TxHead]);
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68ba      	ldr	r2, [r7, #8]
 80043a6:	8952      	ldrh	r2, [r2, #10]
 80043a8:	b292      	uxth	r2, r2
 80043aa:	4413      	add	r3, r2
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	4619      	mov	r1, r3
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	f7ff ff01 	bl	80041ba <User_Ip_Uart_PutChar>
		BufferChannel->TxHead = (BufferChannel->TxHead + 1U) & (USER_IP_UART_SIZE_RINGBUFF - 1U);
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	895b      	ldrh	r3, [r3, #10]
 80043bc:	b29b      	uxth	r3, r3
 80043be:	3301      	adds	r3, #1
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	815a      	strh	r2, [r3, #10]
 80043cc:	e004      	b.n	80043d8 <User_Ip_Uart_TransmitBuffer+0x6c>
	}
	else
	{
		User_Ip_Uart_StopAsyncTransmit(HwChannel);
 80043ce:	68f8      	ldr	r0, [r7, #12]
 80043d0:	f7ff ff12 	bl	80041f8 <User_Ip_Uart_StopAsyncTransmit>
 80043d4:	e000      	b.n	80043d8 <User_Ip_Uart_TransmitBuffer+0x6c>
		return;
 80043d6:	bf00      	nop
	}
}
 80043d8:	3710      	adds	r7, #16
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	080069ac 	.word	0x080069ac

080043e4 <User_Ip_Uart_ReceiveBuffer>:

static void User_Ip_Uart_ReceiveBuffer(uint8_t u8ChannelId, uint8_t u8Data)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	4603      	mov	r3, r0
 80043ec:	460a      	mov	r2, r1
 80043ee:	71fb      	strb	r3, [r7, #7]
 80043f0:	4613      	mov	r3, r2
 80043f2:	71bb      	strb	r3, [r7, #6]
    User_Ip_Uart_RingBuffer_t *BufferChannel;

    BufferChannel = User_Ip_Uart_GetBuffer(u8ChannelId);
 80043f4:	79fb      	ldrb	r3, [r7, #7]
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7ff ff0e 	bl	8004218 <User_Ip_Uart_GetBuffer>
 80043fc:	60f8      	str	r0, [r7, #12]
    if(BufferChannel == NULL)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d02e      	beq.n	8004462 <User_Ip_Uart_ReceiveBuffer+0x7e>
	{
		return;
	}

	BufferChannel->RingRxBufferChannel[BufferChannel->RxTail] = u8Data;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	8992      	ldrh	r2, [r2, #12]
 800440c:	b292      	uxth	r2, r2
 800440e:	4413      	add	r3, r2
 8004410:	79ba      	ldrb	r2, [r7, #6]
 8004412:	701a      	strb	r2, [r3, #0]
	BufferChannel->RxTail = (BufferChannel->RxTail + 1U) & (USER_IP_UART_SIZE_RINGBUFF - 1U);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	899b      	ldrh	r3, [r3, #12]
 8004418:	b29b      	uxth	r3, r3
 800441a:	3301      	adds	r3, #1
 800441c:	b29b      	uxth	r3, r3
 800441e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004422:	b29a      	uxth	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	819a      	strh	r2, [r3, #12]

	if(BufferChannel->RxTail == BufferChannel->RxHead)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	899b      	ldrh	r3, [r3, #12]
 800442c:	b29a      	uxth	r2, r3
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	89db      	ldrh	r3, [r3, #14]
 8004432:	b29b      	uxth	r3, r3
 8004434:	429a      	cmp	r2, r3
 8004436:	d115      	bne.n	8004464 <User_Ip_Uart_ReceiveBuffer+0x80>
	{
		if(BufferChannel->RxHead == 0U)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	89db      	ldrh	r3, [r3, #14]
 800443c:	b29b      	uxth	r3, r3
 800443e:	2b00      	cmp	r3, #0
 8004440:	d104      	bne.n	800444c <User_Ip_Uart_ReceiveBuffer+0x68>
		{
			BufferChannel->RxTail = USER_IP_UART_SIZE_RINGBUFF - 1U;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8004448:	819a      	strh	r2, [r3, #12]
 800444a:	e00b      	b.n	8004464 <User_Ip_Uart_ReceiveBuffer+0x80>
		}
		else
		{
			BufferChannel->RxTail = (BufferChannel->RxTail - 1U) & (USER_IP_UART_SIZE_RINGBUFF - 1U);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	899b      	ldrh	r3, [r3, #12]
 8004450:	b29b      	uxth	r3, r3
 8004452:	3b01      	subs	r3, #1
 8004454:	b29b      	uxth	r3, r3
 8004456:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800445a:	b29a      	uxth	r2, r3
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	819a      	strh	r2, [r3, #12]
 8004460:	e000      	b.n	8004464 <User_Ip_Uart_ReceiveBuffer+0x80>
		return;
 8004462:	bf00      	nop
		}
	}

}
 8004464:	3710      	adds	r7, #16
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
	...

0800446c <User_Ip_Uart_IrqHandler>:

static void User_Ip_Uart_IrqHandler(uint8_t u8ChannelId)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	4603      	mov	r3, r0
 8004474:	71fb      	strb	r3, [r7, #7]
	uint8_t Byte_Receive = 0u;
 8004476:	2300      	movs	r3, #0
 8004478:	73fb      	strb	r3, [r7, #15]
	User_Ip_Uart_Type *HwChannel = User_Ip_Uart_BaseAddress[u8ChannelId];
 800447a:	79fb      	ldrb	r3, [r7, #7]
 800447c:	4a15      	ldr	r2, [pc, #84]	; (80044d4 <User_Ip_Uart_IrqHandler+0x68>)
 800447e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004482:	60bb      	str	r3, [r7, #8]

	if((HwChannel->SR & USER_IP_UART_SR_TXE_MASK) == USER_IP_UART_SR_TXE_MASK)
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800448c:	2b00      	cmp	r3, #0
 800448e:	d003      	beq.n	8004498 <User_Ip_Uart_IrqHandler+0x2c>
	{
		User_Ip_Uart_TransmitBuffer(u8ChannelId);
 8004490:	79fb      	ldrb	r3, [r7, #7]
 8004492:	4618      	mov	r0, r3
 8004494:	f7ff ff6a 	bl	800436c <User_Ip_Uart_TransmitBuffer>
	}

	if((HwChannel->SR & USER_IP_UART_SR_RXNE_MASK) == USER_IP_UART_SR_RXNE_MASK)
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0320 	and.w	r3, r3, #32
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d00a      	beq.n	80044ba <User_Ip_Uart_IrqHandler+0x4e>
	{
		Byte_Receive = User_Ip_Uart_GetChar(HwChannel);
 80044a4:	68b8      	ldr	r0, [r7, #8]
 80044a6:	f7ff fe7b 	bl	80041a0 <User_Ip_Uart_GetChar>
 80044aa:	4603      	mov	r3, r0
 80044ac:	73fb      	strb	r3, [r7, #15]
		User_Ip_Uart_ReceiveBuffer(u8ChannelId,Byte_Receive);
 80044ae:	7bfa      	ldrb	r2, [r7, #15]
 80044b0:	79fb      	ldrb	r3, [r7, #7]
 80044b2:	4611      	mov	r1, r2
 80044b4:	4618      	mov	r0, r3
 80044b6:	f7ff ff95 	bl	80043e4 <User_Ip_Uart_ReceiveBuffer>
	{
		/*TODO*/

	}

	if((HwChannel->SR & USER_IP_UART_SR_ORE_MASK) == USER_IP_UART_SR_ORE_MASK)
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0308 	and.w	r3, r3, #8
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d002      	beq.n	80044cc <User_Ip_Uart_IrqHandler+0x60>
	{
		/*TODO*/
		User_Ip_Uart_GetChar(HwChannel);
 80044c6:	68b8      	ldr	r0, [r7, #8]
 80044c8:	f7ff fe6a 	bl	80041a0 <User_Ip_Uart_GetChar>
		HwChannel->SR ;
	}



}
 80044cc:	bf00      	nop
 80044ce:	3710      	adds	r7, #16
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	080069ac 	.word	0x080069ac

080044d8 <UART4_IRQHandler>:


void UART4_IRQHandler(void)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	af00      	add	r7, sp, #0
    User_Ip_Uart_IrqHandler(USER_IP_UART_CHANNELID_4);
 80044dc:	2004      	movs	r0, #4
 80044de:	f7ff ffc5 	bl	800446c <User_Ip_Uart_IrqHandler>
}
 80044e2:	bf00      	nop
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <UART5_IRQHandler>:

void UART5_IRQHandler(void)
{
 80044e6:	b580      	push	{r7, lr}
 80044e8:	af00      	add	r7, sp, #0
    User_Ip_Uart_IrqHandler(USER_IP_UART_CHANNELID_5);
 80044ea:	2005      	movs	r0, #5
 80044ec:	f7ff ffbe 	bl	800446c <User_Ip_Uart_IrqHandler>
}
 80044f0:	bf00      	nop
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <User_Ip_Usart_SetBaudrate>:

static inline void User_Ip_Usart_PutChar(User_Ip_Usart_Type * Usart_channel, uint8_t u8Data);
static inline void User_Ip_Usart_TransmitBuffer(uint8_t u8ChannelId);

static Std_ReturnType User_Ip_Usart_SetBaudrate(User_Ip_Usart_Type *HwChannel, uint32_t UsartSourceClock, uint32_t baudrate)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b089      	sub	sp, #36	; 0x24
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
	/* Check Source Clock */
	uint32_t BaudrateDiv = 0;
 8004500:	2300      	movs	r3, #0
 8004502:	61bb      	str	r3, [r7, #24]
	uint8_t  Value = 0;
 8004504:	2300      	movs	r3, #0
 8004506:	77fb      	strb	r3, [r7, #31]
	uint32_t  UartDiv_Mant = 0;
 8004508:	2300      	movs	r3, #0
 800450a:	617b      	str	r3, [r7, #20]
	uint32_t  UartDiv_Frac = 0;
 800450c:	2300      	movs	r3, #0
 800450e:	613b      	str	r3, [r7, #16]

	Value = (HwChannel->CR1 & USER_IP_USART_CR1_OVER8_MASK) >> USER_IP_USART_CR1_OVER8_SHIFT;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	0bdb      	lsrs	r3, r3, #15
 8004516:	b2db      	uxtb	r3, r3
 8004518:	f003 0301 	and.w	r3, r3, #1
 800451c:	77fb      	strb	r3, [r7, #31]
    Value = 2 - Value;
 800451e:	7ffb      	ldrb	r3, [r7, #31]
 8004520:	f1c3 0302 	rsb	r3, r3, #2
 8004524:	77fb      	strb	r3, [r7, #31]

	BaudrateDiv = UsartSourceClock / (baudrate/100);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a23      	ldr	r2, [pc, #140]	; (80045b8 <User_Ip_Usart_SetBaudrate+0xc4>)
 800452a:	fba2 2303 	umull	r2, r3, r2, r3
 800452e:	095b      	lsrs	r3, r3, #5
 8004530:	68ba      	ldr	r2, [r7, #8]
 8004532:	fbb2 f3f3 	udiv	r3, r2, r3
 8004536:	61bb      	str	r3, [r7, #24]
	BaudrateDiv = BaudrateDiv / (8 * Value);
 8004538:	7ffb      	ldrb	r3, [r7, #31]
 800453a:	00db      	lsls	r3, r3, #3
 800453c:	461a      	mov	r2, r3
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	fbb3 f3f2 	udiv	r3, r3, r2
 8004544:	61bb      	str	r3, [r7, #24]

    UartDiv_Mant  = BaudrateDiv /100;
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	4a1b      	ldr	r2, [pc, #108]	; (80045b8 <User_Ip_Usart_SetBaudrate+0xc4>)
 800454a:	fba2 2303 	umull	r2, r3, r2, r3
 800454e:	095b      	lsrs	r3, r3, #5
 8004550:	617b      	str	r3, [r7, #20]
	UartDiv_Frac  = BaudrateDiv - 100 * UartDiv_Mant;
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	2264      	movs	r2, #100	; 0x64
 8004556:	fb02 f303 	mul.w	r3, r2, r3
 800455a:	69ba      	ldr	r2, [r7, #24]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	613b      	str	r3, [r7, #16]

	Value  = (UartDiv_Frac * 16)/100;
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	011b      	lsls	r3, r3, #4
 8004564:	4a14      	ldr	r2, [pc, #80]	; (80045b8 <User_Ip_Usart_SetBaudrate+0xc4>)
 8004566:	fba2 2303 	umull	r2, r3, r2, r3
 800456a:	095b      	lsrs	r3, r3, #5
 800456c:	77fb      	strb	r3, [r7, #31]

	if((UartDiv_Frac * 16)%100 >= 50)
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	011a      	lsls	r2, r3, #4
 8004572:	4b11      	ldr	r3, [pc, #68]	; (80045b8 <User_Ip_Usart_SetBaudrate+0xc4>)
 8004574:	fba3 1302 	umull	r1, r3, r3, r2
 8004578:	095b      	lsrs	r3, r3, #5
 800457a:	2164      	movs	r1, #100	; 0x64
 800457c:	fb01 f303 	mul.w	r3, r1, r3
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	2b31      	cmp	r3, #49	; 0x31
 8004584:	d902      	bls.n	800458c <User_Ip_Usart_SetBaudrate+0x98>
	{
		Value = Value + 1;
 8004586:	7ffb      	ldrb	r3, [r7, #31]
 8004588:	3301      	adds	r3, #1
 800458a:	77fb      	strb	r3, [r7, #31]
	}
    UartDiv_Frac = Value;
 800458c:	7ffb      	ldrb	r3, [r7, #31]
 800458e:	613b      	str	r3, [r7, #16]

	HwChannel->BRR = (UartDiv_Mant << USER_IP_USART_BRR_MANT_SHIFT) & USER_IP_USART_BRR_MANT_MASK;
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	011b      	lsls	r3, r3, #4
 8004594:	b29a      	uxth	r2, r3
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	609a      	str	r2, [r3, #8]
	HwChannel->BRR |= (Value << USER_IP_USART_BRR_FRAC_SHIFT) & USER_IP_USART_BRR_FRAC_MASK;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	689a      	ldr	r2, [r3, #8]
 800459e:	7ffb      	ldrb	r3, [r7, #31]
 80045a0:	f003 030f 	and.w	r3, r3, #15
 80045a4:	431a      	orrs	r2, r3
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	609a      	str	r2, [r3, #8]

	return E_OK;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3724      	adds	r7, #36	; 0x24
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr
 80045b8:	51eb851f 	.word	0x51eb851f

080045bc <User_Ip_Usart_SetParityMode>:

static void User_Ip_Usart_SetParityMode(User_Ip_Usart_Type *HwChannel, User_Uart_ParityMode_t parityMode)
{
 80045bc:	b480      	push	{r7}
 80045be:	b085      	sub	sp, #20
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	460b      	mov	r3, r1
 80045c6:	70fb      	strb	r3, [r7, #3]
	uint8_t u8ParityMode = 0u;
 80045c8:	2300      	movs	r3, #0
 80045ca:	73fb      	strb	r3, [r7, #15]
	if(parityMode == USER_UART_PARITY_NONE)
 80045cc:	78fb      	ldrb	r3, [r7, #3]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d106      	bne.n	80045e0 <User_Ip_Usart_SetParityMode+0x24>
	{
		HwChannel->CR1 &= ~USER_IP_USART_CR1_PCE_MASK;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	60da      	str	r2, [r3, #12]
		u8ParityMode = parityMode - 1u;
		HwChannel->CR1 &= ~USER_IP_USART_CR1_PS_MASK;
		HwChannel->CR1 |= (u8ParityMode << USER_IP_USART_CR1_PS_SHIFT) & USER_IP_USART_CR1_PS_MASK;
		HwChannel->CR1 |= USER_IP_USART_CR1_PCE_MASK;
	}
}
 80045de:	e017      	b.n	8004610 <User_Ip_Usart_SetParityMode+0x54>
		u8ParityMode = parityMode - 1u;
 80045e0:	78fb      	ldrb	r3, [r7, #3]
 80045e2:	3b01      	subs	r3, #1
 80045e4:	73fb      	strb	r3, [r7, #15]
		HwChannel->CR1 &= ~USER_IP_USART_CR1_PS_MASK;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	60da      	str	r2, [r3, #12]
		HwChannel->CR1 |= (u8ParityMode << USER_IP_USART_CR1_PS_SHIFT) & USER_IP_USART_CR1_PS_MASK;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	68da      	ldr	r2, [r3, #12]
 80045f6:	7bfb      	ldrb	r3, [r7, #15]
 80045f8:	025b      	lsls	r3, r3, #9
 80045fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045fe:	431a      	orrs	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	60da      	str	r2, [r3, #12]
		HwChannel->CR1 |= USER_IP_USART_CR1_PCE_MASK;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	60da      	str	r2, [r3, #12]
}
 8004610:	bf00      	nop
 8004612:	3714      	adds	r7, #20
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <User_Ip_Usart_SetStopBitCount>:

static void User_Ip_Usart_SetStopBitCount(User_Ip_Usart_Type *HwChannel, User_Uart_StopBitCount_t stopBitCount)
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	460b      	mov	r3, r1
 8004626:	70fb      	strb	r3, [r7, #3]
	HwChannel->CR2 &= ~USER_IP_USART_CR2_STOP_MASK;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	611a      	str	r2, [r3, #16]
	HwChannel->CR2 |= (stopBitCount << USER_IP_USART_CR2_STOP_SHIFT) & USER_IP_USART_CR2_STOP_MASK;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	691a      	ldr	r2, [r3, #16]
 8004638:	78fb      	ldrb	r3, [r7, #3]
 800463a:	031b      	lsls	r3, r3, #12
 800463c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004640:	431a      	orrs	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	611a      	str	r2, [r3, #16]
}
 8004646:	bf00      	nop
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr

08004652 <User_Ip_Usart_DeInit>:

void User_Ip_Usart_DeInit(User_Ip_Usart_Type *HwChannel,uint8_t channelID)
{
 8004652:	b580      	push	{r7, lr}
 8004654:	b084      	sub	sp, #16
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
 800465a:	460b      	mov	r3, r1
 800465c:	70fb      	strb	r3, [r7, #3]
	User_Ip_Usart_RingBuffer_t *BufferChannel;
    BufferChannel = User_Ip_Usart_GetBuffer(channelID);
 800465e:	78fb      	ldrb	r3, [r7, #3]
 8004660:	4618      	mov	r0, r3
 8004662:	f000 f8c5 	bl	80047f0 <User_Ip_Usart_GetBuffer>
 8004666:	60f8      	str	r0, [r7, #12]

	HwChannel->CR1 = USER_IP_USART_RESET_VALUE;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	60da      	str	r2, [r3, #12]
	HwChannel->CR2 = USER_IP_USART_RESET_VALUE;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	611a      	str	r2, [r3, #16]
	HwChannel->CR3 = USER_IP_USART_RESET_VALUE;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	615a      	str	r2, [r3, #20]
	HwChannel->BRR = USER_IP_USART_RESET_VALUE;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	609a      	str	r2, [r3, #8]

	BufferChannel->TxHead = 0u;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2200      	movs	r2, #0
 8004684:	815a      	strh	r2, [r3, #10]
	BufferChannel->TxTail = 0u;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	811a      	strh	r2, [r3, #8]
	BufferChannel->Status = USART_BUFFER_UNLOCK;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2200      	movs	r2, #0
 8004690:	741a      	strb	r2, [r3, #16]
}
 8004692:	bf00      	nop
 8004694:	3710      	adds	r7, #16
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
	...

0800469c <User_Ip_Usart_Init>:

void User_Ip_Usart_Init(User_Uart_HWConfigType *HwConfig)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b086      	sub	sp, #24
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
	uint8_t u8ChannelId = HwConfig->u8HwChannelID;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	75fb      	strb	r3, [r7, #23]
	User_Ip_Usart_RingBuffer_t *RingBuff;
	User_Ip_Usart_Type *Usart = User_Ip_Usart_BaseAddress[u8ChannelId];
 80046aa:	7dfb      	ldrb	r3, [r7, #23]
 80046ac:	4a30      	ldr	r2, [pc, #192]	; (8004770 <User_Ip_Usart_Init+0xd4>)
 80046ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046b2:	613b      	str	r3, [r7, #16]

	User_Ip_Usart_DeInit(Usart,u8ChannelId);
 80046b4:	7dfb      	ldrb	r3, [r7, #23]
 80046b6:	4619      	mov	r1, r3
 80046b8:	6938      	ldr	r0, [r7, #16]
 80046ba:	f7ff ffca 	bl	8004652 <User_Ip_Usart_DeInit>
	Usart->CR1 &= ~USER_IP_USART_CR1_TE_MASK;
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	f023 0208 	bic.w	r2, r3, #8
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	60da      	str	r2, [r3, #12]
	Usart->CR1 &= ~USER_IP_USART_CR1_RE_MASK;
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	f023 0204 	bic.w	r2, r3, #4
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	60da      	str	r2, [r3, #12]

    RingBuff = User_Ip_Usart_GetBuffer(u8ChannelId);
 80046d6:	7dfb      	ldrb	r3, [r7, #23]
 80046d8:	4618      	mov	r0, r3
 80046da:	f000 f889 	bl	80047f0 <User_Ip_Usart_GetBuffer>
 80046de:	60f8      	str	r0, [r7, #12]
    RingBuff->RingRxBufferChannel = (uint8_t *)calloc(USER_IP_USART_SIZE_RINGBUFF,sizeof(uint8_t));
 80046e0:	2101      	movs	r1, #1
 80046e2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80046e6:	f001 fe07 	bl	80062f8 <calloc>
 80046ea:	4603      	mov	r3, r0
 80046ec:	461a      	mov	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	605a      	str	r2, [r3, #4]
    RingBuff->RingTxBufferChannel = (uint8_t *)calloc(USER_IP_USART_SIZE_RINGBUFF,sizeof(uint8_t));
 80046f2:	2101      	movs	r1, #1
 80046f4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80046f8:	f001 fdfe 	bl	80062f8 <calloc>
 80046fc:	4603      	mov	r3, r0
 80046fe:	461a      	mov	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	601a      	str	r2, [r3, #0]

	User_Ip_Usart_SetBaudrate (
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6859      	ldr	r1, [r3, #4]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	461a      	mov	r2, r3
 800470e:	6938      	ldr	r0, [r7, #16]
 8004710:	f7ff fef0 	bl	80044f4 <User_Ip_Usart_SetBaudrate>
								   Usart,
								   HwConfig->u32SourceClock,
								   HwConfig->u32Baudrate
	                           );

	User_Ip_Usart_SetParityMode (
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	7b1b      	ldrb	r3, [r3, #12]
 8004718:	4619      	mov	r1, r3
 800471a:	6938      	ldr	r0, [r7, #16]
 800471c:	f7ff ff4e 	bl	80045bc <User_Ip_Usart_SetParityMode>
									Usart,
									HwConfig->ParityMode
			                     );

	User_Ip_Usart_SetStopBitCount (
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	7b5b      	ldrb	r3, [r3, #13]
 8004724:	4619      	mov	r1, r3
 8004726:	6938      	ldr	r0, [r7, #16]
 8004728:	f7ff ff78 	bl	800461c <User_Ip_Usart_SetStopBitCount>
									  Usart,
									  HwConfig->StopBitCount
			                       );


	Usart->CR3 |= (
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	695b      	ldr	r3, [r3, #20]
 8004730:	f043 0201 	orr.w	r2, r3, #1
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	615a      	str	r2, [r3, #20]
						 USER_IP_USART_CR3_EIE_MASK
					);

	Usart->CR1 |= (
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004740:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 8004744:	693a      	ldr	r2, [r7, #16]
 8004746:	60d3      	str	r3, [r2, #12]
						 USER_IP_USART_CR1_RE_MASK |
						 USER_IP_USART_CR1_UE_MASK
					  );

	/* Enable Interrupt*/
	HAL_NVIC_EnableIRQ(User_Usart_IRQn[u8ChannelId]);
 8004748:	7dfb      	ldrb	r3, [r7, #23]
 800474a:	4a0a      	ldr	r2, [pc, #40]	; (8004774 <User_Ip_Usart_Init+0xd8>)
 800474c:	5cd3      	ldrb	r3, [r2, r3]
 800474e:	b25b      	sxtb	r3, r3
 8004750:	4618      	mov	r0, r3
 8004752:	f000 fc18 	bl	8004f86 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(User_Usart_IRQn[u8ChannelId],USER_IP_USART_PRIORITY,0u);
 8004756:	7dfb      	ldrb	r3, [r7, #23]
 8004758:	4a06      	ldr	r2, [pc, #24]	; (8004774 <User_Ip_Usart_Init+0xd8>)
 800475a:	5cd3      	ldrb	r3, [r2, r3]
 800475c:	b25b      	sxtb	r3, r3
 800475e:	2200      	movs	r2, #0
 8004760:	2105      	movs	r1, #5
 8004762:	4618      	mov	r0, r3
 8004764:	f000 fbf3 	bl	8004f4e <HAL_NVIC_SetPriority>

}
 8004768:	bf00      	nop
 800476a:	3718      	adds	r7, #24
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	080069d0 	.word	0x080069d0
 8004774:	20000118 	.word	0x20000118

08004778 <User_Ip_Usart_GetChar>:

static inline uint8_t User_Ip_Usart_GetChar(User_Ip_Usart_Type * Usart_channel)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
	return (Usart_channel->DR);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	b2db      	uxtb	r3, r3
}
 8004786:	4618      	mov	r0, r3
 8004788:	370c      	adds	r7, #12
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr

08004792 <User_Ip_Usart_PutChar>:

static inline void User_Ip_Usart_PutChar(User_Ip_Usart_Type *Usart_channel, uint8_t u8Data)
{
 8004792:	b480      	push	{r7}
 8004794:	b083      	sub	sp, #12
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
 800479a:	460b      	mov	r3, r1
 800479c:	70fb      	strb	r3, [r7, #3]
	Usart_channel->DR = u8Data;
 800479e:	78fa      	ldrb	r2, [r7, #3]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	605a      	str	r2, [r3, #4]
}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <User_Ip_Usart_StartAsyncTransmit>:

void User_Ip_Usart_StartAsyncTransmit(User_Ip_Usart_Type *Usart_channel)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
	Usart_channel->CR1 |= USER_IP_USART_CR1_TXEIE_MASK;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	60da      	str	r2, [r3, #12]
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <User_Ip_Usart_StopAsyncTransmit>:

static inline void User_Ip_Usart_StopAsyncTransmit(User_Ip_Usart_Type *Usart_channel)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
	Usart_channel->CR1 &= ~USER_IP_USART_CR1_TXEIE_MASK;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	60da      	str	r2, [r3, #12]
}
 80047e4:	bf00      	nop
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <User_Ip_Usart_GetBuffer>:

static User_Ip_Usart_RingBuffer_t *User_Ip_Usart_GetBuffer(uint8_t u8ChannelId)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	4603      	mov	r3, r0
 80047f8:	71fb      	strb	r3, [r7, #7]
	User_Ip_Usart_RingBuffer_t *BufferChannel;

	if(u8ChannelId == USER_IP_USART_CHANNELID_0)
 80047fa:	79fb      	ldrb	r3, [r7, #7]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d102      	bne.n	8004806 <User_Ip_Usart_GetBuffer+0x16>
	{
		BufferChannel = &Buffer_Usart0Channel;
 8004800:	4b11      	ldr	r3, [pc, #68]	; (8004848 <User_Ip_Usart_GetBuffer+0x58>)
 8004802:	60fb      	str	r3, [r7, #12]
 8004804:	e019      	b.n	800483a <User_Ip_Usart_GetBuffer+0x4a>
	}
	else if(u8ChannelId == USER_IP_USART_CHANNELID_1)
 8004806:	79fb      	ldrb	r3, [r7, #7]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d102      	bne.n	8004812 <User_Ip_Usart_GetBuffer+0x22>
	{
		BufferChannel = &Buffer_Usart1Channel;
 800480c:	4b0f      	ldr	r3, [pc, #60]	; (800484c <User_Ip_Usart_GetBuffer+0x5c>)
 800480e:	60fb      	str	r3, [r7, #12]
 8004810:	e013      	b.n	800483a <User_Ip_Usart_GetBuffer+0x4a>
	}
	else if(u8ChannelId == USER_IP_USART_CHANNELID_2)
 8004812:	79fb      	ldrb	r3, [r7, #7]
 8004814:	2b02      	cmp	r3, #2
 8004816:	d102      	bne.n	800481e <User_Ip_Usart_GetBuffer+0x2e>
	{
		BufferChannel = &Buffer_Usart2Channel;
 8004818:	4b0d      	ldr	r3, [pc, #52]	; (8004850 <User_Ip_Usart_GetBuffer+0x60>)
 800481a:	60fb      	str	r3, [r7, #12]
 800481c:	e00d      	b.n	800483a <User_Ip_Usart_GetBuffer+0x4a>
	}
	else if(u8ChannelId == USER_IP_USART_CHANNELID_3)
 800481e:	79fb      	ldrb	r3, [r7, #7]
 8004820:	2b03      	cmp	r3, #3
 8004822:	d102      	bne.n	800482a <User_Ip_Usart_GetBuffer+0x3a>
	{
		BufferChannel = &Buffer_Usart3Channel;
 8004824:	4b0b      	ldr	r3, [pc, #44]	; (8004854 <User_Ip_Usart_GetBuffer+0x64>)
 8004826:	60fb      	str	r3, [r7, #12]
 8004828:	e007      	b.n	800483a <User_Ip_Usart_GetBuffer+0x4a>
	}
	else if(u8ChannelId == USER_IP_USART_CHANNELID_6)
 800482a:	79fb      	ldrb	r3, [r7, #7]
 800482c:	2b06      	cmp	r3, #6
 800482e:	d102      	bne.n	8004836 <User_Ip_Usart_GetBuffer+0x46>
	{
		BufferChannel = &Buffer_Usart6Channel;
 8004830:	4b09      	ldr	r3, [pc, #36]	; (8004858 <User_Ip_Usart_GetBuffer+0x68>)
 8004832:	60fb      	str	r3, [r7, #12]
 8004834:	e001      	b.n	800483a <User_Ip_Usart_GetBuffer+0x4a>
	}
	else
	{
		BufferChannel = NULL;
 8004836:	2300      	movs	r3, #0
 8004838:	60fb      	str	r3, [r7, #12]
	}

	return BufferChannel;
 800483a:	68fb      	ldr	r3, [r7, #12]
}
 800483c:	4618      	mov	r0, r3
 800483e:	3714      	adds	r7, #20
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr
 8004848:	20000298 	.word	0x20000298
 800484c:	200002ac 	.word	0x200002ac
 8004850:	200002c0 	.word	0x200002c0
 8004854:	200002d4 	.word	0x200002d4
 8004858:	200002e8 	.word	0x200002e8

0800485c <User_Ip_Usart_WriteBuffer>:


Std_ReturnType User_Ip_Usart_WriteBuffer(uint8_t u8ChannelId, const uint8_t *u8DataPtr, int16_t u16DataLen)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b086      	sub	sp, #24
 8004860:	af00      	add	r7, sp, #0
 8004862:	4603      	mov	r3, r0
 8004864:	6039      	str	r1, [r7, #0]
 8004866:	71fb      	strb	r3, [r7, #7]
 8004868:	4613      	mov	r3, r2
 800486a:	80bb      	strh	r3, [r7, #4]
    Std_ReturnType ret = E_NOT_OK;
 800486c:	2301      	movs	r3, #1
 800486e:	75fb      	strb	r3, [r7, #23]
    uint16_t u16CountLen = 0u;
 8004870:	2300      	movs	r3, #0
 8004872:	82bb      	strh	r3, [r7, #20]
    uint16_t u16AvailableLen = 0u;
 8004874:	2300      	movs	r3, #0
 8004876:	827b      	strh	r3, [r7, #18]
    User_Ip_Usart_RingBuffer_t *BufferChannel;
    BufferChannel = User_Ip_Usart_GetBuffer(u8ChannelId);
 8004878:	79fb      	ldrb	r3, [r7, #7]
 800487a:	4618      	mov	r0, r3
 800487c:	f7ff ffb8 	bl	80047f0 <User_Ip_Usart_GetBuffer>
 8004880:	60f8      	str	r0, [r7, #12]
    if(BufferChannel == NULL)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d101      	bne.n	800488c <User_Ip_Usart_WriteBuffer+0x30>
	{
		return E_NOT_OK;
 8004888:	2301      	movs	r3, #1
 800488a:	e05d      	b.n	8004948 <User_Ip_Usart_WriteBuffer+0xec>
	}

	if(u8DataPtr == NULL || u16DataLen == 0u)
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d003      	beq.n	800489a <User_Ip_Usart_WriteBuffer+0x3e>
 8004892:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d101      	bne.n	800489e <User_Ip_Usart_WriteBuffer+0x42>
	{
		return E_NOT_OK;
 800489a:	2301      	movs	r3, #1
 800489c:	e054      	b.n	8004948 <User_Ip_Usart_WriteBuffer+0xec>
	}

	if(USART_BUFFER_UNLOCK == BufferChannel->Status)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	7c1b      	ldrb	r3, [r3, #16]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d14f      	bne.n	8004946 <User_Ip_Usart_WriteBuffer+0xea>
	{
		if(BufferChannel->TxHead > BufferChannel->TxTail)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	895b      	ldrh	r3, [r3, #10]
 80048aa:	b29a      	uxth	r2, r3
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	891b      	ldrh	r3, [r3, #8]
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d908      	bls.n	80048c8 <User_Ip_Usart_WriteBuffer+0x6c>
		{
			u16AvailableLen = BufferChannel->TxHead - BufferChannel->TxTail;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	895b      	ldrh	r3, [r3, #10]
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	891b      	ldrh	r3, [r3, #8]
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	827b      	strh	r3, [r7, #18]
 80048c6:	e00a      	b.n	80048de <User_Ip_Usart_WriteBuffer+0x82>
		}
		else
		{
			u16AvailableLen = (USER_IP_USART_SIZE_RINGBUFF - BufferChannel->TxTail) + BufferChannel->TxHead;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	895b      	ldrh	r3, [r3, #10]
 80048cc:	b29a      	uxth	r2, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	891b      	ldrh	r3, [r3, #8]
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048dc:	827b      	strh	r3, [r7, #18]

		}

		if(u16AvailableLen >= u16DataLen)
 80048de:	8a7a      	ldrh	r2, [r7, #18]
 80048e0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	db2e      	blt.n	8004946 <User_Ip_Usart_WriteBuffer+0xea>
		{
			BufferChannel->Status = USART_BUFFER_LOCK;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2201      	movs	r2, #1
 80048ec:	741a      	strb	r2, [r3, #16]
			for(u16CountLen = 0u;u16CountLen < u16DataLen;u16CountLen ++)
 80048ee:	2300      	movs	r3, #0
 80048f0:	82bb      	strh	r3, [r7, #20]
 80048f2:	e017      	b.n	8004924 <User_Ip_Usart_WriteBuffer+0xc8>
			{
				BufferChannel->RingTxBufferChannel[BufferChannel->TxTail] = u8DataPtr[u16CountLen];
 80048f4:	8abb      	ldrh	r3, [r7, #20]
 80048f6:	683a      	ldr	r2, [r7, #0]
 80048f8:	441a      	add	r2, r3
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68f9      	ldr	r1, [r7, #12]
 8004900:	8909      	ldrh	r1, [r1, #8]
 8004902:	b289      	uxth	r1, r1
 8004904:	440b      	add	r3, r1
 8004906:	7812      	ldrb	r2, [r2, #0]
 8004908:	701a      	strb	r2, [r3, #0]
				BufferChannel->TxTail = (BufferChannel->TxTail + 1U) & (USER_IP_USART_SIZE_RINGBUFF - 1U);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	891b      	ldrh	r3, [r3, #8]
 800490e:	b29b      	uxth	r3, r3
 8004910:	3301      	adds	r3, #1
 8004912:	b29b      	uxth	r3, r3
 8004914:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004918:	b29a      	uxth	r2, r3
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	811a      	strh	r2, [r3, #8]
			for(u16CountLen = 0u;u16CountLen < u16DataLen;u16CountLen ++)
 800491e:	8abb      	ldrh	r3, [r7, #20]
 8004920:	3301      	adds	r3, #1
 8004922:	82bb      	strh	r3, [r7, #20]
 8004924:	8aba      	ldrh	r2, [r7, #20]
 8004926:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800492a:	429a      	cmp	r2, r3
 800492c:	dbe2      	blt.n	80048f4 <User_Ip_Usart_WriteBuffer+0x98>

			}
			BufferChannel->Status = USART_BUFFER_UNLOCK;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	741a      	strb	r2, [r3, #16]
			User_Ip_Usart_StartAsyncTransmit(User_Ip_Usart_BaseAddress[u8ChannelId]);
 8004934:	79fb      	ldrb	r3, [r7, #7]
 8004936:	4a06      	ldr	r2, [pc, #24]	; (8004950 <User_Ip_Usart_WriteBuffer+0xf4>)
 8004938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800493c:	4618      	mov	r0, r3
 800493e:	f7ff ff37 	bl	80047b0 <User_Ip_Usart_StartAsyncTransmit>
			ret = E_OK;
 8004942:	2300      	movs	r3, #0
 8004944:	75fb      	strb	r3, [r7, #23]
		}
	}
    return ret;
 8004946:	7dfb      	ldrb	r3, [r7, #23]
}
 8004948:	4618      	mov	r0, r3
 800494a:	3718      	adds	r7, #24
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	080069d0 	.word	0x080069d0

08004954 <User_Ip_Usart_TransmitBuffer>:

    return E_OK;
}

static inline void User_Ip_Usart_TransmitBuffer(uint8_t u8ChannelId)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	4603      	mov	r3, r0
 800495c:	71fb      	strb	r3, [r7, #7]
	User_Ip_Usart_RingBuffer_t *BufferChannel;
	User_Ip_Usart_Type *HwChannel = User_Ip_Usart_BaseAddress[u8ChannelId];
 800495e:	79fb      	ldrb	r3, [r7, #7]
 8004960:	4a19      	ldr	r2, [pc, #100]	; (80049c8 <User_Ip_Usart_TransmitBuffer+0x74>)
 8004962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004966:	60fb      	str	r3, [r7, #12]

    BufferChannel = User_Ip_Usart_GetBuffer(u8ChannelId);
 8004968:	79fb      	ldrb	r3, [r7, #7]
 800496a:	4618      	mov	r0, r3
 800496c:	f7ff ff40 	bl	80047f0 <User_Ip_Usart_GetBuffer>
 8004970:	60b8      	str	r0, [r7, #8]
    if(BufferChannel == NULL)
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d022      	beq.n	80049be <User_Ip_Usart_TransmitBuffer+0x6a>
	{
		return;
	}

	if(BufferChannel->TxTail != BufferChannel->TxHead)
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	891b      	ldrh	r3, [r3, #8]
 800497c:	b29a      	uxth	r2, r3
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	895b      	ldrh	r3, [r3, #10]
 8004982:	b29b      	uxth	r3, r3
 8004984:	429a      	cmp	r2, r3
 8004986:	d016      	beq.n	80049b6 <User_Ip_Usart_TransmitBuffer+0x62>
	{
		User_Ip_Usart_PutChar(HwChannel,BufferChannel->RingTxBufferChannel[BufferChannel->TxHead]);
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68ba      	ldr	r2, [r7, #8]
 800498e:	8952      	ldrh	r2, [r2, #10]
 8004990:	b292      	uxth	r2, r2
 8004992:	4413      	add	r3, r2
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	b2db      	uxtb	r3, r3
 8004998:	4619      	mov	r1, r3
 800499a:	68f8      	ldr	r0, [r7, #12]
 800499c:	f7ff fef9 	bl	8004792 <User_Ip_Usart_PutChar>
		BufferChannel->TxHead = (BufferChannel->TxHead + 1U) & (USER_IP_USART_SIZE_RINGBUFF - 1U);
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	895b      	ldrh	r3, [r3, #10]
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	3301      	adds	r3, #1
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	815a      	strh	r2, [r3, #10]
 80049b4:	e004      	b.n	80049c0 <User_Ip_Usart_TransmitBuffer+0x6c>
	}
	else
	{
		User_Ip_Usart_StopAsyncTransmit(HwChannel);
 80049b6:	68f8      	ldr	r0, [r7, #12]
 80049b8:	f7ff ff0a 	bl	80047d0 <User_Ip_Usart_StopAsyncTransmit>
 80049bc:	e000      	b.n	80049c0 <User_Ip_Usart_TransmitBuffer+0x6c>
		return;
 80049be:	bf00      	nop
	}
}
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	080069d0 	.word	0x080069d0

080049cc <User_Ip_Usart_ReceiveBuffer>:

static void User_Ip_Usart_ReceiveBuffer(uint8_t u8ChannelId, uint8_t u8Data)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	4603      	mov	r3, r0
 80049d4:	460a      	mov	r2, r1
 80049d6:	71fb      	strb	r3, [r7, #7]
 80049d8:	4613      	mov	r3, r2
 80049da:	71bb      	strb	r3, [r7, #6]
    User_Ip_Usart_RingBuffer_t *BufferChannel;

    BufferChannel = User_Ip_Usart_GetBuffer(u8ChannelId);
 80049dc:	79fb      	ldrb	r3, [r7, #7]
 80049de:	4618      	mov	r0, r3
 80049e0:	f7ff ff06 	bl	80047f0 <User_Ip_Usart_GetBuffer>
 80049e4:	60f8      	str	r0, [r7, #12]
    if(BufferChannel == NULL)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d02e      	beq.n	8004a4a <User_Ip_Usart_ReceiveBuffer+0x7e>
	{
		return;
	}

	BufferChannel->RingRxBufferChannel[BufferChannel->RxTail] = u8Data;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	8992      	ldrh	r2, [r2, #12]
 80049f4:	b292      	uxth	r2, r2
 80049f6:	4413      	add	r3, r2
 80049f8:	79ba      	ldrb	r2, [r7, #6]
 80049fa:	701a      	strb	r2, [r3, #0]
	BufferChannel->RxTail = (BufferChannel->RxTail + 1U) & (USER_IP_USART_SIZE_RINGBUFF - 1U);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	899b      	ldrh	r3, [r3, #12]
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	3301      	adds	r3, #1
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a0a:	b29a      	uxth	r2, r3
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	819a      	strh	r2, [r3, #12]

	if(BufferChannel->RxTail == BufferChannel->RxHead)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	899b      	ldrh	r3, [r3, #12]
 8004a14:	b29a      	uxth	r2, r3
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	89db      	ldrh	r3, [r3, #14]
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d115      	bne.n	8004a4c <User_Ip_Usart_ReceiveBuffer+0x80>
	{
		if(BufferChannel->RxHead == 0U)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	89db      	ldrh	r3, [r3, #14]
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d104      	bne.n	8004a34 <User_Ip_Usart_ReceiveBuffer+0x68>
		{
			BufferChannel->RxTail = USER_IP_USART_SIZE_RINGBUFF - 1U;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8004a30:	819a      	strh	r2, [r3, #12]
 8004a32:	e00b      	b.n	8004a4c <User_Ip_Usart_ReceiveBuffer+0x80>
		}
		else
		{
			BufferChannel->RxTail = (BufferChannel->RxTail - 1U) & (USER_IP_USART_SIZE_RINGBUFF - 1U);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	899b      	ldrh	r3, [r3, #12]
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	819a      	strh	r2, [r3, #12]
 8004a48:	e000      	b.n	8004a4c <User_Ip_Usart_ReceiveBuffer+0x80>
		return;
 8004a4a:	bf00      	nop
		}
	}

}
 8004a4c:	3710      	adds	r7, #16
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
	...

08004a54 <User_Ip_Usart_IrqHandler>:

static void User_Ip_Usart_IrqHandler(uint8_t u8ChannelId)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b086      	sub	sp, #24
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	71fb      	strb	r3, [r7, #7]
	uint8_t Byte_Receive = 0u;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	75fb      	strb	r3, [r7, #23]
	User_Ip_Usart_Type *HwChannel = User_Ip_Usart_BaseAddress[u8ChannelId];
 8004a62:	79fb      	ldrb	r3, [r7, #7]
 8004a64:	4a17      	ldr	r2, [pc, #92]	; (8004ac4 <User_Ip_Usart_IrqHandler+0x70>)
 8004a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a6a:	613b      	str	r3, [r7, #16]
	uint32_t status = HwChannel->SR;
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	60fb      	str	r3, [r7, #12]

	if((status & USER_IP_USART_SR_TXE_MASK) == USER_IP_USART_SR_TXE_MASK)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d003      	beq.n	8004a84 <User_Ip_Usart_IrqHandler+0x30>
	{
		User_Ip_Usart_TransmitBuffer(u8ChannelId);
 8004a7c:	79fb      	ldrb	r3, [r7, #7]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7ff ff68 	bl	8004954 <User_Ip_Usart_TransmitBuffer>
	}

	if((status & USER_IP_USART_SR_RXNE_MASK) == USER_IP_USART_SR_RXNE_MASK)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f003 0320 	and.w	r3, r3, #32
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00a      	beq.n	8004aa4 <User_Ip_Usart_IrqHandler+0x50>
	{
		Byte_Receive = User_Ip_Usart_GetChar(HwChannel);
 8004a8e:	6938      	ldr	r0, [r7, #16]
 8004a90:	f7ff fe72 	bl	8004778 <User_Ip_Usart_GetChar>
 8004a94:	4603      	mov	r3, r0
 8004a96:	75fb      	strb	r3, [r7, #23]
		User_Ip_Usart_ReceiveBuffer(u8ChannelId,Byte_Receive);
 8004a98:	7dfa      	ldrb	r2, [r7, #23]
 8004a9a:	79fb      	ldrb	r3, [r7, #7]
 8004a9c:	4611      	mov	r1, r2
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f7ff ff94 	bl	80049cc <User_Ip_Usart_ReceiveBuffer>
	if((status & USER_IP_USART_SR_FE_MASK) == USER_IP_USART_SR_FE_MASK)
	{
		/*TODO*/
	}

	if((status & USER_IP_USART_SR_ORE_MASK) == USER_IP_USART_SR_ORE_MASK)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f003 0308 	and.w	r3, r3, #8
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d002      	beq.n	8004ab4 <User_Ip_Usart_IrqHandler+0x60>
	{
		/*TODO*/
		User_Ip_Usart_GetChar(HwChannel);
 8004aae:	6938      	ldr	r0, [r7, #16]
 8004ab0:	f7ff fe62 	bl	8004778 <User_Ip_Usart_GetChar>

	if((status & USER_IP_USART_SR_NF_MASK) == USER_IP_USART_SR_NF_MASK)
	{
		/*TODO*/
	}
	status = HwChannel->SR;
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	60fb      	str	r3, [r7, #12]
}
 8004aba:	bf00      	nop
 8004abc:	3718      	adds	r7, #24
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	080069d0 	.word	0x080069d0

08004ac8 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	af00      	add	r7, sp, #0
    User_Ip_Usart_IrqHandler(USER_IP_USART_CHANNELID_1);
 8004acc:	2001      	movs	r0, #1
 8004ace:	f7ff ffc1 	bl	8004a54 <User_Ip_Usart_IrqHandler>
}
 8004ad2:	bf00      	nop
 8004ad4:	bd80      	pop	{r7, pc}

08004ad6 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	af00      	add	r7, sp, #0
    User_Ip_Usart_IrqHandler(USER_IP_USART_CHANNELID_2);
 8004ada:	2002      	movs	r0, #2
 8004adc:	f7ff ffba 	bl	8004a54 <User_Ip_Usart_IrqHandler>
}
 8004ae0:	bf00      	nop
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	af00      	add	r7, sp, #0
    User_Ip_Usart_IrqHandler(USER_IP_USART_CHANNELID_3);
 8004ae8:	2003      	movs	r0, #3
 8004aea:	f7ff ffb3 	bl	8004a54 <User_Ip_Usart_IrqHandler>
}
 8004aee:	bf00      	nop
 8004af0:	bd80      	pop	{r7, pc}

08004af2 <USART6_IRQHandler>:

void USART6_IRQHandler(void)
{
 8004af2:	b580      	push	{r7, lr}
 8004af4:	af00      	add	r7, sp, #0
    User_Ip_Usart_IrqHandler(USER_IP_USART_CHANNELID_6);
 8004af6:	2006      	movs	r0, #6
 8004af8:	f7ff ffac 	bl	8004a54 <User_Ip_Usart_IrqHandler>
}
 8004afc:	bf00      	nop
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <User_Slip_Init>:

static User_Slip_Buffer User_Slip_TxBuffer[USER_UART_NUMBEROFCHANNEL_USED];
static User_Slip_Buffer User_Slip_RxBuffer[USER_UART_NUMBEROFCHANNEL_USED];

void User_Slip_Init(uint8_t channelID)
{
 8004b00:	b590      	push	{r4, r7, lr}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	4603      	mov	r3, r0
 8004b08:	71fb      	strb	r3, [r7, #7]
    if(channelID < USER_UART_NUMBEROFCHANNEL_USED)
 8004b0a:	79fb      	ldrb	r3, [r7, #7]
 8004b0c:	2b11      	cmp	r3, #17
 8004b0e:	d821      	bhi.n	8004b54 <User_Slip_Init+0x54>
    {
        User_Slip_RxBuffer[channelID].DataLen = 0U;
 8004b10:	79fb      	ldrb	r3, [r7, #7]
 8004b12:	4a12      	ldr	r2, [pc, #72]	; (8004b5c <User_Slip_Init+0x5c>)
 8004b14:	00db      	lsls	r3, r3, #3
 8004b16:	4413      	add	r3, r2
 8004b18:	2200      	movs	r2, #0
 8004b1a:	809a      	strh	r2, [r3, #4]
        User_Slip_TxBuffer[channelID].DataLen = 0U;
 8004b1c:	79fb      	ldrb	r3, [r7, #7]
 8004b1e:	4a10      	ldr	r2, [pc, #64]	; (8004b60 <User_Slip_Init+0x60>)
 8004b20:	00db      	lsls	r3, r3, #3
 8004b22:	4413      	add	r3, r2
 8004b24:	2200      	movs	r2, #0
 8004b26:	809a      	strh	r2, [r3, #4]
        User_Slip_RxBuffer[channelID].DataSlipPtr =  (uint8_t *)calloc(USER_SLIP_BUFFERSIZE,sizeof(uint8_t));
 8004b28:	79fc      	ldrb	r4, [r7, #7]
 8004b2a:	2101      	movs	r1, #1
 8004b2c:	f44f 7081 	mov.w	r0, #258	; 0x102
 8004b30:	f001 fbe2 	bl	80062f8 <calloc>
 8004b34:	4603      	mov	r3, r0
 8004b36:	461a      	mov	r2, r3
 8004b38:	4b08      	ldr	r3, [pc, #32]	; (8004b5c <User_Slip_Init+0x5c>)
 8004b3a:	f843 2034 	str.w	r2, [r3, r4, lsl #3]
        User_Slip_TxBuffer[channelID].DataSlipPtr =  (uint8_t *)calloc(USER_SLIP_BUFFERSIZE,sizeof(uint8_t));
 8004b3e:	79fc      	ldrb	r4, [r7, #7]
 8004b40:	2101      	movs	r1, #1
 8004b42:	f44f 7081 	mov.w	r0, #258	; 0x102
 8004b46:	f001 fbd7 	bl	80062f8 <calloc>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	4b04      	ldr	r3, [pc, #16]	; (8004b60 <User_Slip_Init+0x60>)
 8004b50:	f843 2034 	str.w	r2, [r3, r4, lsl #3]
    }
}
 8004b54:	bf00      	nop
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd90      	pop	{r4, r7, pc}
 8004b5c:	2000038c 	.word	0x2000038c
 8004b60:	200002fc 	.word	0x200002fc

08004b64 <User_Slip_SendFrame>:

Std_ReturnType User_Slip_SendFrame(uint8_t u8ChannelId, uint8_t *u8DataSlipPtr, uint16_t length)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b086      	sub	sp, #24
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	6039      	str	r1, [r7, #0]
 8004b6e:	71fb      	strb	r3, [r7, #7]
 8004b70:	4613      	mov	r3, r2
 8004b72:	80bb      	strh	r3, [r7, #4]
    uint8_t u8Val;
    uint16_t u16CountIdx;
    uint16_t u16LenCount;
    Std_ReturnType ret = E_NOT_OK;
 8004b74:	2301      	movs	r3, #1
 8004b76:	74fb      	strb	r3, [r7, #19]
    User_Slip_Buffer *TxBufPtr = &User_Slip_TxBuffer[u8ChannelId];
 8004b78:	79fb      	ldrb	r3, [r7, #7]
 8004b7a:	00db      	lsls	r3, r3, #3
 8004b7c:	4a3a      	ldr	r2, [pc, #232]	; (8004c68 <User_Slip_SendFrame+0x104>)
 8004b7e:	4413      	add	r3, r2
 8004b80:	60fb      	str	r3, [r7, #12]

    if (USER_SLIP_BUFFERSIZE > length)
 8004b82:	88bb      	ldrh	r3, [r7, #4]
 8004b84:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8004b88:	d268      	bcs.n	8004c5c <User_Slip_SendFrame+0xf8>
    {
        u16LenCount = 0;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	82bb      	strh	r3, [r7, #20]
        TxBufPtr->DataSlipPtr[u16LenCount] = USER_SLIP_END;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	8abb      	ldrh	r3, [r7, #20]
 8004b94:	4413      	add	r3, r2
 8004b96:	22c0      	movs	r2, #192	; 0xc0
 8004b98:	701a      	strb	r2, [r3, #0]
        u16LenCount++;
 8004b9a:	8abb      	ldrh	r3, [r7, #20]
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	82bb      	strh	r3, [r7, #20]

        for(u16CountIdx = 0; u16CountIdx < length; u16CountIdx ++)
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	82fb      	strh	r3, [r7, #22]
 8004ba4:	e03d      	b.n	8004c22 <User_Slip_SendFrame+0xbe>
        {
            u8Val = u8DataSlipPtr[u16CountIdx];
 8004ba6:	8afb      	ldrh	r3, [r7, #22]
 8004ba8:	683a      	ldr	r2, [r7, #0]
 8004baa:	4413      	add	r3, r2
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	72fb      	strb	r3, [r7, #11]
            switch(u8Val)
 8004bb0:	7afb      	ldrb	r3, [r7, #11]
 8004bb2:	2bc0      	cmp	r3, #192	; 0xc0
 8004bb4:	d002      	beq.n	8004bbc <User_Slip_SendFrame+0x58>
 8004bb6:	2bdb      	cmp	r3, #219	; 0xdb
 8004bb8:	d013      	beq.n	8004be2 <User_Slip_SendFrame+0x7e>
 8004bba:	e025      	b.n	8004c08 <User_Slip_SendFrame+0xa4>
            {
                case USER_SLIP_END:
                    TxBufPtr->DataSlipPtr[u16LenCount] = USER_SLIP_ESC;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	8abb      	ldrh	r3, [r7, #20]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	22db      	movs	r2, #219	; 0xdb
 8004bc6:	701a      	strb	r2, [r3, #0]
                    u16LenCount++;
 8004bc8:	8abb      	ldrh	r3, [r7, #20]
 8004bca:	3301      	adds	r3, #1
 8004bcc:	82bb      	strh	r3, [r7, #20]
                    TxBufPtr->DataSlipPtr[u16LenCount] = USER_SLIP_ESC_END;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	8abb      	ldrh	r3, [r7, #20]
 8004bd4:	4413      	add	r3, r2
 8004bd6:	22dc      	movs	r2, #220	; 0xdc
 8004bd8:	701a      	strb	r2, [r3, #0]
                    u16LenCount++;
 8004bda:	8abb      	ldrh	r3, [r7, #20]
 8004bdc:	3301      	adds	r3, #1
 8004bde:	82bb      	strh	r3, [r7, #20]
                    break;
 8004be0:	e01c      	b.n	8004c1c <User_Slip_SendFrame+0xb8>
                case USER_SLIP_ESC:
                    TxBufPtr->DataSlipPtr[u16LenCount] = USER_SLIP_ESC;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	8abb      	ldrh	r3, [r7, #20]
 8004be8:	4413      	add	r3, r2
 8004bea:	22db      	movs	r2, #219	; 0xdb
 8004bec:	701a      	strb	r2, [r3, #0]
                    u16LenCount++;
 8004bee:	8abb      	ldrh	r3, [r7, #20]
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	82bb      	strh	r3, [r7, #20]
                    TxBufPtr->DataSlipPtr[u16LenCount] = USER_SLIP_ESC_ESC;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	8abb      	ldrh	r3, [r7, #20]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	22dd      	movs	r2, #221	; 0xdd
 8004bfe:	701a      	strb	r2, [r3, #0]
                    u16LenCount++;
 8004c00:	8abb      	ldrh	r3, [r7, #20]
 8004c02:	3301      	adds	r3, #1
 8004c04:	82bb      	strh	r3, [r7, #20]
                    break;
 8004c06:	e009      	b.n	8004c1c <User_Slip_SendFrame+0xb8>
                default:
                    TxBufPtr->DataSlipPtr[u16LenCount] = u8Val;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	8abb      	ldrh	r3, [r7, #20]
 8004c0e:	4413      	add	r3, r2
 8004c10:	7afa      	ldrb	r2, [r7, #11]
 8004c12:	701a      	strb	r2, [r3, #0]
                    u16LenCount++;
 8004c14:	8abb      	ldrh	r3, [r7, #20]
 8004c16:	3301      	adds	r3, #1
 8004c18:	82bb      	strh	r3, [r7, #20]
                    break;
 8004c1a:	bf00      	nop
        for(u16CountIdx = 0; u16CountIdx < length; u16CountIdx ++)
 8004c1c:	8afb      	ldrh	r3, [r7, #22]
 8004c1e:	3301      	adds	r3, #1
 8004c20:	82fb      	strh	r3, [r7, #22]
 8004c22:	8afa      	ldrh	r2, [r7, #22]
 8004c24:	88bb      	ldrh	r3, [r7, #4]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d3bd      	bcc.n	8004ba6 <User_Slip_SendFrame+0x42>
            }
        }
        TxBufPtr->DataSlipPtr[u16LenCount] = USER_SLIP_END;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	8abb      	ldrh	r3, [r7, #20]
 8004c30:	4413      	add	r3, r2
 8004c32:	22c0      	movs	r2, #192	; 0xc0
 8004c34:	701a      	strb	r2, [r3, #0]
        u16LenCount++;
 8004c36:	8abb      	ldrh	r3, [r7, #20]
 8004c38:	3301      	adds	r3, #1
 8004c3a:	82bb      	strh	r3, [r7, #20]
        TxBufPtr->DataLen =  u16LenCount;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	8aba      	ldrh	r2, [r7, #20]
 8004c40:	809a      	strh	r2, [r3, #4]

    	ret = User_Uart_Ipw_AsyncTransmit(u8ChannelId,TxBufPtr->DataSlipPtr,TxBufPtr->DataLen);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6819      	ldr	r1, [r3, #0]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	889b      	ldrh	r3, [r3, #4]
 8004c4a:	b21a      	sxth	r2, r3
 8004c4c:	79fb      	ldrb	r3, [r7, #7]
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7ff f935 	bl	8003ebe <User_Uart_Ipw_AsyncTransmit>
 8004c54:	4603      	mov	r3, r0
 8004c56:	74fb      	strb	r3, [r7, #19]
        return ret;
 8004c58:	7cfb      	ldrb	r3, [r7, #19]
 8004c5a:	e000      	b.n	8004c5e <User_Slip_SendFrame+0xfa>
    }

    return ret;
 8004c5c:	7cfb      	ldrb	r3, [r7, #19]
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3718      	adds	r7, #24
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	200002fc 	.word	0x200002fc

08004c6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004c70:	4b0e      	ldr	r3, [pc, #56]	; (8004cac <HAL_Init+0x40>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a0d      	ldr	r2, [pc, #52]	; (8004cac <HAL_Init+0x40>)
 8004c76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004c7c:	4b0b      	ldr	r3, [pc, #44]	; (8004cac <HAL_Init+0x40>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a0a      	ldr	r2, [pc, #40]	; (8004cac <HAL_Init+0x40>)
 8004c82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004c88:	4b08      	ldr	r3, [pc, #32]	; (8004cac <HAL_Init+0x40>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a07      	ldr	r2, [pc, #28]	; (8004cac <HAL_Init+0x40>)
 8004c8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004c94:	2003      	movs	r0, #3
 8004c96:	f000 f94f 	bl	8004f38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004c9a:	200f      	movs	r0, #15
 8004c9c:	f000 f808 	bl	8004cb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004ca0:	f7fc fc7e 	bl	80015a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	40023c00 	.word	0x40023c00

08004cb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004cb8:	4b12      	ldr	r3, [pc, #72]	; (8004d04 <HAL_InitTick+0x54>)
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	4b12      	ldr	r3, [pc, #72]	; (8004d08 <HAL_InitTick+0x58>)
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004cc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8004cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f000 f967 	bl	8004fa2 <HAL_SYSTICK_Config>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d001      	beq.n	8004cde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e00e      	b.n	8004cfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2b0f      	cmp	r3, #15
 8004ce2:	d80a      	bhi.n	8004cfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	6879      	ldr	r1, [r7, #4]
 8004ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8004cec:	f000 f92f 	bl	8004f4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004cf0:	4a06      	ldr	r2, [pc, #24]	; (8004d0c <HAL_InitTick+0x5c>)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	e000      	b.n	8004cfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3708      	adds	r7, #8
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	20000008 	.word	0x20000008
 8004d08:	20000124 	.word	0x20000124
 8004d0c:	20000120 	.word	0x20000120

08004d10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d10:	b480      	push	{r7}
 8004d12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004d14:	4b06      	ldr	r3, [pc, #24]	; (8004d30 <HAL_IncTick+0x20>)
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	461a      	mov	r2, r3
 8004d1a:	4b06      	ldr	r3, [pc, #24]	; (8004d34 <HAL_IncTick+0x24>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4413      	add	r3, r2
 8004d20:	4a04      	ldr	r2, [pc, #16]	; (8004d34 <HAL_IncTick+0x24>)
 8004d22:	6013      	str	r3, [r2, #0]
}
 8004d24:	bf00      	nop
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	20000124 	.word	0x20000124
 8004d34:	20000778 	.word	0x20000778

08004d38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	af00      	add	r7, sp, #0
  return uwTick;
 8004d3c:	4b03      	ldr	r3, [pc, #12]	; (8004d4c <HAL_GetTick+0x14>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr
 8004d4a:	bf00      	nop
 8004d4c:	20000778 	.word	0x20000778

08004d50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004d58:	f7ff ffee 	bl	8004d38 <HAL_GetTick>
 8004d5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d68:	d005      	beq.n	8004d76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004d6a:	4b0a      	ldr	r3, [pc, #40]	; (8004d94 <HAL_Delay+0x44>)
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	461a      	mov	r2, r3
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	4413      	add	r3, r2
 8004d74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004d76:	bf00      	nop
 8004d78:	f7ff ffde 	bl	8004d38 <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d8f7      	bhi.n	8004d78 <HAL_Delay+0x28>
  {
  }
}
 8004d88:	bf00      	nop
 8004d8a:	bf00      	nop
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	20000124 	.word	0x20000124

08004d98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f003 0307 	and.w	r3, r3, #7
 8004da6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004da8:	4b0c      	ldr	r3, [pc, #48]	; (8004ddc <__NVIC_SetPriorityGrouping+0x44>)
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004dae:	68ba      	ldr	r2, [r7, #8]
 8004db0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004db4:	4013      	ands	r3, r2
 8004db6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004dc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004dc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004dca:	4a04      	ldr	r2, [pc, #16]	; (8004ddc <__NVIC_SetPriorityGrouping+0x44>)
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	60d3      	str	r3, [r2, #12]
}
 8004dd0:	bf00      	nop
 8004dd2:	3714      	adds	r7, #20
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr
 8004ddc:	e000ed00 	.word	0xe000ed00

08004de0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004de0:	b480      	push	{r7}
 8004de2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004de4:	4b04      	ldr	r3, [pc, #16]	; (8004df8 <__NVIC_GetPriorityGrouping+0x18>)
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	0a1b      	lsrs	r3, r3, #8
 8004dea:	f003 0307 	and.w	r3, r3, #7
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr
 8004df8:	e000ed00 	.word	0xe000ed00

08004dfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	4603      	mov	r3, r0
 8004e04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	db0b      	blt.n	8004e26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e0e:	79fb      	ldrb	r3, [r7, #7]
 8004e10:	f003 021f 	and.w	r2, r3, #31
 8004e14:	4907      	ldr	r1, [pc, #28]	; (8004e34 <__NVIC_EnableIRQ+0x38>)
 8004e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e1a:	095b      	lsrs	r3, r3, #5
 8004e1c:	2001      	movs	r0, #1
 8004e1e:	fa00 f202 	lsl.w	r2, r0, r2
 8004e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004e26:	bf00      	nop
 8004e28:	370c      	adds	r7, #12
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	e000e100 	.word	0xe000e100

08004e38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	4603      	mov	r3, r0
 8004e40:	6039      	str	r1, [r7, #0]
 8004e42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	db0a      	blt.n	8004e62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	b2da      	uxtb	r2, r3
 8004e50:	490c      	ldr	r1, [pc, #48]	; (8004e84 <__NVIC_SetPriority+0x4c>)
 8004e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e56:	0112      	lsls	r2, r2, #4
 8004e58:	b2d2      	uxtb	r2, r2
 8004e5a:	440b      	add	r3, r1
 8004e5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e60:	e00a      	b.n	8004e78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	b2da      	uxtb	r2, r3
 8004e66:	4908      	ldr	r1, [pc, #32]	; (8004e88 <__NVIC_SetPriority+0x50>)
 8004e68:	79fb      	ldrb	r3, [r7, #7]
 8004e6a:	f003 030f 	and.w	r3, r3, #15
 8004e6e:	3b04      	subs	r3, #4
 8004e70:	0112      	lsls	r2, r2, #4
 8004e72:	b2d2      	uxtb	r2, r2
 8004e74:	440b      	add	r3, r1
 8004e76:	761a      	strb	r2, [r3, #24]
}
 8004e78:	bf00      	nop
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr
 8004e84:	e000e100 	.word	0xe000e100
 8004e88:	e000ed00 	.word	0xe000ed00

08004e8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b089      	sub	sp, #36	; 0x24
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f003 0307 	and.w	r3, r3, #7
 8004e9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	f1c3 0307 	rsb	r3, r3, #7
 8004ea6:	2b04      	cmp	r3, #4
 8004ea8:	bf28      	it	cs
 8004eaa:	2304      	movcs	r3, #4
 8004eac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	3304      	adds	r3, #4
 8004eb2:	2b06      	cmp	r3, #6
 8004eb4:	d902      	bls.n	8004ebc <NVIC_EncodePriority+0x30>
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	3b03      	subs	r3, #3
 8004eba:	e000      	b.n	8004ebe <NVIC_EncodePriority+0x32>
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eca:	43da      	mvns	r2, r3
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	401a      	ands	r2, r3
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ed4:	f04f 31ff 	mov.w	r1, #4294967295
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	fa01 f303 	lsl.w	r3, r1, r3
 8004ede:	43d9      	mvns	r1, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ee4:	4313      	orrs	r3, r2
         );
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3724      	adds	r7, #36	; 0x24
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
	...

08004ef4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	3b01      	subs	r3, #1
 8004f00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f04:	d301      	bcc.n	8004f0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f06:	2301      	movs	r3, #1
 8004f08:	e00f      	b.n	8004f2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f0a:	4a0a      	ldr	r2, [pc, #40]	; (8004f34 <SysTick_Config+0x40>)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f12:	210f      	movs	r1, #15
 8004f14:	f04f 30ff 	mov.w	r0, #4294967295
 8004f18:	f7ff ff8e 	bl	8004e38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f1c:	4b05      	ldr	r3, [pc, #20]	; (8004f34 <SysTick_Config+0x40>)
 8004f1e:	2200      	movs	r2, #0
 8004f20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f22:	4b04      	ldr	r3, [pc, #16]	; (8004f34 <SysTick_Config+0x40>)
 8004f24:	2207      	movs	r2, #7
 8004f26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3708      	adds	r7, #8
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	e000e010 	.word	0xe000e010

08004f38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f7ff ff29 	bl	8004d98 <__NVIC_SetPriorityGrouping>
}
 8004f46:	bf00      	nop
 8004f48:	3708      	adds	r7, #8
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004f4e:	b580      	push	{r7, lr}
 8004f50:	b086      	sub	sp, #24
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	4603      	mov	r3, r0
 8004f56:	60b9      	str	r1, [r7, #8]
 8004f58:	607a      	str	r2, [r7, #4]
 8004f5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004f60:	f7ff ff3e 	bl	8004de0 <__NVIC_GetPriorityGrouping>
 8004f64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	68b9      	ldr	r1, [r7, #8]
 8004f6a:	6978      	ldr	r0, [r7, #20]
 8004f6c:	f7ff ff8e 	bl	8004e8c <NVIC_EncodePriority>
 8004f70:	4602      	mov	r2, r0
 8004f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f76:	4611      	mov	r1, r2
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f7ff ff5d 	bl	8004e38 <__NVIC_SetPriority>
}
 8004f7e:	bf00      	nop
 8004f80:	3718      	adds	r7, #24
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f86:	b580      	push	{r7, lr}
 8004f88:	b082      	sub	sp, #8
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f94:	4618      	mov	r0, r3
 8004f96:	f7ff ff31 	bl	8004dfc <__NVIC_EnableIRQ>
}
 8004f9a:	bf00      	nop
 8004f9c:	3708      	adds	r7, #8
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004fa2:	b580      	push	{r7, lr}
 8004fa4:	b082      	sub	sp, #8
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f7ff ffa2 	bl	8004ef4 <SysTick_Config>
 8004fb0:	4603      	mov	r3, r0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3708      	adds	r7, #8
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
	...

08004fbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b089      	sub	sp, #36	; 0x24
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	61fb      	str	r3, [r7, #28]
 8004fd6:	e16b      	b.n	80052b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004fd8:	2201      	movs	r2, #1
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	4013      	ands	r3, r2
 8004fea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004fec:	693a      	ldr	r2, [r7, #16]
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	f040 815a 	bne.w	80052aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	f003 0303 	and.w	r3, r3, #3
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d005      	beq.n	800500e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800500a:	2b02      	cmp	r3, #2
 800500c:	d130      	bne.n	8005070 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	005b      	lsls	r3, r3, #1
 8005018:	2203      	movs	r2, #3
 800501a:	fa02 f303 	lsl.w	r3, r2, r3
 800501e:	43db      	mvns	r3, r3
 8005020:	69ba      	ldr	r2, [r7, #24]
 8005022:	4013      	ands	r3, r2
 8005024:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	68da      	ldr	r2, [r3, #12]
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	005b      	lsls	r3, r3, #1
 800502e:	fa02 f303 	lsl.w	r3, r2, r3
 8005032:	69ba      	ldr	r2, [r7, #24]
 8005034:	4313      	orrs	r3, r2
 8005036:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	69ba      	ldr	r2, [r7, #24]
 800503c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005044:	2201      	movs	r2, #1
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	fa02 f303 	lsl.w	r3, r2, r3
 800504c:	43db      	mvns	r3, r3
 800504e:	69ba      	ldr	r2, [r7, #24]
 8005050:	4013      	ands	r3, r2
 8005052:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	091b      	lsrs	r3, r3, #4
 800505a:	f003 0201 	and.w	r2, r3, #1
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	fa02 f303 	lsl.w	r3, r2, r3
 8005064:	69ba      	ldr	r2, [r7, #24]
 8005066:	4313      	orrs	r3, r2
 8005068:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	69ba      	ldr	r2, [r7, #24]
 800506e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f003 0303 	and.w	r3, r3, #3
 8005078:	2b03      	cmp	r3, #3
 800507a:	d017      	beq.n	80050ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	005b      	lsls	r3, r3, #1
 8005086:	2203      	movs	r2, #3
 8005088:	fa02 f303 	lsl.w	r3, r2, r3
 800508c:	43db      	mvns	r3, r3
 800508e:	69ba      	ldr	r2, [r7, #24]
 8005090:	4013      	ands	r3, r2
 8005092:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	689a      	ldr	r2, [r3, #8]
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	005b      	lsls	r3, r3, #1
 800509c:	fa02 f303 	lsl.w	r3, r2, r3
 80050a0:	69ba      	ldr	r2, [r7, #24]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	69ba      	ldr	r2, [r7, #24]
 80050aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	f003 0303 	and.w	r3, r3, #3
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d123      	bne.n	8005100 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	08da      	lsrs	r2, r3, #3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	3208      	adds	r2, #8
 80050c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	f003 0307 	and.w	r3, r3, #7
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	220f      	movs	r2, #15
 80050d0:	fa02 f303 	lsl.w	r3, r2, r3
 80050d4:	43db      	mvns	r3, r3
 80050d6:	69ba      	ldr	r2, [r7, #24]
 80050d8:	4013      	ands	r3, r2
 80050da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	691a      	ldr	r2, [r3, #16]
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	f003 0307 	and.w	r3, r3, #7
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	fa02 f303 	lsl.w	r3, r2, r3
 80050ec:	69ba      	ldr	r2, [r7, #24]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	08da      	lsrs	r2, r3, #3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	3208      	adds	r2, #8
 80050fa:	69b9      	ldr	r1, [r7, #24]
 80050fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	005b      	lsls	r3, r3, #1
 800510a:	2203      	movs	r2, #3
 800510c:	fa02 f303 	lsl.w	r3, r2, r3
 8005110:	43db      	mvns	r3, r3
 8005112:	69ba      	ldr	r2, [r7, #24]
 8005114:	4013      	ands	r3, r2
 8005116:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	f003 0203 	and.w	r2, r3, #3
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	005b      	lsls	r3, r3, #1
 8005124:	fa02 f303 	lsl.w	r3, r2, r3
 8005128:	69ba      	ldr	r2, [r7, #24]
 800512a:	4313      	orrs	r3, r2
 800512c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	69ba      	ldr	r2, [r7, #24]
 8005132:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800513c:	2b00      	cmp	r3, #0
 800513e:	f000 80b4 	beq.w	80052aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005142:	2300      	movs	r3, #0
 8005144:	60fb      	str	r3, [r7, #12]
 8005146:	4b60      	ldr	r3, [pc, #384]	; (80052c8 <HAL_GPIO_Init+0x30c>)
 8005148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800514a:	4a5f      	ldr	r2, [pc, #380]	; (80052c8 <HAL_GPIO_Init+0x30c>)
 800514c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005150:	6453      	str	r3, [r2, #68]	; 0x44
 8005152:	4b5d      	ldr	r3, [pc, #372]	; (80052c8 <HAL_GPIO_Init+0x30c>)
 8005154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800515a:	60fb      	str	r3, [r7, #12]
 800515c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800515e:	4a5b      	ldr	r2, [pc, #364]	; (80052cc <HAL_GPIO_Init+0x310>)
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	089b      	lsrs	r3, r3, #2
 8005164:	3302      	adds	r3, #2
 8005166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800516a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	f003 0303 	and.w	r3, r3, #3
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	220f      	movs	r2, #15
 8005176:	fa02 f303 	lsl.w	r3, r2, r3
 800517a:	43db      	mvns	r3, r3
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	4013      	ands	r3, r2
 8005180:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a52      	ldr	r2, [pc, #328]	; (80052d0 <HAL_GPIO_Init+0x314>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d02b      	beq.n	80051e2 <HAL_GPIO_Init+0x226>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a51      	ldr	r2, [pc, #324]	; (80052d4 <HAL_GPIO_Init+0x318>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d025      	beq.n	80051de <HAL_GPIO_Init+0x222>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a50      	ldr	r2, [pc, #320]	; (80052d8 <HAL_GPIO_Init+0x31c>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d01f      	beq.n	80051da <HAL_GPIO_Init+0x21e>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a4f      	ldr	r2, [pc, #316]	; (80052dc <HAL_GPIO_Init+0x320>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d019      	beq.n	80051d6 <HAL_GPIO_Init+0x21a>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a4e      	ldr	r2, [pc, #312]	; (80052e0 <HAL_GPIO_Init+0x324>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d013      	beq.n	80051d2 <HAL_GPIO_Init+0x216>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a4d      	ldr	r2, [pc, #308]	; (80052e4 <HAL_GPIO_Init+0x328>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d00d      	beq.n	80051ce <HAL_GPIO_Init+0x212>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a4c      	ldr	r2, [pc, #304]	; (80052e8 <HAL_GPIO_Init+0x32c>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d007      	beq.n	80051ca <HAL_GPIO_Init+0x20e>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a4b      	ldr	r2, [pc, #300]	; (80052ec <HAL_GPIO_Init+0x330>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d101      	bne.n	80051c6 <HAL_GPIO_Init+0x20a>
 80051c2:	2307      	movs	r3, #7
 80051c4:	e00e      	b.n	80051e4 <HAL_GPIO_Init+0x228>
 80051c6:	2308      	movs	r3, #8
 80051c8:	e00c      	b.n	80051e4 <HAL_GPIO_Init+0x228>
 80051ca:	2306      	movs	r3, #6
 80051cc:	e00a      	b.n	80051e4 <HAL_GPIO_Init+0x228>
 80051ce:	2305      	movs	r3, #5
 80051d0:	e008      	b.n	80051e4 <HAL_GPIO_Init+0x228>
 80051d2:	2304      	movs	r3, #4
 80051d4:	e006      	b.n	80051e4 <HAL_GPIO_Init+0x228>
 80051d6:	2303      	movs	r3, #3
 80051d8:	e004      	b.n	80051e4 <HAL_GPIO_Init+0x228>
 80051da:	2302      	movs	r3, #2
 80051dc:	e002      	b.n	80051e4 <HAL_GPIO_Init+0x228>
 80051de:	2301      	movs	r3, #1
 80051e0:	e000      	b.n	80051e4 <HAL_GPIO_Init+0x228>
 80051e2:	2300      	movs	r3, #0
 80051e4:	69fa      	ldr	r2, [r7, #28]
 80051e6:	f002 0203 	and.w	r2, r2, #3
 80051ea:	0092      	lsls	r2, r2, #2
 80051ec:	4093      	lsls	r3, r2
 80051ee:	69ba      	ldr	r2, [r7, #24]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80051f4:	4935      	ldr	r1, [pc, #212]	; (80052cc <HAL_GPIO_Init+0x310>)
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	089b      	lsrs	r3, r3, #2
 80051fa:	3302      	adds	r3, #2
 80051fc:	69ba      	ldr	r2, [r7, #24]
 80051fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005202:	4b3b      	ldr	r3, [pc, #236]	; (80052f0 <HAL_GPIO_Init+0x334>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	43db      	mvns	r3, r3
 800520c:	69ba      	ldr	r2, [r7, #24]
 800520e:	4013      	ands	r3, r2
 8005210:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d003      	beq.n	8005226 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800521e:	69ba      	ldr	r2, [r7, #24]
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	4313      	orrs	r3, r2
 8005224:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005226:	4a32      	ldr	r2, [pc, #200]	; (80052f0 <HAL_GPIO_Init+0x334>)
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800522c:	4b30      	ldr	r3, [pc, #192]	; (80052f0 <HAL_GPIO_Init+0x334>)
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	43db      	mvns	r3, r3
 8005236:	69ba      	ldr	r2, [r7, #24]
 8005238:	4013      	ands	r3, r2
 800523a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d003      	beq.n	8005250 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005248:	69ba      	ldr	r2, [r7, #24]
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	4313      	orrs	r3, r2
 800524e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005250:	4a27      	ldr	r2, [pc, #156]	; (80052f0 <HAL_GPIO_Init+0x334>)
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005256:	4b26      	ldr	r3, [pc, #152]	; (80052f0 <HAL_GPIO_Init+0x334>)
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	43db      	mvns	r3, r3
 8005260:	69ba      	ldr	r2, [r7, #24]
 8005262:	4013      	ands	r3, r2
 8005264:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d003      	beq.n	800527a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005272:	69ba      	ldr	r2, [r7, #24]
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	4313      	orrs	r3, r2
 8005278:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800527a:	4a1d      	ldr	r2, [pc, #116]	; (80052f0 <HAL_GPIO_Init+0x334>)
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005280:	4b1b      	ldr	r3, [pc, #108]	; (80052f0 <HAL_GPIO_Init+0x334>)
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	43db      	mvns	r3, r3
 800528a:	69ba      	ldr	r2, [r7, #24]
 800528c:	4013      	ands	r3, r2
 800528e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d003      	beq.n	80052a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800529c:	69ba      	ldr	r2, [r7, #24]
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80052a4:	4a12      	ldr	r2, [pc, #72]	; (80052f0 <HAL_GPIO_Init+0x334>)
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	3301      	adds	r3, #1
 80052ae:	61fb      	str	r3, [r7, #28]
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	2b0f      	cmp	r3, #15
 80052b4:	f67f ae90 	bls.w	8004fd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80052b8:	bf00      	nop
 80052ba:	bf00      	nop
 80052bc:	3724      	adds	r7, #36	; 0x24
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	40023800 	.word	0x40023800
 80052cc:	40013800 	.word	0x40013800
 80052d0:	40020000 	.word	0x40020000
 80052d4:	40020400 	.word	0x40020400
 80052d8:	40020800 	.word	0x40020800
 80052dc:	40020c00 	.word	0x40020c00
 80052e0:	40021000 	.word	0x40021000
 80052e4:	40021400 	.word	0x40021400
 80052e8:	40021800 	.word	0x40021800
 80052ec:	40021c00 	.word	0x40021c00
 80052f0:	40013c00 	.word	0x40013c00

080052f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	460b      	mov	r3, r1
 80052fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	691a      	ldr	r2, [r3, #16]
 8005304:	887b      	ldrh	r3, [r7, #2]
 8005306:	4013      	ands	r3, r2
 8005308:	2b00      	cmp	r3, #0
 800530a:	d002      	beq.n	8005312 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800530c:	2301      	movs	r3, #1
 800530e:	73fb      	strb	r3, [r7, #15]
 8005310:	e001      	b.n	8005316 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005312:	2300      	movs	r3, #0
 8005314:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005316:	7bfb      	ldrb	r3, [r7, #15]
}
 8005318:	4618      	mov	r0, r3
 800531a:	3714      	adds	r7, #20
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	460b      	mov	r3, r1
 800532e:	807b      	strh	r3, [r7, #2]
 8005330:	4613      	mov	r3, r2
 8005332:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005334:	787b      	ldrb	r3, [r7, #1]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d003      	beq.n	8005342 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800533a:	887a      	ldrh	r2, [r7, #2]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005340:	e003      	b.n	800534a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005342:	887b      	ldrh	r3, [r7, #2]
 8005344:	041a      	lsls	r2, r3, #16
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	619a      	str	r2, [r3, #24]
}
 800534a:	bf00      	nop
 800534c:	370c      	adds	r7, #12
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr

08005356 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005356:	b480      	push	{r7}
 8005358:	b085      	sub	sp, #20
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
 800535e:	460b      	mov	r3, r1
 8005360:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	695b      	ldr	r3, [r3, #20]
 8005366:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005368:	887a      	ldrh	r2, [r7, #2]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	4013      	ands	r3, r2
 800536e:	041a      	lsls	r2, r3, #16
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	43d9      	mvns	r1, r3
 8005374:	887b      	ldrh	r3, [r7, #2]
 8005376:	400b      	ands	r3, r1
 8005378:	431a      	orrs	r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	619a      	str	r2, [r3, #24]
}
 800537e:	bf00      	nop
 8005380:	3714      	adds	r7, #20
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
	...

0800538c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b086      	sub	sp, #24
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d101      	bne.n	800539e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e264      	b.n	8005868 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0301 	and.w	r3, r3, #1
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d075      	beq.n	8005496 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053aa:	4ba3      	ldr	r3, [pc, #652]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f003 030c 	and.w	r3, r3, #12
 80053b2:	2b04      	cmp	r3, #4
 80053b4:	d00c      	beq.n	80053d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053b6:	4ba0      	ldr	r3, [pc, #640]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053be:	2b08      	cmp	r3, #8
 80053c0:	d112      	bne.n	80053e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053c2:	4b9d      	ldr	r3, [pc, #628]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053ce:	d10b      	bne.n	80053e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053d0:	4b99      	ldr	r3, [pc, #612]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d05b      	beq.n	8005494 <HAL_RCC_OscConfig+0x108>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d157      	bne.n	8005494 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e23f      	b.n	8005868 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053f0:	d106      	bne.n	8005400 <HAL_RCC_OscConfig+0x74>
 80053f2:	4b91      	ldr	r3, [pc, #580]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a90      	ldr	r2, [pc, #576]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 80053f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053fc:	6013      	str	r3, [r2, #0]
 80053fe:	e01d      	b.n	800543c <HAL_RCC_OscConfig+0xb0>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005408:	d10c      	bne.n	8005424 <HAL_RCC_OscConfig+0x98>
 800540a:	4b8b      	ldr	r3, [pc, #556]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a8a      	ldr	r2, [pc, #552]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 8005410:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005414:	6013      	str	r3, [r2, #0]
 8005416:	4b88      	ldr	r3, [pc, #544]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a87      	ldr	r2, [pc, #540]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 800541c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005420:	6013      	str	r3, [r2, #0]
 8005422:	e00b      	b.n	800543c <HAL_RCC_OscConfig+0xb0>
 8005424:	4b84      	ldr	r3, [pc, #528]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a83      	ldr	r2, [pc, #524]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 800542a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800542e:	6013      	str	r3, [r2, #0]
 8005430:	4b81      	ldr	r3, [pc, #516]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a80      	ldr	r2, [pc, #512]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 8005436:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800543a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d013      	beq.n	800546c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005444:	f7ff fc78 	bl	8004d38 <HAL_GetTick>
 8005448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800544a:	e008      	b.n	800545e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800544c:	f7ff fc74 	bl	8004d38 <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	2b64      	cmp	r3, #100	; 0x64
 8005458:	d901      	bls.n	800545e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e204      	b.n	8005868 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800545e:	4b76      	ldr	r3, [pc, #472]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d0f0      	beq.n	800544c <HAL_RCC_OscConfig+0xc0>
 800546a:	e014      	b.n	8005496 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800546c:	f7ff fc64 	bl	8004d38 <HAL_GetTick>
 8005470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005472:	e008      	b.n	8005486 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005474:	f7ff fc60 	bl	8004d38 <HAL_GetTick>
 8005478:	4602      	mov	r2, r0
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	2b64      	cmp	r3, #100	; 0x64
 8005480:	d901      	bls.n	8005486 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e1f0      	b.n	8005868 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005486:	4b6c      	ldr	r3, [pc, #432]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1f0      	bne.n	8005474 <HAL_RCC_OscConfig+0xe8>
 8005492:	e000      	b.n	8005496 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005494:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0302 	and.w	r3, r3, #2
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d063      	beq.n	800556a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054a2:	4b65      	ldr	r3, [pc, #404]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	f003 030c 	and.w	r3, r3, #12
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d00b      	beq.n	80054c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054ae:	4b62      	ldr	r3, [pc, #392]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054b6:	2b08      	cmp	r3, #8
 80054b8:	d11c      	bne.n	80054f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054ba:	4b5f      	ldr	r3, [pc, #380]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d116      	bne.n	80054f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054c6:	4b5c      	ldr	r3, [pc, #368]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0302 	and.w	r3, r3, #2
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d005      	beq.n	80054de <HAL_RCC_OscConfig+0x152>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d001      	beq.n	80054de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e1c4      	b.n	8005868 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054de:	4b56      	ldr	r3, [pc, #344]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	00db      	lsls	r3, r3, #3
 80054ec:	4952      	ldr	r1, [pc, #328]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 80054ee:	4313      	orrs	r3, r2
 80054f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054f2:	e03a      	b.n	800556a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d020      	beq.n	800553e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054fc:	4b4f      	ldr	r3, [pc, #316]	; (800563c <HAL_RCC_OscConfig+0x2b0>)
 80054fe:	2201      	movs	r2, #1
 8005500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005502:	f7ff fc19 	bl	8004d38 <HAL_GetTick>
 8005506:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005508:	e008      	b.n	800551c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800550a:	f7ff fc15 	bl	8004d38 <HAL_GetTick>
 800550e:	4602      	mov	r2, r0
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	1ad3      	subs	r3, r2, r3
 8005514:	2b02      	cmp	r3, #2
 8005516:	d901      	bls.n	800551c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005518:	2303      	movs	r3, #3
 800551a:	e1a5      	b.n	8005868 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800551c:	4b46      	ldr	r3, [pc, #280]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0302 	and.w	r3, r3, #2
 8005524:	2b00      	cmp	r3, #0
 8005526:	d0f0      	beq.n	800550a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005528:	4b43      	ldr	r3, [pc, #268]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	00db      	lsls	r3, r3, #3
 8005536:	4940      	ldr	r1, [pc, #256]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 8005538:	4313      	orrs	r3, r2
 800553a:	600b      	str	r3, [r1, #0]
 800553c:	e015      	b.n	800556a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800553e:	4b3f      	ldr	r3, [pc, #252]	; (800563c <HAL_RCC_OscConfig+0x2b0>)
 8005540:	2200      	movs	r2, #0
 8005542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005544:	f7ff fbf8 	bl	8004d38 <HAL_GetTick>
 8005548:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800554a:	e008      	b.n	800555e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800554c:	f7ff fbf4 	bl	8004d38 <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	2b02      	cmp	r3, #2
 8005558:	d901      	bls.n	800555e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	e184      	b.n	8005868 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800555e:	4b36      	ldr	r3, [pc, #216]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0302 	and.w	r3, r3, #2
 8005566:	2b00      	cmp	r3, #0
 8005568:	d1f0      	bne.n	800554c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0308 	and.w	r3, r3, #8
 8005572:	2b00      	cmp	r3, #0
 8005574:	d030      	beq.n	80055d8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	695b      	ldr	r3, [r3, #20]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d016      	beq.n	80055ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800557e:	4b30      	ldr	r3, [pc, #192]	; (8005640 <HAL_RCC_OscConfig+0x2b4>)
 8005580:	2201      	movs	r2, #1
 8005582:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005584:	f7ff fbd8 	bl	8004d38 <HAL_GetTick>
 8005588:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800558a:	e008      	b.n	800559e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800558c:	f7ff fbd4 	bl	8004d38 <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	2b02      	cmp	r3, #2
 8005598:	d901      	bls.n	800559e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e164      	b.n	8005868 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800559e:	4b26      	ldr	r3, [pc, #152]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 80055a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055a2:	f003 0302 	and.w	r3, r3, #2
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d0f0      	beq.n	800558c <HAL_RCC_OscConfig+0x200>
 80055aa:	e015      	b.n	80055d8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055ac:	4b24      	ldr	r3, [pc, #144]	; (8005640 <HAL_RCC_OscConfig+0x2b4>)
 80055ae:	2200      	movs	r2, #0
 80055b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055b2:	f7ff fbc1 	bl	8004d38 <HAL_GetTick>
 80055b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055b8:	e008      	b.n	80055cc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055ba:	f7ff fbbd 	bl	8004d38 <HAL_GetTick>
 80055be:	4602      	mov	r2, r0
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d901      	bls.n	80055cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80055c8:	2303      	movs	r3, #3
 80055ca:	e14d      	b.n	8005868 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055cc:	4b1a      	ldr	r3, [pc, #104]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 80055ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055d0:	f003 0302 	and.w	r3, r3, #2
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1f0      	bne.n	80055ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 0304 	and.w	r3, r3, #4
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	f000 80a0 	beq.w	8005726 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055e6:	2300      	movs	r3, #0
 80055e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055ea:	4b13      	ldr	r3, [pc, #76]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 80055ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d10f      	bne.n	8005616 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055f6:	2300      	movs	r3, #0
 80055f8:	60bb      	str	r3, [r7, #8]
 80055fa:	4b0f      	ldr	r3, [pc, #60]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 80055fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fe:	4a0e      	ldr	r2, [pc, #56]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 8005600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005604:	6413      	str	r3, [r2, #64]	; 0x40
 8005606:	4b0c      	ldr	r3, [pc, #48]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 8005608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800560e:	60bb      	str	r3, [r7, #8]
 8005610:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005612:	2301      	movs	r3, #1
 8005614:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005616:	4b0b      	ldr	r3, [pc, #44]	; (8005644 <HAL_RCC_OscConfig+0x2b8>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800561e:	2b00      	cmp	r3, #0
 8005620:	d121      	bne.n	8005666 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005622:	4b08      	ldr	r3, [pc, #32]	; (8005644 <HAL_RCC_OscConfig+0x2b8>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a07      	ldr	r2, [pc, #28]	; (8005644 <HAL_RCC_OscConfig+0x2b8>)
 8005628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800562c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800562e:	f7ff fb83 	bl	8004d38 <HAL_GetTick>
 8005632:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005634:	e011      	b.n	800565a <HAL_RCC_OscConfig+0x2ce>
 8005636:	bf00      	nop
 8005638:	40023800 	.word	0x40023800
 800563c:	42470000 	.word	0x42470000
 8005640:	42470e80 	.word	0x42470e80
 8005644:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005648:	f7ff fb76 	bl	8004d38 <HAL_GetTick>
 800564c:	4602      	mov	r2, r0
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	2b02      	cmp	r3, #2
 8005654:	d901      	bls.n	800565a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e106      	b.n	8005868 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800565a:	4b85      	ldr	r3, [pc, #532]	; (8005870 <HAL_RCC_OscConfig+0x4e4>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005662:	2b00      	cmp	r3, #0
 8005664:	d0f0      	beq.n	8005648 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	2b01      	cmp	r3, #1
 800566c:	d106      	bne.n	800567c <HAL_RCC_OscConfig+0x2f0>
 800566e:	4b81      	ldr	r3, [pc, #516]	; (8005874 <HAL_RCC_OscConfig+0x4e8>)
 8005670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005672:	4a80      	ldr	r2, [pc, #512]	; (8005874 <HAL_RCC_OscConfig+0x4e8>)
 8005674:	f043 0301 	orr.w	r3, r3, #1
 8005678:	6713      	str	r3, [r2, #112]	; 0x70
 800567a:	e01c      	b.n	80056b6 <HAL_RCC_OscConfig+0x32a>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	2b05      	cmp	r3, #5
 8005682:	d10c      	bne.n	800569e <HAL_RCC_OscConfig+0x312>
 8005684:	4b7b      	ldr	r3, [pc, #492]	; (8005874 <HAL_RCC_OscConfig+0x4e8>)
 8005686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005688:	4a7a      	ldr	r2, [pc, #488]	; (8005874 <HAL_RCC_OscConfig+0x4e8>)
 800568a:	f043 0304 	orr.w	r3, r3, #4
 800568e:	6713      	str	r3, [r2, #112]	; 0x70
 8005690:	4b78      	ldr	r3, [pc, #480]	; (8005874 <HAL_RCC_OscConfig+0x4e8>)
 8005692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005694:	4a77      	ldr	r2, [pc, #476]	; (8005874 <HAL_RCC_OscConfig+0x4e8>)
 8005696:	f043 0301 	orr.w	r3, r3, #1
 800569a:	6713      	str	r3, [r2, #112]	; 0x70
 800569c:	e00b      	b.n	80056b6 <HAL_RCC_OscConfig+0x32a>
 800569e:	4b75      	ldr	r3, [pc, #468]	; (8005874 <HAL_RCC_OscConfig+0x4e8>)
 80056a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056a2:	4a74      	ldr	r2, [pc, #464]	; (8005874 <HAL_RCC_OscConfig+0x4e8>)
 80056a4:	f023 0301 	bic.w	r3, r3, #1
 80056a8:	6713      	str	r3, [r2, #112]	; 0x70
 80056aa:	4b72      	ldr	r3, [pc, #456]	; (8005874 <HAL_RCC_OscConfig+0x4e8>)
 80056ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ae:	4a71      	ldr	r2, [pc, #452]	; (8005874 <HAL_RCC_OscConfig+0x4e8>)
 80056b0:	f023 0304 	bic.w	r3, r3, #4
 80056b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d015      	beq.n	80056ea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056be:	f7ff fb3b 	bl	8004d38 <HAL_GetTick>
 80056c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056c4:	e00a      	b.n	80056dc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056c6:	f7ff fb37 	bl	8004d38 <HAL_GetTick>
 80056ca:	4602      	mov	r2, r0
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d901      	bls.n	80056dc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	e0c5      	b.n	8005868 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056dc:	4b65      	ldr	r3, [pc, #404]	; (8005874 <HAL_RCC_OscConfig+0x4e8>)
 80056de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e0:	f003 0302 	and.w	r3, r3, #2
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d0ee      	beq.n	80056c6 <HAL_RCC_OscConfig+0x33a>
 80056e8:	e014      	b.n	8005714 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056ea:	f7ff fb25 	bl	8004d38 <HAL_GetTick>
 80056ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056f0:	e00a      	b.n	8005708 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056f2:	f7ff fb21 	bl	8004d38 <HAL_GetTick>
 80056f6:	4602      	mov	r2, r0
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005700:	4293      	cmp	r3, r2
 8005702:	d901      	bls.n	8005708 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	e0af      	b.n	8005868 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005708:	4b5a      	ldr	r3, [pc, #360]	; (8005874 <HAL_RCC_OscConfig+0x4e8>)
 800570a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800570c:	f003 0302 	and.w	r3, r3, #2
 8005710:	2b00      	cmp	r3, #0
 8005712:	d1ee      	bne.n	80056f2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005714:	7dfb      	ldrb	r3, [r7, #23]
 8005716:	2b01      	cmp	r3, #1
 8005718:	d105      	bne.n	8005726 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800571a:	4b56      	ldr	r3, [pc, #344]	; (8005874 <HAL_RCC_OscConfig+0x4e8>)
 800571c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571e:	4a55      	ldr	r2, [pc, #340]	; (8005874 <HAL_RCC_OscConfig+0x4e8>)
 8005720:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005724:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	2b00      	cmp	r3, #0
 800572c:	f000 809b 	beq.w	8005866 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005730:	4b50      	ldr	r3, [pc, #320]	; (8005874 <HAL_RCC_OscConfig+0x4e8>)
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	f003 030c 	and.w	r3, r3, #12
 8005738:	2b08      	cmp	r3, #8
 800573a:	d05c      	beq.n	80057f6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	699b      	ldr	r3, [r3, #24]
 8005740:	2b02      	cmp	r3, #2
 8005742:	d141      	bne.n	80057c8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005744:	4b4c      	ldr	r3, [pc, #304]	; (8005878 <HAL_RCC_OscConfig+0x4ec>)
 8005746:	2200      	movs	r2, #0
 8005748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800574a:	f7ff faf5 	bl	8004d38 <HAL_GetTick>
 800574e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005750:	e008      	b.n	8005764 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005752:	f7ff faf1 	bl	8004d38 <HAL_GetTick>
 8005756:	4602      	mov	r2, r0
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	2b02      	cmp	r3, #2
 800575e:	d901      	bls.n	8005764 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005760:	2303      	movs	r3, #3
 8005762:	e081      	b.n	8005868 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005764:	4b43      	ldr	r3, [pc, #268]	; (8005874 <HAL_RCC_OscConfig+0x4e8>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800576c:	2b00      	cmp	r3, #0
 800576e:	d1f0      	bne.n	8005752 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	69da      	ldr	r2, [r3, #28]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6a1b      	ldr	r3, [r3, #32]
 8005778:	431a      	orrs	r2, r3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577e:	019b      	lsls	r3, r3, #6
 8005780:	431a      	orrs	r2, r3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005786:	085b      	lsrs	r3, r3, #1
 8005788:	3b01      	subs	r3, #1
 800578a:	041b      	lsls	r3, r3, #16
 800578c:	431a      	orrs	r2, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005792:	061b      	lsls	r3, r3, #24
 8005794:	4937      	ldr	r1, [pc, #220]	; (8005874 <HAL_RCC_OscConfig+0x4e8>)
 8005796:	4313      	orrs	r3, r2
 8005798:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800579a:	4b37      	ldr	r3, [pc, #220]	; (8005878 <HAL_RCC_OscConfig+0x4ec>)
 800579c:	2201      	movs	r2, #1
 800579e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057a0:	f7ff faca 	bl	8004d38 <HAL_GetTick>
 80057a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057a6:	e008      	b.n	80057ba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057a8:	f7ff fac6 	bl	8004d38 <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d901      	bls.n	80057ba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e056      	b.n	8005868 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057ba:	4b2e      	ldr	r3, [pc, #184]	; (8005874 <HAL_RCC_OscConfig+0x4e8>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d0f0      	beq.n	80057a8 <HAL_RCC_OscConfig+0x41c>
 80057c6:	e04e      	b.n	8005866 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057c8:	4b2b      	ldr	r3, [pc, #172]	; (8005878 <HAL_RCC_OscConfig+0x4ec>)
 80057ca:	2200      	movs	r2, #0
 80057cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057ce:	f7ff fab3 	bl	8004d38 <HAL_GetTick>
 80057d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057d4:	e008      	b.n	80057e8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057d6:	f7ff faaf 	bl	8004d38 <HAL_GetTick>
 80057da:	4602      	mov	r2, r0
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d901      	bls.n	80057e8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80057e4:	2303      	movs	r3, #3
 80057e6:	e03f      	b.n	8005868 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057e8:	4b22      	ldr	r3, [pc, #136]	; (8005874 <HAL_RCC_OscConfig+0x4e8>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d1f0      	bne.n	80057d6 <HAL_RCC_OscConfig+0x44a>
 80057f4:	e037      	b.n	8005866 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	699b      	ldr	r3, [r3, #24]
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d101      	bne.n	8005802 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e032      	b.n	8005868 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005802:	4b1c      	ldr	r3, [pc, #112]	; (8005874 <HAL_RCC_OscConfig+0x4e8>)
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	2b01      	cmp	r3, #1
 800580e:	d028      	beq.n	8005862 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800581a:	429a      	cmp	r2, r3
 800581c:	d121      	bne.n	8005862 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005828:	429a      	cmp	r2, r3
 800582a:	d11a      	bne.n	8005862 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005832:	4013      	ands	r3, r2
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005838:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800583a:	4293      	cmp	r3, r2
 800583c:	d111      	bne.n	8005862 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005848:	085b      	lsrs	r3, r3, #1
 800584a:	3b01      	subs	r3, #1
 800584c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800584e:	429a      	cmp	r2, r3
 8005850:	d107      	bne.n	8005862 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800585c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800585e:	429a      	cmp	r2, r3
 8005860:	d001      	beq.n	8005866 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e000      	b.n	8005868 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005866:	2300      	movs	r3, #0
}
 8005868:	4618      	mov	r0, r3
 800586a:	3718      	adds	r7, #24
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}
 8005870:	40007000 	.word	0x40007000
 8005874:	40023800 	.word	0x40023800
 8005878:	42470060 	.word	0x42470060

0800587c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d101      	bne.n	8005890 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e0cc      	b.n	8005a2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005890:	4b68      	ldr	r3, [pc, #416]	; (8005a34 <HAL_RCC_ClockConfig+0x1b8>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 0307 	and.w	r3, r3, #7
 8005898:	683a      	ldr	r2, [r7, #0]
 800589a:	429a      	cmp	r2, r3
 800589c:	d90c      	bls.n	80058b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800589e:	4b65      	ldr	r3, [pc, #404]	; (8005a34 <HAL_RCC_ClockConfig+0x1b8>)
 80058a0:	683a      	ldr	r2, [r7, #0]
 80058a2:	b2d2      	uxtb	r2, r2
 80058a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058a6:	4b63      	ldr	r3, [pc, #396]	; (8005a34 <HAL_RCC_ClockConfig+0x1b8>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0307 	and.w	r3, r3, #7
 80058ae:	683a      	ldr	r2, [r7, #0]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d001      	beq.n	80058b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e0b8      	b.n	8005a2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0302 	and.w	r3, r3, #2
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d020      	beq.n	8005906 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0304 	and.w	r3, r3, #4
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d005      	beq.n	80058dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058d0:	4b59      	ldr	r3, [pc, #356]	; (8005a38 <HAL_RCC_ClockConfig+0x1bc>)
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	4a58      	ldr	r2, [pc, #352]	; (8005a38 <HAL_RCC_ClockConfig+0x1bc>)
 80058d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80058da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0308 	and.w	r3, r3, #8
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d005      	beq.n	80058f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058e8:	4b53      	ldr	r3, [pc, #332]	; (8005a38 <HAL_RCC_ClockConfig+0x1bc>)
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	4a52      	ldr	r2, [pc, #328]	; (8005a38 <HAL_RCC_ClockConfig+0x1bc>)
 80058ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80058f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058f4:	4b50      	ldr	r3, [pc, #320]	; (8005a38 <HAL_RCC_ClockConfig+0x1bc>)
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	494d      	ldr	r1, [pc, #308]	; (8005a38 <HAL_RCC_ClockConfig+0x1bc>)
 8005902:	4313      	orrs	r3, r2
 8005904:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 0301 	and.w	r3, r3, #1
 800590e:	2b00      	cmp	r3, #0
 8005910:	d044      	beq.n	800599c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	2b01      	cmp	r3, #1
 8005918:	d107      	bne.n	800592a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800591a:	4b47      	ldr	r3, [pc, #284]	; (8005a38 <HAL_RCC_ClockConfig+0x1bc>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005922:	2b00      	cmp	r3, #0
 8005924:	d119      	bne.n	800595a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e07f      	b.n	8005a2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	2b02      	cmp	r3, #2
 8005930:	d003      	beq.n	800593a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005936:	2b03      	cmp	r3, #3
 8005938:	d107      	bne.n	800594a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800593a:	4b3f      	ldr	r3, [pc, #252]	; (8005a38 <HAL_RCC_ClockConfig+0x1bc>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005942:	2b00      	cmp	r3, #0
 8005944:	d109      	bne.n	800595a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e06f      	b.n	8005a2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800594a:	4b3b      	ldr	r3, [pc, #236]	; (8005a38 <HAL_RCC_ClockConfig+0x1bc>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 0302 	and.w	r3, r3, #2
 8005952:	2b00      	cmp	r3, #0
 8005954:	d101      	bne.n	800595a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e067      	b.n	8005a2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800595a:	4b37      	ldr	r3, [pc, #220]	; (8005a38 <HAL_RCC_ClockConfig+0x1bc>)
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	f023 0203 	bic.w	r2, r3, #3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	4934      	ldr	r1, [pc, #208]	; (8005a38 <HAL_RCC_ClockConfig+0x1bc>)
 8005968:	4313      	orrs	r3, r2
 800596a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800596c:	f7ff f9e4 	bl	8004d38 <HAL_GetTick>
 8005970:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005972:	e00a      	b.n	800598a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005974:	f7ff f9e0 	bl	8004d38 <HAL_GetTick>
 8005978:	4602      	mov	r2, r0
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005982:	4293      	cmp	r3, r2
 8005984:	d901      	bls.n	800598a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005986:	2303      	movs	r3, #3
 8005988:	e04f      	b.n	8005a2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800598a:	4b2b      	ldr	r3, [pc, #172]	; (8005a38 <HAL_RCC_ClockConfig+0x1bc>)
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	f003 020c 	and.w	r2, r3, #12
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	429a      	cmp	r2, r3
 800599a:	d1eb      	bne.n	8005974 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800599c:	4b25      	ldr	r3, [pc, #148]	; (8005a34 <HAL_RCC_ClockConfig+0x1b8>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 0307 	and.w	r3, r3, #7
 80059a4:	683a      	ldr	r2, [r7, #0]
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d20c      	bcs.n	80059c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059aa:	4b22      	ldr	r3, [pc, #136]	; (8005a34 <HAL_RCC_ClockConfig+0x1b8>)
 80059ac:	683a      	ldr	r2, [r7, #0]
 80059ae:	b2d2      	uxtb	r2, r2
 80059b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059b2:	4b20      	ldr	r3, [pc, #128]	; (8005a34 <HAL_RCC_ClockConfig+0x1b8>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 0307 	and.w	r3, r3, #7
 80059ba:	683a      	ldr	r2, [r7, #0]
 80059bc:	429a      	cmp	r2, r3
 80059be:	d001      	beq.n	80059c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e032      	b.n	8005a2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 0304 	and.w	r3, r3, #4
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d008      	beq.n	80059e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059d0:	4b19      	ldr	r3, [pc, #100]	; (8005a38 <HAL_RCC_ClockConfig+0x1bc>)
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	4916      	ldr	r1, [pc, #88]	; (8005a38 <HAL_RCC_ClockConfig+0x1bc>)
 80059de:	4313      	orrs	r3, r2
 80059e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0308 	and.w	r3, r3, #8
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d009      	beq.n	8005a02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059ee:	4b12      	ldr	r3, [pc, #72]	; (8005a38 <HAL_RCC_ClockConfig+0x1bc>)
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	00db      	lsls	r3, r3, #3
 80059fc:	490e      	ldr	r1, [pc, #56]	; (8005a38 <HAL_RCC_ClockConfig+0x1bc>)
 80059fe:	4313      	orrs	r3, r2
 8005a00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a02:	f000 f821 	bl	8005a48 <HAL_RCC_GetSysClockFreq>
 8005a06:	4602      	mov	r2, r0
 8005a08:	4b0b      	ldr	r3, [pc, #44]	; (8005a38 <HAL_RCC_ClockConfig+0x1bc>)
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	091b      	lsrs	r3, r3, #4
 8005a0e:	f003 030f 	and.w	r3, r3, #15
 8005a12:	490a      	ldr	r1, [pc, #40]	; (8005a3c <HAL_RCC_ClockConfig+0x1c0>)
 8005a14:	5ccb      	ldrb	r3, [r1, r3]
 8005a16:	fa22 f303 	lsr.w	r3, r2, r3
 8005a1a:	4a09      	ldr	r2, [pc, #36]	; (8005a40 <HAL_RCC_ClockConfig+0x1c4>)
 8005a1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005a1e:	4b09      	ldr	r3, [pc, #36]	; (8005a44 <HAL_RCC_ClockConfig+0x1c8>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4618      	mov	r0, r3
 8005a24:	f7ff f944 	bl	8004cb0 <HAL_InitTick>

  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3710      	adds	r7, #16
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}
 8005a32:	bf00      	nop
 8005a34:	40023c00 	.word	0x40023c00
 8005a38:	40023800 	.word	0x40023800
 8005a3c:	08006864 	.word	0x08006864
 8005a40:	20000008 	.word	0x20000008
 8005a44:	20000120 	.word	0x20000120

08005a48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a48:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005a4c:	b084      	sub	sp, #16
 8005a4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005a50:	2300      	movs	r3, #0
 8005a52:	607b      	str	r3, [r7, #4]
 8005a54:	2300      	movs	r3, #0
 8005a56:	60fb      	str	r3, [r7, #12]
 8005a58:	2300      	movs	r3, #0
 8005a5a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a60:	4b67      	ldr	r3, [pc, #412]	; (8005c00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	f003 030c 	and.w	r3, r3, #12
 8005a68:	2b08      	cmp	r3, #8
 8005a6a:	d00d      	beq.n	8005a88 <HAL_RCC_GetSysClockFreq+0x40>
 8005a6c:	2b08      	cmp	r3, #8
 8005a6e:	f200 80bd 	bhi.w	8005bec <HAL_RCC_GetSysClockFreq+0x1a4>
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d002      	beq.n	8005a7c <HAL_RCC_GetSysClockFreq+0x34>
 8005a76:	2b04      	cmp	r3, #4
 8005a78:	d003      	beq.n	8005a82 <HAL_RCC_GetSysClockFreq+0x3a>
 8005a7a:	e0b7      	b.n	8005bec <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a7c:	4b61      	ldr	r3, [pc, #388]	; (8005c04 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005a7e:	60bb      	str	r3, [r7, #8]
       break;
 8005a80:	e0b7      	b.n	8005bf2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a82:	4b61      	ldr	r3, [pc, #388]	; (8005c08 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005a84:	60bb      	str	r3, [r7, #8]
      break;
 8005a86:	e0b4      	b.n	8005bf2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a88:	4b5d      	ldr	r3, [pc, #372]	; (8005c00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a90:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a92:	4b5b      	ldr	r3, [pc, #364]	; (8005c00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d04d      	beq.n	8005b3a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a9e:	4b58      	ldr	r3, [pc, #352]	; (8005c00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	099b      	lsrs	r3, r3, #6
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	f04f 0300 	mov.w	r3, #0
 8005aaa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005aae:	f04f 0100 	mov.w	r1, #0
 8005ab2:	ea02 0800 	and.w	r8, r2, r0
 8005ab6:	ea03 0901 	and.w	r9, r3, r1
 8005aba:	4640      	mov	r0, r8
 8005abc:	4649      	mov	r1, r9
 8005abe:	f04f 0200 	mov.w	r2, #0
 8005ac2:	f04f 0300 	mov.w	r3, #0
 8005ac6:	014b      	lsls	r3, r1, #5
 8005ac8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005acc:	0142      	lsls	r2, r0, #5
 8005ace:	4610      	mov	r0, r2
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	ebb0 0008 	subs.w	r0, r0, r8
 8005ad6:	eb61 0109 	sbc.w	r1, r1, r9
 8005ada:	f04f 0200 	mov.w	r2, #0
 8005ade:	f04f 0300 	mov.w	r3, #0
 8005ae2:	018b      	lsls	r3, r1, #6
 8005ae4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005ae8:	0182      	lsls	r2, r0, #6
 8005aea:	1a12      	subs	r2, r2, r0
 8005aec:	eb63 0301 	sbc.w	r3, r3, r1
 8005af0:	f04f 0000 	mov.w	r0, #0
 8005af4:	f04f 0100 	mov.w	r1, #0
 8005af8:	00d9      	lsls	r1, r3, #3
 8005afa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005afe:	00d0      	lsls	r0, r2, #3
 8005b00:	4602      	mov	r2, r0
 8005b02:	460b      	mov	r3, r1
 8005b04:	eb12 0208 	adds.w	r2, r2, r8
 8005b08:	eb43 0309 	adc.w	r3, r3, r9
 8005b0c:	f04f 0000 	mov.w	r0, #0
 8005b10:	f04f 0100 	mov.w	r1, #0
 8005b14:	0259      	lsls	r1, r3, #9
 8005b16:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005b1a:	0250      	lsls	r0, r2, #9
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	460b      	mov	r3, r1
 8005b20:	4610      	mov	r0, r2
 8005b22:	4619      	mov	r1, r3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	461a      	mov	r2, r3
 8005b28:	f04f 0300 	mov.w	r3, #0
 8005b2c:	f7fa ffc2 	bl	8000ab4 <__aeabi_uldivmod>
 8005b30:	4602      	mov	r2, r0
 8005b32:	460b      	mov	r3, r1
 8005b34:	4613      	mov	r3, r2
 8005b36:	60fb      	str	r3, [r7, #12]
 8005b38:	e04a      	b.n	8005bd0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b3a:	4b31      	ldr	r3, [pc, #196]	; (8005c00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	099b      	lsrs	r3, r3, #6
 8005b40:	461a      	mov	r2, r3
 8005b42:	f04f 0300 	mov.w	r3, #0
 8005b46:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005b4a:	f04f 0100 	mov.w	r1, #0
 8005b4e:	ea02 0400 	and.w	r4, r2, r0
 8005b52:	ea03 0501 	and.w	r5, r3, r1
 8005b56:	4620      	mov	r0, r4
 8005b58:	4629      	mov	r1, r5
 8005b5a:	f04f 0200 	mov.w	r2, #0
 8005b5e:	f04f 0300 	mov.w	r3, #0
 8005b62:	014b      	lsls	r3, r1, #5
 8005b64:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005b68:	0142      	lsls	r2, r0, #5
 8005b6a:	4610      	mov	r0, r2
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	1b00      	subs	r0, r0, r4
 8005b70:	eb61 0105 	sbc.w	r1, r1, r5
 8005b74:	f04f 0200 	mov.w	r2, #0
 8005b78:	f04f 0300 	mov.w	r3, #0
 8005b7c:	018b      	lsls	r3, r1, #6
 8005b7e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005b82:	0182      	lsls	r2, r0, #6
 8005b84:	1a12      	subs	r2, r2, r0
 8005b86:	eb63 0301 	sbc.w	r3, r3, r1
 8005b8a:	f04f 0000 	mov.w	r0, #0
 8005b8e:	f04f 0100 	mov.w	r1, #0
 8005b92:	00d9      	lsls	r1, r3, #3
 8005b94:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b98:	00d0      	lsls	r0, r2, #3
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	460b      	mov	r3, r1
 8005b9e:	1912      	adds	r2, r2, r4
 8005ba0:	eb45 0303 	adc.w	r3, r5, r3
 8005ba4:	f04f 0000 	mov.w	r0, #0
 8005ba8:	f04f 0100 	mov.w	r1, #0
 8005bac:	0299      	lsls	r1, r3, #10
 8005bae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005bb2:	0290      	lsls	r0, r2, #10
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	460b      	mov	r3, r1
 8005bb8:	4610      	mov	r0, r2
 8005bba:	4619      	mov	r1, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	f04f 0300 	mov.w	r3, #0
 8005bc4:	f7fa ff76 	bl	8000ab4 <__aeabi_uldivmod>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	460b      	mov	r3, r1
 8005bcc:	4613      	mov	r3, r2
 8005bce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005bd0:	4b0b      	ldr	r3, [pc, #44]	; (8005c00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	0c1b      	lsrs	r3, r3, #16
 8005bd6:	f003 0303 	and.w	r3, r3, #3
 8005bda:	3301      	adds	r3, #1
 8005bdc:	005b      	lsls	r3, r3, #1
 8005bde:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005be8:	60bb      	str	r3, [r7, #8]
      break;
 8005bea:	e002      	b.n	8005bf2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005bec:	4b05      	ldr	r3, [pc, #20]	; (8005c04 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005bee:	60bb      	str	r3, [r7, #8]
      break;
 8005bf0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005bf2:	68bb      	ldr	r3, [r7, #8]
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3710      	adds	r7, #16
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005bfe:	bf00      	nop
 8005c00:	40023800 	.word	0x40023800
 8005c04:	00f42400 	.word	0x00f42400
 8005c08:	007a1200 	.word	0x007a1200

08005c0c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b082      	sub	sp, #8
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d101      	bne.n	8005c1e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e01c      	b.n	8005c58 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	795b      	ldrb	r3, [r3, #5]
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d105      	bne.n	8005c34 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f7fb fc16 	bl	8001460 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2202      	movs	r2, #2
 8005c38:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f042 0204 	orr.w	r2, r2, #4
 8005c48:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8005c56:	2300      	movs	r3, #0
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3708      	adds	r7, #8
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b084      	sub	sp, #16
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	791b      	ldrb	r3, [r3, #4]
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d101      	bne.n	8005c7a <HAL_RNG_GenerateRandomNumber+0x1a>
 8005c76:	2302      	movs	r3, #2
 8005c78:	e044      	b.n	8005d04 <HAL_RNG_GenerateRandomNumber+0xa4>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	795b      	ldrb	r3, [r3, #5]
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d133      	bne.n	8005cf2 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2202      	movs	r2, #2
 8005c8e:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005c90:	f7ff f852 	bl	8004d38 <HAL_GetTick>
 8005c94:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005c96:	e018      	b.n	8005cca <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005c98:	f7ff f84e 	bl	8004d38 <HAL_GetTick>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	d911      	bls.n	8005cca <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	f003 0301 	and.w	r3, r3, #1
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d00a      	beq.n	8005cca <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2202      	movs	r2, #2
 8005cbe:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e01c      	b.n	8005d04 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	f003 0301 	and.w	r3, r3, #1
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d1df      	bne.n	8005c98 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	689a      	ldr	r2, [r3, #8]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	68da      	ldr	r2, [r3, #12]
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2201      	movs	r2, #1
 8005cee:	715a      	strb	r2, [r3, #5]
 8005cf0:	e004      	b.n	8005cfc <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2204      	movs	r2, #4
 8005cf6:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	711a      	strb	r2, [r3, #4]

  return status;
 8005d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3710      	adds	r7, #16
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d101      	bne.n	8005d1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e07b      	b.n	8005e16 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d108      	bne.n	8005d38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d2e:	d009      	beq.n	8005d44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	61da      	str	r2, [r3, #28]
 8005d36:	e005      	b.n	8005d44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d106      	bne.n	8005d64 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f7fb fbd6 	bl	8001510 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2202      	movs	r2, #2
 8005d68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d7a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005d8c:	431a      	orrs	r2, r3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d96:	431a      	orrs	r2, r3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	691b      	ldr	r3, [r3, #16]
 8005d9c:	f003 0302 	and.w	r3, r3, #2
 8005da0:	431a      	orrs	r2, r3
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	695b      	ldr	r3, [r3, #20]
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	431a      	orrs	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	699b      	ldr	r3, [r3, #24]
 8005db0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005db4:	431a      	orrs	r2, r3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	69db      	ldr	r3, [r3, #28]
 8005dba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005dbe:	431a      	orrs	r2, r3
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6a1b      	ldr	r3, [r3, #32]
 8005dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dc8:	ea42 0103 	orr.w	r1, r2, r3
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	430a      	orrs	r2, r1
 8005dda:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	699b      	ldr	r3, [r3, #24]
 8005de0:	0c1b      	lsrs	r3, r3, #16
 8005de2:	f003 0104 	and.w	r1, r3, #4
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dea:	f003 0210 	and.w	r2, r3, #16
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	430a      	orrs	r2, r1
 8005df4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	69da      	ldr	r2, [r3, #28]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e04:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3708      	adds	r7, #8
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}

08005e1e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005e1e:	b580      	push	{r7, lr}
 8005e20:	b08c      	sub	sp, #48	; 0x30
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	60f8      	str	r0, [r7, #12]
 8005e26:	60b9      	str	r1, [r7, #8]
 8005e28:	607a      	str	r2, [r7, #4]
 8005e2a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005e30:	2300      	movs	r3, #0
 8005e32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d101      	bne.n	8005e44 <HAL_SPI_TransmitReceive+0x26>
 8005e40:	2302      	movs	r3, #2
 8005e42:	e18a      	b.n	800615a <HAL_SPI_TransmitReceive+0x33c>
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e4c:	f7fe ff74 	bl	8004d38 <HAL_GetTick>
 8005e50:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005e62:	887b      	ldrh	r3, [r7, #2]
 8005e64:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005e66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d00f      	beq.n	8005e8e <HAL_SPI_TransmitReceive+0x70>
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e74:	d107      	bne.n	8005e86 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d103      	bne.n	8005e86 <HAL_SPI_TransmitReceive+0x68>
 8005e7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005e82:	2b04      	cmp	r3, #4
 8005e84:	d003      	beq.n	8005e8e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005e86:	2302      	movs	r3, #2
 8005e88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005e8c:	e15b      	b.n	8006146 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d005      	beq.n	8005ea0 <HAL_SPI_TransmitReceive+0x82>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d002      	beq.n	8005ea0 <HAL_SPI_TransmitReceive+0x82>
 8005e9a:	887b      	ldrh	r3, [r7, #2]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d103      	bne.n	8005ea8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005ea6:	e14e      	b.n	8006146 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	2b04      	cmp	r3, #4
 8005eb2:	d003      	beq.n	8005ebc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2205      	movs	r2, #5
 8005eb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	887a      	ldrh	r2, [r7, #2]
 8005ecc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	887a      	ldrh	r2, [r7, #2]
 8005ed2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	68ba      	ldr	r2, [r7, #8]
 8005ed8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	887a      	ldrh	r2, [r7, #2]
 8005ede:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	887a      	ldrh	r2, [r7, #2]
 8005ee4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005efc:	2b40      	cmp	r3, #64	; 0x40
 8005efe:	d007      	beq.n	8005f10 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f0e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f18:	d178      	bne.n	800600c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d002      	beq.n	8005f28 <HAL_SPI_TransmitReceive+0x10a>
 8005f22:	8b7b      	ldrh	r3, [r7, #26]
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d166      	bne.n	8005ff6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f2c:	881a      	ldrh	r2, [r3, #0]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f38:	1c9a      	adds	r2, r3, #2
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	3b01      	subs	r3, #1
 8005f46:	b29a      	uxth	r2, r3
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f4c:	e053      	b.n	8005ff6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	f003 0302 	and.w	r3, r3, #2
 8005f58:	2b02      	cmp	r3, #2
 8005f5a:	d11b      	bne.n	8005f94 <HAL_SPI_TransmitReceive+0x176>
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d016      	beq.n	8005f94 <HAL_SPI_TransmitReceive+0x176>
 8005f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d113      	bne.n	8005f94 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f70:	881a      	ldrh	r2, [r3, #0]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f7c:	1c9a      	adds	r2, r3, #2
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	3b01      	subs	r3, #1
 8005f8a:	b29a      	uxth	r2, r3
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f90:	2300      	movs	r3, #0
 8005f92:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	f003 0301 	and.w	r3, r3, #1
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d119      	bne.n	8005fd6 <HAL_SPI_TransmitReceive+0x1b8>
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d014      	beq.n	8005fd6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68da      	ldr	r2, [r3, #12]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb6:	b292      	uxth	r2, r2
 8005fb8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fbe:	1c9a      	adds	r2, r3, #2
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	b29a      	uxth	r2, r3
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005fd6:	f7fe feaf 	bl	8004d38 <HAL_GetTick>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fde:	1ad3      	subs	r3, r2, r3
 8005fe0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d807      	bhi.n	8005ff6 <HAL_SPI_TransmitReceive+0x1d8>
 8005fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fec:	d003      	beq.n	8005ff6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005fee:	2303      	movs	r3, #3
 8005ff0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005ff4:	e0a7      	b.n	8006146 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d1a6      	bne.n	8005f4e <HAL_SPI_TransmitReceive+0x130>
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006004:	b29b      	uxth	r3, r3
 8006006:	2b00      	cmp	r3, #0
 8006008:	d1a1      	bne.n	8005f4e <HAL_SPI_TransmitReceive+0x130>
 800600a:	e07c      	b.n	8006106 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d002      	beq.n	800601a <HAL_SPI_TransmitReceive+0x1fc>
 8006014:	8b7b      	ldrh	r3, [r7, #26]
 8006016:	2b01      	cmp	r3, #1
 8006018:	d16b      	bne.n	80060f2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	330c      	adds	r3, #12
 8006024:	7812      	ldrb	r2, [r2, #0]
 8006026:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800602c:	1c5a      	adds	r2, r3, #1
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006036:	b29b      	uxth	r3, r3
 8006038:	3b01      	subs	r3, #1
 800603a:	b29a      	uxth	r2, r3
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006040:	e057      	b.n	80060f2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	f003 0302 	and.w	r3, r3, #2
 800604c:	2b02      	cmp	r3, #2
 800604e:	d11c      	bne.n	800608a <HAL_SPI_TransmitReceive+0x26c>
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006054:	b29b      	uxth	r3, r3
 8006056:	2b00      	cmp	r3, #0
 8006058:	d017      	beq.n	800608a <HAL_SPI_TransmitReceive+0x26c>
 800605a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800605c:	2b01      	cmp	r3, #1
 800605e:	d114      	bne.n	800608a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	330c      	adds	r3, #12
 800606a:	7812      	ldrb	r2, [r2, #0]
 800606c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006072:	1c5a      	adds	r2, r3, #1
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800607c:	b29b      	uxth	r3, r3
 800607e:	3b01      	subs	r3, #1
 8006080:	b29a      	uxth	r2, r3
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006086:	2300      	movs	r3, #0
 8006088:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	f003 0301 	and.w	r3, r3, #1
 8006094:	2b01      	cmp	r3, #1
 8006096:	d119      	bne.n	80060cc <HAL_SPI_TransmitReceive+0x2ae>
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800609c:	b29b      	uxth	r3, r3
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d014      	beq.n	80060cc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	68da      	ldr	r2, [r3, #12]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ac:	b2d2      	uxtb	r2, r2
 80060ae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b4:	1c5a      	adds	r2, r3, #1
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060be:	b29b      	uxth	r3, r3
 80060c0:	3b01      	subs	r3, #1
 80060c2:	b29a      	uxth	r2, r3
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80060c8:	2301      	movs	r3, #1
 80060ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80060cc:	f7fe fe34 	bl	8004d38 <HAL_GetTick>
 80060d0:	4602      	mov	r2, r0
 80060d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060d8:	429a      	cmp	r2, r3
 80060da:	d803      	bhi.n	80060e4 <HAL_SPI_TransmitReceive+0x2c6>
 80060dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e2:	d102      	bne.n	80060ea <HAL_SPI_TransmitReceive+0x2cc>
 80060e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d103      	bne.n	80060f2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80060f0:	e029      	b.n	8006146 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d1a2      	bne.n	8006042 <HAL_SPI_TransmitReceive+0x224>
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006100:	b29b      	uxth	r3, r3
 8006102:	2b00      	cmp	r3, #0
 8006104:	d19d      	bne.n	8006042 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006108:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800610a:	68f8      	ldr	r0, [r7, #12]
 800610c:	f000 f8b2 	bl	8006274 <SPI_EndRxTxTransaction>
 8006110:	4603      	mov	r3, r0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d006      	beq.n	8006124 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2220      	movs	r2, #32
 8006120:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006122:	e010      	b.n	8006146 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d10b      	bne.n	8006144 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800612c:	2300      	movs	r3, #0
 800612e:	617b      	str	r3, [r7, #20]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	617b      	str	r3, [r7, #20]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	617b      	str	r3, [r7, #20]
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	e000      	b.n	8006146 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006144:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2201      	movs	r2, #1
 800614a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006156:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800615a:	4618      	mov	r0, r3
 800615c:	3730      	adds	r7, #48	; 0x30
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
	...

08006164 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b088      	sub	sp, #32
 8006168:	af00      	add	r7, sp, #0
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	60b9      	str	r1, [r7, #8]
 800616e:	603b      	str	r3, [r7, #0]
 8006170:	4613      	mov	r3, r2
 8006172:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006174:	f7fe fde0 	bl	8004d38 <HAL_GetTick>
 8006178:	4602      	mov	r2, r0
 800617a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617c:	1a9b      	subs	r3, r3, r2
 800617e:	683a      	ldr	r2, [r7, #0]
 8006180:	4413      	add	r3, r2
 8006182:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006184:	f7fe fdd8 	bl	8004d38 <HAL_GetTick>
 8006188:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800618a:	4b39      	ldr	r3, [pc, #228]	; (8006270 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	015b      	lsls	r3, r3, #5
 8006190:	0d1b      	lsrs	r3, r3, #20
 8006192:	69fa      	ldr	r2, [r7, #28]
 8006194:	fb02 f303 	mul.w	r3, r2, r3
 8006198:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800619a:	e054      	b.n	8006246 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a2:	d050      	beq.n	8006246 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80061a4:	f7fe fdc8 	bl	8004d38 <HAL_GetTick>
 80061a8:	4602      	mov	r2, r0
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	1ad3      	subs	r3, r2, r3
 80061ae:	69fa      	ldr	r2, [r7, #28]
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d902      	bls.n	80061ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d13d      	bne.n	8006236 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	685a      	ldr	r2, [r3, #4]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80061c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061d2:	d111      	bne.n	80061f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061dc:	d004      	beq.n	80061e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061e6:	d107      	bne.n	80061f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006200:	d10f      	bne.n	8006222 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006210:	601a      	str	r2, [r3, #0]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006220:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2201      	movs	r2, #1
 8006226:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2200      	movs	r2, #0
 800622e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006232:	2303      	movs	r3, #3
 8006234:	e017      	b.n	8006266 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d101      	bne.n	8006240 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800623c:	2300      	movs	r3, #0
 800623e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	3b01      	subs	r3, #1
 8006244:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	689a      	ldr	r2, [r3, #8]
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	4013      	ands	r3, r2
 8006250:	68ba      	ldr	r2, [r7, #8]
 8006252:	429a      	cmp	r2, r3
 8006254:	bf0c      	ite	eq
 8006256:	2301      	moveq	r3, #1
 8006258:	2300      	movne	r3, #0
 800625a:	b2db      	uxtb	r3, r3
 800625c:	461a      	mov	r2, r3
 800625e:	79fb      	ldrb	r3, [r7, #7]
 8006260:	429a      	cmp	r2, r3
 8006262:	d19b      	bne.n	800619c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006264:	2300      	movs	r3, #0
}
 8006266:	4618      	mov	r0, r3
 8006268:	3720      	adds	r7, #32
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
 800626e:	bf00      	nop
 8006270:	20000008 	.word	0x20000008

08006274 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b088      	sub	sp, #32
 8006278:	af02      	add	r7, sp, #8
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	60b9      	str	r1, [r7, #8]
 800627e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006280:	4b1b      	ldr	r3, [pc, #108]	; (80062f0 <SPI_EndRxTxTransaction+0x7c>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a1b      	ldr	r2, [pc, #108]	; (80062f4 <SPI_EndRxTxTransaction+0x80>)
 8006286:	fba2 2303 	umull	r2, r3, r2, r3
 800628a:	0d5b      	lsrs	r3, r3, #21
 800628c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006290:	fb02 f303 	mul.w	r3, r2, r3
 8006294:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800629e:	d112      	bne.n	80062c6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	9300      	str	r3, [sp, #0]
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	2200      	movs	r2, #0
 80062a8:	2180      	movs	r1, #128	; 0x80
 80062aa:	68f8      	ldr	r0, [r7, #12]
 80062ac:	f7ff ff5a 	bl	8006164 <SPI_WaitFlagStateUntilTimeout>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d016      	beq.n	80062e4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ba:	f043 0220 	orr.w	r2, r3, #32
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80062c2:	2303      	movs	r3, #3
 80062c4:	e00f      	b.n	80062e6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d00a      	beq.n	80062e2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	3b01      	subs	r3, #1
 80062d0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062dc:	2b80      	cmp	r3, #128	; 0x80
 80062de:	d0f2      	beq.n	80062c6 <SPI_EndRxTxTransaction+0x52>
 80062e0:	e000      	b.n	80062e4 <SPI_EndRxTxTransaction+0x70>
        break;
 80062e2:	bf00      	nop
  }

  return HAL_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3718      	adds	r7, #24
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	bf00      	nop
 80062f0:	20000008 	.word	0x20000008
 80062f4:	165e9f81 	.word	0x165e9f81

080062f8 <calloc>:
 80062f8:	4b02      	ldr	r3, [pc, #8]	; (8006304 <calloc+0xc>)
 80062fa:	460a      	mov	r2, r1
 80062fc:	4601      	mov	r1, r0
 80062fe:	6818      	ldr	r0, [r3, #0]
 8006300:	f000 b842 	b.w	8006388 <_calloc_r>
 8006304:	20000128 	.word	0x20000128

08006308 <__errno>:
 8006308:	4b01      	ldr	r3, [pc, #4]	; (8006310 <__errno+0x8>)
 800630a:	6818      	ldr	r0, [r3, #0]
 800630c:	4770      	bx	lr
 800630e:	bf00      	nop
 8006310:	20000128 	.word	0x20000128

08006314 <__libc_init_array>:
 8006314:	b570      	push	{r4, r5, r6, lr}
 8006316:	4d0d      	ldr	r5, [pc, #52]	; (800634c <__libc_init_array+0x38>)
 8006318:	4c0d      	ldr	r4, [pc, #52]	; (8006350 <__libc_init_array+0x3c>)
 800631a:	1b64      	subs	r4, r4, r5
 800631c:	10a4      	asrs	r4, r4, #2
 800631e:	2600      	movs	r6, #0
 8006320:	42a6      	cmp	r6, r4
 8006322:	d109      	bne.n	8006338 <__libc_init_array+0x24>
 8006324:	4d0b      	ldr	r5, [pc, #44]	; (8006354 <__libc_init_array+0x40>)
 8006326:	4c0c      	ldr	r4, [pc, #48]	; (8006358 <__libc_init_array+0x44>)
 8006328:	f000 fa58 	bl	80067dc <_init>
 800632c:	1b64      	subs	r4, r4, r5
 800632e:	10a4      	asrs	r4, r4, #2
 8006330:	2600      	movs	r6, #0
 8006332:	42a6      	cmp	r6, r4
 8006334:	d105      	bne.n	8006342 <__libc_init_array+0x2e>
 8006336:	bd70      	pop	{r4, r5, r6, pc}
 8006338:	f855 3b04 	ldr.w	r3, [r5], #4
 800633c:	4798      	blx	r3
 800633e:	3601      	adds	r6, #1
 8006340:	e7ee      	b.n	8006320 <__libc_init_array+0xc>
 8006342:	f855 3b04 	ldr.w	r3, [r5], #4
 8006346:	4798      	blx	r3
 8006348:	3601      	adds	r6, #1
 800634a:	e7f2      	b.n	8006332 <__libc_init_array+0x1e>
 800634c:	08006a08 	.word	0x08006a08
 8006350:	08006a08 	.word	0x08006a08
 8006354:	08006a08 	.word	0x08006a08
 8006358:	08006a0c 	.word	0x08006a0c

0800635c <memcpy>:
 800635c:	440a      	add	r2, r1
 800635e:	4291      	cmp	r1, r2
 8006360:	f100 33ff 	add.w	r3, r0, #4294967295
 8006364:	d100      	bne.n	8006368 <memcpy+0xc>
 8006366:	4770      	bx	lr
 8006368:	b510      	push	{r4, lr}
 800636a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800636e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006372:	4291      	cmp	r1, r2
 8006374:	d1f9      	bne.n	800636a <memcpy+0xe>
 8006376:	bd10      	pop	{r4, pc}

08006378 <memset>:
 8006378:	4402      	add	r2, r0
 800637a:	4603      	mov	r3, r0
 800637c:	4293      	cmp	r3, r2
 800637e:	d100      	bne.n	8006382 <memset+0xa>
 8006380:	4770      	bx	lr
 8006382:	f803 1b01 	strb.w	r1, [r3], #1
 8006386:	e7f9      	b.n	800637c <memset+0x4>

08006388 <_calloc_r>:
 8006388:	b513      	push	{r0, r1, r4, lr}
 800638a:	434a      	muls	r2, r1
 800638c:	4611      	mov	r1, r2
 800638e:	9201      	str	r2, [sp, #4]
 8006390:	f000 f80a 	bl	80063a8 <_malloc_r>
 8006394:	4604      	mov	r4, r0
 8006396:	b118      	cbz	r0, 80063a0 <_calloc_r+0x18>
 8006398:	9a01      	ldr	r2, [sp, #4]
 800639a:	2100      	movs	r1, #0
 800639c:	f7ff ffec 	bl	8006378 <memset>
 80063a0:	4620      	mov	r0, r4
 80063a2:	b002      	add	sp, #8
 80063a4:	bd10      	pop	{r4, pc}
	...

080063a8 <_malloc_r>:
 80063a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063aa:	1ccd      	adds	r5, r1, #3
 80063ac:	f025 0503 	bic.w	r5, r5, #3
 80063b0:	3508      	adds	r5, #8
 80063b2:	2d0c      	cmp	r5, #12
 80063b4:	bf38      	it	cc
 80063b6:	250c      	movcc	r5, #12
 80063b8:	2d00      	cmp	r5, #0
 80063ba:	4606      	mov	r6, r0
 80063bc:	db01      	blt.n	80063c2 <_malloc_r+0x1a>
 80063be:	42a9      	cmp	r1, r5
 80063c0:	d903      	bls.n	80063ca <_malloc_r+0x22>
 80063c2:	230c      	movs	r3, #12
 80063c4:	6033      	str	r3, [r6, #0]
 80063c6:	2000      	movs	r0, #0
 80063c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063ca:	f000 f869 	bl	80064a0 <__malloc_lock>
 80063ce:	4921      	ldr	r1, [pc, #132]	; (8006454 <_malloc_r+0xac>)
 80063d0:	680a      	ldr	r2, [r1, #0]
 80063d2:	4614      	mov	r4, r2
 80063d4:	b99c      	cbnz	r4, 80063fe <_malloc_r+0x56>
 80063d6:	4f20      	ldr	r7, [pc, #128]	; (8006458 <_malloc_r+0xb0>)
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	b923      	cbnz	r3, 80063e6 <_malloc_r+0x3e>
 80063dc:	4621      	mov	r1, r4
 80063de:	4630      	mov	r0, r6
 80063e0:	f000 f83c 	bl	800645c <_sbrk_r>
 80063e4:	6038      	str	r0, [r7, #0]
 80063e6:	4629      	mov	r1, r5
 80063e8:	4630      	mov	r0, r6
 80063ea:	f000 f837 	bl	800645c <_sbrk_r>
 80063ee:	1c43      	adds	r3, r0, #1
 80063f0:	d123      	bne.n	800643a <_malloc_r+0x92>
 80063f2:	230c      	movs	r3, #12
 80063f4:	6033      	str	r3, [r6, #0]
 80063f6:	4630      	mov	r0, r6
 80063f8:	f000 f858 	bl	80064ac <__malloc_unlock>
 80063fc:	e7e3      	b.n	80063c6 <_malloc_r+0x1e>
 80063fe:	6823      	ldr	r3, [r4, #0]
 8006400:	1b5b      	subs	r3, r3, r5
 8006402:	d417      	bmi.n	8006434 <_malloc_r+0x8c>
 8006404:	2b0b      	cmp	r3, #11
 8006406:	d903      	bls.n	8006410 <_malloc_r+0x68>
 8006408:	6023      	str	r3, [r4, #0]
 800640a:	441c      	add	r4, r3
 800640c:	6025      	str	r5, [r4, #0]
 800640e:	e004      	b.n	800641a <_malloc_r+0x72>
 8006410:	6863      	ldr	r3, [r4, #4]
 8006412:	42a2      	cmp	r2, r4
 8006414:	bf0c      	ite	eq
 8006416:	600b      	streq	r3, [r1, #0]
 8006418:	6053      	strne	r3, [r2, #4]
 800641a:	4630      	mov	r0, r6
 800641c:	f000 f846 	bl	80064ac <__malloc_unlock>
 8006420:	f104 000b 	add.w	r0, r4, #11
 8006424:	1d23      	adds	r3, r4, #4
 8006426:	f020 0007 	bic.w	r0, r0, #7
 800642a:	1ac2      	subs	r2, r0, r3
 800642c:	d0cc      	beq.n	80063c8 <_malloc_r+0x20>
 800642e:	1a1b      	subs	r3, r3, r0
 8006430:	50a3      	str	r3, [r4, r2]
 8006432:	e7c9      	b.n	80063c8 <_malloc_r+0x20>
 8006434:	4622      	mov	r2, r4
 8006436:	6864      	ldr	r4, [r4, #4]
 8006438:	e7cc      	b.n	80063d4 <_malloc_r+0x2c>
 800643a:	1cc4      	adds	r4, r0, #3
 800643c:	f024 0403 	bic.w	r4, r4, #3
 8006440:	42a0      	cmp	r0, r4
 8006442:	d0e3      	beq.n	800640c <_malloc_r+0x64>
 8006444:	1a21      	subs	r1, r4, r0
 8006446:	4630      	mov	r0, r6
 8006448:	f000 f808 	bl	800645c <_sbrk_r>
 800644c:	3001      	adds	r0, #1
 800644e:	d1dd      	bne.n	800640c <_malloc_r+0x64>
 8006450:	e7cf      	b.n	80063f2 <_malloc_r+0x4a>
 8006452:	bf00      	nop
 8006454:	2000041c 	.word	0x2000041c
 8006458:	20000420 	.word	0x20000420

0800645c <_sbrk_r>:
 800645c:	b538      	push	{r3, r4, r5, lr}
 800645e:	4d06      	ldr	r5, [pc, #24]	; (8006478 <_sbrk_r+0x1c>)
 8006460:	2300      	movs	r3, #0
 8006462:	4604      	mov	r4, r0
 8006464:	4608      	mov	r0, r1
 8006466:	602b      	str	r3, [r5, #0]
 8006468:	f7fb f8ec 	bl	8001644 <_sbrk>
 800646c:	1c43      	adds	r3, r0, #1
 800646e:	d102      	bne.n	8006476 <_sbrk_r+0x1a>
 8006470:	682b      	ldr	r3, [r5, #0]
 8006472:	b103      	cbz	r3, 8006476 <_sbrk_r+0x1a>
 8006474:	6023      	str	r3, [r4, #0]
 8006476:	bd38      	pop	{r3, r4, r5, pc}
 8006478:	2000077c 	.word	0x2000077c

0800647c <strncmp>:
 800647c:	b510      	push	{r4, lr}
 800647e:	b16a      	cbz	r2, 800649c <strncmp+0x20>
 8006480:	3901      	subs	r1, #1
 8006482:	1884      	adds	r4, r0, r2
 8006484:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006488:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800648c:	4293      	cmp	r3, r2
 800648e:	d103      	bne.n	8006498 <strncmp+0x1c>
 8006490:	42a0      	cmp	r0, r4
 8006492:	d001      	beq.n	8006498 <strncmp+0x1c>
 8006494:	2b00      	cmp	r3, #0
 8006496:	d1f5      	bne.n	8006484 <strncmp+0x8>
 8006498:	1a98      	subs	r0, r3, r2
 800649a:	bd10      	pop	{r4, pc}
 800649c:	4610      	mov	r0, r2
 800649e:	e7fc      	b.n	800649a <strncmp+0x1e>

080064a0 <__malloc_lock>:
 80064a0:	4801      	ldr	r0, [pc, #4]	; (80064a8 <__malloc_lock+0x8>)
 80064a2:	f000 b809 	b.w	80064b8 <__retarget_lock_acquire_recursive>
 80064a6:	bf00      	nop
 80064a8:	20000784 	.word	0x20000784

080064ac <__malloc_unlock>:
 80064ac:	4801      	ldr	r0, [pc, #4]	; (80064b4 <__malloc_unlock+0x8>)
 80064ae:	f000 b804 	b.w	80064ba <__retarget_lock_release_recursive>
 80064b2:	bf00      	nop
 80064b4:	20000784 	.word	0x20000784

080064b8 <__retarget_lock_acquire_recursive>:
 80064b8:	4770      	bx	lr

080064ba <__retarget_lock_release_recursive>:
 80064ba:	4770      	bx	lr
 80064bc:	0000      	movs	r0, r0
	...

080064c0 <ceil>:
 80064c0:	ec51 0b10 	vmov	r0, r1, d0
 80064c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064c8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80064cc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80064d0:	2e13      	cmp	r6, #19
 80064d2:	ee10 5a10 	vmov	r5, s0
 80064d6:	ee10 8a10 	vmov	r8, s0
 80064da:	460c      	mov	r4, r1
 80064dc:	dc30      	bgt.n	8006540 <ceil+0x80>
 80064de:	2e00      	cmp	r6, #0
 80064e0:	da12      	bge.n	8006508 <ceil+0x48>
 80064e2:	a335      	add	r3, pc, #212	; (adr r3, 80065b8 <ceil+0xf8>)
 80064e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e8:	f7f9 fe74 	bl	80001d4 <__adddf3>
 80064ec:	2200      	movs	r2, #0
 80064ee:	2300      	movs	r3, #0
 80064f0:	f7fa fab6 	bl	8000a60 <__aeabi_dcmpgt>
 80064f4:	b128      	cbz	r0, 8006502 <ceil+0x42>
 80064f6:	2c00      	cmp	r4, #0
 80064f8:	db55      	blt.n	80065a6 <ceil+0xe6>
 80064fa:	432c      	orrs	r4, r5
 80064fc:	d057      	beq.n	80065ae <ceil+0xee>
 80064fe:	4c30      	ldr	r4, [pc, #192]	; (80065c0 <ceil+0x100>)
 8006500:	2500      	movs	r5, #0
 8006502:	4621      	mov	r1, r4
 8006504:	4628      	mov	r0, r5
 8006506:	e025      	b.n	8006554 <ceil+0x94>
 8006508:	4f2e      	ldr	r7, [pc, #184]	; (80065c4 <ceil+0x104>)
 800650a:	4137      	asrs	r7, r6
 800650c:	ea01 0307 	and.w	r3, r1, r7
 8006510:	4303      	orrs	r3, r0
 8006512:	d01f      	beq.n	8006554 <ceil+0x94>
 8006514:	a328      	add	r3, pc, #160	; (adr r3, 80065b8 <ceil+0xf8>)
 8006516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800651a:	f7f9 fe5b 	bl	80001d4 <__adddf3>
 800651e:	2200      	movs	r2, #0
 8006520:	2300      	movs	r3, #0
 8006522:	f7fa fa9d 	bl	8000a60 <__aeabi_dcmpgt>
 8006526:	2800      	cmp	r0, #0
 8006528:	d0eb      	beq.n	8006502 <ceil+0x42>
 800652a:	2c00      	cmp	r4, #0
 800652c:	bfc2      	ittt	gt
 800652e:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8006532:	fa43 f606 	asrgt.w	r6, r3, r6
 8006536:	19a4      	addgt	r4, r4, r6
 8006538:	ea24 0407 	bic.w	r4, r4, r7
 800653c:	2500      	movs	r5, #0
 800653e:	e7e0      	b.n	8006502 <ceil+0x42>
 8006540:	2e33      	cmp	r6, #51	; 0x33
 8006542:	dd0b      	ble.n	800655c <ceil+0x9c>
 8006544:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006548:	d104      	bne.n	8006554 <ceil+0x94>
 800654a:	ee10 2a10 	vmov	r2, s0
 800654e:	460b      	mov	r3, r1
 8006550:	f7f9 fe40 	bl	80001d4 <__adddf3>
 8006554:	ec41 0b10 	vmov	d0, r0, r1
 8006558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800655c:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8006560:	f04f 33ff 	mov.w	r3, #4294967295
 8006564:	fa23 f707 	lsr.w	r7, r3, r7
 8006568:	4207      	tst	r7, r0
 800656a:	d0f3      	beq.n	8006554 <ceil+0x94>
 800656c:	a312      	add	r3, pc, #72	; (adr r3, 80065b8 <ceil+0xf8>)
 800656e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006572:	f7f9 fe2f 	bl	80001d4 <__adddf3>
 8006576:	2200      	movs	r2, #0
 8006578:	2300      	movs	r3, #0
 800657a:	f7fa fa71 	bl	8000a60 <__aeabi_dcmpgt>
 800657e:	2800      	cmp	r0, #0
 8006580:	d0bf      	beq.n	8006502 <ceil+0x42>
 8006582:	2c00      	cmp	r4, #0
 8006584:	dd02      	ble.n	800658c <ceil+0xcc>
 8006586:	2e14      	cmp	r6, #20
 8006588:	d103      	bne.n	8006592 <ceil+0xd2>
 800658a:	3401      	adds	r4, #1
 800658c:	ea25 0507 	bic.w	r5, r5, r7
 8006590:	e7b7      	b.n	8006502 <ceil+0x42>
 8006592:	2301      	movs	r3, #1
 8006594:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006598:	fa03 f606 	lsl.w	r6, r3, r6
 800659c:	4435      	add	r5, r6
 800659e:	4545      	cmp	r5, r8
 80065a0:	bf38      	it	cc
 80065a2:	18e4      	addcc	r4, r4, r3
 80065a4:	e7f2      	b.n	800658c <ceil+0xcc>
 80065a6:	2500      	movs	r5, #0
 80065a8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80065ac:	e7a9      	b.n	8006502 <ceil+0x42>
 80065ae:	4625      	mov	r5, r4
 80065b0:	e7a7      	b.n	8006502 <ceil+0x42>
 80065b2:	bf00      	nop
 80065b4:	f3af 8000 	nop.w
 80065b8:	8800759c 	.word	0x8800759c
 80065bc:	7e37e43c 	.word	0x7e37e43c
 80065c0:	3ff00000 	.word	0x3ff00000
 80065c4:	000fffff 	.word	0x000fffff

080065c8 <floor>:
 80065c8:	ec51 0b10 	vmov	r0, r1, d0
 80065cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065d0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80065d4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80065d8:	2e13      	cmp	r6, #19
 80065da:	ee10 5a10 	vmov	r5, s0
 80065de:	ee10 8a10 	vmov	r8, s0
 80065e2:	460c      	mov	r4, r1
 80065e4:	dc32      	bgt.n	800664c <floor+0x84>
 80065e6:	2e00      	cmp	r6, #0
 80065e8:	da14      	bge.n	8006614 <floor+0x4c>
 80065ea:	a333      	add	r3, pc, #204	; (adr r3, 80066b8 <floor+0xf0>)
 80065ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f0:	f7f9 fdf0 	bl	80001d4 <__adddf3>
 80065f4:	2200      	movs	r2, #0
 80065f6:	2300      	movs	r3, #0
 80065f8:	f7fa fa32 	bl	8000a60 <__aeabi_dcmpgt>
 80065fc:	b138      	cbz	r0, 800660e <floor+0x46>
 80065fe:	2c00      	cmp	r4, #0
 8006600:	da57      	bge.n	80066b2 <floor+0xea>
 8006602:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8006606:	431d      	orrs	r5, r3
 8006608:	d001      	beq.n	800660e <floor+0x46>
 800660a:	4c2d      	ldr	r4, [pc, #180]	; (80066c0 <floor+0xf8>)
 800660c:	2500      	movs	r5, #0
 800660e:	4621      	mov	r1, r4
 8006610:	4628      	mov	r0, r5
 8006612:	e025      	b.n	8006660 <floor+0x98>
 8006614:	4f2b      	ldr	r7, [pc, #172]	; (80066c4 <floor+0xfc>)
 8006616:	4137      	asrs	r7, r6
 8006618:	ea01 0307 	and.w	r3, r1, r7
 800661c:	4303      	orrs	r3, r0
 800661e:	d01f      	beq.n	8006660 <floor+0x98>
 8006620:	a325      	add	r3, pc, #148	; (adr r3, 80066b8 <floor+0xf0>)
 8006622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006626:	f7f9 fdd5 	bl	80001d4 <__adddf3>
 800662a:	2200      	movs	r2, #0
 800662c:	2300      	movs	r3, #0
 800662e:	f7fa fa17 	bl	8000a60 <__aeabi_dcmpgt>
 8006632:	2800      	cmp	r0, #0
 8006634:	d0eb      	beq.n	800660e <floor+0x46>
 8006636:	2c00      	cmp	r4, #0
 8006638:	bfbe      	ittt	lt
 800663a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800663e:	fa43 f606 	asrlt.w	r6, r3, r6
 8006642:	19a4      	addlt	r4, r4, r6
 8006644:	ea24 0407 	bic.w	r4, r4, r7
 8006648:	2500      	movs	r5, #0
 800664a:	e7e0      	b.n	800660e <floor+0x46>
 800664c:	2e33      	cmp	r6, #51	; 0x33
 800664e:	dd0b      	ble.n	8006668 <floor+0xa0>
 8006650:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006654:	d104      	bne.n	8006660 <floor+0x98>
 8006656:	ee10 2a10 	vmov	r2, s0
 800665a:	460b      	mov	r3, r1
 800665c:	f7f9 fdba 	bl	80001d4 <__adddf3>
 8006660:	ec41 0b10 	vmov	d0, r0, r1
 8006664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006668:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800666c:	f04f 33ff 	mov.w	r3, #4294967295
 8006670:	fa23 f707 	lsr.w	r7, r3, r7
 8006674:	4207      	tst	r7, r0
 8006676:	d0f3      	beq.n	8006660 <floor+0x98>
 8006678:	a30f      	add	r3, pc, #60	; (adr r3, 80066b8 <floor+0xf0>)
 800667a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667e:	f7f9 fda9 	bl	80001d4 <__adddf3>
 8006682:	2200      	movs	r2, #0
 8006684:	2300      	movs	r3, #0
 8006686:	f7fa f9eb 	bl	8000a60 <__aeabi_dcmpgt>
 800668a:	2800      	cmp	r0, #0
 800668c:	d0bf      	beq.n	800660e <floor+0x46>
 800668e:	2c00      	cmp	r4, #0
 8006690:	da02      	bge.n	8006698 <floor+0xd0>
 8006692:	2e14      	cmp	r6, #20
 8006694:	d103      	bne.n	800669e <floor+0xd6>
 8006696:	3401      	adds	r4, #1
 8006698:	ea25 0507 	bic.w	r5, r5, r7
 800669c:	e7b7      	b.n	800660e <floor+0x46>
 800669e:	2301      	movs	r3, #1
 80066a0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80066a4:	fa03 f606 	lsl.w	r6, r3, r6
 80066a8:	4435      	add	r5, r6
 80066aa:	4545      	cmp	r5, r8
 80066ac:	bf38      	it	cc
 80066ae:	18e4      	addcc	r4, r4, r3
 80066b0:	e7f2      	b.n	8006698 <floor+0xd0>
 80066b2:	2500      	movs	r5, #0
 80066b4:	462c      	mov	r4, r5
 80066b6:	e7aa      	b.n	800660e <floor+0x46>
 80066b8:	8800759c 	.word	0x8800759c
 80066bc:	7e37e43c 	.word	0x7e37e43c
 80066c0:	bff00000 	.word	0xbff00000
 80066c4:	000fffff 	.word	0x000fffff

080066c8 <rint>:
 80066c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80066ca:	ec51 0b10 	vmov	r0, r1, d0
 80066ce:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80066d2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80066d6:	2e13      	cmp	r6, #19
 80066d8:	ee10 4a10 	vmov	r4, s0
 80066dc:	460b      	mov	r3, r1
 80066de:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80066e2:	dc58      	bgt.n	8006796 <rint+0xce>
 80066e4:	2e00      	cmp	r6, #0
 80066e6:	da2b      	bge.n	8006740 <rint+0x78>
 80066e8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80066ec:	4302      	orrs	r2, r0
 80066ee:	d023      	beq.n	8006738 <rint+0x70>
 80066f0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80066f4:	4302      	orrs	r2, r0
 80066f6:	4254      	negs	r4, r2
 80066f8:	4314      	orrs	r4, r2
 80066fa:	0c4b      	lsrs	r3, r1, #17
 80066fc:	0b24      	lsrs	r4, r4, #12
 80066fe:	045b      	lsls	r3, r3, #17
 8006700:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8006704:	ea44 0103 	orr.w	r1, r4, r3
 8006708:	4b32      	ldr	r3, [pc, #200]	; (80067d4 <rint+0x10c>)
 800670a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800670e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006712:	4602      	mov	r2, r0
 8006714:	460b      	mov	r3, r1
 8006716:	4630      	mov	r0, r6
 8006718:	4639      	mov	r1, r7
 800671a:	f7f9 fd5b 	bl	80001d4 <__adddf3>
 800671e:	e9cd 0100 	strd	r0, r1, [sp]
 8006722:	463b      	mov	r3, r7
 8006724:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006728:	4632      	mov	r2, r6
 800672a:	f7f9 fd51 	bl	80001d0 <__aeabi_dsub>
 800672e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006732:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8006736:	4639      	mov	r1, r7
 8006738:	ec41 0b10 	vmov	d0, r0, r1
 800673c:	b003      	add	sp, #12
 800673e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006740:	4a25      	ldr	r2, [pc, #148]	; (80067d8 <rint+0x110>)
 8006742:	4132      	asrs	r2, r6
 8006744:	ea01 0702 	and.w	r7, r1, r2
 8006748:	4307      	orrs	r7, r0
 800674a:	d0f5      	beq.n	8006738 <rint+0x70>
 800674c:	0851      	lsrs	r1, r2, #1
 800674e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8006752:	4314      	orrs	r4, r2
 8006754:	d00c      	beq.n	8006770 <rint+0xa8>
 8006756:	ea23 0201 	bic.w	r2, r3, r1
 800675a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800675e:	2e13      	cmp	r6, #19
 8006760:	fa43 f606 	asr.w	r6, r3, r6
 8006764:	bf0c      	ite	eq
 8006766:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800676a:	2400      	movne	r4, #0
 800676c:	ea42 0306 	orr.w	r3, r2, r6
 8006770:	4918      	ldr	r1, [pc, #96]	; (80067d4 <rint+0x10c>)
 8006772:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8006776:	4622      	mov	r2, r4
 8006778:	e9d5 4500 	ldrd	r4, r5, [r5]
 800677c:	4620      	mov	r0, r4
 800677e:	4629      	mov	r1, r5
 8006780:	f7f9 fd28 	bl	80001d4 <__adddf3>
 8006784:	e9cd 0100 	strd	r0, r1, [sp]
 8006788:	e9dd 0100 	ldrd	r0, r1, [sp]
 800678c:	4622      	mov	r2, r4
 800678e:	462b      	mov	r3, r5
 8006790:	f7f9 fd1e 	bl	80001d0 <__aeabi_dsub>
 8006794:	e7d0      	b.n	8006738 <rint+0x70>
 8006796:	2e33      	cmp	r6, #51	; 0x33
 8006798:	dd07      	ble.n	80067aa <rint+0xe2>
 800679a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800679e:	d1cb      	bne.n	8006738 <rint+0x70>
 80067a0:	ee10 2a10 	vmov	r2, s0
 80067a4:	f7f9 fd16 	bl	80001d4 <__adddf3>
 80067a8:	e7c6      	b.n	8006738 <rint+0x70>
 80067aa:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80067ae:	f04f 36ff 	mov.w	r6, #4294967295
 80067b2:	40d6      	lsrs	r6, r2
 80067b4:	4230      	tst	r0, r6
 80067b6:	d0bf      	beq.n	8006738 <rint+0x70>
 80067b8:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 80067bc:	ea4f 0156 	mov.w	r1, r6, lsr #1
 80067c0:	bf1f      	itttt	ne
 80067c2:	ea24 0101 	bicne.w	r1, r4, r1
 80067c6:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80067ca:	fa44 f202 	asrne.w	r2, r4, r2
 80067ce:	ea41 0402 	orrne.w	r4, r1, r2
 80067d2:	e7cd      	b.n	8006770 <rint+0xa8>
 80067d4:	080069f0 	.word	0x080069f0
 80067d8:	000fffff 	.word	0x000fffff

080067dc <_init>:
 80067dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067de:	bf00      	nop
 80067e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067e2:	bc08      	pop	{r3}
 80067e4:	469e      	mov	lr, r3
 80067e6:	4770      	bx	lr

080067e8 <_fini>:
 80067e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ea:	bf00      	nop
 80067ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067ee:	bc08      	pop	{r3}
 80067f0:	469e      	mov	lr, r3
 80067f2:	4770      	bx	lr


My_Spi_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000507c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  08005204  08005204  00015204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005390  08005390  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08005390  08005390  00015390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005398  08005398  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005398  08005398  00015398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800539c  0800539c  0001539c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080053a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          000002fc  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000368  20000368  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ed5e  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025a8  00000000  00000000  0002edfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a10  00000000  00000000  000313a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008f8  00000000  00000000  00031db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022e3d  00000000  00000000  000326b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d517  00000000  00000000  000554ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf752  00000000  00000000  00062a04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00132156  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000028c4  00000000  00000000  001321ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000006c 	.word	0x2000006c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080051ec 	.word	0x080051ec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000070 	.word	0x20000070
 80001c4:	080051ec 	.word	0x080051ec

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2uiz>:
 8000a74:	004a      	lsls	r2, r1, #1
 8000a76:	d211      	bcs.n	8000a9c <__aeabi_d2uiz+0x28>
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d211      	bcs.n	8000aa2 <__aeabi_d2uiz+0x2e>
 8000a7e:	d50d      	bpl.n	8000a9c <__aeabi_d2uiz+0x28>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d40e      	bmi.n	8000aa8 <__aeabi_d2uiz+0x34>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d102      	bne.n	8000aae <__aeabi_d2uiz+0x3a>
 8000aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aac:	4770      	bx	lr
 8000aae:	f04f 0000 	mov.w	r0, #0
 8000ab2:	4770      	bx	lr

08000ab4 <__aeabi_uldivmod>:
 8000ab4:	b953      	cbnz	r3, 8000acc <__aeabi_uldivmod+0x18>
 8000ab6:	b94a      	cbnz	r2, 8000acc <__aeabi_uldivmod+0x18>
 8000ab8:	2900      	cmp	r1, #0
 8000aba:	bf08      	it	eq
 8000abc:	2800      	cmpeq	r0, #0
 8000abe:	bf1c      	itt	ne
 8000ac0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ac4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac8:	f000 b96e 	b.w	8000da8 <__aeabi_idiv0>
 8000acc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ad4:	f000 f806 	bl	8000ae4 <__udivmoddi4>
 8000ad8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000adc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae0:	b004      	add	sp, #16
 8000ae2:	4770      	bx	lr

08000ae4 <__udivmoddi4>:
 8000ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae8:	9d08      	ldr	r5, [sp, #32]
 8000aea:	4604      	mov	r4, r0
 8000aec:	468c      	mov	ip, r1
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	f040 8083 	bne.w	8000bfa <__udivmoddi4+0x116>
 8000af4:	428a      	cmp	r2, r1
 8000af6:	4617      	mov	r7, r2
 8000af8:	d947      	bls.n	8000b8a <__udivmoddi4+0xa6>
 8000afa:	fab2 f282 	clz	r2, r2
 8000afe:	b142      	cbz	r2, 8000b12 <__udivmoddi4+0x2e>
 8000b00:	f1c2 0020 	rsb	r0, r2, #32
 8000b04:	fa24 f000 	lsr.w	r0, r4, r0
 8000b08:	4091      	lsls	r1, r2
 8000b0a:	4097      	lsls	r7, r2
 8000b0c:	ea40 0c01 	orr.w	ip, r0, r1
 8000b10:	4094      	lsls	r4, r2
 8000b12:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b16:	0c23      	lsrs	r3, r4, #16
 8000b18:	fbbc f6f8 	udiv	r6, ip, r8
 8000b1c:	fa1f fe87 	uxth.w	lr, r7
 8000b20:	fb08 c116 	mls	r1, r8, r6, ip
 8000b24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b28:	fb06 f10e 	mul.w	r1, r6, lr
 8000b2c:	4299      	cmp	r1, r3
 8000b2e:	d909      	bls.n	8000b44 <__udivmoddi4+0x60>
 8000b30:	18fb      	adds	r3, r7, r3
 8000b32:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b36:	f080 8119 	bcs.w	8000d6c <__udivmoddi4+0x288>
 8000b3a:	4299      	cmp	r1, r3
 8000b3c:	f240 8116 	bls.w	8000d6c <__udivmoddi4+0x288>
 8000b40:	3e02      	subs	r6, #2
 8000b42:	443b      	add	r3, r7
 8000b44:	1a5b      	subs	r3, r3, r1
 8000b46:	b2a4      	uxth	r4, r4
 8000b48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b4c:	fb08 3310 	mls	r3, r8, r0, r3
 8000b50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b58:	45a6      	cmp	lr, r4
 8000b5a:	d909      	bls.n	8000b70 <__udivmoddi4+0x8c>
 8000b5c:	193c      	adds	r4, r7, r4
 8000b5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b62:	f080 8105 	bcs.w	8000d70 <__udivmoddi4+0x28c>
 8000b66:	45a6      	cmp	lr, r4
 8000b68:	f240 8102 	bls.w	8000d70 <__udivmoddi4+0x28c>
 8000b6c:	3802      	subs	r0, #2
 8000b6e:	443c      	add	r4, r7
 8000b70:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b74:	eba4 040e 	sub.w	r4, r4, lr
 8000b78:	2600      	movs	r6, #0
 8000b7a:	b11d      	cbz	r5, 8000b84 <__udivmoddi4+0xa0>
 8000b7c:	40d4      	lsrs	r4, r2
 8000b7e:	2300      	movs	r3, #0
 8000b80:	e9c5 4300 	strd	r4, r3, [r5]
 8000b84:	4631      	mov	r1, r6
 8000b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b8a:	b902      	cbnz	r2, 8000b8e <__udivmoddi4+0xaa>
 8000b8c:	deff      	udf	#255	; 0xff
 8000b8e:	fab2 f282 	clz	r2, r2
 8000b92:	2a00      	cmp	r2, #0
 8000b94:	d150      	bne.n	8000c38 <__udivmoddi4+0x154>
 8000b96:	1bcb      	subs	r3, r1, r7
 8000b98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b9c:	fa1f f887 	uxth.w	r8, r7
 8000ba0:	2601      	movs	r6, #1
 8000ba2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000ba6:	0c21      	lsrs	r1, r4, #16
 8000ba8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bb0:	fb08 f30c 	mul.w	r3, r8, ip
 8000bb4:	428b      	cmp	r3, r1
 8000bb6:	d907      	bls.n	8000bc8 <__udivmoddi4+0xe4>
 8000bb8:	1879      	adds	r1, r7, r1
 8000bba:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0xe2>
 8000bc0:	428b      	cmp	r3, r1
 8000bc2:	f200 80e9 	bhi.w	8000d98 <__udivmoddi4+0x2b4>
 8000bc6:	4684      	mov	ip, r0
 8000bc8:	1ac9      	subs	r1, r1, r3
 8000bca:	b2a3      	uxth	r3, r4
 8000bcc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bd0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bd4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000bd8:	fb08 f800 	mul.w	r8, r8, r0
 8000bdc:	45a0      	cmp	r8, r4
 8000bde:	d907      	bls.n	8000bf0 <__udivmoddi4+0x10c>
 8000be0:	193c      	adds	r4, r7, r4
 8000be2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x10a>
 8000be8:	45a0      	cmp	r8, r4
 8000bea:	f200 80d9 	bhi.w	8000da0 <__udivmoddi4+0x2bc>
 8000bee:	4618      	mov	r0, r3
 8000bf0:	eba4 0408 	sub.w	r4, r4, r8
 8000bf4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bf8:	e7bf      	b.n	8000b7a <__udivmoddi4+0x96>
 8000bfa:	428b      	cmp	r3, r1
 8000bfc:	d909      	bls.n	8000c12 <__udivmoddi4+0x12e>
 8000bfe:	2d00      	cmp	r5, #0
 8000c00:	f000 80b1 	beq.w	8000d66 <__udivmoddi4+0x282>
 8000c04:	2600      	movs	r6, #0
 8000c06:	e9c5 0100 	strd	r0, r1, [r5]
 8000c0a:	4630      	mov	r0, r6
 8000c0c:	4631      	mov	r1, r6
 8000c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c12:	fab3 f683 	clz	r6, r3
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	d14a      	bne.n	8000cb0 <__udivmoddi4+0x1cc>
 8000c1a:	428b      	cmp	r3, r1
 8000c1c:	d302      	bcc.n	8000c24 <__udivmoddi4+0x140>
 8000c1e:	4282      	cmp	r2, r0
 8000c20:	f200 80b8 	bhi.w	8000d94 <__udivmoddi4+0x2b0>
 8000c24:	1a84      	subs	r4, r0, r2
 8000c26:	eb61 0103 	sbc.w	r1, r1, r3
 8000c2a:	2001      	movs	r0, #1
 8000c2c:	468c      	mov	ip, r1
 8000c2e:	2d00      	cmp	r5, #0
 8000c30:	d0a8      	beq.n	8000b84 <__udivmoddi4+0xa0>
 8000c32:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c36:	e7a5      	b.n	8000b84 <__udivmoddi4+0xa0>
 8000c38:	f1c2 0320 	rsb	r3, r2, #32
 8000c3c:	fa20 f603 	lsr.w	r6, r0, r3
 8000c40:	4097      	lsls	r7, r2
 8000c42:	fa01 f002 	lsl.w	r0, r1, r2
 8000c46:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4a:	40d9      	lsrs	r1, r3
 8000c4c:	4330      	orrs	r0, r6
 8000c4e:	0c03      	lsrs	r3, r0, #16
 8000c50:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c54:	fa1f f887 	uxth.w	r8, r7
 8000c58:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c60:	fb06 f108 	mul.w	r1, r6, r8
 8000c64:	4299      	cmp	r1, r3
 8000c66:	fa04 f402 	lsl.w	r4, r4, r2
 8000c6a:	d909      	bls.n	8000c80 <__udivmoddi4+0x19c>
 8000c6c:	18fb      	adds	r3, r7, r3
 8000c6e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c72:	f080 808d 	bcs.w	8000d90 <__udivmoddi4+0x2ac>
 8000c76:	4299      	cmp	r1, r3
 8000c78:	f240 808a 	bls.w	8000d90 <__udivmoddi4+0x2ac>
 8000c7c:	3e02      	subs	r6, #2
 8000c7e:	443b      	add	r3, r7
 8000c80:	1a5b      	subs	r3, r3, r1
 8000c82:	b281      	uxth	r1, r0
 8000c84:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c88:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c8c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c90:	fb00 f308 	mul.w	r3, r0, r8
 8000c94:	428b      	cmp	r3, r1
 8000c96:	d907      	bls.n	8000ca8 <__udivmoddi4+0x1c4>
 8000c98:	1879      	adds	r1, r7, r1
 8000c9a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c9e:	d273      	bcs.n	8000d88 <__udivmoddi4+0x2a4>
 8000ca0:	428b      	cmp	r3, r1
 8000ca2:	d971      	bls.n	8000d88 <__udivmoddi4+0x2a4>
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	4439      	add	r1, r7
 8000ca8:	1acb      	subs	r3, r1, r3
 8000caa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cae:	e778      	b.n	8000ba2 <__udivmoddi4+0xbe>
 8000cb0:	f1c6 0c20 	rsb	ip, r6, #32
 8000cb4:	fa03 f406 	lsl.w	r4, r3, r6
 8000cb8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cbc:	431c      	orrs	r4, r3
 8000cbe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cc2:	fa01 f306 	lsl.w	r3, r1, r6
 8000cc6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cca:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cce:	431f      	orrs	r7, r3
 8000cd0:	0c3b      	lsrs	r3, r7, #16
 8000cd2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cd6:	fa1f f884 	uxth.w	r8, r4
 8000cda:	fb0e 1119 	mls	r1, lr, r9, r1
 8000cde:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ce2:	fb09 fa08 	mul.w	sl, r9, r8
 8000ce6:	458a      	cmp	sl, r1
 8000ce8:	fa02 f206 	lsl.w	r2, r2, r6
 8000cec:	fa00 f306 	lsl.w	r3, r0, r6
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x220>
 8000cf2:	1861      	adds	r1, r4, r1
 8000cf4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cf8:	d248      	bcs.n	8000d8c <__udivmoddi4+0x2a8>
 8000cfa:	458a      	cmp	sl, r1
 8000cfc:	d946      	bls.n	8000d8c <__udivmoddi4+0x2a8>
 8000cfe:	f1a9 0902 	sub.w	r9, r9, #2
 8000d02:	4421      	add	r1, r4
 8000d04:	eba1 010a 	sub.w	r1, r1, sl
 8000d08:	b2bf      	uxth	r7, r7
 8000d0a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d0e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d12:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d16:	fb00 f808 	mul.w	r8, r0, r8
 8000d1a:	45b8      	cmp	r8, r7
 8000d1c:	d907      	bls.n	8000d2e <__udivmoddi4+0x24a>
 8000d1e:	19e7      	adds	r7, r4, r7
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d22e      	bcs.n	8000d84 <__udivmoddi4+0x2a0>
 8000d26:	45b8      	cmp	r8, r7
 8000d28:	d92c      	bls.n	8000d84 <__udivmoddi4+0x2a0>
 8000d2a:	3802      	subs	r0, #2
 8000d2c:	4427      	add	r7, r4
 8000d2e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d32:	eba7 0708 	sub.w	r7, r7, r8
 8000d36:	fba0 8902 	umull	r8, r9, r0, r2
 8000d3a:	454f      	cmp	r7, r9
 8000d3c:	46c6      	mov	lr, r8
 8000d3e:	4649      	mov	r1, r9
 8000d40:	d31a      	bcc.n	8000d78 <__udivmoddi4+0x294>
 8000d42:	d017      	beq.n	8000d74 <__udivmoddi4+0x290>
 8000d44:	b15d      	cbz	r5, 8000d5e <__udivmoddi4+0x27a>
 8000d46:	ebb3 020e 	subs.w	r2, r3, lr
 8000d4a:	eb67 0701 	sbc.w	r7, r7, r1
 8000d4e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d52:	40f2      	lsrs	r2, r6
 8000d54:	ea4c 0202 	orr.w	r2, ip, r2
 8000d58:	40f7      	lsrs	r7, r6
 8000d5a:	e9c5 2700 	strd	r2, r7, [r5]
 8000d5e:	2600      	movs	r6, #0
 8000d60:	4631      	mov	r1, r6
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	462e      	mov	r6, r5
 8000d68:	4628      	mov	r0, r5
 8000d6a:	e70b      	b.n	8000b84 <__udivmoddi4+0xa0>
 8000d6c:	4606      	mov	r6, r0
 8000d6e:	e6e9      	b.n	8000b44 <__udivmoddi4+0x60>
 8000d70:	4618      	mov	r0, r3
 8000d72:	e6fd      	b.n	8000b70 <__udivmoddi4+0x8c>
 8000d74:	4543      	cmp	r3, r8
 8000d76:	d2e5      	bcs.n	8000d44 <__udivmoddi4+0x260>
 8000d78:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d7c:	eb69 0104 	sbc.w	r1, r9, r4
 8000d80:	3801      	subs	r0, #1
 8000d82:	e7df      	b.n	8000d44 <__udivmoddi4+0x260>
 8000d84:	4608      	mov	r0, r1
 8000d86:	e7d2      	b.n	8000d2e <__udivmoddi4+0x24a>
 8000d88:	4660      	mov	r0, ip
 8000d8a:	e78d      	b.n	8000ca8 <__udivmoddi4+0x1c4>
 8000d8c:	4681      	mov	r9, r0
 8000d8e:	e7b9      	b.n	8000d04 <__udivmoddi4+0x220>
 8000d90:	4666      	mov	r6, ip
 8000d92:	e775      	b.n	8000c80 <__udivmoddi4+0x19c>
 8000d94:	4630      	mov	r0, r6
 8000d96:	e74a      	b.n	8000c2e <__udivmoddi4+0x14a>
 8000d98:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d9c:	4439      	add	r1, r7
 8000d9e:	e713      	b.n	8000bc8 <__udivmoddi4+0xe4>
 8000da0:	3802      	subs	r0, #2
 8000da2:	443c      	add	r4, r7
 8000da4:	e724      	b.n	8000bf0 <__udivmoddi4+0x10c>
 8000da6:	bf00      	nop

08000da8 <__aeabi_idiv0>:
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop

08000dac <App_TestMain>:
int8_t RssiValue = 0;
int8_t SnrValue = 0;


void App_TestMain()
{
 8000dac:	b590      	push	{r4, r7, lr}
 8000dae:	b08b      	sub	sp, #44	; 0x2c
 8000db0:	af0a      	add	r7, sp, #40	; 0x28
	  Radio.SetTxConfig( MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 8000db2:	4b1b      	ldr	r3, [pc, #108]	; (8000e20 <App_TestMain+0x74>)
 8000db4:	69dc      	ldr	r4, [r3, #28]
 8000db6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000dba:	9308      	str	r3, [sp, #32]
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	9307      	str	r3, [sp, #28]
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	9306      	str	r3, [sp, #24]
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	9305      	str	r3, [sp, #20]
 8000dc8:	2301      	movs	r3, #1
 8000dca:	9304      	str	r3, [sp, #16]
 8000dcc:	2300      	movs	r3, #0
 8000dce:	9303      	str	r3, [sp, #12]
 8000dd0:	2308      	movs	r3, #8
 8000dd2:	9302      	str	r3, [sp, #8]
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	9301      	str	r3, [sp, #4]
 8000dd8:	2307      	movs	r3, #7
 8000dda:	9300      	str	r3, [sp, #0]
 8000ddc:	2300      	movs	r3, #0
 8000dde:	2200      	movs	r2, #0
 8000de0:	2114      	movs	r1, #20
 8000de2:	2001      	movs	r0, #1
 8000de4:	47a0      	blx	r4
	                                   LORA_SPREADING_FACTOR, LORA_CODINGRATE,
	                                   LORA_PREAMBLE_LENGTH, LORA_FIX_LENGTH_PAYLOAD_ON,
	                                   true, 0, 0, LORA_IQ_INVERSION_ON, 3000 );

	  Radio.SetRxConfig( MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 8000de6:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <App_TestMain+0x74>)
 8000de8:	699c      	ldr	r4, [r3, #24]
 8000dea:	2301      	movs	r3, #1
 8000dec:	9309      	str	r3, [sp, #36]	; 0x24
 8000dee:	2300      	movs	r3, #0
 8000df0:	9308      	str	r3, [sp, #32]
 8000df2:	2300      	movs	r3, #0
 8000df4:	9307      	str	r3, [sp, #28]
 8000df6:	2300      	movs	r3, #0
 8000df8:	9306      	str	r3, [sp, #24]
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	9305      	str	r3, [sp, #20]
 8000dfe:	2300      	movs	r3, #0
 8000e00:	9304      	str	r3, [sp, #16]
 8000e02:	2300      	movs	r3, #0
 8000e04:	9303      	str	r3, [sp, #12]
 8000e06:	2305      	movs	r3, #5
 8000e08:	9302      	str	r3, [sp, #8]
 8000e0a:	2308      	movs	r3, #8
 8000e0c:	9301      	str	r3, [sp, #4]
 8000e0e:	2300      	movs	r3, #0
 8000e10:	9300      	str	r3, [sp, #0]
 8000e12:	2301      	movs	r3, #1
 8000e14:	2207      	movs	r2, #7
 8000e16:	2100      	movs	r1, #0
 8000e18:	2001      	movs	r0, #1
 8000e1a:	47a0      	blx	r4
	                                   LORA_CODINGRATE, 0, LORA_PREAMBLE_LENGTH,
	                                   LORA_SYMBOL_TIMEOUT, LORA_FIX_LENGTH_PAYLOAD_ON,
	                                   0, true, 0, 0, LORA_IQ_INVERSION_ON, true );

	while(1)
 8000e1c:	e7fe      	b.n	8000e1c <App_TestMain+0x70>
 8000e1e:	bf00      	nop
 8000e20:	08005214 	.word	0x08005214

08000e24 <MX_GPIO_Init>:
     PC2   ------> SPI2_MISO
     PC3   ------> SPI2_MOSI
     PB10   ------> SPI2_SCK
*/
void MX_GPIO_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08a      	sub	sp, #40	; 0x28
 8000e28:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2a:	f107 0314 	add.w	r3, r7, #20
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
 8000e36:	60da      	str	r2, [r3, #12]
 8000e38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	613b      	str	r3, [r7, #16]
 8000e3e:	4b40      	ldr	r3, [pc, #256]	; (8000f40 <MX_GPIO_Init+0x11c>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	4a3f      	ldr	r2, [pc, #252]	; (8000f40 <MX_GPIO_Init+0x11c>)
 8000e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e48:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4a:	4b3d      	ldr	r3, [pc, #244]	; (8000f40 <MX_GPIO_Init+0x11c>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e52:	613b      	str	r3, [r7, #16]
 8000e54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	4b39      	ldr	r3, [pc, #228]	; (8000f40 <MX_GPIO_Init+0x11c>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	4a38      	ldr	r2, [pc, #224]	; (8000f40 <MX_GPIO_Init+0x11c>)
 8000e60:	f043 0304 	orr.w	r3, r3, #4
 8000e64:	6313      	str	r3, [r2, #48]	; 0x30
 8000e66:	4b36      	ldr	r3, [pc, #216]	; (8000f40 <MX_GPIO_Init+0x11c>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	f003 0304 	and.w	r3, r3, #4
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	60bb      	str	r3, [r7, #8]
 8000e76:	4b32      	ldr	r3, [pc, #200]	; (8000f40 <MX_GPIO_Init+0x11c>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	4a31      	ldr	r2, [pc, #196]	; (8000f40 <MX_GPIO_Init+0x11c>)
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	6313      	str	r3, [r2, #48]	; 0x30
 8000e82:	4b2f      	ldr	r3, [pc, #188]	; (8000f40 <MX_GPIO_Init+0x11c>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	60bb      	str	r3, [r7, #8]
 8000e8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	607b      	str	r3, [r7, #4]
 8000e92:	4b2b      	ldr	r3, [pc, #172]	; (8000f40 <MX_GPIO_Init+0x11c>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	4a2a      	ldr	r2, [pc, #168]	; (8000f40 <MX_GPIO_Init+0x11c>)
 8000e98:	f043 0302 	orr.w	r3, r3, #2
 8000e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9e:	4b28      	ldr	r3, [pc, #160]	; (8000f40 <MX_GPIO_Init+0x11c>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	f003 0302 	and.w	r3, r3, #2
 8000ea6:	607b      	str	r3, [r7, #4]
 8000ea8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CSS_Pin_GPIO_Port, SPI_CSS_Pin_Pin, GPIO_PIN_RESET);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2110      	movs	r1, #16
 8000eae:	4825      	ldr	r0, [pc, #148]	; (8000f44 <MX_GPIO_Init+0x120>)
 8000eb0:	f003 f8ae 	bl	8004010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SX1278_RST_PIN_INDEX_GPIO_Port, SX1278_RST_PIN_INDEX_Pin, GPIO_PIN_RESET);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2102      	movs	r1, #2
 8000eb8:	4823      	ldr	r0, [pc, #140]	; (8000f48 <MX_GPIO_Init+0x124>)
 8000eba:	f003 f8a9 	bl	8004010 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ebe:	230c      	movs	r3, #12
 8000ec0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ece:	2305      	movs	r3, #5
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ed2:	f107 0314 	add.w	r3, r7, #20
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	481c      	ldr	r0, [pc, #112]	; (8000f4c <MX_GPIO_Init+0x128>)
 8000eda:	f002 fefd 	bl	8003cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CSS_Pin_Pin;
 8000ede:	2310      	movs	r3, #16
 8000ee0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eea:	2302      	movs	r3, #2
 8000eec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CSS_Pin_GPIO_Port, &GPIO_InitStruct);
 8000eee:	f107 0314 	add.w	r3, r7, #20
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4813      	ldr	r0, [pc, #76]	; (8000f44 <MX_GPIO_Init+0x120>)
 8000ef6:	f002 feef 	bl	8003cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SX1278_RST_PIN_INDEX_Pin;
 8000efa:	2302      	movs	r3, #2
 8000efc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efe:	2301      	movs	r3, #1
 8000f00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000f06:	2301      	movs	r3, #1
 8000f08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SX1278_RST_PIN_INDEX_GPIO_Port, &GPIO_InitStruct);
 8000f0a:	f107 0314 	add.w	r3, r7, #20
 8000f0e:	4619      	mov	r1, r3
 8000f10:	480d      	ldr	r0, [pc, #52]	; (8000f48 <MX_GPIO_Init+0x124>)
 8000f12:	f002 fee1 	bl	8003cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f24:	2303      	movs	r3, #3
 8000f26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f28:	2305      	movs	r3, #5
 8000f2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f2c:	f107 0314 	add.w	r3, r7, #20
 8000f30:	4619      	mov	r1, r3
 8000f32:	4805      	ldr	r0, [pc, #20]	; (8000f48 <MX_GPIO_Init+0x124>)
 8000f34:	f002 fed0 	bl	8003cd8 <HAL_GPIO_Init>

}
 8000f38:	bf00      	nop
 8000f3a:	3728      	adds	r7, #40	; 0x28
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40023800 	.word	0x40023800
 8000f44:	40020000 	.word	0x40020000
 8000f48:	40020400 	.word	0x40020400
 8000f4c:	40020800 	.word	0x40020800

08000f50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f54:	f002 fd18 	bl	8003988 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f58:	f000 f812 	bl	8000f80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f5c:	f7ff ff62 	bl	8000e24 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000f60:	f000 f888 	bl	8001074 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  Init_Timer(&Timer2_Cfg);
 8000f64:	4804      	ldr	r0, [pc, #16]	; (8000f78 <main+0x28>)
 8000f66:	f001 fed7 	bl	8002d18 <Init_Timer>
  Tim_AddEvent(TIMER2_HW,Update_handler);
 8000f6a:	4904      	ldr	r1, [pc, #16]	; (8000f7c <main+0x2c>)
 8000f6c:	2002      	movs	r0, #2
 8000f6e:	f002 fa01 	bl	8003374 <Tim_AddEvent>



  while (1)
  {
	 App_TestMain();
 8000f72:	f7ff ff1b 	bl	8000dac <App_TestMain>
 8000f76:	e7fc      	b.n	8000f72 <main+0x22>
 8000f78:	2000005c 	.word	0x2000005c
 8000f7c:	08001055 	.word	0x08001055

08000f80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b094      	sub	sp, #80	; 0x50
 8000f84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f86:	f107 0320 	add.w	r3, r7, #32
 8000f8a:	2230      	movs	r2, #48	; 0x30
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f003 ffda 	bl	8004f48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f94:	f107 030c 	add.w	r3, r7, #12
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	60bb      	str	r3, [r7, #8]
 8000fa8:	4b28      	ldr	r3, [pc, #160]	; (800104c <SystemClock_Config+0xcc>)
 8000faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fac:	4a27      	ldr	r2, [pc, #156]	; (800104c <SystemClock_Config+0xcc>)
 8000fae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fb2:	6413      	str	r3, [r2, #64]	; 0x40
 8000fb4:	4b25      	ldr	r3, [pc, #148]	; (800104c <SystemClock_Config+0xcc>)
 8000fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fbc:	60bb      	str	r3, [r7, #8]
 8000fbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	4b22      	ldr	r3, [pc, #136]	; (8001050 <SystemClock_Config+0xd0>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a21      	ldr	r2, [pc, #132]	; (8001050 <SystemClock_Config+0xd0>)
 8000fca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fce:	6013      	str	r3, [r2, #0]
 8000fd0:	4b1f      	ldr	r3, [pc, #124]	; (8001050 <SystemClock_Config+0xd0>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fd8:	607b      	str	r3, [r7, #4]
 8000fda:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fe0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fe4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ff0:	2304      	movs	r3, #4
 8000ff2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ff4:	23a8      	movs	r3, #168	; 0xa8
 8000ff6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ffc:	2304      	movs	r3, #4
 8000ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001000:	f107 0320 	add.w	r3, r7, #32
 8001004:	4618      	mov	r0, r3
 8001006:	f003 f837 	bl	8004078 <HAL_RCC_OscConfig>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001010:	f000 f82a 	bl	8001068 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001014:	230f      	movs	r3, #15
 8001016:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001018:	2302      	movs	r3, #2
 800101a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001020:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001024:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001026:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800102a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800102c:	f107 030c 	add.w	r3, r7, #12
 8001030:	2105      	movs	r1, #5
 8001032:	4618      	mov	r0, r3
 8001034:	f003 fa98 	bl	8004568 <HAL_RCC_ClockConfig>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800103e:	f000 f813 	bl	8001068 <Error_Handler>
  }
}
 8001042:	bf00      	nop
 8001044:	3750      	adds	r7, #80	; 0x50
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40023800 	.word	0x40023800
 8001050:	40007000 	.word	0x40007000

08001054 <Update_handler>:

/* USER CODE BEGIN 4 */
void Update_handler()
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8001058:	2102      	movs	r1, #2
 800105a:	4802      	ldr	r0, [pc, #8]	; (8001064 <Update_handler+0x10>)
 800105c:	f002 fff1 	bl	8004042 <HAL_GPIO_TogglePin>
}
 8001060:	bf00      	nop
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40020400 	.word	0x40020400

08001068 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800106c:	b672      	cpsid	i
}
 800106e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001070:	e7fe      	b.n	8001070 <Error_Handler+0x8>
	...

08001074 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001078:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <MX_SPI1_Init+0x64>)
 800107a:	4a18      	ldr	r2, [pc, #96]	; (80010dc <MX_SPI1_Init+0x68>)
 800107c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800107e:	4b16      	ldr	r3, [pc, #88]	; (80010d8 <MX_SPI1_Init+0x64>)
 8001080:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001084:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001086:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <MX_SPI1_Init+0x64>)
 8001088:	2200      	movs	r2, #0
 800108a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800108c:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <MX_SPI1_Init+0x64>)
 800108e:	2200      	movs	r2, #0
 8001090:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001092:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <MX_SPI1_Init+0x64>)
 8001094:	2200      	movs	r2, #0
 8001096:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001098:	4b0f      	ldr	r3, [pc, #60]	; (80010d8 <MX_SPI1_Init+0x64>)
 800109a:	2200      	movs	r2, #0
 800109c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800109e:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <MX_SPI1_Init+0x64>)
 80010a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010a4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80010a6:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <MX_SPI1_Init+0x64>)
 80010a8:	2220      	movs	r2, #32
 80010aa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010ac:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <MX_SPI1_Init+0x64>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010b2:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <MX_SPI1_Init+0x64>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010b8:	4b07      	ldr	r3, [pc, #28]	; (80010d8 <MX_SPI1_Init+0x64>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <MX_SPI1_Init+0x64>)
 80010c0:	220a      	movs	r2, #10
 80010c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010c4:	4804      	ldr	r0, [pc, #16]	; (80010d8 <MX_SPI1_Init+0x64>)
 80010c6:	f003 fc17 	bl	80048f8 <HAL_SPI_Init>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80010d0:	f7ff ffca 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	200002b0 	.word	0x200002b0
 80010dc:	40013000 	.word	0x40013000

080010e0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08a      	sub	sp, #40	; 0x28
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e8:	f107 0314 	add.w	r3, r7, #20
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a19      	ldr	r2, [pc, #100]	; (8001164 <HAL_SPI_MspInit+0x84>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d12b      	bne.n	800115a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]
 8001106:	4b18      	ldr	r3, [pc, #96]	; (8001168 <HAL_SPI_MspInit+0x88>)
 8001108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110a:	4a17      	ldr	r2, [pc, #92]	; (8001168 <HAL_SPI_MspInit+0x88>)
 800110c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001110:	6453      	str	r3, [r2, #68]	; 0x44
 8001112:	4b15      	ldr	r3, [pc, #84]	; (8001168 <HAL_SPI_MspInit+0x88>)
 8001114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001116:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800111a:	613b      	str	r3, [r7, #16]
 800111c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	4b11      	ldr	r3, [pc, #68]	; (8001168 <HAL_SPI_MspInit+0x88>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	4a10      	ldr	r2, [pc, #64]	; (8001168 <HAL_SPI_MspInit+0x88>)
 8001128:	f043 0301 	orr.w	r3, r3, #1
 800112c:	6313      	str	r3, [r2, #48]	; 0x30
 800112e:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <HAL_SPI_MspInit+0x88>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800113a:	23e0      	movs	r3, #224	; 0xe0
 800113c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113e:	2302      	movs	r3, #2
 8001140:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001146:	2303      	movs	r3, #3
 8001148:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800114a:	2305      	movs	r3, #5
 800114c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114e:	f107 0314 	add.w	r3, r7, #20
 8001152:	4619      	mov	r1, r3
 8001154:	4805      	ldr	r0, [pc, #20]	; (800116c <HAL_SPI_MspInit+0x8c>)
 8001156:	f002 fdbf 	bl	8003cd8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800115a:	bf00      	nop
 800115c:	3728      	adds	r7, #40	; 0x28
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40013000 	.word	0x40013000
 8001168:	40023800 	.word	0x40023800
 800116c:	40020000 	.word	0x40020000

08001170 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	607b      	str	r3, [r7, #4]
 800117a:	4b10      	ldr	r3, [pc, #64]	; (80011bc <HAL_MspInit+0x4c>)
 800117c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117e:	4a0f      	ldr	r2, [pc, #60]	; (80011bc <HAL_MspInit+0x4c>)
 8001180:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001184:	6453      	str	r3, [r2, #68]	; 0x44
 8001186:	4b0d      	ldr	r3, [pc, #52]	; (80011bc <HAL_MspInit+0x4c>)
 8001188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	603b      	str	r3, [r7, #0]
 8001196:	4b09      	ldr	r3, [pc, #36]	; (80011bc <HAL_MspInit+0x4c>)
 8001198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119a:	4a08      	ldr	r2, [pc, #32]	; (80011bc <HAL_MspInit+0x4c>)
 800119c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a0:	6413      	str	r3, [r2, #64]	; 0x40
 80011a2:	4b06      	ldr	r3, [pc, #24]	; (80011bc <HAL_MspInit+0x4c>)
 80011a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011aa:	603b      	str	r3, [r7, #0]
 80011ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ae:	bf00      	nop
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	40023800 	.word	0x40023800

080011c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011c4:	e7fe      	b.n	80011c4 <NMI_Handler+0x4>

080011c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ca:	e7fe      	b.n	80011ca <HardFault_Handler+0x4>

080011cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d0:	e7fe      	b.n	80011d0 <MemManage_Handler+0x4>

080011d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011d2:	b480      	push	{r7}
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011d6:	e7fe      	b.n	80011d6 <BusFault_Handler+0x4>

080011d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011dc:	e7fe      	b.n	80011dc <UsageFault_Handler+0x4>

080011de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011de:	b480      	push	{r7}
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800120c:	f002 fc0e 	bl	8003a2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}

08001214 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <SystemInit+0x20>)
 800121a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800121e:	4a05      	ldr	r2, [pc, #20]	; (8001234 <SystemInit+0x20>)
 8001220:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001224:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001238:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001270 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800123c:	480d      	ldr	r0, [pc, #52]	; (8001274 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800123e:	490e      	ldr	r1, [pc, #56]	; (8001278 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001240:	4a0e      	ldr	r2, [pc, #56]	; (800127c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001242:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001244:	e002      	b.n	800124c <LoopCopyDataInit>

08001246 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001246:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001248:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800124a:	3304      	adds	r3, #4

0800124c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800124c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800124e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001250:	d3f9      	bcc.n	8001246 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001252:	4a0b      	ldr	r2, [pc, #44]	; (8001280 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001254:	4c0b      	ldr	r4, [pc, #44]	; (8001284 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001256:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001258:	e001      	b.n	800125e <LoopFillZerobss>

0800125a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800125a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800125c:	3204      	adds	r2, #4

0800125e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800125e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001260:	d3fb      	bcc.n	800125a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001262:	f7ff ffd7 	bl	8001214 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001266:	f003 fe3d 	bl	8004ee4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800126a:	f7ff fe71 	bl	8000f50 <main>
  bx  lr    
 800126e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001270:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001274:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001278:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800127c:	080053a0 	.word	0x080053a0
  ldr r2, =_sbss
 8001280:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001284:	20000368 	.word	0x20000368

08001288 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001288:	e7fe      	b.n	8001288 <ADC_IRQHandler>

0800128a <SX1276DelayMs>:
TimerEvent_t RxTimeoutSyncWord;*/

//ʵ��ms����ʱ
//delayMs����ʱ��ms��

void SX1276DelayMs(uint32_t delayMs){
 800128a:	b580      	push	{r7, lr}
 800128c:	b082      	sub	sp, #8
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
	DELAY_MS(delayMs);
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f002 fbea 	bl	8003a6c <HAL_Delay>
}
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <SX1276TimerInit>:

//��ʱ����ʼ��(RX,TX,SyncWord��ʱ��ɺ���Ҫ���� SX1276OnTimeoutIrq() ����)
void SX1276TimerInit(void){
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
	...

080012b0 <TIM3_Int_Init>:

void TIM3_Int_Init(uint16_t arr,uint16_t psc)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	460a      	mov	r2, r1
 80012ba:	80fb      	strh	r3, [r7, #6]
 80012bc:	4613      	mov	r3, r2
 80012be:	80bb      	strh	r3, [r7, #4]
	Init_Timer(&Timer2_Cfg);
 80012c0:	4803      	ldr	r0, [pc, #12]	; (80012d0 <TIM3_Int_Init+0x20>)
 80012c2:	f001 fd29 	bl	8002d18 <Init_Timer>
}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	2000005c 	.word	0x2000005c

080012d4 <SX1276TxTimeoutTimerStop>:
	//�����ʹ����һ����ʱ����ʵ�ʹ��������ʹ�ö�����3����ʱ��������ʹ��������ʱ��
	TIM3_Int_Init((timeoutMs * 10) -1,7199);//10Khz�ļ���Ƶ�ʣ�������10��Ϊ1ms 
}

//�ر� tx ��ʱ��ʱ��
void SX1276TxTimeoutTimerStop(void){
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
	TIM_CMD(TIM2, DISABLE);  //ʧ��TIMx
 80012d8:	2100      	movs	r1, #0
 80012da:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80012de:	f002 f82d 	bl	800333c <TIM_CMD>
}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <SX1276RxTimeoutTimerStart>:


void SX1276RxTimeoutTimerStart( uint32_t timeoutMs ){
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b082      	sub	sp, #8
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
	TIM3_Int_Init((timeoutMs * 10) -1,7199);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	461a      	mov	r2, r3
 80012f4:	0092      	lsls	r2, r2, #2
 80012f6:	4413      	add	r3, r2
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	3b01      	subs	r3, #1
 80012fe:	b29b      	uxth	r3, r3
 8001300:	f641 411f 	movw	r1, #7199	; 0x1c1f
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ffd3 	bl	80012b0 <TIM3_Int_Init>
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <SX1276RxTimeoutTimerStop>:



void SX1276RxTimeoutTimerStop(void){
 8001312:	b580      	push	{r7, lr}
 8001314:	af00      	add	r7, sp, #0
	TIM_CMD(TIM2, DISABLE);  //ʧ��TIMx
 8001316:	2100      	movs	r1, #0
 8001318:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800131c:	f002 f80e 	bl	800333c <TIM_CMD>
}
 8001320:	bf00      	nop
 8001322:	bd80      	pop	{r7, pc}

08001324 <SX1276SyncWordTimeoutTimerStart>:

void SX1276SyncWordTimeoutTimerStart( uint32_t timeoutMs ){
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
	TIM3_Int_Init((timeoutMs * 10) -1,7199);//10Khz�ļ���Ƶ�ʣ�������10��Ϊ1ms 
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	b29b      	uxth	r3, r3
 8001330:	461a      	mov	r2, r3
 8001332:	0092      	lsls	r2, r2, #2
 8001334:	4413      	add	r3, r2
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	b29b      	uxth	r3, r3
 800133a:	3b01      	subs	r3, #1
 800133c:	b29b      	uxth	r3, r3
 800133e:	f641 411f 	movw	r1, #7199	; 0x1c1f
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff ffb4 	bl	80012b0 <TIM3_Int_Init>
}
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <SX1276CheckRfFrequency>:
{

}

bool SX1276CheckRfFrequency( uint32_t frequency )
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
    // Implement check. Currently all frequencies are supported
    return true;
 8001358:	2301      	movs	r3, #1
}
 800135a:	4618      	mov	r0, r3
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
	...

08001368 <SX1276Reset>:


void SX1276Reset( void )
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SX1278_RST_PIN_INDEX_GPIO_Port, SX1278_RST_PIN_INDEX_Pin, GPIO_PIN_RESET);
 800136c:	2200      	movs	r2, #0
 800136e:	2102      	movs	r1, #2
 8001370:	4807      	ldr	r0, [pc, #28]	; (8001390 <SX1276Reset+0x28>)
 8001372:	f002 fe4d 	bl	8004010 <HAL_GPIO_WritePin>
	SX1276DelayMs(1);
 8001376:	2001      	movs	r0, #1
 8001378:	f7ff ff87 	bl	800128a <SX1276DelayMs>
	HAL_GPIO_WritePin(SX1278_RST_PIN_INDEX_GPIO_Port, SX1278_RST_PIN_INDEX_Pin, GPIO_PIN_SET);
 800137c:	2201      	movs	r2, #1
 800137e:	2102      	movs	r1, #2
 8001380:	4803      	ldr	r0, [pc, #12]	; (8001390 <SX1276Reset+0x28>)
 8001382:	f002 fe45 	bl	8004010 <HAL_GPIO_WritePin>
	SX1276DelayMs(6);
 8001386:	2006      	movs	r0, #6
 8001388:	f7ff ff7f 	bl	800128a <SX1276DelayMs>
}
 800138c:	bf00      	nop
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40020400 	.word	0x40020400

08001394 <Sx1276SpiInOut>:


uint8_t Sx1276SpiInOut(uint8_t transmit_data)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af02      	add	r7, sp, #8
 800139a:	4603      	mov	r3, r0
 800139c:	71fb      	strb	r3, [r7, #7]
	uint8_t receive_data;
	HAL_SPI_TransmitReceive(&hspi1,&transmit_data,&receive_data,1,2000);
 800139e:	f107 020f 	add.w	r2, r7, #15
 80013a2:	1df9      	adds	r1, r7, #7
 80013a4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	2301      	movs	r3, #1
 80013ac:	4803      	ldr	r0, [pc, #12]	; (80013bc <Sx1276SpiInOut+0x28>)
 80013ae:	f003 fb2c 	bl	8004a0a <HAL_SPI_TransmitReceive>
	return receive_data;
 80013b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3710      	adds	r7, #16
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	200002b0 	.word	0x200002b0

080013c0 <Sx1276SetNSS>:

void Sx1276SetNSS(bool lev )
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	71fb      	strb	r3, [r7, #7]
	if(lev){
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d005      	beq.n	80013dc <Sx1276SetNSS+0x1c>
		HAL_GPIO_WritePin(SPI_CSS_Pin_GPIO_Port, SPI_CSS_Pin_Pin, GPIO_PIN_SET);
 80013d0:	2201      	movs	r2, #1
 80013d2:	2110      	movs	r1, #16
 80013d4:	4806      	ldr	r0, [pc, #24]	; (80013f0 <Sx1276SetNSS+0x30>)
 80013d6:	f002 fe1b 	bl	8004010 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(SPI_CSS_Pin_GPIO_Port, SPI_CSS_Pin_Pin, GPIO_PIN_RESET);
	}
}
 80013da:	e004      	b.n	80013e6 <Sx1276SetNSS+0x26>
		HAL_GPIO_WritePin(SPI_CSS_Pin_GPIO_Port, SPI_CSS_Pin_Pin, GPIO_PIN_RESET);
 80013dc:	2200      	movs	r2, #0
 80013de:	2110      	movs	r1, #16
 80013e0:	4803      	ldr	r0, [pc, #12]	; (80013f0 <Sx1276SetNSS+0x30>)
 80013e2:	f002 fe15 	bl	8004010 <HAL_GPIO_WritePin>
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40020000 	.word	0x40020000

080013f4 <SX1276SetAntSwLowPower>:
 * Flag used to set the RF switch control pins in low power mode when the radio is not active.
 */
static bool RadioIsActive = false;

void SX1276SetAntSwLowPower( bool status )
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	71fb      	strb	r3, [r7, #7]
    if( RadioIsActive != status )
 80013fe:	4b0b      	ldr	r3, [pc, #44]	; (800142c <SX1276SetAntSwLowPower+0x38>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	79fa      	ldrb	r2, [r7, #7]
 8001404:	429a      	cmp	r2, r3
 8001406:	d00d      	beq.n	8001424 <SX1276SetAntSwLowPower+0x30>
    {
        RadioIsActive = status;
 8001408:	4a08      	ldr	r2, [pc, #32]	; (800142c <SX1276SetAntSwLowPower+0x38>)
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	7013      	strb	r3, [r2, #0]
    
        if( status == false )
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	f083 0301 	eor.w	r3, r3, #1
 8001414:	b2db      	uxtb	r3, r3
 8001416:	2b00      	cmp	r3, #0
 8001418:	d002      	beq.n	8001420 <SX1276SetAntSwLowPower+0x2c>
        {
            SX1276AntSwInit( );
 800141a:	f001 fc63 	bl	8002ce4 <SX1276AntSwInit>
        else
        {
            SX1276AntSwDeInit( );
        }
    }
}
 800141e:	e001      	b.n	8001424 <SX1276SetAntSwLowPower+0x30>
            SX1276AntSwDeInit( );
 8001420:	f001 fc67 	bl	8002cf2 <SX1276AntSwDeInit>
}
 8001424:	bf00      	nop
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	2000018c 	.word	0x2000018c

08001430 <SX1276Init>:
/*
 * Radio driver functions implementation
 */

void SX1276Init( RadioEvents_t *events )
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
    uint8_t i;

    RadioEvents = events;
 8001438:	4a1d      	ldr	r2, [pc, #116]	; (80014b0 <SX1276Init+0x80>)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6013      	str	r3, [r2, #0]

    // Initialize driver timeout timers
    SX1276TimerInit();
 800143e:	f7ff ff2f 	bl	80012a0 <SX1276TimerInit>
	//SX1276IoInit();
    SX1276Reset();
 8001442:	f7ff ff91 	bl	8001368 <SX1276Reset>

    RxChainCalibration( );
 8001446:	f000 f8d7 	bl	80015f8 <RxChainCalibration>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 800144a:	2000      	movs	r0, #0
 800144c:	f001 fb22 	bl	8002a94 <SX1276SetOpMode>

    //SX1276IoIrqInit( DioIrq );

    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8001450:	2300      	movs	r3, #0
 8001452:	73fb      	strb	r3, [r7, #15]
 8001454:	e01f      	b.n	8001496 <SX1276Init+0x66>
    {
        SX1276SetModem( RadioRegsInit[i].Modem );
 8001456:	7bfa      	ldrb	r2, [r7, #15]
 8001458:	4916      	ldr	r1, [pc, #88]	; (80014b4 <SX1276Init+0x84>)
 800145a:	4613      	mov	r3, r2
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	4413      	add	r3, r2
 8001460:	440b      	add	r3, r1
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	4618      	mov	r0, r3
 8001466:	f001 fb43 	bl	8002af0 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 800146a:	7bfa      	ldrb	r2, [r7, #15]
 800146c:	4911      	ldr	r1, [pc, #68]	; (80014b4 <SX1276Init+0x84>)
 800146e:	4613      	mov	r3, r2
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	4413      	add	r3, r2
 8001474:	440b      	add	r3, r1
 8001476:	3301      	adds	r3, #1
 8001478:	7818      	ldrb	r0, [r3, #0]
 800147a:	7bfa      	ldrb	r2, [r7, #15]
 800147c:	490d      	ldr	r1, [pc, #52]	; (80014b4 <SX1276Init+0x84>)
 800147e:	4613      	mov	r3, r2
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	4413      	add	r3, r2
 8001484:	440b      	add	r3, r1
 8001486:	3302      	adds	r3, #2
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	4619      	mov	r1, r3
 800148c:	f001 fb76 	bl	8002b7c <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8001490:	7bfb      	ldrb	r3, [r7, #15]
 8001492:	3301      	adds	r3, #1
 8001494:	73fb      	strb	r3, [r7, #15]
 8001496:	7bfb      	ldrb	r3, [r7, #15]
 8001498:	2b0f      	cmp	r3, #15
 800149a:	d9dc      	bls.n	8001456 <SX1276Init+0x26>
    }

    SX1276SetModem( MODEM_FSK );
 800149c:	2000      	movs	r0, #0
 800149e:	f001 fb27 	bl	8002af0 <SX1276SetModem>

    SX1276.Settings.State = RF_IDLE;
 80014a2:	4b05      	ldr	r3, [pc, #20]	; (80014b8 <SX1276Init+0x88>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	701a      	strb	r2, [r3, #0]
}
 80014a8:	bf00      	nop
 80014aa:	3710      	adds	r7, #16
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000088 	.word	0x20000088
 80014b4:	08005268 	.word	0x08005268
 80014b8:	20000308 	.word	0x20000308

080014bc <SX1276GetStatus>:

RadioState_t SX1276GetStatus( void )
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
    return SX1276.Settings.State;
 80014c0:	4b03      	ldr	r3, [pc, #12]	; (80014d0 <SX1276GetStatus+0x14>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	20000308 	.word	0x20000308
 80014d4:	00000000 	.word	0x00000000

080014d8 <SX1276SetChannel>:

void SX1276SetChannel( uint32_t freq )
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
    SX1276.Settings.Channel = freq;
 80014e0:	4a17      	ldr	r2, [pc, #92]	; (8001540 <SX1276SetChannel+0x68>)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6053      	str	r3, [r2, #4]
    freq = ( uint32_t )( ( double )freq / ( double )FREQ_STEP );
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f7fe ffb0 	bl	800044c <__aeabi_ui2d>
 80014ec:	a312      	add	r3, pc, #72	; (adr r3, 8001538 <SX1276SetChannel+0x60>)
 80014ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f2:	f7ff f94f 	bl	8000794 <__aeabi_ddiv>
 80014f6:	4602      	mov	r2, r0
 80014f8:	460b      	mov	r3, r1
 80014fa:	4610      	mov	r0, r2
 80014fc:	4619      	mov	r1, r3
 80014fe:	f7ff fab9 	bl	8000a74 <__aeabi_d2uiz>
 8001502:	4603      	mov	r3, r0
 8001504:	607b      	str	r3, [r7, #4]
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freq >> 16 ) & 0xFF ) );
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	0c1b      	lsrs	r3, r3, #16
 800150a:	b2db      	uxtb	r3, r3
 800150c:	4619      	mov	r1, r3
 800150e:	2006      	movs	r0, #6
 8001510:	f001 fb34 	bl	8002b7c <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( freq >> 8 ) & 0xFF ) );
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	0a1b      	lsrs	r3, r3, #8
 8001518:	b2db      	uxtb	r3, r3
 800151a:	4619      	mov	r1, r3
 800151c:	2007      	movs	r0, #7
 800151e:	f001 fb2d 	bl	8002b7c <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( freq & 0xFF ) );
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	b2db      	uxtb	r3, r3
 8001526:	4619      	mov	r1, r3
 8001528:	2008      	movs	r0, #8
 800152a:	f001 fb27 	bl	8002b7c <SX1276Write>
}
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	00000000 	.word	0x00000000
 800153c:	404e8480 	.word	0x404e8480
 8001540:	20000308 	.word	0x20000308

08001544 <SX1276IsChannelFree>:

bool SX1276IsChannelFree( RadioModems_t modem, uint32_t freq, int16_t rssiThresh )
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	6039      	str	r1, [r7, #0]
 800154e:	71fb      	strb	r3, [r7, #7]
 8001550:	4613      	mov	r3, r2
 8001552:	80bb      	strh	r3, [r7, #4]
    int16_t rssi = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	81fb      	strh	r3, [r7, #14]

    SX1276SetModem( modem );
 8001558:	79fb      	ldrb	r3, [r7, #7]
 800155a:	4618      	mov	r0, r3
 800155c:	f001 fac8 	bl	8002af0 <SX1276SetModem>

    SX1276SetChannel( freq );
 8001560:	6838      	ldr	r0, [r7, #0]
 8001562:	f7ff ffb9 	bl	80014d8 <SX1276SetChannel>

    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8001566:	2005      	movs	r0, #5
 8001568:	f001 fa94 	bl	8002a94 <SX1276SetOpMode>

    SX1276DelayMs( 1 );
 800156c:	2001      	movs	r0, #1
 800156e:	f7ff fe8c 	bl	800128a <SX1276DelayMs>

    rssi = SX1276ReadRssi( modem );
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	4618      	mov	r0, r3
 8001576:	f001 fa4f 	bl	8002a18 <SX1276ReadRssi>
 800157a:	4603      	mov	r3, r0
 800157c:	81fb      	strh	r3, [r7, #14]

    SX1276SetSleep( );
 800157e:	f000 ff5b 	bl	8002438 <SX1276SetSleep>

    if( rssi > rssiThresh )
 8001582:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001586:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800158a:	429a      	cmp	r2, r3
 800158c:	dd01      	ble.n	8001592 <SX1276IsChannelFree+0x4e>
    {
        return false;
 800158e:	2300      	movs	r3, #0
 8001590:	e000      	b.n	8001594 <SX1276IsChannelFree+0x50>
    }
    return true;
 8001592:	2301      	movs	r3, #1
}
 8001594:	4618      	mov	r0, r3
 8001596:	3710      	adds	r7, #16
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <SX1276Random>:

uint32_t SX1276Random( void )
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
    uint8_t i;
    uint32_t rnd = 0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	603b      	str	r3, [r7, #0]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    SX1276SetModem( MODEM_LORA );
 80015a6:	2001      	movs	r0, #1
 80015a8:	f001 faa2 	bl	8002af0 <SX1276SetModem>

    // Disable LoRa modem interrupts
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80015ac:	21ff      	movs	r1, #255	; 0xff
 80015ae:	2011      	movs	r0, #17
 80015b0:	f001 fae4 	bl	8002b7c <SX1276Write>
                  RFLR_IRQFLAGS_CADDONE |
                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                  RFLR_IRQFLAGS_CADDETECTED );

    // Set radio in continuous reception
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 80015b4:	2005      	movs	r0, #5
 80015b6:	f001 fa6d 	bl	8002a94 <SX1276SetOpMode>

    for( i = 0; i < 32; i++ )
 80015ba:	2300      	movs	r3, #0
 80015bc:	71fb      	strb	r3, [r7, #7]
 80015be:	e011      	b.n	80015e4 <SX1276Random+0x48>
    {
        SX1276DelayMs( 1 );
 80015c0:	2001      	movs	r0, #1
 80015c2:	f7ff fe62 	bl	800128a <SX1276DelayMs>
        // Unfiltered RSSI value reading. Only takes the LSB value
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 80015c6:	202c      	movs	r0, #44	; 0x2c
 80015c8:	f001 faea 	bl	8002ba0 <SX1276Read>
 80015cc:	4603      	mov	r3, r0
 80015ce:	f003 0201 	and.w	r2, r3, #1
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	683a      	ldr	r2, [r7, #0]
 80015da:	4313      	orrs	r3, r2
 80015dc:	603b      	str	r3, [r7, #0]
    for( i = 0; i < 32; i++ )
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	3301      	adds	r3, #1
 80015e2:	71fb      	strb	r3, [r7, #7]
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	2b1f      	cmp	r3, #31
 80015e8:	d9ea      	bls.n	80015c0 <SX1276Random+0x24>
    }

    SX1276SetSleep( );
 80015ea:	f000 ff25 	bl	8002438 <SX1276SetSleep>

    return rnd;
 80015ee:	683b      	ldr	r3, [r7, #0]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <RxChainCalibration>:
 * Performs the Rx chain calibration for LF and HF bands
 * \remark Must be called just after the reset so all registers are at their
 *         default values
 */
static void RxChainCalibration( void )
{
 80015f8:	b590      	push	{r4, r7, lr}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
    uint8_t regPaConfigInitVal;
    uint32_t initialFreq;

    // Save context
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 80015fe:	2009      	movs	r0, #9
 8001600:	f001 face 	bl	8002ba0 <SX1276Read>
 8001604:	4603      	mov	r3, r0
 8001606:	71fb      	strb	r3, [r7, #7]
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8001608:	2006      	movs	r0, #6
 800160a:	f001 fac9 	bl	8002ba0 <SX1276Read>
 800160e:	4603      	mov	r3, r0
 8001610:	041c      	lsls	r4, r3, #16
                              ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 8001612:	2007      	movs	r0, #7
 8001614:	f001 fac4 	bl	8002ba0 <SX1276Read>
 8001618:	4603      	mov	r3, r0
 800161a:	021b      	lsls	r3, r3, #8
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800161c:	431c      	orrs	r4, r3
                              ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) * ( double )FREQ_STEP;
 800161e:	2008      	movs	r0, #8
 8001620:	f001 fabe 	bl	8002ba0 <SX1276Read>
 8001624:	4603      	mov	r3, r0
                              ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 8001626:	4323      	orrs	r3, r4
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8001628:	4618      	mov	r0, r3
 800162a:	f7fe ff0f 	bl	800044c <__aeabi_ui2d>
                              ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) * ( double )FREQ_STEP;
 800162e:	a325      	add	r3, pc, #148	; (adr r3, 80016c4 <RxChainCalibration+0xcc>)
 8001630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001634:	f7fe ff84 	bl	8000540 <__aeabi_dmul>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800163c:	4610      	mov	r0, r2
 800163e:	4619      	mov	r1, r3
 8001640:	f7ff fa18 	bl	8000a74 <__aeabi_d2uiz>
 8001644:	4603      	mov	r3, r0
 8001646:	603b      	str	r3, [r7, #0]

    // Cut the PA just in case, RFO output, power = -1 dBm
    SX1276Write( REG_PACONFIG, 0x00 );
 8001648:	2100      	movs	r1, #0
 800164a:	2009      	movs	r0, #9
 800164c:	f001 fa96 	bl	8002b7c <SX1276Write>

    // Launch Rx chain calibration for LF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8001650:	203b      	movs	r0, #59	; 0x3b
 8001652:	f001 faa5 	bl	8002ba0 <SX1276Read>
 8001656:	4603      	mov	r3, r0
 8001658:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800165c:	b2db      	uxtb	r3, r3
 800165e:	4619      	mov	r1, r3
 8001660:	203b      	movs	r0, #59	; 0x3b
 8001662:	f001 fa8b 	bl	8002b7c <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8001666:	bf00      	nop
 8001668:	203b      	movs	r0, #59	; 0x3b
 800166a:	f001 fa99 	bl	8002ba0 <SX1276Read>
 800166e:	4603      	mov	r3, r0
 8001670:	f003 0320 	and.w	r3, r3, #32
 8001674:	2b20      	cmp	r3, #32
 8001676:	d0f7      	beq.n	8001668 <RxChainCalibration+0x70>
    {
    }

    // Sets a Frequency in HF band
    SX1276SetChannel( 868000000 );
 8001678:	4811      	ldr	r0, [pc, #68]	; (80016c0 <RxChainCalibration+0xc8>)
 800167a:	f7ff ff2d 	bl	80014d8 <SX1276SetChannel>

    // Launch Rx chain calibration for HF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 800167e:	203b      	movs	r0, #59	; 0x3b
 8001680:	f001 fa8e 	bl	8002ba0 <SX1276Read>
 8001684:	4603      	mov	r3, r0
 8001686:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800168a:	b2db      	uxtb	r3, r3
 800168c:	4619      	mov	r1, r3
 800168e:	203b      	movs	r0, #59	; 0x3b
 8001690:	f001 fa74 	bl	8002b7c <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8001694:	bf00      	nop
 8001696:	203b      	movs	r0, #59	; 0x3b
 8001698:	f001 fa82 	bl	8002ba0 <SX1276Read>
 800169c:	4603      	mov	r3, r0
 800169e:	f003 0320 	and.w	r3, r3, #32
 80016a2:	2b20      	cmp	r3, #32
 80016a4:	d0f7      	beq.n	8001696 <RxChainCalibration+0x9e>
    {
    }

    // Restore context
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 80016a6:	79fb      	ldrb	r3, [r7, #7]
 80016a8:	4619      	mov	r1, r3
 80016aa:	2009      	movs	r0, #9
 80016ac:	f001 fa66 	bl	8002b7c <SX1276Write>
    SX1276SetChannel( initialFreq );
 80016b0:	6838      	ldr	r0, [r7, #0]
 80016b2:	f7ff ff11 	bl	80014d8 <SX1276SetChannel>
}
 80016b6:	bf00      	nop
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd90      	pop	{r4, r7, pc}
 80016be:	bf00      	nop
 80016c0:	33bca100 	.word	0x33bca100
 80016c4:	00000000 	.word	0x00000000
 80016c8:	404e8480 	.word	0x404e8480

080016cc <GetFskBandwidthRegValue>:
 *
 * \param [IN] bandwidth Bandwidth value in Hz
 * \retval regValue Bandwidth register value.
 */
static uint8_t GetFskBandwidthRegValue( uint32_t bandwidth )
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 80016d4:	2300      	movs	r3, #0
 80016d6:	73fb      	strb	r3, [r7, #15]
 80016d8:	e017      	b.n	800170a <GetFskBandwidthRegValue+0x3e>
    {
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 80016da:	7bfb      	ldrb	r3, [r7, #15]
 80016dc:	4a10      	ldr	r2, [pc, #64]	; (8001720 <GetFskBandwidthRegValue+0x54>)
 80016de:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d30d      	bcc.n	8001704 <GetFskBandwidthRegValue+0x38>
 80016e8:	7bfb      	ldrb	r3, [r7, #15]
 80016ea:	3301      	adds	r3, #1
 80016ec:	4a0c      	ldr	r2, [pc, #48]	; (8001720 <GetFskBandwidthRegValue+0x54>)
 80016ee:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d205      	bcs.n	8001704 <GetFskBandwidthRegValue+0x38>
        {
            return FskBandwidths[i].RegValue;
 80016f8:	7bfb      	ldrb	r3, [r7, #15]
 80016fa:	4a09      	ldr	r2, [pc, #36]	; (8001720 <GetFskBandwidthRegValue+0x54>)
 80016fc:	00db      	lsls	r3, r3, #3
 80016fe:	4413      	add	r3, r2
 8001700:	791b      	ldrb	r3, [r3, #4]
 8001702:	e006      	b.n	8001712 <GetFskBandwidthRegValue+0x46>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8001704:	7bfb      	ldrb	r3, [r7, #15]
 8001706:	3301      	adds	r3, #1
 8001708:	73fb      	strb	r3, [r7, #15]
 800170a:	7bfb      	ldrb	r3, [r7, #15]
 800170c:	2b14      	cmp	r3, #20
 800170e:	d9e4      	bls.n	80016da <GetFskBandwidthRegValue+0xe>
        }
    }
    // ERROR: Value not found
    while( 1 );
 8001710:	e7fe      	b.n	8001710 <GetFskBandwidthRegValue+0x44>
}
 8001712:	4618      	mov	r0, r3
 8001714:	3714      	adds	r7, #20
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	08005298 	.word	0x08005298
 8001724:	00000000 	.word	0x00000000

08001728 <SX1276SetRxConfig>:
                         uint32_t bandwidthAfc, uint16_t preambleLen,
                         uint16_t symbTimeout, bool fixLen,
                         uint8_t payloadLen,
                         bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                         bool iqInverted, bool rxContinuous )
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	60b9      	str	r1, [r7, #8]
 8001730:	607a      	str	r2, [r7, #4]
 8001732:	461a      	mov	r2, r3
 8001734:	4603      	mov	r3, r0
 8001736:	73fb      	strb	r3, [r7, #15]
 8001738:	4613      	mov	r3, r2
 800173a:	73bb      	strb	r3, [r7, #14]
    SX1276SetModem( modem );
 800173c:	7bfb      	ldrb	r3, [r7, #15]
 800173e:	4618      	mov	r0, r3
 8001740:	f001 f9d6 	bl	8002af0 <SX1276SetModem>

    switch( modem )
 8001744:	7bfb      	ldrb	r3, [r7, #15]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d003      	beq.n	8001752 <SX1276SetRxConfig+0x2a>
 800174a:	2b01      	cmp	r3, #1
 800174c:	f000 808f 	beq.w	800186e <SX1276SetRxConfig+0x146>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 8001750:	e1bb      	b.n	8001aca <SX1276SetRxConfig+0x3a2>
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8001752:	4abd      	ldr	r2, [pc, #756]	; (8001a48 <SX1276SetRxConfig+0x320>)
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	6113      	str	r3, [r2, #16]
            SX1276.Settings.Fsk.Datarate = datarate;
 8001758:	4abb      	ldr	r2, [pc, #748]	; (8001a48 <SX1276SetRxConfig+0x320>)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6193      	str	r3, [r2, #24]
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 800175e:	4aba      	ldr	r2, [pc, #744]	; (8001a48 <SX1276SetRxConfig+0x320>)
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	6153      	str	r3, [r2, #20]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8001764:	4ab8      	ldr	r2, [pc, #736]	; (8001a48 <SX1276SetRxConfig+0x320>)
 8001766:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800176a:	7793      	strb	r3, [r2, #30]
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 800176c:	4ab6      	ldr	r2, [pc, #728]	; (8001a48 <SX1276SetRxConfig+0x320>)
 800176e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001772:	77d3      	strb	r3, [r2, #31]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8001774:	4ab4      	ldr	r2, [pc, #720]	; (8001a48 <SX1276SetRxConfig+0x320>)
 8001776:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800177a:	f882 3020 	strb.w	r3, [r2, #32]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 800177e:	4ab2      	ldr	r2, [pc, #712]	; (8001a48 <SX1276SetRxConfig+0x320>)
 8001780:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001784:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 8001788:	4aaf      	ldr	r2, [pc, #700]	; (8001a48 <SX1276SetRxConfig+0x320>)
 800178a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800178e:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8001792:	4aad      	ldr	r2, [pc, #692]	; (8001a48 <SX1276SetRxConfig+0x320>)
 8001794:	8bbb      	ldrh	r3, [r7, #28]
 8001796:	8393      	strh	r3, [r2, #28]
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f7fe fe57 	bl	800044c <__aeabi_ui2d>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	a1a7      	add	r1, pc, #668	; (adr r1, 8001a40 <SX1276SetRxConfig+0x318>)
 80017a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80017a8:	f7fe fff4 	bl	8000794 <__aeabi_ddiv>
 80017ac:	4602      	mov	r2, r0
 80017ae:	460b      	mov	r3, r1
 80017b0:	4610      	mov	r0, r2
 80017b2:	4619      	mov	r1, r3
 80017b4:	f7ff f95e 	bl	8000a74 <__aeabi_d2uiz>
 80017b8:	4603      	mov	r3, r0
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	607b      	str	r3, [r7, #4]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	0a1b      	lsrs	r3, r3, #8
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	4619      	mov	r1, r3
 80017c6:	2002      	movs	r0, #2
 80017c8:	f001 f9d8 	bl	8002b7c <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	4619      	mov	r1, r3
 80017d2:	2003      	movs	r0, #3
 80017d4:	f001 f9d2 	bl	8002b7c <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 80017d8:	68b8      	ldr	r0, [r7, #8]
 80017da:	f7ff ff77 	bl	80016cc <GetFskBandwidthRegValue>
 80017de:	4603      	mov	r3, r0
 80017e0:	4619      	mov	r1, r3
 80017e2:	2012      	movs	r0, #18
 80017e4:	f001 f9ca 	bl	8002b7c <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 80017e8:	69b8      	ldr	r0, [r7, #24]
 80017ea:	f7ff ff6f 	bl	80016cc <GetFskBandwidthRegValue>
 80017ee:	4603      	mov	r3, r0
 80017f0:	4619      	mov	r1, r3
 80017f2:	2013      	movs	r0, #19
 80017f4:	f001 f9c2 	bl	8002b7c <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 80017f8:	8bbb      	ldrh	r3, [r7, #28]
 80017fa:	0a1b      	lsrs	r3, r3, #8
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	4619      	mov	r1, r3
 8001802:	2025      	movs	r0, #37	; 0x25
 8001804:	f001 f9ba 	bl	8002b7c <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8001808:	8bbb      	ldrh	r3, [r7, #28]
 800180a:	b2db      	uxtb	r3, r3
 800180c:	4619      	mov	r1, r3
 800180e:	2026      	movs	r0, #38	; 0x26
 8001810:	f001 f9b4 	bl	8002b7c <SX1276Write>
            if( fixLen == 1 )
 8001814:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001818:	2b00      	cmp	r3, #0
 800181a:	d006      	beq.n	800182a <SX1276SetRxConfig+0x102>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 800181c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001820:	4619      	mov	r1, r3
 8001822:	2032      	movs	r0, #50	; 0x32
 8001824:	f001 f9aa 	bl	8002b7c <SX1276Write>
 8001828:	e003      	b.n	8001832 <SX1276SetRxConfig+0x10a>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 800182a:	21ff      	movs	r1, #255	; 0xff
 800182c:	2032      	movs	r0, #50	; 0x32
 800182e:	f001 f9a5 	bl	8002b7c <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8001832:	2030      	movs	r0, #48	; 0x30
 8001834:	f001 f9b4 	bl	8002ba0 <SX1276Read>
 8001838:	4603      	mov	r3, r0
 800183a:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 800183c:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 8001840:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8001842:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001846:	2a00      	cmp	r2, #0
 8001848:	d001      	beq.n	800184e <SX1276SetRxConfig+0x126>
 800184a:	2200      	movs	r2, #0
 800184c:	e001      	b.n	8001852 <SX1276SetRxConfig+0x12a>
 800184e:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8001852:	4313      	orrs	r3, r2
 8001854:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 8001856:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800185a:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 800185c:	b25b      	sxtb	r3, r3
 800185e:	4313      	orrs	r3, r2
 8001860:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 8001862:	b2db      	uxtb	r3, r3
 8001864:	4619      	mov	r1, r3
 8001866:	2030      	movs	r0, #48	; 0x30
 8001868:	f001 f988 	bl	8002b7c <SX1276Write>
        break;
 800186c:	e12d      	b.n	8001aca <SX1276SetRxConfig+0x3a2>
            if( bandwidth > 2 )
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	2b02      	cmp	r3, #2
 8001872:	d900      	bls.n	8001876 <SX1276SetRxConfig+0x14e>
                while( 1 );
 8001874:	e7fe      	b.n	8001874 <SX1276SetRxConfig+0x14c>
            bandwidth += 7;
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	3307      	adds	r3, #7
 800187a:	60bb      	str	r3, [r7, #8]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 800187c:	4a72      	ldr	r2, [pc, #456]	; (8001a48 <SX1276SetRxConfig+0x320>)
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	63d3      	str	r3, [r2, #60]	; 0x3c
            SX1276.Settings.LoRa.Datarate = datarate;
 8001882:	4a71      	ldr	r2, [pc, #452]	; (8001a48 <SX1276SetRxConfig+0x320>)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6413      	str	r3, [r2, #64]	; 0x40
            SX1276.Settings.LoRa.Coderate = coderate;
 8001888:	4a6f      	ldr	r2, [pc, #444]	; (8001a48 <SX1276SetRxConfig+0x320>)
 800188a:	7bbb      	ldrb	r3, [r7, #14]
 800188c:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8001890:	4a6d      	ldr	r2, [pc, #436]	; (8001a48 <SX1276SetRxConfig+0x320>)
 8001892:	8bbb      	ldrh	r3, [r7, #28]
 8001894:	f8a2 3046 	strh.w	r3, [r2, #70]	; 0x46
            SX1276.Settings.LoRa.FixLen = fixLen;
 8001898:	4a6b      	ldr	r2, [pc, #428]	; (8001a48 <SX1276SetRxConfig+0x320>)
 800189a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800189e:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 80018a2:	4a69      	ldr	r2, [pc, #420]	; (8001a48 <SX1276SetRxConfig+0x320>)
 80018a4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80018a8:	f882 3049 	strb.w	r3, [r2, #73]	; 0x49
            SX1276.Settings.LoRa.CrcOn = crcOn;
 80018ac:	4a66      	ldr	r2, [pc, #408]	; (8001a48 <SX1276SetRxConfig+0x320>)
 80018ae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80018b2:	f882 304a 	strb.w	r3, [r2, #74]	; 0x4a
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 80018b6:	4a64      	ldr	r2, [pc, #400]	; (8001a48 <SX1276SetRxConfig+0x320>)
 80018b8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80018bc:	f882 304b 	strb.w	r3, [r2, #75]	; 0x4b
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 80018c0:	4a61      	ldr	r2, [pc, #388]	; (8001a48 <SX1276SetRxConfig+0x320>)
 80018c2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80018c6:	f882 304c 	strb.w	r3, [r2, #76]	; 0x4c
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 80018ca:	4a5f      	ldr	r2, [pc, #380]	; (8001a48 <SX1276SetRxConfig+0x320>)
 80018cc:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80018d0:	f882 304d 	strb.w	r3, [r2, #77]	; 0x4d
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 80018d4:	4a5c      	ldr	r2, [pc, #368]	; (8001a48 <SX1276SetRxConfig+0x320>)
 80018d6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80018da:	f882 304e 	strb.w	r3, [r2, #78]	; 0x4e
            if( datarate > 12 )
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2b0c      	cmp	r3, #12
 80018e2:	d902      	bls.n	80018ea <SX1276SetRxConfig+0x1c2>
                datarate = 12;
 80018e4:	230c      	movs	r3, #12
 80018e6:	607b      	str	r3, [r7, #4]
 80018e8:	e004      	b.n	80018f4 <SX1276SetRxConfig+0x1cc>
            else if( datarate < 6 )
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2b05      	cmp	r3, #5
 80018ee:	d801      	bhi.n	80018f4 <SX1276SetRxConfig+0x1cc>
                datarate = 6;
 80018f0:	2306      	movs	r3, #6
 80018f2:	607b      	str	r3, [r7, #4]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	2b07      	cmp	r3, #7
 80018f8:	d105      	bne.n	8001906 <SX1276SetRxConfig+0x1de>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2b0b      	cmp	r3, #11
 80018fe:	d008      	beq.n	8001912 <SX1276SetRxConfig+0x1ea>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2b0c      	cmp	r3, #12
 8001904:	d005      	beq.n	8001912 <SX1276SetRxConfig+0x1ea>
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	2b08      	cmp	r3, #8
 800190a:	d107      	bne.n	800191c <SX1276SetRxConfig+0x1f4>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2b0c      	cmp	r3, #12
 8001910:	d104      	bne.n	800191c <SX1276SetRxConfig+0x1f4>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8001912:	4b4d      	ldr	r3, [pc, #308]	; (8001a48 <SX1276SetRxConfig+0x320>)
 8001914:	2201      	movs	r2, #1
 8001916:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800191a:	e003      	b.n	8001924 <SX1276SetRxConfig+0x1fc>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 800191c:	4b4a      	ldr	r3, [pc, #296]	; (8001a48 <SX1276SetRxConfig+0x320>)
 800191e:	2200      	movs	r2, #0
 8001920:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8001924:	201d      	movs	r0, #29
 8001926:	f001 f93b 	bl	8002ba0 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	b2db      	uxtb	r3, r3
 800192e:	011b      	lsls	r3, r3, #4
 8001930:	b2da      	uxtb	r2, r3
 8001932:	7bbb      	ldrb	r3, [r7, #14]
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	b2db      	uxtb	r3, r3
 8001938:	4313      	orrs	r3, r2
 800193a:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 800193c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8001940:	4313      	orrs	r3, r2
 8001942:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8001944:	4619      	mov	r1, r3
 8001946:	201d      	movs	r0, #29
 8001948:	f001 f918 	bl	8002b7c <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 800194c:	201e      	movs	r0, #30
 800194e:	f001 f927 	bl	8002ba0 <SX1276Read>
 8001952:	4603      	mov	r3, r0
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 8001954:	f003 0308 	and.w	r3, r3, #8
 8001958:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	b2db      	uxtb	r3, r3
 800195e:	011b      	lsls	r3, r3, #4
 8001960:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 8001962:	4313      	orrs	r3, r2
 8001964:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8001966:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	b2db      	uxtb	r3, r3
 800196e:	4313      	orrs	r3, r2
 8001970:	b2da      	uxtb	r2, r3
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8001972:	8c3b      	ldrh	r3, [r7, #32]
 8001974:	0a1b      	lsrs	r3, r3, #8
 8001976:	b29b      	uxth	r3, r3
 8001978:	b2db      	uxtb	r3, r3
 800197a:	f003 0303 	and.w	r3, r3, #3
 800197e:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 8001980:	4313      	orrs	r3, r2
 8001982:	b2db      	uxtb	r3, r3
 8001984:	4619      	mov	r1, r3
 8001986:	201e      	movs	r0, #30
 8001988:	f001 f8f8 	bl	8002b7c <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800198c:	2026      	movs	r0, #38	; 0x26
 800198e:	f001 f907 	bl	8002ba0 <SX1276Read>
 8001992:	4603      	mov	r3, r0
 8001994:	b25b      	sxtb	r3, r3
 8001996:	f023 0308 	bic.w	r3, r3, #8
 800199a:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800199c:	4b2a      	ldr	r3, [pc, #168]	; (8001a48 <SX1276SetRxConfig+0x320>)
 800199e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80019a2:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 80019a4:	b25b      	sxtb	r3, r3
 80019a6:	4313      	orrs	r3, r2
 80019a8:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	4619      	mov	r1, r3
 80019ae:	2026      	movs	r0, #38	; 0x26
 80019b0:	f001 f8e4 	bl	8002b7c <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 80019b4:	8c3b      	ldrh	r3, [r7, #32]
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	4619      	mov	r1, r3
 80019ba:	201f      	movs	r0, #31
 80019bc:	f001 f8de 	bl	8002b7c <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 80019c0:	8bbb      	ldrh	r3, [r7, #28]
 80019c2:	0a1b      	lsrs	r3, r3, #8
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	4619      	mov	r1, r3
 80019ca:	2020      	movs	r0, #32
 80019cc:	f001 f8d6 	bl	8002b7c <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 80019d0:	8bbb      	ldrh	r3, [r7, #28]
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	4619      	mov	r1, r3
 80019d6:	2021      	movs	r0, #33	; 0x21
 80019d8:	f001 f8d0 	bl	8002b7c <SX1276Write>
            if( fixLen == 1 )
 80019dc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d005      	beq.n	80019f0 <SX1276SetRxConfig+0x2c8>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 80019e4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80019e8:	4619      	mov	r1, r3
 80019ea:	2022      	movs	r0, #34	; 0x22
 80019ec:	f001 f8c6 	bl	8002b7c <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80019f0:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <SX1276SetRxConfig+0x320>)
 80019f2:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d011      	beq.n	8001a1e <SX1276SetRxConfig+0x2f6>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 80019fa:	2044      	movs	r0, #68	; 0x44
 80019fc:	f001 f8d0 	bl	8002ba0 <SX1276Read>
 8001a00:	4603      	mov	r3, r0
 8001a02:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	4619      	mov	r1, r3
 8001a0a:	2044      	movs	r0, #68	; 0x44
 8001a0c:	f001 f8b6 	bl	8002b7c <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8001a10:	4b0d      	ldr	r3, [pc, #52]	; (8001a48 <SX1276SetRxConfig+0x320>)
 8001a12:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001a16:	4619      	mov	r1, r3
 8001a18:	2024      	movs	r0, #36	; 0x24
 8001a1a:	f001 f8af 	bl	8002b7c <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	2b09      	cmp	r3, #9
 8001a22:	d115      	bne.n	8001a50 <SX1276SetRxConfig+0x328>
 8001a24:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <SX1276SetRxConfig+0x320>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	4a08      	ldr	r2, [pc, #32]	; (8001a4c <SX1276SetRxConfig+0x324>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d910      	bls.n	8001a50 <SX1276SetRxConfig+0x328>
                SX1276Write( REG_LR_TEST36, 0x02 );
 8001a2e:	2102      	movs	r1, #2
 8001a30:	2036      	movs	r0, #54	; 0x36
 8001a32:	f001 f8a3 	bl	8002b7c <SX1276Write>
                SX1276Write( REG_LR_TEST3A, 0x64 );
 8001a36:	2164      	movs	r1, #100	; 0x64
 8001a38:	203a      	movs	r0, #58	; 0x3a
 8001a3a:	f001 f89f 	bl	8002b7c <SX1276Write>
 8001a3e:	e017      	b.n	8001a70 <SX1276SetRxConfig+0x348>
 8001a40:	00000000 	.word	0x00000000
 8001a44:	417e8480 	.word	0x417e8480
 8001a48:	20000308 	.word	0x20000308
 8001a4c:	1f4add40 	.word	0x1f4add40
            else if( bandwidth == 9 )
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	2b09      	cmp	r3, #9
 8001a54:	d108      	bne.n	8001a68 <SX1276SetRxConfig+0x340>
                SX1276Write( REG_LR_TEST36, 0x02 );
 8001a56:	2102      	movs	r1, #2
 8001a58:	2036      	movs	r0, #54	; 0x36
 8001a5a:	f001 f88f 	bl	8002b7c <SX1276Write>
                SX1276Write( REG_LR_TEST3A, 0x7F );
 8001a5e:	217f      	movs	r1, #127	; 0x7f
 8001a60:	203a      	movs	r0, #58	; 0x3a
 8001a62:	f001 f88b 	bl	8002b7c <SX1276Write>
 8001a66:	e003      	b.n	8001a70 <SX1276SetRxConfig+0x348>
                SX1276Write( REG_LR_TEST36, 0x03 );
 8001a68:	2103      	movs	r1, #3
 8001a6a:	2036      	movs	r0, #54	; 0x36
 8001a6c:	f001 f886 	bl	8002b7c <SX1276Write>
            if( datarate == 6 )
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2b06      	cmp	r3, #6
 8001a74:	d114      	bne.n	8001aa0 <SX1276SetRxConfig+0x378>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8001a76:	2031      	movs	r0, #49	; 0x31
 8001a78:	f001 f892 	bl	8002ba0 <SX1276Read>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	b25b      	sxtb	r3, r3
 8001a80:	f023 0307 	bic.w	r3, r3, #7
 8001a84:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8001a86:	f043 0305 	orr.w	r3, r3, #5
 8001a8a:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	4619      	mov	r1, r3
 8001a90:	2031      	movs	r0, #49	; 0x31
 8001a92:	f001 f873 	bl	8002b7c <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8001a96:	210c      	movs	r1, #12
 8001a98:	2037      	movs	r0, #55	; 0x37
 8001a9a:	f001 f86f 	bl	8002b7c <SX1276Write>
        break;
 8001a9e:	e013      	b.n	8001ac8 <SX1276SetRxConfig+0x3a0>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8001aa0:	2031      	movs	r0, #49	; 0x31
 8001aa2:	f001 f87d 	bl	8002ba0 <SX1276Read>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	b25b      	sxtb	r3, r3
 8001aaa:	f023 0307 	bic.w	r3, r3, #7
 8001aae:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8001ab0:	f043 0303 	orr.w	r3, r3, #3
 8001ab4:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	4619      	mov	r1, r3
 8001aba:	2031      	movs	r0, #49	; 0x31
 8001abc:	f001 f85e 	bl	8002b7c <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8001ac0:	210a      	movs	r1, #10
 8001ac2:	2037      	movs	r0, #55	; 0x37
 8001ac4:	f001 f85a 	bl	8002b7c <SX1276Write>
        break;
 8001ac8:	bf00      	nop
}
 8001aca:	bf00      	nop
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	0000      	movs	r0, r0
	...

08001ad8 <SX1276SetTxConfig>:
void SX1276SetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                        uint32_t bandwidth, uint32_t datarate,
                        uint8_t coderate, uint16_t preambleLen,
                        bool fixLen, bool crcOn, bool freqHopOn,
                        uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60ba      	str	r2, [r7, #8]
 8001ae0:	607b      	str	r3, [r7, #4]
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	73fb      	strb	r3, [r7, #15]
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	73bb      	strb	r3, [r7, #14]
    uint8_t paConfig = 0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	75fb      	strb	r3, [r7, #23]
    uint8_t paDac = 0;
 8001aee:	2300      	movs	r3, #0
 8001af0:	75bb      	strb	r3, [r7, #22]

    SX1276SetModem( modem );
 8001af2:	7bfb      	ldrb	r3, [r7, #15]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f000 fffb 	bl	8002af0 <SX1276SetModem>
    //Power Config
    paConfig = SX1276Read( REG_PACONFIG );
 8001afa:	2009      	movs	r0, #9
 8001afc:	f001 f850 	bl	8002ba0 <SX1276Read>
 8001b00:	4603      	mov	r3, r0
 8001b02:	75fb      	strb	r3, [r7, #23]
    paDac = SX1276Read( REG_PADAC );
 8001b04:	204d      	movs	r0, #77	; 0x4d
 8001b06:	f001 f84b 	bl	8002ba0 <SX1276Read>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	75bb      	strb	r3, [r7, #22]

    //paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | SX1276GetPaSelect( SX1276.Settings.Channel );
    //paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK ) | 0x70;
		paConfig =0x80;	//Ĭ��ʹ��PABOOST����
 8001b0e:	2380      	movs	r3, #128	; 0x80
 8001b10:	75fb      	strb	r3, [r7, #23]

    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 8001b12:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	da4e      	bge.n	8001bb8 <SX1276SetTxConfig+0xe0>
    {
        if( power > 17 )
 8001b1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001b1e:	2b11      	cmp	r3, #17
 8001b20:	dd04      	ble.n	8001b2c <SX1276SetTxConfig+0x54>
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 8001b22:	7dbb      	ldrb	r3, [r7, #22]
 8001b24:	f043 0307 	orr.w	r3, r3, #7
 8001b28:	75bb      	strb	r3, [r7, #22]
 8001b2a:	e008      	b.n	8001b3e <SX1276SetTxConfig+0x66>
        }
        else
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 8001b2c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001b30:	f023 0307 	bic.w	r3, r3, #7
 8001b34:	b25b      	sxtb	r3, r3
 8001b36:	f043 0304 	orr.w	r3, r3, #4
 8001b3a:	b25b      	sxtb	r3, r3
 8001b3c:	75bb      	strb	r3, [r7, #22]
        }
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 8001b3e:	7dbb      	ldrb	r3, [r7, #22]
 8001b40:	f003 0307 	and.w	r3, r3, #7
 8001b44:	2b07      	cmp	r3, #7
 8001b46:	d11b      	bne.n	8001b80 <SX1276SetTxConfig+0xa8>
        {
            if( power < 5 )
 8001b48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001b4c:	2b04      	cmp	r3, #4
 8001b4e:	dc01      	bgt.n	8001b54 <SX1276SetTxConfig+0x7c>
            {
                power = 5;
 8001b50:	2305      	movs	r3, #5
 8001b52:	73bb      	strb	r3, [r7, #14]
            }
            if( power > 20 )
 8001b54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001b58:	2b14      	cmp	r3, #20
 8001b5a:	dd01      	ble.n	8001b60 <SX1276SetTxConfig+0x88>
            {
                power = 20;
 8001b5c:	2314      	movs	r3, #20
 8001b5e:	73bb      	strb	r3, [r7, #14]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 8001b60:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b64:	f023 030f 	bic.w	r3, r3, #15
 8001b68:	b25a      	sxtb	r2, r3
 8001b6a:	7bbb      	ldrb	r3, [r7, #14]
 8001b6c:	3b05      	subs	r3, #5
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	b25b      	sxtb	r3, r3
 8001b72:	f003 030f 	and.w	r3, r3, #15
 8001b76:	b25b      	sxtb	r3, r3
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	b25b      	sxtb	r3, r3
 8001b7c:	75fb      	strb	r3, [r7, #23]
 8001b7e:	e037      	b.n	8001bf0 <SX1276SetTxConfig+0x118>
        }
        else
        {
            if( power < 2 )
 8001b80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	dc01      	bgt.n	8001b8c <SX1276SetTxConfig+0xb4>
            {
                power = 2;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	73bb      	strb	r3, [r7, #14]
            }
            if( power > 17 )
 8001b8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001b90:	2b11      	cmp	r3, #17
 8001b92:	dd01      	ble.n	8001b98 <SX1276SetTxConfig+0xc0>
            {
                power = 17;
 8001b94:	2311      	movs	r3, #17
 8001b96:	73bb      	strb	r3, [r7, #14]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 8001b98:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b9c:	f023 030f 	bic.w	r3, r3, #15
 8001ba0:	b25a      	sxtb	r2, r3
 8001ba2:	7bbb      	ldrb	r3, [r7, #14]
 8001ba4:	3b02      	subs	r3, #2
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	b25b      	sxtb	r3, r3
 8001baa:	f003 030f 	and.w	r3, r3, #15
 8001bae:	b25b      	sxtb	r3, r3
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	b25b      	sxtb	r3, r3
 8001bb4:	75fb      	strb	r3, [r7, #23]
 8001bb6:	e01b      	b.n	8001bf0 <SX1276SetTxConfig+0x118>
        }
    }
    else
    {
        if( power < -1 )
 8001bb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc0:	da01      	bge.n	8001bc6 <SX1276SetTxConfig+0xee>
        {
            power = -1;
 8001bc2:	23ff      	movs	r3, #255	; 0xff
 8001bc4:	73bb      	strb	r3, [r7, #14]
        }
        if( power > 14 )
 8001bc6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001bca:	2b0e      	cmp	r3, #14
 8001bcc:	dd01      	ble.n	8001bd2 <SX1276SetTxConfig+0xfa>
        {
            power = 14;
 8001bce:	230e      	movs	r3, #14
 8001bd0:	73bb      	strb	r3, [r7, #14]
        }
        paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power + 1 ) & 0x0F );
 8001bd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001bd6:	f023 030f 	bic.w	r3, r3, #15
 8001bda:	b25a      	sxtb	r2, r3
 8001bdc:	7bbb      	ldrb	r3, [r7, #14]
 8001bde:	3301      	adds	r3, #1
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	b25b      	sxtb	r3, r3
 8001be4:	f003 030f 	and.w	r3, r3, #15
 8001be8:	b25b      	sxtb	r3, r3
 8001bea:	4313      	orrs	r3, r2
 8001bec:	b25b      	sxtb	r3, r3
 8001bee:	75fb      	strb	r3, [r7, #23]
    }
    SX1276Write( REG_PACONFIG, paConfig );
 8001bf0:	7dfb      	ldrb	r3, [r7, #23]
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	2009      	movs	r0, #9
 8001bf6:	f000 ffc1 	bl	8002b7c <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 8001bfa:	7dbb      	ldrb	r3, [r7, #22]
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	204d      	movs	r0, #77	; 0x4d
 8001c00:	f000 ffbc 	bl	8002b7c <SX1276Write>

    switch( modem )
 8001c04:	7bfb      	ldrb	r3, [r7, #15]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d003      	beq.n	8001c12 <SX1276SetTxConfig+0x13a>
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	f000 808b 	beq.w	8001d26 <SX1276SetTxConfig+0x24e>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 8001c10:	e181      	b.n	8001f16 <SX1276SetTxConfig+0x43e>
            SX1276.Settings.Fsk.Power = power;
 8001c12:	4ab5      	ldr	r2, [pc, #724]	; (8001ee8 <SX1276SetTxConfig+0x410>)
 8001c14:	7bbb      	ldrb	r3, [r7, #14]
 8001c16:	7213      	strb	r3, [r2, #8]
            SX1276.Settings.Fsk.Fdev = fdev;
 8001c18:	4ab3      	ldr	r2, [pc, #716]	; (8001ee8 <SX1276SetTxConfig+0x410>)
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	60d3      	str	r3, [r2, #12]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8001c1e:	4ab2      	ldr	r2, [pc, #712]	; (8001ee8 <SX1276SetTxConfig+0x410>)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6113      	str	r3, [r2, #16]
            SX1276.Settings.Fsk.Datarate = datarate;
 8001c24:	4ab0      	ldr	r2, [pc, #704]	; (8001ee8 <SX1276SetTxConfig+0x410>)
 8001c26:	6a3b      	ldr	r3, [r7, #32]
 8001c28:	6193      	str	r3, [r2, #24]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8001c2a:	4aaf      	ldr	r2, [pc, #700]	; (8001ee8 <SX1276SetTxConfig+0x410>)
 8001c2c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001c2e:	8393      	strh	r3, [r2, #28]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8001c30:	4aad      	ldr	r2, [pc, #692]	; (8001ee8 <SX1276SetTxConfig+0x410>)
 8001c32:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001c36:	7793      	strb	r3, [r2, #30]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8001c38:	4aab      	ldr	r2, [pc, #684]	; (8001ee8 <SX1276SetTxConfig+0x410>)
 8001c3a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001c3e:	f882 3020 	strb.w	r3, [r2, #32]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8001c42:	4aa9      	ldr	r2, [pc, #676]	; (8001ee8 <SX1276SetTxConfig+0x410>)
 8001c44:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001c48:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8001c4c:	4aa6      	ldr	r2, [pc, #664]	; (8001ee8 <SX1276SetTxConfig+0x410>)
 8001c4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c50:	6253      	str	r3, [r2, #36]	; 0x24
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 8001c52:	68b8      	ldr	r0, [r7, #8]
 8001c54:	f7fe fbfa 	bl	800044c <__aeabi_ui2d>
 8001c58:	a39f      	add	r3, pc, #636	; (adr r3, 8001ed8 <SX1276SetTxConfig+0x400>)
 8001c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c5e:	f7fe fd99 	bl	8000794 <__aeabi_ddiv>
 8001c62:	4602      	mov	r2, r0
 8001c64:	460b      	mov	r3, r1
 8001c66:	4610      	mov	r0, r2
 8001c68:	4619      	mov	r1, r3
 8001c6a:	f7fe ff03 	bl	8000a74 <__aeabi_d2uiz>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	60bb      	str	r3, [r7, #8]
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	0a1b      	lsrs	r3, r3, #8
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	2004      	movs	r0, #4
 8001c7e:	f000 ff7d 	bl	8002b7c <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	4619      	mov	r1, r3
 8001c88:	2005      	movs	r0, #5
 8001c8a:	f000 ff77 	bl	8002b7c <SX1276Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8001c8e:	6a38      	ldr	r0, [r7, #32]
 8001c90:	f7fe fbdc 	bl	800044c <__aeabi_ui2d>
 8001c94:	4602      	mov	r2, r0
 8001c96:	460b      	mov	r3, r1
 8001c98:	a191      	add	r1, pc, #580	; (adr r1, 8001ee0 <SX1276SetTxConfig+0x408>)
 8001c9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c9e:	f7fe fd79 	bl	8000794 <__aeabi_ddiv>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	4610      	mov	r0, r2
 8001ca8:	4619      	mov	r1, r3
 8001caa:	f7fe fee3 	bl	8000a74 <__aeabi_d2uiz>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	623b      	str	r3, [r7, #32]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 8001cb4:	6a3b      	ldr	r3, [r7, #32]
 8001cb6:	0a1b      	lsrs	r3, r3, #8
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	4619      	mov	r1, r3
 8001cbc:	2002      	movs	r0, #2
 8001cbe:	f000 ff5d 	bl	8002b7c <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8001cc2:	6a3b      	ldr	r3, [r7, #32]
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	2003      	movs	r0, #3
 8001cca:	f000 ff57 	bl	8002b7c <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8001cce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001cd0:	0a1b      	lsrs	r3, r3, #8
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	2025      	movs	r0, #37	; 0x25
 8001cda:	f000 ff4f 	bl	8002b7c <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 8001cde:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	2026      	movs	r0, #38	; 0x26
 8001ce6:	f000 ff49 	bl	8002b7c <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8001cea:	2030      	movs	r0, #48	; 0x30
 8001cec:	f000 ff58 	bl	8002ba0 <SX1276Read>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 8001cf4:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 8001cf8:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8001cfa:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001cfe:	2a00      	cmp	r2, #0
 8001d00:	d001      	beq.n	8001d06 <SX1276SetTxConfig+0x22e>
 8001d02:	2200      	movs	r2, #0
 8001d04:	e001      	b.n	8001d0a <SX1276SetTxConfig+0x232>
 8001d06:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 8001d0e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001d12:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8001d14:	b25b      	sxtb	r3, r3
 8001d16:	4313      	orrs	r3, r2
 8001d18:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	2030      	movs	r0, #48	; 0x30
 8001d20:	f000 ff2c 	bl	8002b7c <SX1276Write>
        break;
 8001d24:	e0f7      	b.n	8001f16 <SX1276SetTxConfig+0x43e>
            SX1276.Settings.LoRa.Power = power;
 8001d26:	4a70      	ldr	r2, [pc, #448]	; (8001ee8 <SX1276SetTxConfig+0x410>)
 8001d28:	7bbb      	ldrb	r3, [r7, #14]
 8001d2a:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            if( bandwidth > 2 )
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d900      	bls.n	8001d36 <SX1276SetTxConfig+0x25e>
                while( 1 );
 8001d34:	e7fe      	b.n	8001d34 <SX1276SetTxConfig+0x25c>
            bandwidth += 7;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	3307      	adds	r3, #7
 8001d3a:	607b      	str	r3, [r7, #4]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8001d3c:	4a6a      	ldr	r2, [pc, #424]	; (8001ee8 <SX1276SetTxConfig+0x410>)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	63d3      	str	r3, [r2, #60]	; 0x3c
            SX1276.Settings.LoRa.Datarate = datarate;
 8001d42:	4a69      	ldr	r2, [pc, #420]	; (8001ee8 <SX1276SetTxConfig+0x410>)
 8001d44:	6a3b      	ldr	r3, [r7, #32]
 8001d46:	6413      	str	r3, [r2, #64]	; 0x40
            SX1276.Settings.LoRa.Coderate = coderate;
 8001d48:	4a67      	ldr	r2, [pc, #412]	; (8001ee8 <SX1276SetTxConfig+0x410>)
 8001d4a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001d4e:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8001d52:	4a65      	ldr	r2, [pc, #404]	; (8001ee8 <SX1276SetTxConfig+0x410>)
 8001d54:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001d56:	f8a2 3046 	strh.w	r3, [r2, #70]	; 0x46
            SX1276.Settings.LoRa.FixLen = fixLen;
 8001d5a:	4a63      	ldr	r2, [pc, #396]	; (8001ee8 <SX1276SetTxConfig+0x410>)
 8001d5c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001d60:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8001d64:	4a60      	ldr	r2, [pc, #384]	; (8001ee8 <SX1276SetTxConfig+0x410>)
 8001d66:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001d6a:	f882 304b 	strb.w	r3, [r2, #75]	; 0x4b
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8001d6e:	4a5e      	ldr	r2, [pc, #376]	; (8001ee8 <SX1276SetTxConfig+0x410>)
 8001d70:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001d74:	f882 304c 	strb.w	r3, [r2, #76]	; 0x4c
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8001d78:	4a5b      	ldr	r2, [pc, #364]	; (8001ee8 <SX1276SetTxConfig+0x410>)
 8001d7a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001d7e:	f882 304a 	strb.w	r3, [r2, #74]	; 0x4a
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8001d82:	4a59      	ldr	r2, [pc, #356]	; (8001ee8 <SX1276SetTxConfig+0x410>)
 8001d84:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001d88:	f882 304d 	strb.w	r3, [r2, #77]	; 0x4d
            SX1276.Settings.LoRa.TxTimeout = timeout;
 8001d8c:	4a56      	ldr	r2, [pc, #344]	; (8001ee8 <SX1276SetTxConfig+0x410>)
 8001d8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d90:	6513      	str	r3, [r2, #80]	; 0x50
            if( datarate > 12 )
 8001d92:	6a3b      	ldr	r3, [r7, #32]
 8001d94:	2b0c      	cmp	r3, #12
 8001d96:	d902      	bls.n	8001d9e <SX1276SetTxConfig+0x2c6>
                datarate = 12;
 8001d98:	230c      	movs	r3, #12
 8001d9a:	623b      	str	r3, [r7, #32]
 8001d9c:	e004      	b.n	8001da8 <SX1276SetTxConfig+0x2d0>
            else if( datarate < 6 )
 8001d9e:	6a3b      	ldr	r3, [r7, #32]
 8001da0:	2b05      	cmp	r3, #5
 8001da2:	d801      	bhi.n	8001da8 <SX1276SetTxConfig+0x2d0>
                datarate = 6;
 8001da4:	2306      	movs	r3, #6
 8001da6:	623b      	str	r3, [r7, #32]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2b07      	cmp	r3, #7
 8001dac:	d105      	bne.n	8001dba <SX1276SetTxConfig+0x2e2>
 8001dae:	6a3b      	ldr	r3, [r7, #32]
 8001db0:	2b0b      	cmp	r3, #11
 8001db2:	d008      	beq.n	8001dc6 <SX1276SetTxConfig+0x2ee>
 8001db4:	6a3b      	ldr	r3, [r7, #32]
 8001db6:	2b0c      	cmp	r3, #12
 8001db8:	d005      	beq.n	8001dc6 <SX1276SetTxConfig+0x2ee>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2b08      	cmp	r3, #8
 8001dbe:	d107      	bne.n	8001dd0 <SX1276SetTxConfig+0x2f8>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8001dc0:	6a3b      	ldr	r3, [r7, #32]
 8001dc2:	2b0c      	cmp	r3, #12
 8001dc4:	d104      	bne.n	8001dd0 <SX1276SetTxConfig+0x2f8>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8001dc6:	4b48      	ldr	r3, [pc, #288]	; (8001ee8 <SX1276SetTxConfig+0x410>)
 8001dc8:	2201      	movs	r2, #1
 8001dca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001dce:	e003      	b.n	8001dd8 <SX1276SetTxConfig+0x300>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8001dd0:	4b45      	ldr	r3, [pc, #276]	; (8001ee8 <SX1276SetTxConfig+0x410>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8001dd8:	4b43      	ldr	r3, [pc, #268]	; (8001ee8 <SX1276SetTxConfig+0x410>)
 8001dda:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d011      	beq.n	8001e06 <SX1276SetTxConfig+0x32e>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8001de2:	2044      	movs	r0, #68	; 0x44
 8001de4:	f000 fedc 	bl	8002ba0 <SX1276Read>
 8001de8:	4603      	mov	r3, r0
 8001dea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	4619      	mov	r1, r3
 8001df2:	2044      	movs	r0, #68	; 0x44
 8001df4:	f000 fec2 	bl	8002b7c <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8001df8:	4b3b      	ldr	r3, [pc, #236]	; (8001ee8 <SX1276SetTxConfig+0x410>)
 8001dfa:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001dfe:	4619      	mov	r1, r3
 8001e00:	2024      	movs	r0, #36	; 0x24
 8001e02:	f000 febb 	bl	8002b7c <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8001e06:	201d      	movs	r0, #29
 8001e08:	f000 feca 	bl	8002ba0 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	011b      	lsls	r3, r3, #4
 8001e12:	b2da      	uxtb	r2, r3
 8001e14:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8001e20:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8001e24:	4313      	orrs	r3, r2
 8001e26:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8001e28:	4619      	mov	r1, r3
 8001e2a:	201d      	movs	r0, #29
 8001e2c:	f000 fea6 	bl	8002b7c <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8001e30:	201e      	movs	r0, #30
 8001e32:	f000 feb5 	bl	8002ba0 <SX1276Read>
 8001e36:	4603      	mov	r3, r0
                           RFLR_MODEMCONFIG2_SF_MASK &
 8001e38:	f003 030b 	and.w	r3, r3, #11
 8001e3c:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 8001e3e:	6a3b      	ldr	r3, [r7, #32]
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	011b      	lsls	r3, r3, #4
 8001e44:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) |
 8001e46:	4313      	orrs	r3, r2
 8001e48:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 8001e4a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 8001e52:	4313      	orrs	r3, r2
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	4619      	mov	r1, r3
 8001e58:	201e      	movs	r0, #30
 8001e5a:	f000 fe8f 	bl	8002b7c <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8001e5e:	2026      	movs	r0, #38	; 0x26
 8001e60:	f000 fe9e 	bl	8002ba0 <SX1276Read>
 8001e64:	4603      	mov	r3, r0
 8001e66:	b25b      	sxtb	r3, r3
 8001e68:	f023 0308 	bic.w	r3, r3, #8
 8001e6c:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8001e6e:	4b1e      	ldr	r3, [pc, #120]	; (8001ee8 <SX1276SetTxConfig+0x410>)
 8001e70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e74:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8001e76:	b25b      	sxtb	r3, r3
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	4619      	mov	r1, r3
 8001e80:	2026      	movs	r0, #38	; 0x26
 8001e82:	f000 fe7b 	bl	8002b7c <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8001e86:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001e88:	0a1b      	lsrs	r3, r3, #8
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	4619      	mov	r1, r3
 8001e90:	2020      	movs	r0, #32
 8001e92:	f000 fe73 	bl	8002b7c <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 8001e96:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	2021      	movs	r0, #33	; 0x21
 8001e9e:	f000 fe6d 	bl	8002b7c <SX1276Write>
            if( datarate == 6 )
 8001ea2:	6a3b      	ldr	r3, [r7, #32]
 8001ea4:	2b06      	cmp	r3, #6
 8001ea6:	d121      	bne.n	8001eec <SX1276SetTxConfig+0x414>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8001ea8:	2031      	movs	r0, #49	; 0x31
 8001eaa:	f000 fe79 	bl	8002ba0 <SX1276Read>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	b25b      	sxtb	r3, r3
 8001eb2:	f023 0307 	bic.w	r3, r3, #7
 8001eb6:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8001eb8:	f043 0305 	orr.w	r3, r3, #5
 8001ebc:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	2031      	movs	r0, #49	; 0x31
 8001ec4:	f000 fe5a 	bl	8002b7c <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8001ec8:	210c      	movs	r1, #12
 8001eca:	2037      	movs	r0, #55	; 0x37
 8001ecc:	f000 fe56 	bl	8002b7c <SX1276Write>
        break;
 8001ed0:	e020      	b.n	8001f14 <SX1276SetTxConfig+0x43c>
 8001ed2:	bf00      	nop
 8001ed4:	f3af 8000 	nop.w
 8001ed8:	00000000 	.word	0x00000000
 8001edc:	404e8480 	.word	0x404e8480
 8001ee0:	00000000 	.word	0x00000000
 8001ee4:	417e8480 	.word	0x417e8480
 8001ee8:	20000308 	.word	0x20000308
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8001eec:	2031      	movs	r0, #49	; 0x31
 8001eee:	f000 fe57 	bl	8002ba0 <SX1276Read>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	b25b      	sxtb	r3, r3
 8001ef6:	f023 0307 	bic.w	r3, r3, #7
 8001efa:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8001efc:	f043 0303 	orr.w	r3, r3, #3
 8001f00:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	4619      	mov	r1, r3
 8001f06:	2031      	movs	r0, #49	; 0x31
 8001f08:	f000 fe38 	bl	8002b7c <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8001f0c:	210a      	movs	r1, #10
 8001f0e:	2037      	movs	r0, #55	; 0x37
 8001f10:	f000 fe34 	bl	8002b7c <SX1276Write>
        break;
 8001f14:	bf00      	nop
}
 8001f16:	bf00      	nop
 8001f18:	3718      	adds	r7, #24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop

08001f20 <SX1276GetTimeOnAir>:

uint32_t SX1276GetTimeOnAir( RadioModems_t modem, uint8_t pktLen )
{
 8001f20:	b5b0      	push	{r4, r5, r7, lr}
 8001f22:	b094      	sub	sp, #80	; 0x50
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	460a      	mov	r2, r1
 8001f2a:	71fb      	strb	r3, [r7, #7]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	71bb      	strb	r3, [r7, #6]
    uint32_t airTime = 0;
 8001f30:	2300      	movs	r3, #0
 8001f32:	64fb      	str	r3, [r7, #76]	; 0x4c
		double rs = 0;
 8001f34:	f04f 0200 	mov.w	r2, #0
 8001f38:	f04f 0300 	mov.w	r3, #0
 8001f3c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
		double ts = 0;
 8001f40:	f04f 0200 	mov.w	r2, #0
 8001f44:	f04f 0300 	mov.w	r3, #0
 8001f48:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		double tPreamble = 0;
 8001f4c:	f04f 0200 	mov.w	r2, #0
 8001f50:	f04f 0300 	mov.w	r3, #0
 8001f54:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		double tmp = 0;
 8001f58:	f04f 0200 	mov.w	r2, #0
 8001f5c:	f04f 0300 	mov.w	r3, #0
 8001f60:	e9c7 2308 	strd	r2, r3, [r7, #32]
		double nPayload = 0;
 8001f64:	f04f 0200 	mov.w	r2, #0
 8001f68:	f04f 0300 	mov.w	r3, #0
 8001f6c:	e9c7 2306 	strd	r2, r3, [r7, #24]
		double tPayload = 0;
 8001f70:	f04f 0200 	mov.w	r2, #0
 8001f74:	f04f 0300 	mov.w	r3, #0
 8001f78:	e9c7 2304 	strd	r2, r3, [r7, #16]
		double tOnAir = 0;
 8001f7c:	f04f 0200 	mov.w	r2, #0
 8001f80:	f04f 0300 	mov.w	r3, #0
 8001f84:	e9c7 2302 	strd	r2, r3, [r7, #8]

    switch( modem )
 8001f88:	79fb      	ldrb	r3, [r7, #7]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <SX1276GetTimeOnAir+0x76>
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	f000 808f 	beq.w	80020b2 <SX1276GetTimeOnAir+0x192>
 8001f94:	e181      	b.n	800229a <SX1276GetTimeOnAir+0x37a>
    {
    case MODEM_FSK:
        {
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8001f96:	4bcc      	ldr	r3, [pc, #816]	; (80022c8 <SX1276GetTimeOnAir+0x3a8>)
 8001f98:	8b9b      	ldrh	r3, [r3, #28]
 8001f9a:	461c      	mov	r4, r3
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8001f9c:	2027      	movs	r0, #39	; 0x27
 8001f9e:	f000 fdff 	bl	8002ba0 <SX1276Read>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001fa8:	3301      	adds	r3, #1
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8001faa:	4423      	add	r3, r4
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7fe fa5d 	bl	800046c <__aeabi_i2d>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	460b      	mov	r3, r1
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8001fb6:	49c4      	ldr	r1, [pc, #784]	; (80022c8 <SX1276GetTimeOnAir+0x3a8>)
 8001fb8:	7f89      	ldrb	r1, [r1, #30]
 8001fba:	2900      	cmp	r1, #0
 8001fbc:	d004      	beq.n	8001fc8 <SX1276GetTimeOnAir+0xa8>
 8001fbe:	f04f 0000 	mov.w	r0, #0
 8001fc2:	f04f 0100 	mov.w	r1, #0
 8001fc6:	e002      	b.n	8001fce <SX1276GetTimeOnAir+0xae>
 8001fc8:	f04f 0000 	mov.w	r0, #0
 8001fcc:	49bf      	ldr	r1, [pc, #764]	; (80022cc <SX1276GetTimeOnAir+0x3ac>)
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8001fce:	f7fe f901 	bl	80001d4 <__adddf3>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	4614      	mov	r4, r2
 8001fd8:	461d      	mov	r5, r3
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 8001fda:	2030      	movs	r0, #48	; 0x30
 8001fdc:	f000 fde0 	bl	8002ba0 <SX1276Read>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	f023 03f9 	bic.w	r3, r3, #249	; 0xf9
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d003      	beq.n	8001ff2 <SX1276GetTimeOnAir+0xd2>
 8001fea:	f04f 0000 	mov.w	r0, #0
 8001fee:	49b7      	ldr	r1, [pc, #732]	; (80022cc <SX1276GetTimeOnAir+0x3ac>)
 8001ff0:	e003      	b.n	8001ffa <SX1276GetTimeOnAir+0xda>
 8001ff2:	f04f 0000 	mov.w	r0, #0
 8001ff6:	f04f 0100 	mov.w	r1, #0
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8001ffa:	4622      	mov	r2, r4
 8001ffc:	462b      	mov	r3, r5
 8001ffe:	f7fe f8e9 	bl	80001d4 <__adddf3>
 8002002:	4602      	mov	r2, r0
 8002004:	460b      	mov	r3, r1
 8002006:	4614      	mov	r4, r2
 8002008:	461d      	mov	r5, r3
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 800200a:	79bb      	ldrb	r3, [r7, #6]
 800200c:	4618      	mov	r0, r3
 800200e:	f7fe fa2d 	bl	800046c <__aeabi_i2d>
 8002012:	4602      	mov	r2, r0
 8002014:	460b      	mov	r3, r1
 8002016:	4620      	mov	r0, r4
 8002018:	4629      	mov	r1, r5
 800201a:	f7fe f8db 	bl	80001d4 <__adddf3>
 800201e:	4602      	mov	r2, r0
 8002020:	460b      	mov	r3, r1
 8002022:	4614      	mov	r4, r2
 8002024:	461d      	mov	r5, r3
                                     pktLen +
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 8002026:	4ba8      	ldr	r3, [pc, #672]	; (80022c8 <SX1276GetTimeOnAir+0x3a8>)
 8002028:	f893 3020 	ldrb.w	r3, [r3, #32]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d004      	beq.n	800203a <SX1276GetTimeOnAir+0x11a>
 8002030:	f04f 0000 	mov.w	r0, #0
 8002034:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002038:	e003      	b.n	8002042 <SX1276GetTimeOnAir+0x122>
 800203a:	f04f 0000 	mov.w	r0, #0
 800203e:	f04f 0100 	mov.w	r1, #0
                                     pktLen +
 8002042:	4622      	mov	r2, r4
 8002044:	462b      	mov	r3, r5
 8002046:	f7fe f8c5 	bl	80001d4 <__adddf3>
 800204a:	4602      	mov	r2, r0
 800204c:	460b      	mov	r3, r1
 800204e:	4610      	mov	r0, r2
 8002050:	4619      	mov	r1, r3
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8002052:	f04f 0200 	mov.w	r2, #0
 8002056:	4b9e      	ldr	r3, [pc, #632]	; (80022d0 <SX1276GetTimeOnAir+0x3b0>)
 8002058:	f7fe fa72 	bl	8000540 <__aeabi_dmul>
 800205c:	4602      	mov	r2, r0
 800205e:	460b      	mov	r3, r1
 8002060:	4614      	mov	r4, r2
 8002062:	461d      	mov	r5, r3
                                     SX1276.Settings.Fsk.Datarate ) * 1e3 );
 8002064:	4b98      	ldr	r3, [pc, #608]	; (80022c8 <SX1276GetTimeOnAir+0x3a8>)
 8002066:	699b      	ldr	r3, [r3, #24]
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 8002068:	4618      	mov	r0, r3
 800206a:	f7fe f9ef 	bl	800044c <__aeabi_ui2d>
 800206e:	4602      	mov	r2, r0
 8002070:	460b      	mov	r3, r1
 8002072:	4620      	mov	r0, r4
 8002074:	4629      	mov	r1, r5
 8002076:	f7fe fb8d 	bl	8000794 <__aeabi_ddiv>
 800207a:	4602      	mov	r2, r0
 800207c:	460b      	mov	r3, r1
 800207e:	4610      	mov	r0, r2
 8002080:	4619      	mov	r1, r3
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8002082:	f04f 0200 	mov.w	r2, #0
 8002086:	4b93      	ldr	r3, [pc, #588]	; (80022d4 <SX1276GetTimeOnAir+0x3b4>)
 8002088:	f7fe fa5a 	bl	8000540 <__aeabi_dmul>
 800208c:	4602      	mov	r2, r0
 800208e:	460b      	mov	r3, r1
 8002090:	ec43 2b17 	vmov	d7, r2, r3
 8002094:	eeb0 0a47 	vmov.f32	s0, s14
 8002098:	eef0 0a67 	vmov.f32	s1, s15
 800209c:	f003 f860 	bl	8005160 <round>
 80020a0:	ec53 2b10 	vmov	r2, r3, d0
 80020a4:	4610      	mov	r0, r2
 80020a6:	4619      	mov	r1, r3
 80020a8:	f7fe fce4 	bl	8000a74 <__aeabi_d2uiz>
 80020ac:	4603      	mov	r3, r0
 80020ae:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
        break;
 80020b0:	e0f3      	b.n	800229a <SX1276GetTimeOnAir+0x37a>
    case MODEM_LORA:
        {
            double bw = 0.0;
 80020b2:	f04f 0200 	mov.w	r2, #0
 80020b6:	f04f 0300 	mov.w	r3, #0
 80020ba:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
            // REMARK: When using LoRa modem only bandwidths 125, 250 and 500 kHz are supported
            switch( SX1276.Settings.LoRa.Bandwidth )
 80020be:	4b82      	ldr	r3, [pc, #520]	; (80022c8 <SX1276GetTimeOnAir+0x3a8>)
 80020c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c2:	2b09      	cmp	r3, #9
 80020c4:	d012      	beq.n	80020ec <SX1276GetTimeOnAir+0x1cc>
 80020c6:	2b09      	cmp	r3, #9
 80020c8:	d816      	bhi.n	80020f8 <SX1276GetTimeOnAir+0x1d8>
 80020ca:	2b07      	cmp	r3, #7
 80020cc:	d002      	beq.n	80020d4 <SX1276GetTimeOnAir+0x1b4>
 80020ce:	2b08      	cmp	r3, #8
 80020d0:	d006      	beq.n	80020e0 <SX1276GetTimeOnAir+0x1c0>
 80020d2:	e011      	b.n	80020f8 <SX1276GetTimeOnAir+0x1d8>
            //    break;
            //case 6: // 62.5 kHz
            //    bw = 625e2;
            //    break;
            case 7: // 125 kHz
                bw = 125e3;
 80020d4:	a374      	add	r3, pc, #464	; (adr r3, 80022a8 <SX1276GetTimeOnAir+0x388>)
 80020d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020da:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
                break;
 80020de:	e00b      	b.n	80020f8 <SX1276GetTimeOnAir+0x1d8>
            case 8: // 250 kHz
                bw = 250e3;
 80020e0:	a373      	add	r3, pc, #460	; (adr r3, 80022b0 <SX1276GetTimeOnAir+0x390>)
 80020e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
                break;
 80020ea:	e005      	b.n	80020f8 <SX1276GetTimeOnAir+0x1d8>
            case 9: // 500 kHz
                bw = 500e3;
 80020ec:	a372      	add	r3, pc, #456	; (adr r3, 80022b8 <SX1276GetTimeOnAir+0x398>)
 80020ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
                break;
 80020f6:	bf00      	nop
            }

            // Symbol rate : time for one symbol (secs)
            rs = bw / ( 1 << SX1276.Settings.LoRa.Datarate );
 80020f8:	4b73      	ldr	r3, [pc, #460]	; (80022c8 <SX1276GetTimeOnAir+0x3a8>)
 80020fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fc:	2201      	movs	r2, #1
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	4618      	mov	r0, r3
 8002104:	f7fe f9b2 	bl	800046c <__aeabi_i2d>
 8002108:	4602      	mov	r2, r0
 800210a:	460b      	mov	r3, r1
 800210c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002110:	f7fe fb40 	bl	8000794 <__aeabi_ddiv>
 8002114:	4602      	mov	r2, r0
 8002116:	460b      	mov	r3, r1
 8002118:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
            ts = 1 / rs;
 800211c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002120:	f04f 0000 	mov.w	r0, #0
 8002124:	4969      	ldr	r1, [pc, #420]	; (80022cc <SX1276GetTimeOnAir+0x3ac>)
 8002126:	f7fe fb35 	bl	8000794 <__aeabi_ddiv>
 800212a:	4602      	mov	r2, r0
 800212c:	460b      	mov	r3, r1
 800212e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
            // time of preamble
            tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 8002132:	4b65      	ldr	r3, [pc, #404]	; (80022c8 <SX1276GetTimeOnAir+0x3a8>)
 8002134:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002138:	4618      	mov	r0, r3
 800213a:	f7fe f997 	bl	800046c <__aeabi_i2d>
 800213e:	f04f 0200 	mov.w	r2, #0
 8002142:	4b65      	ldr	r3, [pc, #404]	; (80022d8 <SX1276GetTimeOnAir+0x3b8>)
 8002144:	f7fe f846 	bl	80001d4 <__adddf3>
 8002148:	4602      	mov	r2, r0
 800214a:	460b      	mov	r3, r1
 800214c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002150:	f7fe f9f6 	bl	8000540 <__aeabi_dmul>
 8002154:	4602      	mov	r2, r0
 8002156:	460b      	mov	r3, r1
 8002158:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
            // Symbol length of payload and time
            tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 800215c:	79bb      	ldrb	r3, [r7, #6]
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	461a      	mov	r2, r3
 8002162:	4b59      	ldr	r3, [pc, #356]	; (80022c8 <SX1276GetTimeOnAir+0x3a8>)
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	1ad3      	subs	r3, r2, r3
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 800216a:	4a57      	ldr	r2, [pc, #348]	; (80022c8 <SX1276GetTimeOnAir+0x3a8>)
 800216c:	f892 204a 	ldrb.w	r2, [r2, #74]	; 0x4a
 8002170:	0112      	lsls	r2, r2, #4
 8002172:	441a      	add	r2, r3
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 8002174:	4b54      	ldr	r3, [pc, #336]	; (80022c8 <SX1276GetTimeOnAir+0x3a8>)
 8002176:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <SX1276GetTimeOnAir+0x262>
 800217e:	2314      	movs	r3, #20
 8002180:	e000      	b.n	8002184 <SX1276GetTimeOnAir+0x264>
 8002182:	2300      	movs	r3, #0
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	331c      	adds	r3, #28
            tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8002188:	4618      	mov	r0, r3
 800218a:	f7fe f95f 	bl	800044c <__aeabi_ui2d>
 800218e:	4604      	mov	r4, r0
 8002190:	460d      	mov	r5, r1
                                 ( double )( 4 * SX1276.Settings.LoRa.Datarate -
 8002192:	4b4d      	ldr	r3, [pc, #308]	; (80022c8 <SX1276GetTimeOnAir+0x3a8>)
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	009a      	lsls	r2, r3, #2
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) *
 8002198:	4b4b      	ldr	r3, [pc, #300]	; (80022c8 <SX1276GetTimeOnAir+0x3a8>)
 800219a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <SX1276GetTimeOnAir+0x286>
 80021a2:	2302      	movs	r3, #2
 80021a4:	e000      	b.n	80021a8 <SX1276GetTimeOnAir+0x288>
 80021a6:	2300      	movs	r3, #0
                                 ( double )( 4 * SX1276.Settings.LoRa.Datarate -
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7fe f94e 	bl	800044c <__aeabi_ui2d>
 80021b0:	4602      	mov	r2, r0
 80021b2:	460b      	mov	r3, r1
            tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 80021b4:	4620      	mov	r0, r4
 80021b6:	4629      	mov	r1, r5
 80021b8:	f7fe faec 	bl	8000794 <__aeabi_ddiv>
 80021bc:	4602      	mov	r2, r0
 80021be:	460b      	mov	r3, r1
 80021c0:	ec43 2b17 	vmov	d7, r2, r3
 80021c4:	eeb0 0a47 	vmov.f32	s0, s14
 80021c8:	eef0 0a67 	vmov.f32	s1, s15
 80021cc:	f002 fec4 	bl	8004f58 <ceil>
 80021d0:	ec55 4b10 	vmov	r4, r5, d0
                                 ( SX1276.Settings.LoRa.Coderate + 4 );
 80021d4:	4b3c      	ldr	r3, [pc, #240]	; (80022c8 <SX1276GetTimeOnAir+0x3a8>)
 80021d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80021da:	3304      	adds	r3, #4
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) *
 80021dc:	4618      	mov	r0, r3
 80021de:	f7fe f945 	bl	800046c <__aeabi_i2d>
 80021e2:	4602      	mov	r2, r0
 80021e4:	460b      	mov	r3, r1
            tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 80021e6:	4620      	mov	r0, r4
 80021e8:	4629      	mov	r1, r5
 80021ea:	f7fe f9a9 	bl	8000540 <__aeabi_dmul>
 80021ee:	4602      	mov	r2, r0
 80021f0:	460b      	mov	r3, r1
 80021f2:	e9c7 2308 	strd	r2, r3, [r7, #32]
            nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 80021f6:	f04f 0200 	mov.w	r2, #0
 80021fa:	f04f 0300 	mov.w	r3, #0
 80021fe:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002202:	f7fe fc2d 	bl	8000a60 <__aeabi_dcmpgt>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d002      	beq.n	8002212 <SX1276GetTimeOnAir+0x2f2>
 800220c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002210:	e003      	b.n	800221a <SX1276GetTimeOnAir+0x2fa>
 8002212:	f04f 0000 	mov.w	r0, #0
 8002216:	f04f 0100 	mov.w	r1, #0
 800221a:	f04f 0200 	mov.w	r2, #0
 800221e:	4b2c      	ldr	r3, [pc, #176]	; (80022d0 <SX1276GetTimeOnAir+0x3b0>)
 8002220:	f7fd ffd8 	bl	80001d4 <__adddf3>
 8002224:	4602      	mov	r2, r0
 8002226:	460b      	mov	r3, r1
 8002228:	e9c7 2306 	strd	r2, r3, [r7, #24]
            tPayload = nPayload * ts;
 800222c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002230:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002234:	f7fe f984 	bl	8000540 <__aeabi_dmul>
 8002238:	4602      	mov	r2, r0
 800223a:	460b      	mov	r3, r1
 800223c:	e9c7 2304 	strd	r2, r3, [r7, #16]
            // Time on air
            tOnAir = tPreamble + tPayload;
 8002240:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002244:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002248:	f7fd ffc4 	bl	80001d4 <__adddf3>
 800224c:	4602      	mov	r2, r0
 800224e:	460b      	mov	r3, r1
 8002250:	e9c7 2302 	strd	r2, r3, [r7, #8]
            // return us secs
            airTime = floor( tOnAir * 1e3 + 0.999 );
 8002254:	f04f 0200 	mov.w	r2, #0
 8002258:	4b1e      	ldr	r3, [pc, #120]	; (80022d4 <SX1276GetTimeOnAir+0x3b4>)
 800225a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800225e:	f7fe f96f 	bl	8000540 <__aeabi_dmul>
 8002262:	4602      	mov	r2, r0
 8002264:	460b      	mov	r3, r1
 8002266:	4610      	mov	r0, r2
 8002268:	4619      	mov	r1, r3
 800226a:	a315      	add	r3, pc, #84	; (adr r3, 80022c0 <SX1276GetTimeOnAir+0x3a0>)
 800226c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002270:	f7fd ffb0 	bl	80001d4 <__adddf3>
 8002274:	4602      	mov	r2, r0
 8002276:	460b      	mov	r3, r1
 8002278:	ec43 2b17 	vmov	d7, r2, r3
 800227c:	eeb0 0a47 	vmov.f32	s0, s14
 8002280:	eef0 0a67 	vmov.f32	s1, s15
 8002284:	f002 feec 	bl	8005060 <floor>
 8002288:	ec53 2b10 	vmov	r2, r3, d0
 800228c:	4610      	mov	r0, r2
 800228e:	4619      	mov	r1, r3
 8002290:	f7fe fbf0 	bl	8000a74 <__aeabi_d2uiz>
 8002294:	4603      	mov	r3, r0
 8002296:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
        break;
 8002298:	bf00      	nop
    }
    return airTime;
 800229a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800229c:	4618      	mov	r0, r3
 800229e:	3750      	adds	r7, #80	; 0x50
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bdb0      	pop	{r4, r5, r7, pc}
 80022a4:	f3af 8000 	nop.w
 80022a8:	00000000 	.word	0x00000000
 80022ac:	40fe8480 	.word	0x40fe8480
 80022b0:	00000000 	.word	0x00000000
 80022b4:	410e8480 	.word	0x410e8480
 80022b8:	00000000 	.word	0x00000000
 80022bc:	411e8480 	.word	0x411e8480
 80022c0:	d916872b 	.word	0xd916872b
 80022c4:	3feff7ce 	.word	0x3feff7ce
 80022c8:	20000308 	.word	0x20000308
 80022cc:	3ff00000 	.word	0x3ff00000
 80022d0:	40200000 	.word	0x40200000
 80022d4:	408f4000 	.word	0x408f4000
 80022d8:	40110000 	.word	0x40110000

080022dc <SX1276Send>:

void SX1276Send( uint8_t *buffer, uint8_t size )
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	460b      	mov	r3, r1
 80022e6:	70fb      	strb	r3, [r7, #3]
    uint32_t txTimeout = 0;
 80022e8:	2300      	movs	r3, #0
 80022ea:	60fb      	str	r3, [r7, #12]

    switch( SX1276.Settings.Modem )
 80022ec:	4b50      	ldr	r3, [pc, #320]	; (8002430 <SX1276Send+0x154>)
 80022ee:	785b      	ldrb	r3, [r3, #1]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d002      	beq.n	80022fa <SX1276Send+0x1e>
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d043      	beq.n	8002380 <SX1276Send+0xa4>
 80022f8:	e092      	b.n	8002420 <SX1276Send+0x144>
    {
    case MODEM_FSK:
        {
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80022fa:	4b4d      	ldr	r3, [pc, #308]	; (8002430 <SX1276Send+0x154>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	869a      	strh	r2, [r3, #52]	; 0x34
            SX1276.Settings.FskPacketHandler.Size = size;
 8002300:	78fb      	ldrb	r3, [r7, #3]
 8002302:	b29a      	uxth	r2, r3
 8002304:	4b4a      	ldr	r3, [pc, #296]	; (8002430 <SX1276Send+0x154>)
 8002306:	865a      	strh	r2, [r3, #50]	; 0x32

            if( SX1276.Settings.Fsk.FixLen == false )
 8002308:	4b49      	ldr	r3, [pc, #292]	; (8002430 <SX1276Send+0x154>)
 800230a:	7f9b      	ldrb	r3, [r3, #30]
 800230c:	f083 0301 	eor.w	r3, r3, #1
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b00      	cmp	r3, #0
 8002314:	d005      	beq.n	8002322 <SX1276Send+0x46>
            {
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 8002316:	1cfb      	adds	r3, r7, #3
 8002318:	2101      	movs	r1, #1
 800231a:	4618      	mov	r0, r3
 800231c:	f000 fca6 	bl	8002c6c <SX1276WriteFifo>
 8002320:	e004      	b.n	800232c <SX1276Send+0x50>
            }
            else
            {
                SX1276Write( REG_PAYLOADLENGTH, size );
 8002322:	78fb      	ldrb	r3, [r7, #3]
 8002324:	4619      	mov	r1, r3
 8002326:	2032      	movs	r0, #50	; 0x32
 8002328:	f000 fc28 	bl	8002b7c <SX1276Write>
            }

            if( ( size > 0 ) && ( size <= 64 ) )
 800232c:	78fb      	ldrb	r3, [r7, #3]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d007      	beq.n	8002342 <SX1276Send+0x66>
 8002332:	78fb      	ldrb	r3, [r7, #3]
 8002334:	2b40      	cmp	r3, #64	; 0x40
 8002336:	d804      	bhi.n	8002342 <SX1276Send+0x66>
            {
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 8002338:	78fa      	ldrb	r2, [r7, #3]
 800233a:	4b3d      	ldr	r3, [pc, #244]	; (8002430 <SX1276Send+0x154>)
 800233c:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8002340:	e009      	b.n	8002356 <SX1276Send+0x7a>
            }
            else
            {
                memcpy( RxTxBuffer, buffer, size );
 8002342:	78fb      	ldrb	r3, [r7, #3]
 8002344:	461a      	mov	r2, r3
 8002346:	6879      	ldr	r1, [r7, #4]
 8002348:	483a      	ldr	r0, [pc, #232]	; (8002434 <SX1276Send+0x158>)
 800234a:	f002 fdef 	bl	8004f2c <memcpy>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 800234e:	4b38      	ldr	r3, [pc, #224]	; (8002430 <SX1276Send+0x154>)
 8002350:	2220      	movs	r2, #32
 8002352:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
            }

            // Write payload buffer
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 8002356:	4b36      	ldr	r3, [pc, #216]	; (8002430 <SX1276Send+0x154>)
 8002358:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800235c:	4619      	mov	r1, r3
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 fc84 	bl	8002c6c <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8002364:	4b32      	ldr	r3, [pc, #200]	; (8002430 <SX1276Send+0x154>)
 8002366:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8002368:	4b31      	ldr	r3, [pc, #196]	; (8002430 <SX1276Send+0x154>)
 800236a:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800236e:	b29b      	uxth	r3, r3
 8002370:	4413      	add	r3, r2
 8002372:	b29a      	uxth	r2, r3
 8002374:	4b2e      	ldr	r3, [pc, #184]	; (8002430 <SX1276Send+0x154>)
 8002376:	869a      	strh	r2, [r3, #52]	; 0x34
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 8002378:	4b2d      	ldr	r3, [pc, #180]	; (8002430 <SX1276Send+0x154>)
 800237a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800237e:	e04f      	b.n	8002420 <SX1276Send+0x144>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 8002380:	4b2b      	ldr	r3, [pc, #172]	; (8002430 <SX1276Send+0x154>)
 8002382:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00f      	beq.n	80023aa <SX1276Send+0xce>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 800238a:	2033      	movs	r0, #51	; 0x33
 800238c:	f000 fc08 	bl	8002ba0 <SX1276Read>
 8002390:	4603      	mov	r3, r0
 8002392:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 8002396:	b2db      	uxtb	r3, r3
 8002398:	4619      	mov	r1, r3
 800239a:	2033      	movs	r0, #51	; 0x33
 800239c:	f000 fbee 	bl	8002b7c <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 80023a0:	2119      	movs	r1, #25
 80023a2:	203b      	movs	r0, #59	; 0x3b
 80023a4:	f000 fbea 	bl	8002b7c <SX1276Write>
 80023a8:	e013      	b.n	80023d2 <SX1276Send+0xf6>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 80023aa:	2033      	movs	r0, #51	; 0x33
 80023ac:	f000 fbf8 	bl	8002ba0 <SX1276Read>
 80023b0:	4603      	mov	r3, r0
 80023b2:	b25b      	sxtb	r3, r3
 80023b4:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 80023b8:	b25b      	sxtb	r3, r3
 80023ba:	f043 0301 	orr.w	r3, r3, #1
 80023be:	b25b      	sxtb	r3, r3
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	4619      	mov	r1, r3
 80023c4:	2033      	movs	r0, #51	; 0x33
 80023c6:	f000 fbd9 	bl	8002b7c <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 80023ca:	211d      	movs	r1, #29
 80023cc:	203b      	movs	r0, #59	; 0x3b
 80023ce:	f000 fbd5 	bl	8002b7c <SX1276Write>
            }

            SX1276.Settings.LoRaPacketHandler.Size = size;
 80023d2:	78fa      	ldrb	r2, [r7, #3]
 80023d4:	4b16      	ldr	r3, [pc, #88]	; (8002430 <SX1276Send+0x154>)
 80023d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

            // Initializes the payload size
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 80023da:	78fb      	ldrb	r3, [r7, #3]
 80023dc:	4619      	mov	r1, r3
 80023de:	2022      	movs	r0, #34	; 0x22
 80023e0:	f000 fbcc 	bl	8002b7c <SX1276Write>

            // Full buffer used for Tx
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 80023e4:	2100      	movs	r1, #0
 80023e6:	200e      	movs	r0, #14
 80023e8:	f000 fbc8 	bl	8002b7c <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 80023ec:	2100      	movs	r1, #0
 80023ee:	200d      	movs	r0, #13
 80023f0:	f000 fbc4 	bl	8002b7c <SX1276Write>

            // FIFO operations can not take place in Sleep mode
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 80023f4:	2001      	movs	r0, #1
 80023f6:	f000 fbd3 	bl	8002ba0 <SX1276Read>
 80023fa:	4603      	mov	r3, r0
 80023fc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002400:	2b00      	cmp	r3, #0
 8002402:	d104      	bne.n	800240e <SX1276Send+0x132>
            {
                SX1276SetStby( );
 8002404:	f000 f828 	bl	8002458 <SX1276SetStby>
                SX1276DelayMs( 1 );
 8002408:	2001      	movs	r0, #1
 800240a:	f7fe ff3e 	bl	800128a <SX1276DelayMs>
            }
            // Write payload buffer
            SX1276WriteFifo( buffer, size );
 800240e:	78fb      	ldrb	r3, [r7, #3]
 8002410:	4619      	mov	r1, r3
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 fc2a 	bl	8002c6c <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 8002418:	4b05      	ldr	r3, [pc, #20]	; (8002430 <SX1276Send+0x154>)
 800241a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800241c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800241e:	bf00      	nop
    }

    SX1276SetTx( txTimeout );
 8002420:	68f8      	ldr	r0, [r7, #12]
 8002422:	f000 fa63 	bl	80028ec <SX1276SetTx>
}
 8002426:	bf00      	nop
 8002428:	3710      	adds	r7, #16
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	20000308 	.word	0x20000308
 8002434:	2000008c 	.word	0x2000008c

08002438 <SX1276SetSleep>:

void SX1276SetSleep( void )
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
    SX1276RxTimeoutTimerStop();
 800243c:	f7fe ff69 	bl	8001312 <SX1276RxTimeoutTimerStop>
		SX1276TxTimeoutTimerStop();
 8002440:	f7fe ff48 	bl	80012d4 <SX1276TxTimeoutTimerStop>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 8002444:	2000      	movs	r0, #0
 8002446:	f000 fb25 	bl	8002a94 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 800244a:	4b02      	ldr	r3, [pc, #8]	; (8002454 <SX1276SetSleep+0x1c>)
 800244c:	2200      	movs	r2, #0
 800244e:	701a      	strb	r2, [r3, #0]
}
 8002450:	bf00      	nop
 8002452:	bd80      	pop	{r7, pc}
 8002454:	20000308 	.word	0x20000308

08002458 <SX1276SetStby>:

void SX1276SetStby( void )
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
    SX1276RxTimeoutTimerStop();
 800245c:	f7fe ff59 	bl	8001312 <SX1276RxTimeoutTimerStop>
		SX1276TxTimeoutTimerStop();
 8002460:	f7fe ff38 	bl	80012d4 <SX1276TxTimeoutTimerStop>

    SX1276SetOpMode( RF_OPMODE_STANDBY );
 8002464:	2001      	movs	r0, #1
 8002466:	f000 fb15 	bl	8002a94 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 800246a:	4b02      	ldr	r3, [pc, #8]	; (8002474 <SX1276SetStby+0x1c>)
 800246c:	2200      	movs	r2, #0
 800246e:	701a      	strb	r2, [r3, #0]
}
 8002470:	bf00      	nop
 8002472:	bd80      	pop	{r7, pc}
 8002474:	20000308 	.word	0x20000308

08002478 <SX1276SetRx>:

void SX1276SetRx( uint32_t timeout )
{
 8002478:	b5b0      	push	{r4, r5, r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
    bool rxContinuous = false;
 8002480:	2300      	movs	r3, #0
 8002482:	73fb      	strb	r3, [r7, #15]

    switch( SX1276.Settings.Modem )
 8002484:	4bbe      	ldr	r3, [pc, #760]	; (8002780 <SX1276SetRx+0x308>)
 8002486:	785b      	ldrb	r3, [r3, #1]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d002      	beq.n	8002492 <SX1276SetRx+0x1a>
 800248c:	2b01      	cmp	r3, #1
 800248e:	d03c      	beq.n	800250a <SX1276SetRx+0x92>
 8002490:	e190      	b.n	80027b4 <SX1276SetRx+0x33c>
    {
    case MODEM_FSK:
        {
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 8002492:	4bbb      	ldr	r3, [pc, #748]	; (8002780 <SX1276SetRx+0x308>)
 8002494:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002498:	73fb      	strb	r3, [r7, #15]
            // DIO1=FifoLevel
            // DIO2=SyncAddr
            // DIO3=FifoEmpty
            // DIO4=Preamble
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800249a:	2040      	movs	r0, #64	; 0x40
 800249c:	f000 fb80 	bl	8002ba0 <SX1276Read>
 80024a0:	4603      	mov	r3, r0
 80024a2:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
                                                                            RF_DIOMAPPING1_DIO0_00 |
 80024a4:	f003 0303 	and.w	r3, r3, #3
 80024a8:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_00 |
 80024aa:	f043 030c 	orr.w	r3, r3, #12
 80024ae:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	4619      	mov	r1, r3
 80024b4:	2040      	movs	r0, #64	; 0x40
 80024b6:	f000 fb61 	bl	8002b7c <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO2_11 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 80024ba:	2041      	movs	r0, #65	; 0x41
 80024bc:	f000 fb70 	bl	8002ba0 <SX1276Read>
 80024c0:	4603      	mov	r3, r0
 80024c2:	f063 033e 	orn	r3, r3, #62	; 0x3e
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	4619      	mov	r1, r3
 80024ca:	2041      	movs	r0, #65	; 0x41
 80024cc:	f000 fb56 	bl	8002b7c <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) |
                                                                            RF_DIOMAPPING2_DIO4_11 |
                                                                            RF_DIOMAPPING2_MAP_PREAMBLEDETECT );

            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 80024d0:	2035      	movs	r0, #53	; 0x35
 80024d2:	f000 fb65 	bl	8002ba0 <SX1276Read>
 80024d6:	4603      	mov	r3, r0
 80024d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024dc:	b2da      	uxtb	r2, r3
 80024de:	4ba8      	ldr	r3, [pc, #672]	; (8002780 <SX1276SetRx+0x308>)
 80024e0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 80024e4:	211e      	movs	r1, #30
 80024e6:	200d      	movs	r0, #13
 80024e8:	f000 fb48 	bl	8002b7c <SX1276Write>

            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 80024ec:	4ba4      	ldr	r3, [pc, #656]	; (8002780 <SX1276SetRx+0x308>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 80024f4:	4ba2      	ldr	r3, [pc, #648]	; (8002780 <SX1276SetRx+0x308>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80024fc:	4ba0      	ldr	r3, [pc, #640]	; (8002780 <SX1276SetRx+0x308>)
 80024fe:	2200      	movs	r2, #0
 8002500:	869a      	strh	r2, [r3, #52]	; 0x34
            SX1276.Settings.FskPacketHandler.Size = 0;
 8002502:	4b9f      	ldr	r3, [pc, #636]	; (8002780 <SX1276SetRx+0x308>)
 8002504:	2200      	movs	r2, #0
 8002506:	865a      	strh	r2, [r3, #50]	; 0x32
        }
        break;
 8002508:	e154      	b.n	80027b4 <SX1276SetRx+0x33c>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 800250a:	4b9d      	ldr	r3, [pc, #628]	; (8002780 <SX1276SetRx+0x308>)
 800250c:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8002510:	2b00      	cmp	r3, #0
 8002512:	d00f      	beq.n	8002534 <SX1276SetRx+0xbc>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 8002514:	2033      	movs	r0, #51	; 0x33
 8002516:	f000 fb43 	bl	8002ba0 <SX1276Read>
 800251a:	4603      	mov	r3, r0
 800251c:	f043 0341 	orr.w	r3, r3, #65	; 0x41
 8002520:	b2db      	uxtb	r3, r3
 8002522:	4619      	mov	r1, r3
 8002524:	2033      	movs	r0, #51	; 0x33
 8002526:	f000 fb29 	bl	8002b7c <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 800252a:	2119      	movs	r1, #25
 800252c:	203b      	movs	r0, #59	; 0x3b
 800252e:	f000 fb25 	bl	8002b7c <SX1276Write>
 8002532:	e013      	b.n	800255c <SX1276SetRx+0xe4>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8002534:	2033      	movs	r0, #51	; 0x33
 8002536:	f000 fb33 	bl	8002ba0 <SX1276Read>
 800253a:	4603      	mov	r3, r0
 800253c:	b25b      	sxtb	r3, r3
 800253e:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 8002542:	b25b      	sxtb	r3, r3
 8002544:	f043 0301 	orr.w	r3, r3, #1
 8002548:	b25b      	sxtb	r3, r3
 800254a:	b2db      	uxtb	r3, r3
 800254c:	4619      	mov	r1, r3
 800254e:	2033      	movs	r0, #51	; 0x33
 8002550:	f000 fb14 	bl	8002b7c <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8002554:	211d      	movs	r1, #29
 8002556:	203b      	movs	r0, #59	; 0x3b
 8002558:	f000 fb10 	bl	8002b7c <SX1276Write>
            }

            // ERRATA 2.3 - Receiver Spurious Reception of a LoRa Signal
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 800255c:	4b88      	ldr	r3, [pc, #544]	; (8002780 <SX1276SetRx+0x308>)
 800255e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002560:	2b08      	cmp	r3, #8
 8002562:	f200 80ce 	bhi.w	8002702 <SX1276SetRx+0x28a>
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 8002566:	2031      	movs	r0, #49	; 0x31
 8002568:	f000 fb1a 	bl	8002ba0 <SX1276Read>
 800256c:	4603      	mov	r3, r0
 800256e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002572:	b2db      	uxtb	r3, r3
 8002574:	4619      	mov	r1, r3
 8002576:	2031      	movs	r0, #49	; 0x31
 8002578:	f000 fb00 	bl	8002b7c <SX1276Write>
                SX1276Write( REG_LR_TEST30, 0x00 );
 800257c:	2100      	movs	r1, #0
 800257e:	2030      	movs	r0, #48	; 0x30
 8002580:	f000 fafc 	bl	8002b7c <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 8002584:	4b7e      	ldr	r3, [pc, #504]	; (8002780 <SX1276SetRx+0x308>)
 8002586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002588:	2b08      	cmp	r3, #8
 800258a:	f200 80c5 	bhi.w	8002718 <SX1276SetRx+0x2a0>
 800258e:	a201      	add	r2, pc, #4	; (adr r2, 8002594 <SX1276SetRx+0x11c>)
 8002590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002594:	080025b9 	.word	0x080025b9
 8002598:	080025eb 	.word	0x080025eb
 800259c:	0800261d 	.word	0x0800261d
 80025a0:	0800264f 	.word	0x0800264f
 80025a4:	08002681 	.word	0x08002681
 80025a8:	080026b3 	.word	0x080026b3
 80025ac:	080026e5 	.word	0x080026e5
 80025b0:	080026ef 	.word	0x080026ef
 80025b4:	080026f9 	.word	0x080026f9
                {
                case 0: // 7.8 kHz
                    SX1276Write( REG_LR_TEST2F, 0x48 );
 80025b8:	2148      	movs	r1, #72	; 0x48
 80025ba:	202f      	movs	r0, #47	; 0x2f
 80025bc:	f000 fade 	bl	8002b7c <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7.81e3 );
 80025c0:	4b6f      	ldr	r3, [pc, #444]	; (8002780 <SX1276SetRx+0x308>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7fd ff41 	bl	800044c <__aeabi_ui2d>
 80025ca:	a361      	add	r3, pc, #388	; (adr r3, 8002750 <SX1276SetRx+0x2d8>)
 80025cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d0:	f7fd fe00 	bl	80001d4 <__adddf3>
 80025d4:	4602      	mov	r2, r0
 80025d6:	460b      	mov	r3, r1
 80025d8:	4610      	mov	r0, r2
 80025da:	4619      	mov	r1, r3
 80025dc:	f7fe fa4a 	bl	8000a74 <__aeabi_d2uiz>
 80025e0:	4603      	mov	r3, r0
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7fe ff78 	bl	80014d8 <SX1276SetChannel>
                    break;
 80025e8:	e096      	b.n	8002718 <SX1276SetRx+0x2a0>
                case 1: // 10.4 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 80025ea:	2144      	movs	r1, #68	; 0x44
 80025ec:	202f      	movs	r0, #47	; 0x2f
 80025ee:	f000 fac5 	bl	8002b7c <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10.42e3 );
 80025f2:	4b63      	ldr	r3, [pc, #396]	; (8002780 <SX1276SetRx+0x308>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7fd ff28 	bl	800044c <__aeabi_ui2d>
 80025fc:	a356      	add	r3, pc, #344	; (adr r3, 8002758 <SX1276SetRx+0x2e0>)
 80025fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002602:	f7fd fde7 	bl	80001d4 <__adddf3>
 8002606:	4602      	mov	r2, r0
 8002608:	460b      	mov	r3, r1
 800260a:	4610      	mov	r0, r2
 800260c:	4619      	mov	r1, r3
 800260e:	f7fe fa31 	bl	8000a74 <__aeabi_d2uiz>
 8002612:	4603      	mov	r3, r0
 8002614:	4618      	mov	r0, r3
 8002616:	f7fe ff5f 	bl	80014d8 <SX1276SetChannel>
                    break;
 800261a:	e07d      	b.n	8002718 <SX1276SetRx+0x2a0>
                case 2: // 15.6 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 800261c:	2144      	movs	r1, #68	; 0x44
 800261e:	202f      	movs	r0, #47	; 0x2f
 8002620:	f000 faac 	bl	8002b7c <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15.62e3 );
 8002624:	4b56      	ldr	r3, [pc, #344]	; (8002780 <SX1276SetRx+0x308>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	4618      	mov	r0, r3
 800262a:	f7fd ff0f 	bl	800044c <__aeabi_ui2d>
 800262e:	a34c      	add	r3, pc, #304	; (adr r3, 8002760 <SX1276SetRx+0x2e8>)
 8002630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002634:	f7fd fdce 	bl	80001d4 <__adddf3>
 8002638:	4602      	mov	r2, r0
 800263a:	460b      	mov	r3, r1
 800263c:	4610      	mov	r0, r2
 800263e:	4619      	mov	r1, r3
 8002640:	f7fe fa18 	bl	8000a74 <__aeabi_d2uiz>
 8002644:	4603      	mov	r3, r0
 8002646:	4618      	mov	r0, r3
 8002648:	f7fe ff46 	bl	80014d8 <SX1276SetChannel>
                    break;
 800264c:	e064      	b.n	8002718 <SX1276SetRx+0x2a0>
                case 3: // 20.8 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 800264e:	2144      	movs	r1, #68	; 0x44
 8002650:	202f      	movs	r0, #47	; 0x2f
 8002652:	f000 fa93 	bl	8002b7c <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20.83e3 );
 8002656:	4b4a      	ldr	r3, [pc, #296]	; (8002780 <SX1276SetRx+0x308>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	4618      	mov	r0, r3
 800265c:	f7fd fef6 	bl	800044c <__aeabi_ui2d>
 8002660:	a341      	add	r3, pc, #260	; (adr r3, 8002768 <SX1276SetRx+0x2f0>)
 8002662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002666:	f7fd fdb5 	bl	80001d4 <__adddf3>
 800266a:	4602      	mov	r2, r0
 800266c:	460b      	mov	r3, r1
 800266e:	4610      	mov	r0, r2
 8002670:	4619      	mov	r1, r3
 8002672:	f7fe f9ff 	bl	8000a74 <__aeabi_d2uiz>
 8002676:	4603      	mov	r3, r0
 8002678:	4618      	mov	r0, r3
 800267a:	f7fe ff2d 	bl	80014d8 <SX1276SetChannel>
                    break;
 800267e:	e04b      	b.n	8002718 <SX1276SetRx+0x2a0>
                case 4: // 31.2 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 8002680:	2144      	movs	r1, #68	; 0x44
 8002682:	202f      	movs	r0, #47	; 0x2f
 8002684:	f000 fa7a 	bl	8002b7c <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31.25e3 );
 8002688:	4b3d      	ldr	r3, [pc, #244]	; (8002780 <SX1276SetRx+0x308>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	4618      	mov	r0, r3
 800268e:	f7fd fedd 	bl	800044c <__aeabi_ui2d>
 8002692:	a337      	add	r3, pc, #220	; (adr r3, 8002770 <SX1276SetRx+0x2f8>)
 8002694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002698:	f7fd fd9c 	bl	80001d4 <__adddf3>
 800269c:	4602      	mov	r2, r0
 800269e:	460b      	mov	r3, r1
 80026a0:	4610      	mov	r0, r2
 80026a2:	4619      	mov	r1, r3
 80026a4:	f7fe f9e6 	bl	8000a74 <__aeabi_d2uiz>
 80026a8:	4603      	mov	r3, r0
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7fe ff14 	bl	80014d8 <SX1276SetChannel>
                    break;
 80026b0:	e032      	b.n	8002718 <SX1276SetRx+0x2a0>
                case 5: // 41.4 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 80026b2:	2144      	movs	r1, #68	; 0x44
 80026b4:	202f      	movs	r0, #47	; 0x2f
 80026b6:	f000 fa61 	bl	8002b7c <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41.67e3 );
 80026ba:	4b31      	ldr	r3, [pc, #196]	; (8002780 <SX1276SetRx+0x308>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	4618      	mov	r0, r3
 80026c0:	f7fd fec4 	bl	800044c <__aeabi_ui2d>
 80026c4:	a32c      	add	r3, pc, #176	; (adr r3, 8002778 <SX1276SetRx+0x300>)
 80026c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ca:	f7fd fd83 	bl	80001d4 <__adddf3>
 80026ce:	4602      	mov	r2, r0
 80026d0:	460b      	mov	r3, r1
 80026d2:	4610      	mov	r0, r2
 80026d4:	4619      	mov	r1, r3
 80026d6:	f7fe f9cd 	bl	8000a74 <__aeabi_d2uiz>
 80026da:	4603      	mov	r3, r0
 80026dc:	4618      	mov	r0, r3
 80026de:	f7fe fefb 	bl	80014d8 <SX1276SetChannel>
                    break;
 80026e2:	e019      	b.n	8002718 <SX1276SetRx+0x2a0>
                case 6: // 62.5 kHz
                    SX1276Write( REG_LR_TEST2F, 0x40 );
 80026e4:	2140      	movs	r1, #64	; 0x40
 80026e6:	202f      	movs	r0, #47	; 0x2f
 80026e8:	f000 fa48 	bl	8002b7c <SX1276Write>
                    break;
 80026ec:	e014      	b.n	8002718 <SX1276SetRx+0x2a0>
                case 7: // 125 kHz
                    SX1276Write( REG_LR_TEST2F, 0x40 );
 80026ee:	2140      	movs	r1, #64	; 0x40
 80026f0:	202f      	movs	r0, #47	; 0x2f
 80026f2:	f000 fa43 	bl	8002b7c <SX1276Write>
                    break;
 80026f6:	e00f      	b.n	8002718 <SX1276SetRx+0x2a0>
                case 8: // 250 kHz
                    SX1276Write( REG_LR_TEST2F, 0x40 );
 80026f8:	2140      	movs	r1, #64	; 0x40
 80026fa:	202f      	movs	r0, #47	; 0x2f
 80026fc:	f000 fa3e 	bl	8002b7c <SX1276Write>
                    break;
 8002700:	e00a      	b.n	8002718 <SX1276SetRx+0x2a0>
                }
            }
            else
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 8002702:	2031      	movs	r0, #49	; 0x31
 8002704:	f000 fa4c 	bl	8002ba0 <SX1276Read>
 8002708:	4603      	mov	r3, r0
 800270a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800270e:	b2db      	uxtb	r3, r3
 8002710:	4619      	mov	r1, r3
 8002712:	2031      	movs	r0, #49	; 0x31
 8002714:	f000 fa32 	bl	8002b7c <SX1276Write>
            }

            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 8002718:	4b19      	ldr	r3, [pc, #100]	; (8002780 <SX1276SetRx+0x308>)
 800271a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800271e:	73fb      	strb	r3, [r7, #15]

            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8002720:	4b17      	ldr	r3, [pc, #92]	; (8002780 <SX1276SetRx+0x308>)
 8002722:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8002726:	2b00      	cmp	r3, #0
 8002728:	d02c      	beq.n	8002784 <SX1276SetRx+0x30c>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 800272a:	211d      	movs	r1, #29
 800272c:	2011      	movs	r0, #17
 800272e:	f000 fa25 	bl	8002b7c <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 8002732:	2040      	movs	r0, #64	; 0x40
 8002734:	f000 fa34 	bl	8002ba0 <SX1276Read>
 8002738:	4603      	mov	r3, r0
 800273a:	f003 0333 	and.w	r3, r3, #51	; 0x33
 800273e:	b2db      	uxtb	r3, r3
 8002740:	4619      	mov	r1, r3
 8002742:	2040      	movs	r0, #64	; 0x40
 8002744:	f000 fa1a 	bl	8002b7c <SX1276Write>
 8002748:	e02b      	b.n	80027a2 <SX1276SetRx+0x32a>
 800274a:	bf00      	nop
 800274c:	f3af 8000 	nop.w
 8002750:	00000000 	.word	0x00000000
 8002754:	40be8200 	.word	0x40be8200
 8002758:	00000000 	.word	0x00000000
 800275c:	40c45a00 	.word	0x40c45a00
 8002760:	00000000 	.word	0x00000000
 8002764:	40ce8200 	.word	0x40ce8200
 8002768:	00000000 	.word	0x00000000
 800276c:	40d45780 	.word	0x40d45780
 8002770:	00000000 	.word	0x00000000
 8002774:	40de8480 	.word	0x40de8480
 8002778:	00000000 	.word	0x00000000
 800277c:	40e458c0 	.word	0x40e458c0
 8002780:	20000308 	.word	0x20000308
            }
            else
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8002784:	211f      	movs	r1, #31
 8002786:	2011      	movs	r0, #17
 8002788:	f000 f9f8 	bl	8002b7c <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 800278c:	2040      	movs	r0, #64	; 0x40
 800278e:	f000 fa07 	bl	8002ba0 <SX1276Read>
 8002792:	4603      	mov	r3, r0
 8002794:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002798:	b2db      	uxtb	r3, r3
 800279a:	4619      	mov	r1, r3
 800279c:	2040      	movs	r0, #64	; 0x40
 800279e:	f000 f9ed 	bl	8002b7c <SX1276Write>
            }
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 80027a2:	2100      	movs	r1, #0
 80027a4:	200f      	movs	r0, #15
 80027a6:	f000 f9e9 	bl	8002b7c <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 80027aa:	2100      	movs	r1, #0
 80027ac:	200d      	movs	r0, #13
 80027ae:	f000 f9e5 	bl	8002b7c <SX1276Write>
        }
        break;
 80027b2:	bf00      	nop
    }

    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
 80027b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027b8:	2100      	movs	r1, #0
 80027ba:	4845      	ldr	r0, [pc, #276]	; (80028d0 <SX1276SetRx+0x458>)
 80027bc:	f002 fbc4 	bl	8004f48 <memset>

    SX1276.Settings.State = RF_RX_RUNNING;
 80027c0:	4b44      	ldr	r3, [pc, #272]	; (80028d4 <SX1276SetRx+0x45c>)
 80027c2:	2201      	movs	r2, #1
 80027c4:	701a      	strb	r2, [r3, #0]
    if( timeout != 0 )
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d002      	beq.n	80027d2 <SX1276SetRx+0x35a>
    {
        SX1276RxTimeoutTimerStart(timeout);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f7fe fd8a 	bl	80012e6 <SX1276RxTimeoutTimerStart>
    }

    if( SX1276.Settings.Modem == MODEM_FSK )
 80027d2:	4b40      	ldr	r3, [pc, #256]	; (80028d4 <SX1276SetRx+0x45c>)
 80027d4:	785b      	ldrb	r3, [r3, #1]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d169      	bne.n	80028ae <SX1276SetRx+0x436>
    {
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 80027da:	2005      	movs	r0, #5
 80027dc:	f000 f95a 	bl	8002a94 <SX1276SetOpMode>

        if( rxContinuous == false )
 80027e0:	7bfb      	ldrb	r3, [r7, #15]
 80027e2:	f083 0301 	eor.w	r3, r3, #1
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d06a      	beq.n	80028c2 <SX1276SetRx+0x44a>
        {
            SX1276SyncWordTimeoutTimerStart(ceil( ( 8.0 * ( SX1276.Settings.Fsk.PreambleLen +
 80027ec:	4b39      	ldr	r3, [pc, #228]	; (80028d4 <SX1276SetRx+0x45c>)
 80027ee:	8b9b      	ldrh	r3, [r3, #28]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7fd fe3b 	bl	800046c <__aeabi_i2d>
 80027f6:	4604      	mov	r4, r0
 80027f8:	460d      	mov	r5, r1
                                                             ( ( SX1276Read( REG_SYNCCONFIG ) &
 80027fa:	2027      	movs	r0, #39	; 0x27
 80027fc:	f000 f9d0 	bl	8002ba0 <SX1276Read>
 8002800:	4603      	mov	r3, r0
 8002802:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
                                                                ~RF_SYNCCONFIG_SYNCSIZE_MASK ) +
 8002806:	4618      	mov	r0, r3
 8002808:	f7fd fe30 	bl	800046c <__aeabi_i2d>
 800280c:	f04f 0200 	mov.w	r2, #0
 8002810:	4b31      	ldr	r3, [pc, #196]	; (80028d8 <SX1276SetRx+0x460>)
 8002812:	f7fd fcdf 	bl	80001d4 <__adddf3>
 8002816:	4602      	mov	r2, r0
 8002818:	460b      	mov	r3, r1
            SX1276SyncWordTimeoutTimerStart(ceil( ( 8.0 * ( SX1276.Settings.Fsk.PreambleLen +
 800281a:	4620      	mov	r0, r4
 800281c:	4629      	mov	r1, r5
 800281e:	f7fd fcd9 	bl	80001d4 <__adddf3>
 8002822:	4602      	mov	r2, r0
 8002824:	460b      	mov	r3, r1
 8002826:	4610      	mov	r0, r2
 8002828:	4619      	mov	r1, r3
                                                                1.0 ) + 10.0 ) /
 800282a:	f04f 0200 	mov.w	r2, #0
 800282e:	4b2b      	ldr	r3, [pc, #172]	; (80028dc <SX1276SetRx+0x464>)
 8002830:	f7fd fcd0 	bl	80001d4 <__adddf3>
 8002834:	4602      	mov	r2, r0
 8002836:	460b      	mov	r3, r1
 8002838:	4610      	mov	r0, r2
 800283a:	4619      	mov	r1, r3
            SX1276SyncWordTimeoutTimerStart(ceil( ( 8.0 * ( SX1276.Settings.Fsk.PreambleLen +
 800283c:	f04f 0200 	mov.w	r2, #0
 8002840:	4b27      	ldr	r3, [pc, #156]	; (80028e0 <SX1276SetRx+0x468>)
 8002842:	f7fd fe7d 	bl	8000540 <__aeabi_dmul>
 8002846:	4602      	mov	r2, r0
 8002848:	460b      	mov	r3, r1
 800284a:	4614      	mov	r4, r2
 800284c:	461d      	mov	r5, r3
                                                             ( double )SX1276.Settings.Fsk.Datarate ) * 1e3 ) + 4 );
 800284e:	4b21      	ldr	r3, [pc, #132]	; (80028d4 <SX1276SetRx+0x45c>)
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	4618      	mov	r0, r3
 8002854:	f7fd fdfa 	bl	800044c <__aeabi_ui2d>
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
                                                                1.0 ) + 10.0 ) /
 800285c:	4620      	mov	r0, r4
 800285e:	4629      	mov	r1, r5
 8002860:	f7fd ff98 	bl	8000794 <__aeabi_ddiv>
 8002864:	4602      	mov	r2, r0
 8002866:	460b      	mov	r3, r1
 8002868:	4610      	mov	r0, r2
 800286a:	4619      	mov	r1, r3
            SX1276SyncWordTimeoutTimerStart(ceil( ( 8.0 * ( SX1276.Settings.Fsk.PreambleLen +
 800286c:	f04f 0200 	mov.w	r2, #0
 8002870:	4b1c      	ldr	r3, [pc, #112]	; (80028e4 <SX1276SetRx+0x46c>)
 8002872:	f7fd fe65 	bl	8000540 <__aeabi_dmul>
 8002876:	4602      	mov	r2, r0
 8002878:	460b      	mov	r3, r1
 800287a:	ec43 2b17 	vmov	d7, r2, r3
 800287e:	eeb0 0a47 	vmov.f32	s0, s14
 8002882:	eef0 0a67 	vmov.f32	s1, s15
 8002886:	f002 fb67 	bl	8004f58 <ceil>
 800288a:	ec51 0b10 	vmov	r0, r1, d0
                                                             ( double )SX1276.Settings.Fsk.Datarate ) * 1e3 ) + 4 );
 800288e:	f04f 0200 	mov.w	r2, #0
 8002892:	4b15      	ldr	r3, [pc, #84]	; (80028e8 <SX1276SetRx+0x470>)
 8002894:	f7fd fc9e 	bl	80001d4 <__adddf3>
 8002898:	4602      	mov	r2, r0
 800289a:	460b      	mov	r3, r1
            SX1276SyncWordTimeoutTimerStart(ceil( ( 8.0 * ( SX1276.Settings.Fsk.PreambleLen +
 800289c:	4610      	mov	r0, r2
 800289e:	4619      	mov	r1, r3
 80028a0:	f7fe f8e8 	bl	8000a74 <__aeabi_d2uiz>
 80028a4:	4603      	mov	r3, r0
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7fe fd3c 	bl	8001324 <SX1276SyncWordTimeoutTimerStart>
 80028ac:	e009      	b.n	80028c2 <SX1276SetRx+0x44a>
        }
    }
    else
    {
        if( rxContinuous == true )
 80028ae:	7bfb      	ldrb	r3, [r7, #15]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d003      	beq.n	80028bc <SX1276SetRx+0x444>
        {
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 80028b4:	2005      	movs	r0, #5
 80028b6:	f000 f8ed 	bl	8002a94 <SX1276SetOpMode>
 80028ba:	e002      	b.n	80028c2 <SX1276SetRx+0x44a>
        }
        else
        {
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 80028bc:	2006      	movs	r0, #6
 80028be:	f000 f8e9 	bl	8002a94 <SX1276SetOpMode>
        }
    }
		SX1276Read(REG_LR_IRQFLAGS);//���ý��պ��д����Ĵ������Կ�ʼ����
 80028c2:	2012      	movs	r0, #18
 80028c4:	f000 f96c 	bl	8002ba0 <SX1276Read>
}
 80028c8:	bf00      	nop
 80028ca:	3710      	adds	r7, #16
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bdb0      	pop	{r4, r5, r7, pc}
 80028d0:	2000008c 	.word	0x2000008c
 80028d4:	20000308 	.word	0x20000308
 80028d8:	3ff00000 	.word	0x3ff00000
 80028dc:	40240000 	.word	0x40240000
 80028e0:	40200000 	.word	0x40200000
 80028e4:	408f4000 	.word	0x408f4000
 80028e8:	40100000 	.word	0x40100000

080028ec <SX1276SetTx>:

void SX1276SetTx( uint32_t timeout )
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.Modem )
 80028f4:	4b35      	ldr	r3, [pc, #212]	; (80029cc <SX1276SetTx+0xe0>)
 80028f6:	785b      	ldrb	r3, [r3, #1]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d002      	beq.n	8002902 <SX1276SetTx+0x16>
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d026      	beq.n	800294e <SX1276SetTx+0x62>
 8002900:	e054      	b.n	80029ac <SX1276SetTx+0xc0>
            // DIO1=FifoEmpty
            // DIO2=FifoFull
            // DIO3=FifoEmpty
            // DIO4=LowBat
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8002902:	2040      	movs	r0, #64	; 0x40
 8002904:	f000 f94c 	bl	8002ba0 <SX1276Read>
 8002908:	4603      	mov	r3, r0
 800290a:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
 800290c:	f003 0303 	and.w	r3, r3, #3
 8002910:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
 8002912:	f043 0310 	orr.w	r3, r3, #16
 8002916:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8002918:	b2db      	uxtb	r3, r3
 800291a:	4619      	mov	r1, r3
 800291c:	2040      	movs	r0, #64	; 0x40
 800291e:	f000 f92d 	bl	8002b7c <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO1_01 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8002922:	2041      	movs	r0, #65	; 0x41
 8002924:	f000 f93c 	bl	8002ba0 <SX1276Read>
 8002928:	4603      	mov	r3, r0
 800292a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800292e:	b2db      	uxtb	r3, r3
 8002930:	4619      	mov	r1, r3
 8002932:	2041      	movs	r0, #65	; 0x41
 8002934:	f000 f922 	bl	8002b7c <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) );
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8002938:	2035      	movs	r0, #53	; 0x35
 800293a:	f000 f931 	bl	8002ba0 <SX1276Read>
 800293e:	4603      	mov	r3, r0
 8002940:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002944:	b2da      	uxtb	r2, r3
 8002946:	4b21      	ldr	r3, [pc, #132]	; (80029cc <SX1276SetTx+0xe0>)
 8002948:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
        }
        break;
 800294c:	e02e      	b.n	80029ac <SX1276SetTx+0xc0>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800294e:	4b1f      	ldr	r3, [pc, #124]	; (80029cc <SX1276SetTx+0xe0>)
 8002950:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8002954:	2b00      	cmp	r3, #0
 8002956:	d014      	beq.n	8002982 <SX1276SetTx+0x96>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8002958:	21f5      	movs	r1, #245	; 0xf5
 800295a:	2011      	movs	r0, #17
 800295c:	f000 f90e 	bl	8002b7c <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=TxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 8002960:	2040      	movs	r0, #64	; 0x40
 8002962:	f000 f91d 	bl	8002ba0 <SX1276Read>
 8002966:	4603      	mov	r3, r0
 8002968:	b25b      	sxtb	r3, r3
 800296a:	f003 0333 	and.w	r3, r3, #51	; 0x33
 800296e:	b25b      	sxtb	r3, r3
 8002970:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002974:	b25b      	sxtb	r3, r3
 8002976:	b2db      	uxtb	r3, r3
 8002978:	4619      	mov	r1, r3
 800297a:	2040      	movs	r0, #64	; 0x40
 800297c:	f000 f8fe 	bl	8002b7c <SX1276Write>

                // DIO0=TxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
            }
        }
        break;
 8002980:	e013      	b.n	80029aa <SX1276SetTx+0xbe>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8002982:	21f7      	movs	r1, #247	; 0xf7
 8002984:	2011      	movs	r0, #17
 8002986:	f000 f8f9 	bl	8002b7c <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 800298a:	2040      	movs	r0, #64	; 0x40
 800298c:	f000 f908 	bl	8002ba0 <SX1276Read>
 8002990:	4603      	mov	r3, r0
 8002992:	b25b      	sxtb	r3, r3
 8002994:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002998:	b25b      	sxtb	r3, r3
 800299a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800299e:	b25b      	sxtb	r3, r3
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	4619      	mov	r1, r3
 80029a4:	2040      	movs	r0, #64	; 0x40
 80029a6:	f000 f8e9 	bl	8002b7c <SX1276Write>
        break;
 80029aa:	bf00      	nop
    }

    SX1276.Settings.State = RF_TX_RUNNING;
 80029ac:	4b07      	ldr	r3, [pc, #28]	; (80029cc <SX1276SetTx+0xe0>)
 80029ae:	2202      	movs	r2, #2
 80029b0:	701a      	strb	r2, [r3, #0]
    SX1276RxTimeoutTimerStart(timeout);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7fe fc97 	bl	80012e6 <SX1276RxTimeoutTimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 80029b8:	2003      	movs	r0, #3
 80029ba:	f000 f86b 	bl	8002a94 <SX1276SetOpMode>
		SX1276Read(REG_LR_IRQFLAGS);//���÷��ͺ��д����Ĵ������Կ�ʼ����
 80029be:	2012      	movs	r0, #18
 80029c0:	f000 f8ee 	bl	8002ba0 <SX1276Read>
}
 80029c4:	bf00      	nop
 80029c6:	3708      	adds	r7, #8
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	20000308 	.word	0x20000308

080029d0 <SX1276StartCad>:

void SX1276StartCad( void )
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 80029d4:	4b0f      	ldr	r3, [pc, #60]	; (8002a14 <SX1276StartCad+0x44>)
 80029d6:	785b      	ldrb	r3, [r3, #1]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d018      	beq.n	8002a0e <SX1276StartCad+0x3e>
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d000      	beq.n	80029e2 <SX1276StartCad+0x12>
            SX1276.Settings.State = RF_CAD;
            SX1276SetOpMode( RFLR_OPMODE_CAD );
        }
        break;
    default:
        break;
 80029e0:	e016      	b.n	8002a10 <SX1276StartCad+0x40>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80029e2:	21fa      	movs	r1, #250	; 0xfa
 80029e4:	2011      	movs	r0, #17
 80029e6:	f000 f8c9 	bl	8002b7c <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 80029ea:	2040      	movs	r0, #64	; 0x40
 80029ec:	f000 f8d8 	bl	8002ba0 <SX1276Read>
 80029f0:	4603      	mov	r3, r0
 80029f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	4619      	mov	r1, r3
 80029fa:	2040      	movs	r0, #64	; 0x40
 80029fc:	f000 f8be 	bl	8002b7c <SX1276Write>
            SX1276.Settings.State = RF_CAD;
 8002a00:	4b04      	ldr	r3, [pc, #16]	; (8002a14 <SX1276StartCad+0x44>)
 8002a02:	2203      	movs	r2, #3
 8002a04:	701a      	strb	r2, [r3, #0]
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 8002a06:	2007      	movs	r0, #7
 8002a08:	f000 f844 	bl	8002a94 <SX1276SetOpMode>
        break;
 8002a0c:	e000      	b.n	8002a10 <SX1276StartCad+0x40>
        break;
 8002a0e:	bf00      	nop
    }
}
 8002a10:	bf00      	nop
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	20000308 	.word	0x20000308

08002a18 <SX1276ReadRssi>:

int16_t SX1276ReadRssi( RadioModems_t modem )
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	4603      	mov	r3, r0
 8002a20:	71fb      	strb	r3, [r7, #7]
    int16_t rssi = 0;
 8002a22:	2300      	movs	r3, #0
 8002a24:	81fb      	strh	r3, [r7, #14]

    switch( modem )
 8002a26:	79fb      	ldrb	r3, [r7, #7]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d002      	beq.n	8002a32 <SX1276ReadRssi+0x1a>
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d00b      	beq.n	8002a48 <SX1276ReadRssi+0x30>
 8002a30:	e021      	b.n	8002a76 <SX1276ReadRssi+0x5e>
    {
    case MODEM_FSK:
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8002a32:	2011      	movs	r0, #17
 8002a34:	f000 f8b4 	bl	8002ba0 <SX1276Read>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	085b      	lsrs	r3, r3, #1
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	425b      	negs	r3, r3
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	81fb      	strh	r3, [r7, #14]
        break;
 8002a46:	e01a      	b.n	8002a7e <SX1276ReadRssi+0x66>
    case MODEM_LORA:
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8002a48:	4b10      	ldr	r3, [pc, #64]	; (8002a8c <SX1276ReadRssi+0x74>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	4a10      	ldr	r2, [pc, #64]	; (8002a90 <SX1276ReadRssi+0x78>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d908      	bls.n	8002a64 <SX1276ReadRssi+0x4c>
        {
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 8002a52:	201b      	movs	r0, #27
 8002a54:	f000 f8a4 	bl	8002ba0 <SX1276Read>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	3b9d      	subs	r3, #157	; 0x9d
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	81fb      	strh	r3, [r7, #14]
        }
        else
        {
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
        }
        break;
 8002a62:	e00c      	b.n	8002a7e <SX1276ReadRssi+0x66>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 8002a64:	201b      	movs	r0, #27
 8002a66:	f000 f89b 	bl	8002ba0 <SX1276Read>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	3ba4      	subs	r3, #164	; 0xa4
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	81fb      	strh	r3, [r7, #14]
        break;
 8002a74:	e003      	b.n	8002a7e <SX1276ReadRssi+0x66>
    default:
        rssi = -1;
 8002a76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a7a:	81fb      	strh	r3, [r7, #14]
        break;
 8002a7c:	bf00      	nop
    }
    return rssi;
 8002a7e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	20000308 	.word	0x20000308
 8002a90:	1f4add40 	.word	0x1f4add40

08002a94 <SX1276SetOpMode>:

void SX1276SetOpMode( uint8_t opMode )
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	71fb      	strb	r3, [r7, #7]
    if( opMode == RF_OPMODE_SLEEP )
 8002a9e:	79fb      	ldrb	r3, [r7, #7]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d103      	bne.n	8002aac <SX1276SetOpMode+0x18>
    {
        SX1276SetAntSwLowPower( true );
 8002aa4:	2001      	movs	r0, #1
 8002aa6:	f7fe fca5 	bl	80013f4 <SX1276SetAntSwLowPower>
 8002aaa:	e00c      	b.n	8002ac6 <SX1276SetOpMode+0x32>
    }
    else
    {
        SX1276SetAntSwLowPower( false );
 8002aac:	2000      	movs	r0, #0
 8002aae:	f7fe fca1 	bl	80013f4 <SX1276SetAntSwLowPower>
        if( opMode == RF_OPMODE_TRANSMITTER )
 8002ab2:	79fb      	ldrb	r3, [r7, #7]
 8002ab4:	2b03      	cmp	r3, #3
 8002ab6:	d103      	bne.n	8002ac0 <SX1276SetOpMode+0x2c>
        {
            SX1276SetAntSw( 1 );
 8002ab8:	2001      	movs	r0, #1
 8002aba:	f000 f921 	bl	8002d00 <SX1276SetAntSw>
 8002abe:	e002      	b.n	8002ac6 <SX1276SetOpMode+0x32>
        }
        else
        {
            SX1276SetAntSw( 0 );
 8002ac0:	2000      	movs	r0, #0
 8002ac2:	f000 f91d 	bl	8002d00 <SX1276SetAntSw>
        }
    }
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8002ac6:	2001      	movs	r0, #1
 8002ac8:	f000 f86a 	bl	8002ba0 <SX1276Read>
 8002acc:	4603      	mov	r3, r0
 8002ace:	b25b      	sxtb	r3, r3
 8002ad0:	f023 0307 	bic.w	r3, r3, #7
 8002ad4:	b25a      	sxtb	r2, r3
 8002ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	b25b      	sxtb	r3, r3
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	2001      	movs	r0, #1
 8002ae4:	f000 f84a 	bl	8002b7c <SX1276Write>
}
 8002ae8:	bf00      	nop
 8002aea:	3708      	adds	r7, #8
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <SX1276SetModem>:

void SX1276SetModem( RadioModems_t modem )
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	4603      	mov	r3, r0
 8002af8:	71fb      	strb	r3, [r7, #7]
    if( SX1276.Settings.Modem == modem )
 8002afa:	4b1f      	ldr	r3, [pc, #124]	; (8002b78 <SX1276SetModem+0x88>)
 8002afc:	785b      	ldrb	r3, [r3, #1]
 8002afe:	79fa      	ldrb	r2, [r7, #7]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d034      	beq.n	8002b6e <SX1276SetModem+0x7e>
    {
        return;
    }

    SX1276.Settings.Modem = modem;
 8002b04:	4a1c      	ldr	r2, [pc, #112]	; (8002b78 <SX1276SetModem+0x88>)
 8002b06:	79fb      	ldrb	r3, [r7, #7]
 8002b08:	7053      	strb	r3, [r2, #1]
    switch( SX1276.Settings.Modem )
 8002b0a:	4b1b      	ldr	r3, [pc, #108]	; (8002b78 <SX1276SetModem+0x88>)
 8002b0c:	785b      	ldrb	r3, [r3, #1]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d016      	beq.n	8002b40 <SX1276SetModem+0x50>
    {
    default:
    case MODEM_FSK:
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8002b12:	2000      	movs	r0, #0
 8002b14:	f7ff ffbe 	bl	8002a94 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 8002b18:	2001      	movs	r0, #1
 8002b1a:	f000 f841 	bl	8002ba0 <SX1276Read>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	4619      	mov	r1, r3
 8002b28:	2001      	movs	r0, #1
 8002b2a:	f000 f827 	bl	8002b7c <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8002b2e:	2100      	movs	r1, #0
 8002b30:	2040      	movs	r0, #64	; 0x40
 8002b32:	f000 f823 	bl	8002b7c <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 8002b36:	2130      	movs	r1, #48	; 0x30
 8002b38:	2041      	movs	r0, #65	; 0x41
 8002b3a:	f000 f81f 	bl	8002b7c <SX1276Write>
        break;
 8002b3e:	e017      	b.n	8002b70 <SX1276SetModem+0x80>
    case MODEM_LORA:
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8002b40:	2000      	movs	r0, #0
 8002b42:	f7ff ffa7 	bl	8002a94 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 8002b46:	2001      	movs	r0, #1
 8002b48:	f000 f82a 	bl	8002ba0 <SX1276Read>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	4619      	mov	r1, r3
 8002b56:	2001      	movs	r0, #1
 8002b58:	f000 f810 	bl	8002b7c <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	2040      	movs	r0, #64	; 0x40
 8002b60:	f000 f80c 	bl	8002b7c <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 8002b64:	2100      	movs	r1, #0
 8002b66:	2041      	movs	r0, #65	; 0x41
 8002b68:	f000 f808 	bl	8002b7c <SX1276Write>
        break;
 8002b6c:	e000      	b.n	8002b70 <SX1276SetModem+0x80>
        return;
 8002b6e:	bf00      	nop
    }
}
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	20000308 	.word	0x20000308

08002b7c <SX1276Write>:

void SX1276Write( uint8_t addr, uint8_t data )
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	4603      	mov	r3, r0
 8002b84:	460a      	mov	r2, r1
 8002b86:	71fb      	strb	r3, [r7, #7]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	71bb      	strb	r3, [r7, #6]
    SX1276WriteBuffer( addr, &data, 1 );
 8002b8c:	1db9      	adds	r1, r7, #6
 8002b8e:	79fb      	ldrb	r3, [r7, #7]
 8002b90:	2201      	movs	r2, #1
 8002b92:	4618      	mov	r0, r3
 8002b94:	f000 f815 	bl	8002bc2 <SX1276WriteBuffer>
}
 8002b98:	bf00      	nop
 8002b9a:	3708      	adds	r7, #8
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <SX1276Read>:

uint8_t SX1276Read( uint8_t addr )
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	71fb      	strb	r3, [r7, #7]
    uint8_t data;
    SX1276ReadBuffer( addr, &data, 1 );
 8002baa:	f107 010f 	add.w	r1, r7, #15
 8002bae:	79fb      	ldrb	r3, [r7, #7]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f000 f82f 	bl	8002c16 <SX1276ReadBuffer>
    return data;
 8002bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <SX1276WriteBuffer>:

void SX1276WriteBuffer( uint8_t addr, uint8_t *buffer, uint8_t size )
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b084      	sub	sp, #16
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	4603      	mov	r3, r0
 8002bca:	6039      	str	r1, [r7, #0]
 8002bcc:	71fb      	strb	r3, [r7, #7]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	71bb      	strb	r3, [r7, #6]
    uint8_t i;
	Sx1276SetNSS(0);
 8002bd2:	2000      	movs	r0, #0
 8002bd4:	f7fe fbf4 	bl	80013c0 <Sx1276SetNSS>
    Sx1276SpiInOut(addr | 0x80);
 8002bd8:	79fb      	ldrb	r3, [r7, #7]
 8002bda:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7fe fbd7 	bl	8001394 <Sx1276SpiInOut>
    for( i = 0; i < size; i++ )
 8002be6:	2300      	movs	r3, #0
 8002be8:	73fb      	strb	r3, [r7, #15]
 8002bea:	e009      	b.n	8002c00 <SX1276WriteBuffer+0x3e>
    {
        Sx1276SpiInOut(buffer[i]);
 8002bec:	7bfb      	ldrb	r3, [r7, #15]
 8002bee:	683a      	ldr	r2, [r7, #0]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7fe fbcd 	bl	8001394 <Sx1276SpiInOut>
    for( i = 0; i < size; i++ )
 8002bfa:	7bfb      	ldrb	r3, [r7, #15]
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	73fb      	strb	r3, [r7, #15]
 8002c00:	7bfa      	ldrb	r2, [r7, #15]
 8002c02:	79bb      	ldrb	r3, [r7, #6]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d3f1      	bcc.n	8002bec <SX1276WriteBuffer+0x2a>
    }
    Sx1276SetNSS(1);
 8002c08:	2001      	movs	r0, #1
 8002c0a:	f7fe fbd9 	bl	80013c0 <Sx1276SetNSS>
}
 8002c0e:	bf00      	nop
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <SX1276ReadBuffer>:

void SX1276ReadBuffer( uint8_t addr, uint8_t *buffer, uint8_t size )
{
 8002c16:	b590      	push	{r4, r7, lr}
 8002c18:	b085      	sub	sp, #20
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	6039      	str	r1, [r7, #0]
 8002c20:	71fb      	strb	r3, [r7, #7]
 8002c22:	4613      	mov	r3, r2
 8002c24:	71bb      	strb	r3, [r7, #6]
    uint8_t i;
    Sx1276SetNSS( 0 );
 8002c26:	2000      	movs	r0, #0
 8002c28:	f7fe fbca 	bl	80013c0 <Sx1276SetNSS>
    Sx1276SpiInOut(addr & 0x7F );
 8002c2c:	79fb      	ldrb	r3, [r7, #7]
 8002c2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7fe fbad 	bl	8001394 <Sx1276SpiInOut>
    for( i = 0; i < size; i++ )
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	73fb      	strb	r3, [r7, #15]
 8002c3e:	e00a      	b.n	8002c56 <SX1276ReadBuffer+0x40>
    {
        buffer[i] = Sx1276SpiInOut(0);
 8002c40:	7bfb      	ldrb	r3, [r7, #15]
 8002c42:	683a      	ldr	r2, [r7, #0]
 8002c44:	18d4      	adds	r4, r2, r3
 8002c46:	2000      	movs	r0, #0
 8002c48:	f7fe fba4 	bl	8001394 <Sx1276SpiInOut>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	7023      	strb	r3, [r4, #0]
    for( i = 0; i < size; i++ )
 8002c50:	7bfb      	ldrb	r3, [r7, #15]
 8002c52:	3301      	adds	r3, #1
 8002c54:	73fb      	strb	r3, [r7, #15]
 8002c56:	7bfa      	ldrb	r2, [r7, #15]
 8002c58:	79bb      	ldrb	r3, [r7, #6]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d3f0      	bcc.n	8002c40 <SX1276ReadBuffer+0x2a>
    }
    Sx1276SetNSS(1);
 8002c5e:	2001      	movs	r0, #1
 8002c60:	f7fe fbae 	bl	80013c0 <Sx1276SetNSS>
}
 8002c64:	bf00      	nop
 8002c66:	3714      	adds	r7, #20
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd90      	pop	{r4, r7, pc}

08002c6c <SX1276WriteFifo>:

void SX1276WriteFifo( uint8_t *buffer, uint8_t size )
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	460b      	mov	r3, r1
 8002c76:	70fb      	strb	r3, [r7, #3]
    SX1276WriteBuffer( 0, buffer, size );
 8002c78:	78fb      	ldrb	r3, [r7, #3]
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	6879      	ldr	r1, [r7, #4]
 8002c7e:	2000      	movs	r0, #0
 8002c80:	f7ff ff9f 	bl	8002bc2 <SX1276WriteBuffer>
}
 8002c84:	bf00      	nop
 8002c86:	3708      	adds	r7, #8
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <SX1276SetMaxPayloadLength>:
{
    SX1276ReadBuffer( 0, buffer, size );
}

void SX1276SetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	4603      	mov	r3, r0
 8002c94:	460a      	mov	r2, r1
 8002c96:	71fb      	strb	r3, [r7, #7]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	71bb      	strb	r3, [r7, #6]
    SX1276SetModem( modem );
 8002c9c:	79fb      	ldrb	r3, [r7, #7]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7ff ff26 	bl	8002af0 <SX1276SetModem>

    switch( modem )
 8002ca4:	79fb      	ldrb	r3, [r7, #7]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d002      	beq.n	8002cb0 <SX1276SetMaxPayloadLength+0x24>
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d00d      	beq.n	8002cca <SX1276SetMaxPayloadLength+0x3e>
        break;
    case MODEM_LORA:
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
        break;
    }
}
 8002cae:	e013      	b.n	8002cd8 <SX1276SetMaxPayloadLength+0x4c>
        if( SX1276.Settings.Fsk.FixLen == false )
 8002cb0:	4b0b      	ldr	r3, [pc, #44]	; (8002ce0 <SX1276SetMaxPayloadLength+0x54>)
 8002cb2:	7f9b      	ldrb	r3, [r3, #30]
 8002cb4:	f083 0301 	eor.w	r3, r3, #1
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00b      	beq.n	8002cd6 <SX1276SetMaxPayloadLength+0x4a>
            SX1276Write( REG_PAYLOADLENGTH, max );
 8002cbe:	79bb      	ldrb	r3, [r7, #6]
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	2032      	movs	r0, #50	; 0x32
 8002cc4:	f7ff ff5a 	bl	8002b7c <SX1276Write>
        break;
 8002cc8:	e005      	b.n	8002cd6 <SX1276SetMaxPayloadLength+0x4a>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 8002cca:	79bb      	ldrb	r3, [r7, #6]
 8002ccc:	4619      	mov	r1, r3
 8002cce:	2023      	movs	r0, #35	; 0x23
 8002cd0:	f7ff ff54 	bl	8002b7c <SX1276Write>
        break;
 8002cd4:	e000      	b.n	8002cd8 <SX1276SetMaxPayloadLength+0x4c>
        break;
 8002cd6:	bf00      	nop
}
 8002cd8:	bf00      	nop
 8002cda:	3708      	adds	r7, #8
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	20000308 	.word	0x20000308

08002ce4 <SX1276AntSwInit>:
        return RF_PACONFIG_PASELECT_RFO;
    }*/
}

void SX1276AntSwInit( void )
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
		/* ���ǵ�RA-01/02ģ��������л�������Ӳ���Զ����ƣ�����Ҫ��������
    GpioInit( &AntSwitchLf, RADIO_ANT_SWITCH_LF, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 1 );
    GpioInit( &AntSwitchHf, RADIO_ANT_SWITCH_HF, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );*/
}
 8002ce8:	bf00      	nop
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr

08002cf2 <SX1276AntSwDeInit>:

void SX1276AntSwDeInit( void )
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	af00      	add	r7, sp, #0
    /* ���ǵ�RA-01/02ģ��������л�������Ӳ���Զ����ƣ�����Ҫ��������
		GpioInit( &AntSwitchLf, RADIO_ANT_SWITCH_LF, PIN_OUTPUT, PIN_OPEN_DRAIN, PIN_NO_PULL, 0 );
    GpioInit( &AntSwitchHf, RADIO_ANT_SWITCH_HF, PIN_OUTPUT, PIN_OPEN_DRAIN, PIN_NO_PULL, 0 );*/
}
 8002cf6:	bf00      	nop
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <SX1276SetAntSw>:

void SX1276SetAntSw( uint8_t rxTx )
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	4603      	mov	r3, r0
 8002d08:	71fb      	strb	r3, [r7, #7]
    else
    {
        GpioWrite( &AntSwitchLf, 1 );
        GpioWrite( &AntSwitchHf, 0 );
    }*/
}
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
	...

08002d18 <Init_Timer>:


static EventInt EventInterrupt[TIM_MAX_HW][MAX_EVENT_ALL_TIM];

void Init_Timer(Tim_CfgTypes *Timer_Cfg)
{
 8002d18:	b590      	push	{r4, r7, lr}
 8002d1a:	b097      	sub	sp, #92	; 0x5c
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
     TIM_TypeDef *hw;
     uint32_t tmpcr1 = 0U;
 8002d20:	2300      	movs	r3, #0
 8002d22:	64fb      	str	r3, [r7, #76]	; 0x4c
    
     Tim_OCCMode_CfgTypes  OCCMode_Cfg_local;
     Tim_ICCMode_CfgTypes  ICCMode_Cfg_local;
     Tim_TRIGMode_CfgTypes TRIGMode_Cfg_local;
    
     for(uint8_t i = 0; i < Timer_Cfg->Number_HW; i++) 
 8002d24:	2300      	movs	r3, #0
 8002d26:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8002d2a:	e2fa      	b.n	8003322 <Init_Timer+0x60a>
     {
         /*get base address of hw*/
         switch(Timer_Cfg->Hw_Config[i].HW)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6859      	ldr	r1, [r3, #4]
 8002d30:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8002d34:	4613      	mov	r3, r2
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	4413      	add	r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	440b      	add	r3, r1
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	3b01      	subs	r3, #1
 8002d42:	2b03      	cmp	r3, #3
 8002d44:	d83e      	bhi.n	8002dc4 <Init_Timer+0xac>
 8002d46:	a201      	add	r2, pc, #4	; (adr r2, 8002d4c <Init_Timer+0x34>)
 8002d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d4c:	08002d5d 	.word	0x08002d5d
 8002d50:	08002d7f 	.word	0x08002d7f
 8002d54:	08002da3 	.word	0x08002da3
 8002d58:	08002dc5 	.word	0x08002dc5
         {
             case TIMER1_HW : 
                 hw = TIM1;
 8002d5c:	4bb6      	ldr	r3, [pc, #728]	; (8003038 <Init_Timer+0x320>)
 8002d5e:	657b      	str	r3, [r7, #84]	; 0x54
                 __HAL_RCC_TIM1_CLK_ENABLE();
 8002d60:	2300      	movs	r3, #0
 8002d62:	613b      	str	r3, [r7, #16]
 8002d64:	4bb5      	ldr	r3, [pc, #724]	; (800303c <Init_Timer+0x324>)
 8002d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d68:	4ab4      	ldr	r2, [pc, #720]	; (800303c <Init_Timer+0x324>)
 8002d6a:	f043 0301 	orr.w	r3, r3, #1
 8002d6e:	6453      	str	r3, [r2, #68]	; 0x44
 8002d70:	4bb2      	ldr	r3, [pc, #712]	; (800303c <Init_Timer+0x324>)
 8002d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	613b      	str	r3, [r7, #16]
 8002d7a:	693b      	ldr	r3, [r7, #16]
                 break;
 8002d7c:	e023      	b.n	8002dc6 <Init_Timer+0xae>
             case TIMER2_HW : 
                 hw = (TIM_TypeDef *)TIM2;
 8002d7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d82:	657b      	str	r3, [r7, #84]	; 0x54
                 __HAL_RCC_TIM2_CLK_ENABLE();
 8002d84:	2300      	movs	r3, #0
 8002d86:	60fb      	str	r3, [r7, #12]
 8002d88:	4bac      	ldr	r3, [pc, #688]	; (800303c <Init_Timer+0x324>)
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8c:	4aab      	ldr	r2, [pc, #684]	; (800303c <Init_Timer+0x324>)
 8002d8e:	f043 0301 	orr.w	r3, r3, #1
 8002d92:	6413      	str	r3, [r2, #64]	; 0x40
 8002d94:	4ba9      	ldr	r3, [pc, #676]	; (800303c <Init_Timer+0x324>)
 8002d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d98:	f003 0301 	and.w	r3, r3, #1
 8002d9c:	60fb      	str	r3, [r7, #12]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
                 break;      
 8002da0:	e011      	b.n	8002dc6 <Init_Timer+0xae>
             case TIMER3_HW : 
                 hw = (TIM_TypeDef *)TIM3;
 8002da2:	4ba7      	ldr	r3, [pc, #668]	; (8003040 <Init_Timer+0x328>)
 8002da4:	657b      	str	r3, [r7, #84]	; 0x54
                 __HAL_RCC_TIM3_CLK_ENABLE();
 8002da6:	2300      	movs	r3, #0
 8002da8:	60bb      	str	r3, [r7, #8]
 8002daa:	4ba4      	ldr	r3, [pc, #656]	; (800303c <Init_Timer+0x324>)
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	4aa3      	ldr	r2, [pc, #652]	; (800303c <Init_Timer+0x324>)
 8002db0:	f043 0302 	orr.w	r3, r3, #2
 8002db4:	6413      	str	r3, [r2, #64]	; 0x40
 8002db6:	4ba1      	ldr	r3, [pc, #644]	; (800303c <Init_Timer+0x324>)
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	60bb      	str	r3, [r7, #8]
 8002dc0:	68bb      	ldr	r3, [r7, #8]
                 break;
 8002dc2:	e000      	b.n	8002dc6 <Init_Timer+0xae>
             case TIMER4_HW : 
                 //hw = (TIM_TypeDef *)TIM4;
                 break;
             default :
                 break;
 8002dc4:	bf00      	nop
         }
         /*cau hinh prescaler/period cho timer*/
         tmpcr1 = hw->CR1;
 8002dc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	64fb      	str	r3, [r7, #76]	; 0x4c
         tmpcr1 &= ~TIM_CR1_ARPE_Msk;
 8002dcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dd2:	64fb      	str	r3, [r7, #76]	; 0x4c
         tmpcr1 |= TIM_CR1_ARPE_Msk;
 8002dd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dda:	64fb      	str	r3, [r7, #76]	; 0x4c
         hw->CR1 = tmpcr1;
 8002ddc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dde:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002de0:	601a      	str	r2, [r3, #0]
         hw->PSC = (uint32_t)Timer_Cfg->Hw_Config[i].Base_Cfg->Prescaler;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6859      	ldr	r1, [r3, #4]
 8002de6:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8002dea:	4613      	mov	r3, r2
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	4413      	add	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	440b      	add	r3, r1
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dfa:	629a      	str	r2, [r3, #40]	; 0x28
         hw->ARR = (uint32_t)Timer_Cfg->Hw_Config[i].Base_Cfg->Period ;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6859      	ldr	r1, [r3, #4]
 8002e00:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8002e04:	4613      	mov	r3, r2
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	4413      	add	r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	440b      	add	r3, r1
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e14:	62da      	str	r2, [r3, #44]	; 0x2c
         hw->EGR = TIM_EGR_UG_Msk;
 8002e16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e18:	2201      	movs	r2, #1
 8002e1a:	615a      	str	r2, [r3, #20]
         /* check bien enable ngat de cau hinh ngat*/
         if(Timer_Cfg->Hw_Config[i].Base_Cfg->Int_Enable == TIME_INT_ENABLE)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6859      	ldr	r1, [r3, #4]
 8002e20:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8002e24:	4613      	mov	r3, r2
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	4413      	add	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	440b      	add	r3, r1
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	7a1b      	ldrb	r3, [r3, #8]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d121      	bne.n	8002e7a <Init_Timer+0x162>
         {
             if((hw==TIM2)||(hw==TIM3))
 8002e36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e3c:	d003      	beq.n	8002e46 <Init_Timer+0x12e>
 8002e3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e40:	4a7f      	ldr	r2, [pc, #508]	; (8003040 <Init_Timer+0x328>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d119      	bne.n	8002e7a <Init_Timer+0x162>
             {
                 tmpdier = hw->DIER;
 8002e46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	64bb      	str	r3, [r7, #72]	; 0x48
                 tmpdier |= TIM_DIER_UIE;
 8002e4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e4e:	f043 0301 	orr.w	r3, r3, #1
 8002e52:	64bb      	str	r3, [r7, #72]	; 0x48
                 hw->DIER = tmpdier;
 8002e54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e58:	60da      	str	r2, [r3, #12]
             	 HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002e5a:	201c      	movs	r0, #28
 8002e5c:	f000 ff21 	bl	8003ca2 <HAL_NVIC_EnableIRQ>
             	 HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002e60:	201d      	movs	r0, #29
 8002e62:	f000 ff1e 	bl	8003ca2 <HAL_NVIC_EnableIRQ>

             	 HAL_NVIC_SetPriority(TIM3_IRQn,5u,0u);
 8002e66:	2200      	movs	r2, #0
 8002e68:	2105      	movs	r1, #5
 8002e6a:	201d      	movs	r0, #29
 8002e6c:	f000 fefd 	bl	8003c6a <HAL_NVIC_SetPriority>
             	 HAL_NVIC_SetPriority(TIM2_IRQn,5u,0u);
 8002e70:	2200      	movs	r2, #0
 8002e72:	2105      	movs	r1, #5
 8002e74:	201c      	movs	r0, #28
 8002e76:	f000 fef8 	bl	8003c6a <HAL_NVIC_SetPriority>
             {
                 
             }
         }
         /* config chanel of hw*/
         for(uint8_t j = 0; j < Timer_Cfg->Hw_Config[i].Number_Chanel; j++)
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 8002e80:	e235      	b.n	80032ee <Init_Timer+0x5d6>
         {
             chanel=Timer_Cfg->Hw_Config[i].Chanel_Config[j].Chanel_ID;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6859      	ldr	r1, [r3, #4]
 8002e86:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	4413      	add	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	440b      	add	r3, r1
 8002e94:	689a      	ldr	r2, [r3, #8]
 8002e96:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8002e9a:	011b      	lsls	r3, r3, #4
 8002e9c:	4413      	add	r3, r2
 8002e9e:	785b      	ldrb	r3, [r3, #1]
 8002ea0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
             switch(Timer_Cfg->Hw_Config[i].Chanel_Config[j].Mode)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6859      	ldr	r1, [r3, #4]
 8002ea8:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8002eac:	4613      	mov	r3, r2
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	4413      	add	r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	440b      	add	r3, r1
 8002eb6:	689a      	ldr	r2, [r3, #8]
 8002eb8:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8002ebc:	011b      	lsls	r3, r3, #4
 8002ebe:	4413      	add	r3, r2
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	2b03      	cmp	r3, #3
 8002ec6:	f200 820c 	bhi.w	80032e2 <Init_Timer+0x5ca>
 8002eca:	a201      	add	r2, pc, #4	; (adr r2, 8002ed0 <Init_Timer+0x1b8>)
 8002ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed0:	08002ee1 	.word	0x08002ee1
 8002ed4:	08003069 	.word	0x08003069
 8002ed8:	0800323f 	.word	0x0800323f
 8002edc:	080032e3 	.word	0x080032e3
             {
                 case OCC_MODE :
                     /*cau hinh thanh ghi cho output compare mode*/
                                     OCCMode_Cfg_local= *(Timer_Cfg->Hw_Config[i].Chanel_Config[j].OCCMode_Cfg);               
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6859      	ldr	r1, [r3, #4]
 8002ee4:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8002ee8:	4613      	mov	r3, r2
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	4413      	add	r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	689a      	ldr	r2, [r3, #8]
 8002ef4:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8002ef8:	011b      	lsls	r3, r3, #4
 8002efa:	4413      	add	r3, r2
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8002f02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                     hw->CCER &= ~(TIM_CCER_CC1E<<((chanel-1)*4));
 8002f08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f0a:	6a1a      	ldr	r2, [r3, #32]
 8002f0c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002f10:	3b01      	subs	r3, #1
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	2101      	movs	r1, #1
 8002f16:	fa01 f303 	lsl.w	r3, r1, r3
 8002f1a:	43db      	mvns	r3, r3
 8002f1c:	401a      	ands	r2, r3
 8002f1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f20:	621a      	str	r2, [r3, #32]
                     tmpccer = hw->CCER;
 8002f22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f24:	6a1b      	ldr	r3, [r3, #32]
 8002f26:	63fb      	str	r3, [r7, #60]	; 0x3c
                     /*cau hinh mode/compare_value/OCPolarity */
                     if(chanel<3)
 8002f28:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d82d      	bhi.n	8002f8c <Init_Timer+0x274>
                     {
                         tmpccmrx = hw->CCMR1;
 8002f30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	643b      	str	r3, [r7, #64]	; 0x40
                         tmpccmrx &= ~(TIM_CCMR1_OC1M<<((chanel-1)*8));
 8002f36:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	00db      	lsls	r3, r3, #3
 8002f3e:	2270      	movs	r2, #112	; 0x70
 8002f40:	fa02 f303 	lsl.w	r3, r2, r3
 8002f44:	43db      	mvns	r3, r3
 8002f46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002f48:	4013      	ands	r3, r2
 8002f4a:	643b      	str	r3, [r7, #64]	; 0x40
                         tmpccmrx &= ~(TIM_CCMR1_CC1S<<((chanel-1)*8));
 8002f4c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002f50:	3b01      	subs	r3, #1
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	2203      	movs	r2, #3
 8002f56:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5a:	43db      	mvns	r3, r3
 8002f5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002f5e:	4013      	ands	r3, r2
 8002f60:	643b      	str	r3, [r7, #64]	; 0x40
                         tmpccmrx |= (OCCMode_Cfg_local.OCMode<<((chanel-1)*8))|(TIM_CCMR1_OC1PE<<((chanel-1)*8));
 8002f62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f64:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	409a      	lsls	r2, r3
 8002f6e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002f72:	3b01      	subs	r3, #1
 8002f74:	00db      	lsls	r3, r3, #3
 8002f76:	2108      	movs	r1, #8
 8002f78:	fa01 f303 	lsl.w	r3, r1, r3
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002f80:	4313      	orrs	r3, r2
 8002f82:	643b      	str	r3, [r7, #64]	; 0x40
                         hw->CCMR1 = tmpccmrx;
 8002f84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002f88:	619a      	str	r2, [r3, #24]
 8002f8a:	e02c      	b.n	8002fe6 <Init_Timer+0x2ce>
                     }   
                     else
                     {   
                         tmpccmrx = hw->CCMR2;
 8002f8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f8e:	69db      	ldr	r3, [r3, #28]
 8002f90:	643b      	str	r3, [r7, #64]	; 0x40
                         tmpccmrx &= ~(TIM_CCMR1_OC1M<<((chanel-3)*8));
 8002f92:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002f96:	3b03      	subs	r3, #3
 8002f98:	00db      	lsls	r3, r3, #3
 8002f9a:	2270      	movs	r2, #112	; 0x70
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	43db      	mvns	r3, r3
 8002fa2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	643b      	str	r3, [r7, #64]	; 0x40
                         tmpccmrx &= ~(TIM_CCMR1_CC1S<<((chanel-3)*8));
 8002fa8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002fac:	3b03      	subs	r3, #3
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	2203      	movs	r2, #3
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	43db      	mvns	r3, r3
 8002fb8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002fba:	4013      	ands	r3, r2
 8002fbc:	643b      	str	r3, [r7, #64]	; 0x40
                         tmpccmrx |= (OCCMode_Cfg_local.OCMode<<((chanel-3)*8))|(TIM_CCMR1_OC1PE<<((chanel-3)*8));
 8002fbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fc0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002fc4:	3b03      	subs	r3, #3
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	409a      	lsls	r2, r3
 8002fca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002fce:	3b03      	subs	r3, #3
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	2108      	movs	r1, #8
 8002fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	643b      	str	r3, [r7, #64]	; 0x40
                         hw->CCMR2 = tmpccmrx;
 8002fe0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fe2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002fe4:	61da      	str	r2, [r3, #28]
                     }
                     tmpccer &= ~(TIM_CCER_CC1P<<((chanel-1)*4));
 8002fe6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002fea:	3b01      	subs	r3, #1
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	2202      	movs	r2, #2
 8002ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
                     tmpccer |= (OCCMode_Cfg_local.OCPolarity<<((chanel-1)*4));
 8002ffc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ffe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003002:	3b01      	subs	r3, #1
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	fa02 f303 	lsl.w	r3, r2, r3
 800300a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800300c:	4313      	orrs	r3, r2
 800300e:	63fb      	str	r3, [r7, #60]	; 0x3c
                     hw->CCER = tmpccer;
 8003010:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003012:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003014:	621a      	str	r2, [r3, #32]
                     switch(chanel)
 8003016:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800301a:	3b01      	subs	r3, #1
 800301c:	2b03      	cmp	r3, #3
 800301e:	d821      	bhi.n	8003064 <Init_Timer+0x34c>
 8003020:	a201      	add	r2, pc, #4	; (adr r2, 8003028 <Init_Timer+0x310>)
 8003022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003026:	bf00      	nop
 8003028:	08003045 	.word	0x08003045
 800302c:	0800304d 	.word	0x0800304d
 8003030:	08003055 	.word	0x08003055
 8003034:	0800305d 	.word	0x0800305d
 8003038:	40010000 	.word	0x40010000
 800303c:	40023800 	.word	0x40023800
 8003040:	40000400 	.word	0x40000400
                     {
                         case CHANNEL1_HW : hw->CCR1 = OCCMode_Cfg_local.Compare_value;
 8003044:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003046:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003048:	635a      	str	r2, [r3, #52]	; 0x34
                         break;
 800304a:	e00c      	b.n	8003066 <Init_Timer+0x34e>
                         case CHANNEL2_HW : hw->CCR2 = OCCMode_Cfg_local.Compare_value;
 800304c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800304e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003050:	639a      	str	r2, [r3, #56]	; 0x38
                         break;      
 8003052:	e008      	b.n	8003066 <Init_Timer+0x34e>
                         case CHANNEL3_HW : hw->CCR3 = OCCMode_Cfg_local.Compare_value;
 8003054:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003056:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003058:	63da      	str	r2, [r3, #60]	; 0x3c
                         break;
 800305a:	e004      	b.n	8003066 <Init_Timer+0x34e>
                         case CHANNEL4_HW : hw->CCR4 = OCCMode_Cfg_local.Compare_value;
 800305c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800305e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003060:	641a      	str	r2, [r3, #64]	; 0x40
                         break;
 8003062:	e000      	b.n	8003066 <Init_Timer+0x34e>
                         default :
                         break;
 8003064:	bf00      	nop
                     }
                     break;
 8003066:	e13d      	b.n	80032e4 <Init_Timer+0x5cc>
                 case ICC_MODE :
                     /*cau hinh thanh ghi cho input capture mode*/
                     ICCMode_Cfg_local= *(Timer_Cfg->Hw_Config[i].Chanel_Config[j].ICCMode_Cfg);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6859      	ldr	r1, [r3, #4]
 800306c:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8003070:	4613      	mov	r3, r2
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	4413      	add	r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	440b      	add	r3, r1
 800307a:	689a      	ldr	r2, [r3, #8]
 800307c:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8003080:	011b      	lsls	r3, r3, #4
 8003082:	4413      	add	r3, r2
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f107 041c 	add.w	r4, r7, #28
 800308a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800308c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                     hw->CCER &= ~(TIM_CCER_CC1E<<((chanel-1)*4));
 8003090:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003092:	6a1a      	ldr	r2, [r3, #32]
 8003094:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003098:	3b01      	subs	r3, #1
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	2101      	movs	r1, #1
 800309e:	fa01 f303 	lsl.w	r3, r1, r3
 80030a2:	43db      	mvns	r3, r3
 80030a4:	401a      	ands	r2, r3
 80030a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030a8:	621a      	str	r2, [r3, #32]
                     /*Reset counter value*/
                     switch(chanel)
 80030aa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80030ae:	3b01      	subs	r3, #1
 80030b0:	2b03      	cmp	r3, #3
 80030b2:	d81b      	bhi.n	80030ec <Init_Timer+0x3d4>
 80030b4:	a201      	add	r2, pc, #4	; (adr r2, 80030bc <Init_Timer+0x3a4>)
 80030b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ba:	bf00      	nop
 80030bc:	080030cd 	.word	0x080030cd
 80030c0:	080030d5 	.word	0x080030d5
 80030c4:	080030dd 	.word	0x080030dd
 80030c8:	080030e5 	.word	0x080030e5
                     {
                         case CHANNEL1_HW : hw->CCR1 = 0;
 80030cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030ce:	2200      	movs	r2, #0
 80030d0:	635a      	str	r2, [r3, #52]	; 0x34
                         break;
 80030d2:	e00c      	b.n	80030ee <Init_Timer+0x3d6>
                         case CHANNEL2_HW : hw->CCR2 = 0;
 80030d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030d6:	2200      	movs	r2, #0
 80030d8:	639a      	str	r2, [r3, #56]	; 0x38
                         break;      
 80030da:	e008      	b.n	80030ee <Init_Timer+0x3d6>
                         case CHANNEL3_HW : hw->CCR3 = 0;
 80030dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030de:	2200      	movs	r2, #0
 80030e0:	63da      	str	r2, [r3, #60]	; 0x3c
                         break;
 80030e2:	e004      	b.n	80030ee <Init_Timer+0x3d6>
                         case CHANNEL4_HW : hw->CCR4 = 0;
 80030e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030e6:	2200      	movs	r2, #0
 80030e8:	641a      	str	r2, [r3, #64]	; 0x40
                         break;
 80030ea:	e000      	b.n	80030ee <Init_Timer+0x3d6>
                         default :
                         break;
 80030ec:	bf00      	nop
                     }
                     /*cau hinh filter/ICPrescaler/ICPolarity source input*/
                     tmpccmrx = hw->CCMR1;
 80030ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	643b      	str	r3, [r7, #64]	; 0x40
                     tmpccer = hw->CCER;
 80030f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	63fb      	str	r3, [r7, #60]	; 0x3c
                     if(chanel<3)
 80030fa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d842      	bhi.n	8003188 <Init_Timer+0x470>
                     {
                         tmpccmrx = hw->CCMR1;
 8003102:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	643b      	str	r3, [r7, #64]	; 0x40
                         tmpccmrx &= ~(TIM_CCMR1_IC1F<<((chanel-1)*8));
 8003108:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800310c:	3b01      	subs	r3, #1
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	22f0      	movs	r2, #240	; 0xf0
 8003112:	fa02 f303 	lsl.w	r3, r2, r3
 8003116:	43db      	mvns	r3, r3
 8003118:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800311a:	4013      	ands	r3, r2
 800311c:	643b      	str	r3, [r7, #64]	; 0x40
                         tmpccmrx &= ~(TIM_CCMR1_IC1PSC<<((chanel-1)*8));
 800311e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003122:	3b01      	subs	r3, #1
 8003124:	00db      	lsls	r3, r3, #3
 8003126:	220c      	movs	r2, #12
 8003128:	fa02 f303 	lsl.w	r3, r2, r3
 800312c:	43db      	mvns	r3, r3
 800312e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003130:	4013      	ands	r3, r2
 8003132:	643b      	str	r3, [r7, #64]	; 0x40
                         tmpccmrx |= (ICCMode_Cfg_local.ICFilter<<((chanel-1)*8))|(ICCMode_Cfg_local.ICPrescaler<<((chanel-1)*8));
 8003134:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003136:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800313a:	3b01      	subs	r3, #1
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	409a      	lsls	r2, r3
 8003140:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003142:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003146:	3b01      	subs	r3, #1
 8003148:	00db      	lsls	r3, r3, #3
 800314a:	fa01 f303 	lsl.w	r3, r1, r3
 800314e:	4313      	orrs	r3, r2
 8003150:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003152:	4313      	orrs	r3, r2
 8003154:	643b      	str	r3, [r7, #64]	; 0x40
                         tmpccmrx &= ~(TIM_CCMR1_CC1S<<((chanel-1)*8));
 8003156:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800315a:	3b01      	subs	r3, #1
 800315c:	00db      	lsls	r3, r3, #3
 800315e:	2203      	movs	r2, #3
 8003160:	fa02 f303 	lsl.w	r3, r2, r3
 8003164:	43db      	mvns	r3, r3
 8003166:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003168:	4013      	ands	r3, r2
 800316a:	643b      	str	r3, [r7, #64]	; 0x40
                         tmpccmrx |= ICCMode_Cfg_local.ICSelection<<((chanel-3)*8);
 800316c:	6a3a      	ldr	r2, [r7, #32]
 800316e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003172:	3b03      	subs	r3, #3
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	fa02 f303 	lsl.w	r3, r2, r3
 800317a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800317c:	4313      	orrs	r3, r2
 800317e:	643b      	str	r3, [r7, #64]	; 0x40
                         hw->CCMR1 = tmpccmrx;
 8003180:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003182:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003184:	619a      	str	r2, [r3, #24]
 8003186:	e041      	b.n	800320c <Init_Timer+0x4f4>
                     }   
                     else
                     {   
                         tmpccmrx = hw->CCMR2;
 8003188:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800318a:	69db      	ldr	r3, [r3, #28]
 800318c:	643b      	str	r3, [r7, #64]	; 0x40
                         tmpccmrx &= ~(TIM_CCMR1_IC1F<<((chanel-3)*8));
 800318e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003192:	3b03      	subs	r3, #3
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	22f0      	movs	r2, #240	; 0xf0
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	43db      	mvns	r3, r3
 800319e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80031a0:	4013      	ands	r3, r2
 80031a2:	643b      	str	r3, [r7, #64]	; 0x40
                         tmpccmrx &= ~(TIM_CCMR1_IC1PSC<<((chanel-3)*8));
 80031a4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80031a8:	3b03      	subs	r3, #3
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	220c      	movs	r2, #12
 80031ae:	fa02 f303 	lsl.w	r3, r2, r3
 80031b2:	43db      	mvns	r3, r3
 80031b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80031b6:	4013      	ands	r3, r2
 80031b8:	643b      	str	r3, [r7, #64]	; 0x40
                         tmpccmrx |= (ICCMode_Cfg_local.ICFilter<<((chanel-3)*8))|(ICCMode_Cfg_local.ICPrescaler<<((chanel-3)*8));
 80031ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031bc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80031c0:	3b03      	subs	r3, #3
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	409a      	lsls	r2, r3
 80031c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031c8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80031cc:	3b03      	subs	r3, #3
 80031ce:	00db      	lsls	r3, r3, #3
 80031d0:	fa01 f303 	lsl.w	r3, r1, r3
 80031d4:	4313      	orrs	r3, r2
 80031d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80031d8:	4313      	orrs	r3, r2
 80031da:	643b      	str	r3, [r7, #64]	; 0x40
                         tmpccmrx &= ~(TIM_CCMR1_CC1S<<((chanel-3)*8));
 80031dc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80031e0:	3b03      	subs	r3, #3
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	2203      	movs	r2, #3
 80031e6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ea:	43db      	mvns	r3, r3
 80031ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80031ee:	4013      	ands	r3, r2
 80031f0:	643b      	str	r3, [r7, #64]	; 0x40
                         tmpccmrx |= ICCMode_Cfg_local.ICSelection<<((chanel-3)*8);
 80031f2:	6a3a      	ldr	r2, [r7, #32]
 80031f4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80031f8:	3b03      	subs	r3, #3
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003202:	4313      	orrs	r3, r2
 8003204:	643b      	str	r3, [r7, #64]	; 0x40
                         hw->CCMR2 = tmpccmrx;
 8003206:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003208:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800320a:	61da      	str	r2, [r3, #28]
                     }
                     tmpccer  &= ~(TIM_CCER_CC1P<<((chanel-1)*4));
 800320c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003210:	3b01      	subs	r3, #1
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	2202      	movs	r2, #2
 8003216:	fa02 f303 	lsl.w	r3, r2, r3
 800321a:	43db      	mvns	r3, r3
 800321c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800321e:	4013      	ands	r3, r2
 8003220:	63fb      	str	r3, [r7, #60]	; 0x3c
                     tmpccer  |= (ICCMode_Cfg_local.ICPolarity<<((chanel-1)*4));
 8003222:	69fa      	ldr	r2, [r7, #28]
 8003224:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003228:	3b01      	subs	r3, #1
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003232:	4313      	orrs	r3, r2
 8003234:	63fb      	str	r3, [r7, #60]	; 0x3c
                     hw->CCER  = tmpccer;
 8003236:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003238:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800323a:	621a      	str	r2, [r3, #32]
                     break;
 800323c:	e052      	b.n	80032e4 <Init_Timer+0x5cc>
                 case TRIGER_MODE :
                     /*cau hinh thanh ghi cho trigger  mode*/
                     /*get config*/
                     TRIGMode_Cfg_local= *(Timer_Cfg->Hw_Config[i].Chanel_Config[j].TRIGMode_Cfg);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6859      	ldr	r1, [r3, #4]
 8003242:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8003246:	4613      	mov	r3, r2
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	4413      	add	r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	440b      	add	r3, r1
 8003250:	689a      	ldr	r2, [r3, #8]
 8003252:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8003256:	011b      	lsls	r3, r3, #4
 8003258:	4413      	add	r3, r2
 800325a:	68da      	ldr	r2, [r3, #12]
 800325c:	f107 0314 	add.w	r3, r7, #20
 8003260:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003264:	e883 0003 	stmia.w	r3, {r0, r1}
                     /*cau hinh compare_value */
                     switch(chanel)
 8003268:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800326c:	3b01      	subs	r3, #1
 800326e:	2b03      	cmp	r3, #3
 8003270:	d81a      	bhi.n	80032a8 <Init_Timer+0x590>
 8003272:	a201      	add	r2, pc, #4	; (adr r2, 8003278 <Init_Timer+0x560>)
 8003274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003278:	08003289 	.word	0x08003289
 800327c:	08003291 	.word	0x08003291
 8003280:	08003299 	.word	0x08003299
 8003284:	080032a1 	.word	0x080032a1
                     {
                         case CHANNEL1_HW : hw->CCR1 = TRIGMode_Cfg_local.Compare_value;
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800328c:	635a      	str	r2, [r3, #52]	; 0x34
                         break;
 800328e:	e00c      	b.n	80032aa <Init_Timer+0x592>
                         case CHANNEL2_HW : hw->CCR2 = TRIGMode_Cfg_local.Compare_value;
 8003290:	697a      	ldr	r2, [r7, #20]
 8003292:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003294:	639a      	str	r2, [r3, #56]	; 0x38
                         break;      
 8003296:	e008      	b.n	80032aa <Init_Timer+0x592>
                         case CHANNEL3_HW : hw->CCR3 = TRIGMode_Cfg_local.Compare_value;
 8003298:	697a      	ldr	r2, [r7, #20]
 800329a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800329c:	63da      	str	r2, [r3, #60]	; 0x3c
                         break;
 800329e:	e004      	b.n	80032aa <Init_Timer+0x592>
                         case CHANNEL4_HW : hw->CCR4 = TRIGMode_Cfg_local.Compare_value;
 80032a0:	697a      	ldr	r2, [r7, #20]
 80032a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032a4:	641a      	str	r2, [r3, #64]	; 0x40
                         break;
 80032a6:	e000      	b.n	80032aa <Init_Timer+0x592>
                         default :
                         break;
 80032a8:	bf00      	nop
                     }
                     /*Enable source trigger dma*/
                     tmpdier = hw->DIER;
 80032aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	64bb      	str	r3, [r7, #72]	; 0x48
                     tmpdier &= ~(TIM_DIER_CC1DE<<(chanel+8));
 80032b0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80032b4:	3308      	adds	r3, #8
 80032b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032ba:	fa02 f303 	lsl.w	r3, r2, r3
 80032be:	43db      	mvns	r3, r3
 80032c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032c2:	4013      	ands	r3, r2
 80032c4:	64bb      	str	r3, [r7, #72]	; 0x48
                     tmpdier |= TIM_DIER_CC1DE<<(chanel+8);
 80032c6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80032ca:	3308      	adds	r3, #8
 80032cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032d6:	4313      	orrs	r3, r2
 80032d8:	64bb      	str	r3, [r7, #72]	; 0x48
                     hw->DIER =tmpdier;
 80032da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032de:	60da      	str	r2, [r3, #12]
                     break;
 80032e0:	e000      	b.n	80032e4 <Init_Timer+0x5cc>
                 case DEFAULT_MODE : /*Do nothing*/                                     
                     break;
                 default :
                     break;
 80032e2:	bf00      	nop
         for(uint8_t j = 0; j < Timer_Cfg->Hw_Config[i].Number_Chanel; j++)
 80032e4:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 80032e8:	3301      	adds	r3, #1
 80032ea:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6859      	ldr	r1, [r3, #4]
 80032f2:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 80032f6:	4613      	mov	r3, r2
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	4413      	add	r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	440b      	add	r3, r1
 8003300:	785b      	ldrb	r3, [r3, #1]
 8003302:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 8003306:	429a      	cmp	r2, r3
 8003308:	f4ff adbb 	bcc.w	8002e82 <Init_Timer+0x16a>
             }                
         }
         /*Enable timer*/
         hw->CR1|=TIM_CR1_CEN;
 800330c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f043 0201 	orr.w	r2, r3, #1
 8003314:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003316:	601a      	str	r2, [r3, #0]
     for(uint8_t i = 0; i < Timer_Cfg->Number_HW; i++) 
 8003318:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800331c:	3301      	adds	r3, #1
 800331e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 800332a:	429a      	cmp	r2, r3
 800332c:	f4ff acfe 	bcc.w	8002d2c <Init_Timer+0x14>
     }
}
 8003330:	bf00      	nop
 8003332:	bf00      	nop
 8003334:	375c      	adds	r7, #92	; 0x5c
 8003336:	46bd      	mov	sp, r7
 8003338:	bd90      	pop	{r4, r7, pc}
 800333a:	bf00      	nop

0800333c <TIM_CMD>:
    hw->CCER |= (TIM_CCER_CC1E<<((chanel-1)*4));
}


void TIM_CMD(TIM_TypeDef *hw, uint8_t state)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	460b      	mov	r3, r1
 8003346:	70fb      	strb	r3, [r7, #3]
	if(state == ENABLE)
 8003348:	78fb      	ldrb	r3, [r7, #3]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d106      	bne.n	800335c <TIM_CMD+0x20>
	{
		hw->CR1 |= TIM_CR1_CEN;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f043 0201 	orr.w	r2, r3, #1
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	601a      	str	r2, [r3, #0]
	}
	else
	{
		hw->CR1 &= ~TIM_CR1_CEN;
	}
}
 800335a:	e005      	b.n	8003368 <TIM_CMD+0x2c>
		hw->CR1 &= ~TIM_CR1_CEN;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f023 0201 	bic.w	r2, r3, #1
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	601a      	str	r2, [r3, #0]
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <Tim_AddEvent>:



Std_ReturnType Tim_AddEvent(uint8_t tim_instance,void (*fun)())
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	4603      	mov	r3, r0
 800337c:	6039      	str	r1, [r7, #0]
 800337e:	71fb      	strb	r3, [r7, #7]
    static uint8_t count_event[TIM_MAX_HW] ;
    /*Add callback func*/
    EventInterrupt[tim_instance][count_event[tim_instance]] = fun;
 8003380:	79fa      	ldrb	r2, [r7, #7]
 8003382:	79fb      	ldrb	r3, [r7, #7]
 8003384:	4913      	ldr	r1, [pc, #76]	; (80033d4 <Tim_AddEvent+0x60>)
 8003386:	5ccb      	ldrb	r3, [r1, r3]
 8003388:	4618      	mov	r0, r3
 800338a:	4913      	ldr	r1, [pc, #76]	; (80033d8 <Tim_AddEvent+0x64>)
 800338c:	4613      	mov	r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	4413      	add	r3, r2
 8003392:	4403      	add	r3, r0
 8003394:	683a      	ldr	r2, [r7, #0]
 8003396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      if(++ count_event[tim_instance] >= Max_Event_Time[tim_instance])
 800339a:	79fb      	ldrb	r3, [r7, #7]
 800339c:	4a0d      	ldr	r2, [pc, #52]	; (80033d4 <Tim_AddEvent+0x60>)
 800339e:	5cd2      	ldrb	r2, [r2, r3]
 80033a0:	3201      	adds	r2, #1
 80033a2:	b2d1      	uxtb	r1, r2
 80033a4:	4a0b      	ldr	r2, [pc, #44]	; (80033d4 <Tim_AddEvent+0x60>)
 80033a6:	54d1      	strb	r1, [r2, r3]
 80033a8:	4a0a      	ldr	r2, [pc, #40]	; (80033d4 <Tim_AddEvent+0x60>)
 80033aa:	5cd2      	ldrb	r2, [r2, r3]
 80033ac:	79fb      	ldrb	r3, [r7, #7]
 80033ae:	490b      	ldr	r1, [pc, #44]	; (80033dc <Tim_AddEvent+0x68>)
 80033b0:	5ccb      	ldrb	r3, [r1, r3]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d307      	bcc.n	80033c6 <Tim_AddEvent+0x52>
        {
            count_event[tim_instance] = Max_Event_Time[tim_instance];
 80033b6:	79fa      	ldrb	r2, [r7, #7]
 80033b8:	79fb      	ldrb	r3, [r7, #7]
 80033ba:	4908      	ldr	r1, [pc, #32]	; (80033dc <Tim_AddEvent+0x68>)
 80033bc:	5c89      	ldrb	r1, [r1, r2]
 80033be:	4a05      	ldr	r2, [pc, #20]	; (80033d4 <Tim_AddEvent+0x60>)
 80033c0:	54d1      	strb	r1, [r2, r3]
            return E_NOT_OK;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e000      	b.n	80033c8 <Tim_AddEvent+0x54>
        }
        return E_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	200001f4 	.word	0x200001f4
 80033d8:	20000190 	.word	0x20000190
 80033dc:	08005348 	.word	0x08005348

080033e0 <TIM2_IRQHandler>:
        EventInterrupt[TIMER_HW][i] = NULL;
    }
}

void TIM2_IRQHandler()
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
    /* Run call back func */
    for(uint8_t i = 0; i< Max_Event_Time[TIMER2_HW]; i++)
 80033e6:	2300      	movs	r3, #0
 80033e8:	71fb      	strb	r3, [r7, #7]
 80033ea:	e00f      	b.n	800340c <TIM2_IRQHandler+0x2c>
    {
        if(EventInterrupt[TIMER2_HW][i]!=NULL)
 80033ec:	79fb      	ldrb	r3, [r7, #7]
 80033ee:	4a10      	ldr	r2, [pc, #64]	; (8003430 <TIM2_IRQHandler+0x50>)
 80033f0:	330a      	adds	r3, #10
 80033f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d005      	beq.n	8003406 <TIM2_IRQHandler+0x26>
        EventInterrupt[TIMER2_HW][i]();
 80033fa:	79fb      	ldrb	r3, [r7, #7]
 80033fc:	4a0c      	ldr	r2, [pc, #48]	; (8003430 <TIM2_IRQHandler+0x50>)
 80033fe:	330a      	adds	r3, #10
 8003400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003404:	4798      	blx	r3
    for(uint8_t i = 0; i< Max_Event_Time[TIMER2_HW]; i++)
 8003406:	79fb      	ldrb	r3, [r7, #7]
 8003408:	3301      	adds	r3, #1
 800340a:	71fb      	strb	r3, [r7, #7]
 800340c:	4b09      	ldr	r3, [pc, #36]	; (8003434 <TIM2_IRQHandler+0x54>)
 800340e:	789b      	ldrb	r3, [r3, #2]
 8003410:	79fa      	ldrb	r2, [r7, #7]
 8003412:	429a      	cmp	r2, r3
 8003414:	d3ea      	bcc.n	80033ec <TIM2_IRQHandler+0xc>
    }
    TIM2->SR&=(~TIM_SR_UIF);
 8003416:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003420:	f023 0301 	bic.w	r3, r3, #1
 8003424:	6113      	str	r3, [r2, #16]

}
 8003426:	bf00      	nop
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	20000190 	.word	0x20000190
 8003434:	08005348 	.word	0x08005348

08003438 <TIM3_IRQHandler>:

void TIM3_IRQHandler()
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
    /* Run call back func */
    for(uint8_t i = 0; i< Max_Event_Time[TIMER3_HW]; i++)
 800343e:	2300      	movs	r3, #0
 8003440:	71fb      	strb	r3, [r7, #7]
 8003442:	e00f      	b.n	8003464 <TIM3_IRQHandler+0x2c>
    {
        if(EventInterrupt[TIMER3_HW][i]!=NULL)
 8003444:	79fb      	ldrb	r3, [r7, #7]
 8003446:	4a0f      	ldr	r2, [pc, #60]	; (8003484 <TIM3_IRQHandler+0x4c>)
 8003448:	330f      	adds	r3, #15
 800344a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d005      	beq.n	800345e <TIM3_IRQHandler+0x26>
        EventInterrupt[TIMER3_HW][i]();
 8003452:	79fb      	ldrb	r3, [r7, #7]
 8003454:	4a0b      	ldr	r2, [pc, #44]	; (8003484 <TIM3_IRQHandler+0x4c>)
 8003456:	330f      	adds	r3, #15
 8003458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800345c:	4798      	blx	r3
    for(uint8_t i = 0; i< Max_Event_Time[TIMER3_HW]; i++)
 800345e:	79fb      	ldrb	r3, [r7, #7]
 8003460:	3301      	adds	r3, #1
 8003462:	71fb      	strb	r3, [r7, #7]
 8003464:	4b08      	ldr	r3, [pc, #32]	; (8003488 <TIM3_IRQHandler+0x50>)
 8003466:	78db      	ldrb	r3, [r3, #3]
 8003468:	79fa      	ldrb	r2, [r7, #7]
 800346a:	429a      	cmp	r2, r3
 800346c:	d3ea      	bcc.n	8003444 <TIM3_IRQHandler+0xc>
    }
    TIM3->SR&=(~TIM_SR_UIF);
 800346e:	4b07      	ldr	r3, [pc, #28]	; (800348c <TIM3_IRQHandler+0x54>)
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	4a06      	ldr	r2, [pc, #24]	; (800348c <TIM3_IRQHandler+0x54>)
 8003474:	f023 0301 	bic.w	r3, r3, #1
 8003478:	6113      	str	r3, [r2, #16]
}
 800347a:	bf00      	nop
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	20000190 	.word	0x20000190
 8003488:	08005348 	.word	0x08005348
 800348c:	40000400 	.word	0x40000400

08003490 <TIM4_IRQHandler>:

void TIM4_IRQHandler()
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
    /* Run call back func */
    for(uint8_t i = 0; i < Max_Event_Time[TIMER4_HW]; i++)
 8003496:	2300      	movs	r3, #0
 8003498:	71fb      	strb	r3, [r7, #7]
 800349a:	e00f      	b.n	80034bc <TIM4_IRQHandler+0x2c>
    {
        if(EventInterrupt[TIMER4_HW][i]!=NULL)
 800349c:	79fb      	ldrb	r3, [r7, #7]
 800349e:	4a0c      	ldr	r2, [pc, #48]	; (80034d0 <TIM4_IRQHandler+0x40>)
 80034a0:	3314      	adds	r3, #20
 80034a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d005      	beq.n	80034b6 <TIM4_IRQHandler+0x26>
        EventInterrupt[TIMER4_HW][i]();
 80034aa:	79fb      	ldrb	r3, [r7, #7]
 80034ac:	4a08      	ldr	r2, [pc, #32]	; (80034d0 <TIM4_IRQHandler+0x40>)
 80034ae:	3314      	adds	r3, #20
 80034b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034b4:	4798      	blx	r3
    for(uint8_t i = 0; i < Max_Event_Time[TIMER4_HW]; i++)
 80034b6:	79fb      	ldrb	r3, [r7, #7]
 80034b8:	3301      	adds	r3, #1
 80034ba:	71fb      	strb	r3, [r7, #7]
 80034bc:	4b05      	ldr	r3, [pc, #20]	; (80034d4 <TIM4_IRQHandler+0x44>)
 80034be:	791b      	ldrb	r3, [r3, #4]
 80034c0:	79fa      	ldrb	r2, [r7, #7]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d3ea      	bcc.n	800349c <TIM4_IRQHandler+0xc>
    }
   // TIM4->SR&=(~TIM_SR_UIF);
}
 80034c6:	bf00      	nop
 80034c8:	bf00      	nop
 80034ca:	3708      	adds	r7, #8
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	20000190 	.word	0x20000190
 80034d4:	08005348 	.word	0x08005348

080034d8 <User_Ip_Uart_GetChar>:
	HAL_NVIC_SetPriority(User_Uart_IRQn[u8ChannelId],USER_IP_UART_PRIORITY,0u);

}

static inline uint8_t User_Ip_Uart_GetChar(User_Ip_Uart_Type * Uart_channel)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
	return (Uart_channel->DR);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	b2db      	uxtb	r3, r3
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr

080034f2 <User_Ip_Uart_PutChar>:

static inline void User_Ip_Uart_PutChar(User_Ip_Uart_Type *Uart_channel, uint8_t u8Data)
{
 80034f2:	b480      	push	{r7}
 80034f4:	b083      	sub	sp, #12
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
 80034fa:	460b      	mov	r3, r1
 80034fc:	70fb      	strb	r3, [r7, #3]
	Uart_channel->DR = u8Data;
 80034fe:	78fa      	ldrb	r2, [r7, #3]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	605a      	str	r2, [r3, #4]
}
 8003504:	bf00      	nop
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <User_Ip_Uart_StopAsyncTransmit>:
{
	Uart_channel->CR1 |= USER_IP_UART_CR1_TXEIE_MASK;
}

static inline void User_Ip_Uart_StopAsyncTransmit(User_Ip_Uart_Type *Uart_channel)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
	Uart_channel->CR1 &= ~USER_IP_UART_CR1_TXEIE_MASK;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	60da      	str	r2, [r3, #12]
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <User_Ip_Uart_GetBuffer>:

static User_Ip_Uart_RingBuffer_t *User_Ip_Uart_GetBuffer(uint8_t u8ChannelId)
{
 8003530:	b480      	push	{r7}
 8003532:	b085      	sub	sp, #20
 8003534:	af00      	add	r7, sp, #0
 8003536:	4603      	mov	r3, r0
 8003538:	71fb      	strb	r3, [r7, #7]
	User_Ip_Uart_RingBuffer_t *BufferChannel;

	if(u8ChannelId == USER_IP_UART_CHANNELID_4)
 800353a:	79fb      	ldrb	r3, [r7, #7]
 800353c:	2b04      	cmp	r3, #4
 800353e:	d102      	bne.n	8003546 <User_Ip_Uart_GetBuffer+0x16>
	{
		BufferChannel = &Buffer_Uart4Channel;
 8003540:	4b0e      	ldr	r3, [pc, #56]	; (800357c <User_Ip_Uart_GetBuffer+0x4c>)
 8003542:	60fb      	str	r3, [r7, #12]
 8003544:	e013      	b.n	800356e <User_Ip_Uart_GetBuffer+0x3e>
	}
	else if(u8ChannelId == USER_IP_UART_CHANNELID_5)
 8003546:	79fb      	ldrb	r3, [r7, #7]
 8003548:	2b05      	cmp	r3, #5
 800354a:	d102      	bne.n	8003552 <User_Ip_Uart_GetBuffer+0x22>
	{
		BufferChannel = &Buffer_Uart5Channel;
 800354c:	4b0c      	ldr	r3, [pc, #48]	; (8003580 <User_Ip_Uart_GetBuffer+0x50>)
 800354e:	60fb      	str	r3, [r7, #12]
 8003550:	e00d      	b.n	800356e <User_Ip_Uart_GetBuffer+0x3e>
	}
	else if(u8ChannelId == USER_IP_UART_CHANNELID_7)
 8003552:	79fb      	ldrb	r3, [r7, #7]
 8003554:	2b07      	cmp	r3, #7
 8003556:	d102      	bne.n	800355e <User_Ip_Uart_GetBuffer+0x2e>
	{
		BufferChannel = &Buffer_Uart7Channel;
 8003558:	4b0a      	ldr	r3, [pc, #40]	; (8003584 <User_Ip_Uart_GetBuffer+0x54>)
 800355a:	60fb      	str	r3, [r7, #12]
 800355c:	e007      	b.n	800356e <User_Ip_Uart_GetBuffer+0x3e>
	}
	else if(u8ChannelId == USER_IP_UART_CHANNELID_8)
 800355e:	79fb      	ldrb	r3, [r7, #7]
 8003560:	2b08      	cmp	r3, #8
 8003562:	d102      	bne.n	800356a <User_Ip_Uart_GetBuffer+0x3a>
	{
		BufferChannel = &Buffer_Uart8Channel;
 8003564:	4b08      	ldr	r3, [pc, #32]	; (8003588 <User_Ip_Uart_GetBuffer+0x58>)
 8003566:	60fb      	str	r3, [r7, #12]
 8003568:	e001      	b.n	800356e <User_Ip_Uart_GetBuffer+0x3e>
	}
	else
	{
		BufferChannel = NULL;
 800356a:	2300      	movs	r3, #0
 800356c:	60fb      	str	r3, [r7, #12]
	}

	return BufferChannel;
 800356e:	68fb      	ldr	r3, [r7, #12]
}
 8003570:	4618      	mov	r0, r3
 8003572:	3714      	adds	r7, #20
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr
 800357c:	200001fc 	.word	0x200001fc
 8003580:	20000210 	.word	0x20000210
 8003584:	20000224 	.word	0x20000224
 8003588:	20000238 	.word	0x20000238

0800358c <User_Ip_Uart_TransmitBuffer>:

    return E_OK;
}

static inline void User_Ip_Uart_TransmitBuffer(uint8_t u8ChannelId)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	4603      	mov	r3, r0
 8003594:	71fb      	strb	r3, [r7, #7]
	User_Ip_Uart_RingBuffer_t *BufferChannel;
	User_Ip_Uart_Type *HwChannel = User_Ip_Uart_BaseAddress[u8ChannelId];
 8003596:	79fb      	ldrb	r3, [r7, #7]
 8003598:	4a19      	ldr	r2, [pc, #100]	; (8003600 <User_Ip_Uart_TransmitBuffer+0x74>)
 800359a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800359e:	60fb      	str	r3, [r7, #12]

    BufferChannel = User_Ip_Uart_GetBuffer(u8ChannelId);
 80035a0:	79fb      	ldrb	r3, [r7, #7]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7ff ffc4 	bl	8003530 <User_Ip_Uart_GetBuffer>
 80035a8:	60b8      	str	r0, [r7, #8]
    if(BufferChannel == NULL)
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d022      	beq.n	80035f6 <User_Ip_Uart_TransmitBuffer+0x6a>
	{
		return;
	}

	if(BufferChannel->TxTail != BufferChannel->TxHead)
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	891b      	ldrh	r3, [r3, #8]
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	895b      	ldrh	r3, [r3, #10]
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	429a      	cmp	r2, r3
 80035be:	d016      	beq.n	80035ee <User_Ip_Uart_TransmitBuffer+0x62>
	{
		User_Ip_Uart_PutChar(HwChannel,BufferChannel->RingTxBufferChannel[BufferChannel->TxHead]);
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68ba      	ldr	r2, [r7, #8]
 80035c6:	8952      	ldrh	r2, [r2, #10]
 80035c8:	b292      	uxth	r2, r2
 80035ca:	4413      	add	r3, r2
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	4619      	mov	r1, r3
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f7ff ff8d 	bl	80034f2 <User_Ip_Uart_PutChar>
		BufferChannel->TxHead = (BufferChannel->TxHead + 1U) & (USER_IP_UART_SIZE_RINGBUFF - 1U);
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	895b      	ldrh	r3, [r3, #10]
 80035dc:	b29b      	uxth	r3, r3
 80035de:	3301      	adds	r3, #1
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	815a      	strh	r2, [r3, #10]
 80035ec:	e004      	b.n	80035f8 <User_Ip_Uart_TransmitBuffer+0x6c>
	}
	else
	{
		User_Ip_Uart_StopAsyncTransmit(HwChannel);
 80035ee:	68f8      	ldr	r0, [r7, #12]
 80035f0:	f7ff ff8e 	bl	8003510 <User_Ip_Uart_StopAsyncTransmit>
 80035f4:	e000      	b.n	80035f8 <User_Ip_Uart_TransmitBuffer+0x6c>
		return;
 80035f6:	bf00      	nop
	}
}
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	08005350 	.word	0x08005350

08003604 <User_Ip_Uart_ReceiveBuffer>:

static void User_Ip_Uart_ReceiveBuffer(uint8_t u8ChannelId, uint8_t u8Data)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	4603      	mov	r3, r0
 800360c:	460a      	mov	r2, r1
 800360e:	71fb      	strb	r3, [r7, #7]
 8003610:	4613      	mov	r3, r2
 8003612:	71bb      	strb	r3, [r7, #6]
    User_Ip_Uart_RingBuffer_t *BufferChannel;

    BufferChannel = User_Ip_Uart_GetBuffer(u8ChannelId);
 8003614:	79fb      	ldrb	r3, [r7, #7]
 8003616:	4618      	mov	r0, r3
 8003618:	f7ff ff8a 	bl	8003530 <User_Ip_Uart_GetBuffer>
 800361c:	60f8      	str	r0, [r7, #12]
    if(BufferChannel == NULL)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d02e      	beq.n	8003682 <User_Ip_Uart_ReceiveBuffer+0x7e>
	{
		return;
	}

	BufferChannel->RingRxBufferChannel[BufferChannel->RxTail] = u8Data;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	8992      	ldrh	r2, [r2, #12]
 800362c:	b292      	uxth	r2, r2
 800362e:	4413      	add	r3, r2
 8003630:	79ba      	ldrb	r2, [r7, #6]
 8003632:	701a      	strb	r2, [r3, #0]
	BufferChannel->RxTail = (BufferChannel->RxTail + 1U) & (USER_IP_UART_SIZE_RINGBUFF - 1U);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	899b      	ldrh	r3, [r3, #12]
 8003638:	b29b      	uxth	r3, r3
 800363a:	3301      	adds	r3, #1
 800363c:	b29b      	uxth	r3, r3
 800363e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003642:	b29a      	uxth	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	819a      	strh	r2, [r3, #12]

	if(BufferChannel->RxTail == BufferChannel->RxHead)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	899b      	ldrh	r3, [r3, #12]
 800364c:	b29a      	uxth	r2, r3
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	89db      	ldrh	r3, [r3, #14]
 8003652:	b29b      	uxth	r3, r3
 8003654:	429a      	cmp	r2, r3
 8003656:	d115      	bne.n	8003684 <User_Ip_Uart_ReceiveBuffer+0x80>
	{
		if(BufferChannel->RxHead == 0U)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	89db      	ldrh	r3, [r3, #14]
 800365c:	b29b      	uxth	r3, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d104      	bne.n	800366c <User_Ip_Uart_ReceiveBuffer+0x68>
		{
			BufferChannel->RxTail = USER_IP_UART_SIZE_RINGBUFF - 1U;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8003668:	819a      	strh	r2, [r3, #12]
 800366a:	e00b      	b.n	8003684 <User_Ip_Uart_ReceiveBuffer+0x80>
		}
		else
		{
			BufferChannel->RxTail = (BufferChannel->RxTail - 1U) & (USER_IP_UART_SIZE_RINGBUFF - 1U);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	899b      	ldrh	r3, [r3, #12]
 8003670:	b29b      	uxth	r3, r3
 8003672:	3b01      	subs	r3, #1
 8003674:	b29b      	uxth	r3, r3
 8003676:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800367a:	b29a      	uxth	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	819a      	strh	r2, [r3, #12]
 8003680:	e000      	b.n	8003684 <User_Ip_Uart_ReceiveBuffer+0x80>
		return;
 8003682:	bf00      	nop
		}
	}

}
 8003684:	3710      	adds	r7, #16
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
	...

0800368c <User_Ip_Uart_IrqHandler>:

static void User_Ip_Uart_IrqHandler(uint8_t u8ChannelId)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	4603      	mov	r3, r0
 8003694:	71fb      	strb	r3, [r7, #7]
	uint8_t Byte_Receive = 0u;
 8003696:	2300      	movs	r3, #0
 8003698:	73fb      	strb	r3, [r7, #15]
	User_Ip_Uart_Type *HwChannel = User_Ip_Uart_BaseAddress[u8ChannelId];
 800369a:	79fb      	ldrb	r3, [r7, #7]
 800369c:	4a15      	ldr	r2, [pc, #84]	; (80036f4 <User_Ip_Uart_IrqHandler+0x68>)
 800369e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036a2:	60bb      	str	r3, [r7, #8]

	if((HwChannel->SR & USER_IP_UART_SR_TXE_MASK) == USER_IP_UART_SR_TXE_MASK)
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d003      	beq.n	80036b8 <User_Ip_Uart_IrqHandler+0x2c>
	{
		User_Ip_Uart_TransmitBuffer(u8ChannelId);
 80036b0:	79fb      	ldrb	r3, [r7, #7]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7ff ff6a 	bl	800358c <User_Ip_Uart_TransmitBuffer>
	}

	if((HwChannel->SR & USER_IP_UART_SR_RXNE_MASK) == USER_IP_UART_SR_RXNE_MASK)
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0320 	and.w	r3, r3, #32
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00a      	beq.n	80036da <User_Ip_Uart_IrqHandler+0x4e>
	{
		Byte_Receive = User_Ip_Uart_GetChar(HwChannel);
 80036c4:	68b8      	ldr	r0, [r7, #8]
 80036c6:	f7ff ff07 	bl	80034d8 <User_Ip_Uart_GetChar>
 80036ca:	4603      	mov	r3, r0
 80036cc:	73fb      	strb	r3, [r7, #15]
		User_Ip_Uart_ReceiveBuffer(u8ChannelId,Byte_Receive);
 80036ce:	7bfa      	ldrb	r2, [r7, #15]
 80036d0:	79fb      	ldrb	r3, [r7, #7]
 80036d2:	4611      	mov	r1, r2
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7ff ff95 	bl	8003604 <User_Ip_Uart_ReceiveBuffer>
	{
		/*TODO*/

	}

	if((HwChannel->SR & USER_IP_UART_SR_ORE_MASK) == USER_IP_UART_SR_ORE_MASK)
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0308 	and.w	r3, r3, #8
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d002      	beq.n	80036ec <User_Ip_Uart_IrqHandler+0x60>
	{
		/*TODO*/
		User_Ip_Uart_GetChar(HwChannel);
 80036e6:	68b8      	ldr	r0, [r7, #8]
 80036e8:	f7ff fef6 	bl	80034d8 <User_Ip_Uart_GetChar>
		HwChannel->SR ;
	}



}
 80036ec:	bf00      	nop
 80036ee:	3710      	adds	r7, #16
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	08005350 	.word	0x08005350

080036f8 <UART4_IRQHandler>:


void UART4_IRQHandler(void)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	af00      	add	r7, sp, #0
    User_Ip_Uart_IrqHandler(USER_IP_UART_CHANNELID_4);
 80036fc:	2004      	movs	r0, #4
 80036fe:	f7ff ffc5 	bl	800368c <User_Ip_Uart_IrqHandler>
}
 8003702:	bf00      	nop
 8003704:	bd80      	pop	{r7, pc}

08003706 <UART5_IRQHandler>:

void UART5_IRQHandler(void)
{
 8003706:	b580      	push	{r7, lr}
 8003708:	af00      	add	r7, sp, #0
    User_Ip_Uart_IrqHandler(USER_IP_UART_CHANNELID_5);
 800370a:	2005      	movs	r0, #5
 800370c:	f7ff ffbe 	bl	800368c <User_Ip_Uart_IrqHandler>
}
 8003710:	bf00      	nop
 8003712:	bd80      	pop	{r7, pc}

08003714 <User_Ip_Usart_GetChar>:
	HAL_NVIC_SetPriority(User_Usart_IRQn[u8ChannelId],USER_IP_USART_PRIORITY,0u);

}

static inline uint8_t User_Ip_Usart_GetChar(User_Ip_Usart_Type * Usart_channel)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
	return (Usart_channel->DR);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	b2db      	uxtb	r3, r3
}
 8003722:	4618      	mov	r0, r3
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr

0800372e <User_Ip_Usart_PutChar>:

static inline void User_Ip_Usart_PutChar(User_Ip_Usart_Type *Usart_channel, uint8_t u8Data)
{
 800372e:	b480      	push	{r7}
 8003730:	b083      	sub	sp, #12
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
 8003736:	460b      	mov	r3, r1
 8003738:	70fb      	strb	r3, [r7, #3]
	Usart_channel->DR = u8Data;
 800373a:	78fa      	ldrb	r2, [r7, #3]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	605a      	str	r2, [r3, #4]
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <User_Ip_Usart_StopAsyncTransmit>:
{
	Usart_channel->CR1 |= USER_IP_USART_CR1_TXEIE_MASK;
}

static inline void User_Ip_Usart_StopAsyncTransmit(User_Ip_Usart_Type *Usart_channel)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
	Usart_channel->CR1 &= ~USER_IP_USART_CR1_TXEIE_MASK;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	60da      	str	r2, [r3, #12]
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <User_Ip_Usart_GetBuffer>:

static User_Ip_Usart_RingBuffer_t *User_Ip_Usart_GetBuffer(uint8_t u8ChannelId)
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	4603      	mov	r3, r0
 8003774:	71fb      	strb	r3, [r7, #7]
	User_Ip_Usart_RingBuffer_t *BufferChannel;

	if(u8ChannelId == USER_IP_USART_CHANNELID_0)
 8003776:	79fb      	ldrb	r3, [r7, #7]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d102      	bne.n	8003782 <User_Ip_Usart_GetBuffer+0x16>
	{
		BufferChannel = &Buffer_Usart0Channel;
 800377c:	4b11      	ldr	r3, [pc, #68]	; (80037c4 <User_Ip_Usart_GetBuffer+0x58>)
 800377e:	60fb      	str	r3, [r7, #12]
 8003780:	e019      	b.n	80037b6 <User_Ip_Usart_GetBuffer+0x4a>
	}
	else if(u8ChannelId == USER_IP_USART_CHANNELID_1)
 8003782:	79fb      	ldrb	r3, [r7, #7]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d102      	bne.n	800378e <User_Ip_Usart_GetBuffer+0x22>
	{
		BufferChannel = &Buffer_Usart1Channel;
 8003788:	4b0f      	ldr	r3, [pc, #60]	; (80037c8 <User_Ip_Usart_GetBuffer+0x5c>)
 800378a:	60fb      	str	r3, [r7, #12]
 800378c:	e013      	b.n	80037b6 <User_Ip_Usart_GetBuffer+0x4a>
	}
	else if(u8ChannelId == USER_IP_USART_CHANNELID_2)
 800378e:	79fb      	ldrb	r3, [r7, #7]
 8003790:	2b02      	cmp	r3, #2
 8003792:	d102      	bne.n	800379a <User_Ip_Usart_GetBuffer+0x2e>
	{
		BufferChannel = &Buffer_Usart2Channel;
 8003794:	4b0d      	ldr	r3, [pc, #52]	; (80037cc <User_Ip_Usart_GetBuffer+0x60>)
 8003796:	60fb      	str	r3, [r7, #12]
 8003798:	e00d      	b.n	80037b6 <User_Ip_Usart_GetBuffer+0x4a>
	}
	else if(u8ChannelId == USER_IP_USART_CHANNELID_3)
 800379a:	79fb      	ldrb	r3, [r7, #7]
 800379c:	2b03      	cmp	r3, #3
 800379e:	d102      	bne.n	80037a6 <User_Ip_Usart_GetBuffer+0x3a>
	{
		BufferChannel = &Buffer_Usart3Channel;
 80037a0:	4b0b      	ldr	r3, [pc, #44]	; (80037d0 <User_Ip_Usart_GetBuffer+0x64>)
 80037a2:	60fb      	str	r3, [r7, #12]
 80037a4:	e007      	b.n	80037b6 <User_Ip_Usart_GetBuffer+0x4a>
	}
	else if(u8ChannelId == USER_IP_USART_CHANNELID_6)
 80037a6:	79fb      	ldrb	r3, [r7, #7]
 80037a8:	2b06      	cmp	r3, #6
 80037aa:	d102      	bne.n	80037b2 <User_Ip_Usart_GetBuffer+0x46>
	{
		BufferChannel = &Buffer_Usart6Channel;
 80037ac:	4b09      	ldr	r3, [pc, #36]	; (80037d4 <User_Ip_Usart_GetBuffer+0x68>)
 80037ae:	60fb      	str	r3, [r7, #12]
 80037b0:	e001      	b.n	80037b6 <User_Ip_Usart_GetBuffer+0x4a>
	}
	else
	{
		BufferChannel = NULL;
 80037b2:	2300      	movs	r3, #0
 80037b4:	60fb      	str	r3, [r7, #12]
	}

	return BufferChannel;
 80037b6:	68fb      	ldr	r3, [r7, #12]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3714      	adds	r7, #20
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr
 80037c4:	2000024c 	.word	0x2000024c
 80037c8:	20000260 	.word	0x20000260
 80037cc:	20000274 	.word	0x20000274
 80037d0:	20000288 	.word	0x20000288
 80037d4:	2000029c 	.word	0x2000029c

080037d8 <User_Ip_Usart_TransmitBuffer>:

    return E_OK;
}

static inline void User_Ip_Usart_TransmitBuffer(uint8_t u8ChannelId)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	4603      	mov	r3, r0
 80037e0:	71fb      	strb	r3, [r7, #7]
	User_Ip_Usart_RingBuffer_t *BufferChannel;
	User_Ip_Usart_Type *HwChannel = User_Ip_Usart_BaseAddress[u8ChannelId];
 80037e2:	79fb      	ldrb	r3, [r7, #7]
 80037e4:	4a19      	ldr	r2, [pc, #100]	; (800384c <User_Ip_Usart_TransmitBuffer+0x74>)
 80037e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ea:	60fb      	str	r3, [r7, #12]

    BufferChannel = User_Ip_Usart_GetBuffer(u8ChannelId);
 80037ec:	79fb      	ldrb	r3, [r7, #7]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7ff ffbc 	bl	800376c <User_Ip_Usart_GetBuffer>
 80037f4:	60b8      	str	r0, [r7, #8]
    if(BufferChannel == NULL)
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d023      	beq.n	8003844 <User_Ip_Usart_TransmitBuffer+0x6c>
	{
		return;
	}

	if(BufferChannel->TxTail != BufferChannel->TxHead)
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	891b      	ldrh	r3, [r3, #8]
 8003800:	b29a      	uxth	r2, r3
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	895b      	ldrh	r3, [r3, #10]
 8003806:	b29b      	uxth	r3, r3
 8003808:	429a      	cmp	r2, r3
 800380a:	d017      	beq.n	800383c <User_Ip_Usart_TransmitBuffer+0x64>
	{
		User_Ip_Usart_PutChar(HwChannel,BufferChannel->RingTxBufferChannel[BufferChannel->TxHead]);
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68ba      	ldr	r2, [r7, #8]
 8003812:	8952      	ldrh	r2, [r2, #10]
 8003814:	b292      	uxth	r2, r2
 8003816:	4413      	add	r3, r2
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	b2db      	uxtb	r3, r3
 800381c:	4619      	mov	r1, r3
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f7ff ff85 	bl	800372e <User_Ip_Usart_PutChar>
		BufferChannel->TxHead = (BufferChannel->TxHead + 1U) & (USER_IP_USART_SIZE_RINGBUFF - 1U);
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	895b      	ldrh	r3, [r3, #10]
 8003828:	b29b      	uxth	r3, r3
 800382a:	3301      	adds	r3, #1
 800382c:	b29a      	uxth	r2, r3
 800382e:	f240 23ff 	movw	r3, #767	; 0x2ff
 8003832:	4013      	ands	r3, r2
 8003834:	b29a      	uxth	r2, r3
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	815a      	strh	r2, [r3, #10]
 800383a:	e004      	b.n	8003846 <User_Ip_Usart_TransmitBuffer+0x6e>
	}
	else
	{
		User_Ip_Usart_StopAsyncTransmit(HwChannel);
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	f7ff ff85 	bl	800374c <User_Ip_Usart_StopAsyncTransmit>
 8003842:	e000      	b.n	8003846 <User_Ip_Usart_TransmitBuffer+0x6e>
		return;
 8003844:	bf00      	nop
	}
}
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	08005374 	.word	0x08005374

08003850 <User_Ip_Usart_ReceiveBuffer>:

static void User_Ip_Usart_ReceiveBuffer(uint8_t u8ChannelId, uint8_t u8Data)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	4603      	mov	r3, r0
 8003858:	460a      	mov	r2, r1
 800385a:	71fb      	strb	r3, [r7, #7]
 800385c:	4613      	mov	r3, r2
 800385e:	71bb      	strb	r3, [r7, #6]
    User_Ip_Usart_RingBuffer_t *BufferChannel;

    BufferChannel = User_Ip_Usart_GetBuffer(u8ChannelId);
 8003860:	79fb      	ldrb	r3, [r7, #7]
 8003862:	4618      	mov	r0, r3
 8003864:	f7ff ff82 	bl	800376c <User_Ip_Usart_GetBuffer>
 8003868:	60f8      	str	r0, [r7, #12]
    if(BufferChannel == NULL)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d030      	beq.n	80038d2 <User_Ip_Usart_ReceiveBuffer+0x82>
	{
		return;
	}

	BufferChannel->RingRxBufferChannel[BufferChannel->RxTail] = u8Data;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	8992      	ldrh	r2, [r2, #12]
 8003878:	b292      	uxth	r2, r2
 800387a:	4413      	add	r3, r2
 800387c:	79ba      	ldrb	r2, [r7, #6]
 800387e:	701a      	strb	r2, [r3, #0]
	BufferChannel->RxTail = (BufferChannel->RxTail + 1U) & (USER_IP_USART_SIZE_RINGBUFF - 1U);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	899b      	ldrh	r3, [r3, #12]
 8003884:	b29b      	uxth	r3, r3
 8003886:	3301      	adds	r3, #1
 8003888:	b29a      	uxth	r2, r3
 800388a:	f240 23ff 	movw	r3, #767	; 0x2ff
 800388e:	4013      	ands	r3, r2
 8003890:	b29a      	uxth	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	819a      	strh	r2, [r3, #12]

	if(BufferChannel->RxTail == BufferChannel->RxHead)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	899b      	ldrh	r3, [r3, #12]
 800389a:	b29a      	uxth	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	89db      	ldrh	r3, [r3, #14]
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d116      	bne.n	80038d4 <User_Ip_Usart_ReceiveBuffer+0x84>
	{
		if(BufferChannel->RxHead == 0U)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	89db      	ldrh	r3, [r3, #14]
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d104      	bne.n	80038ba <User_Ip_Usart_ReceiveBuffer+0x6a>
		{
			BufferChannel->RxTail = USER_IP_USART_SIZE_RINGBUFF - 1U;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f240 22ff 	movw	r2, #767	; 0x2ff
 80038b6:	819a      	strh	r2, [r3, #12]
 80038b8:	e00c      	b.n	80038d4 <User_Ip_Usart_ReceiveBuffer+0x84>
		}
		else
		{
			BufferChannel->RxTail = (BufferChannel->RxTail - 1U) & (USER_IP_USART_SIZE_RINGBUFF - 1U);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	899b      	ldrh	r3, [r3, #12]
 80038be:	b29b      	uxth	r3, r3
 80038c0:	3b01      	subs	r3, #1
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	f240 23ff 	movw	r3, #767	; 0x2ff
 80038c8:	4013      	ands	r3, r2
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	819a      	strh	r2, [r3, #12]
 80038d0:	e000      	b.n	80038d4 <User_Ip_Usart_ReceiveBuffer+0x84>
		return;
 80038d2:	bf00      	nop
		}
	}

}
 80038d4:	3710      	adds	r7, #16
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
	...

080038dc <User_Ip_Usart_IrqHandler>:

static void User_Ip_Usart_IrqHandler(uint8_t u8ChannelId)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b086      	sub	sp, #24
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	4603      	mov	r3, r0
 80038e4:	71fb      	strb	r3, [r7, #7]
	uint8_t Byte_Receive = 0u;
 80038e6:	2300      	movs	r3, #0
 80038e8:	75fb      	strb	r3, [r7, #23]
	User_Ip_Usart_Type *HwChannel = User_Ip_Usart_BaseAddress[u8ChannelId];
 80038ea:	79fb      	ldrb	r3, [r7, #7]
 80038ec:	4a17      	ldr	r2, [pc, #92]	; (800394c <User_Ip_Usart_IrqHandler+0x70>)
 80038ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038f2:	613b      	str	r3, [r7, #16]
	uint32_t status = HwChannel->SR;
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	60fb      	str	r3, [r7, #12]

	if((status & USER_IP_USART_SR_TXE_MASK) == USER_IP_USART_SR_TXE_MASK)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003900:	2b00      	cmp	r3, #0
 8003902:	d003      	beq.n	800390c <User_Ip_Usart_IrqHandler+0x30>
	{
		User_Ip_Usart_TransmitBuffer(u8ChannelId);
 8003904:	79fb      	ldrb	r3, [r7, #7]
 8003906:	4618      	mov	r0, r3
 8003908:	f7ff ff66 	bl	80037d8 <User_Ip_Usart_TransmitBuffer>
	}

	if((status & USER_IP_USART_SR_RXNE_MASK) == USER_IP_USART_SR_RXNE_MASK)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f003 0320 	and.w	r3, r3, #32
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00a      	beq.n	800392c <User_Ip_Usart_IrqHandler+0x50>
	{
		Byte_Receive = User_Ip_Usart_GetChar(HwChannel);
 8003916:	6938      	ldr	r0, [r7, #16]
 8003918:	f7ff fefc 	bl	8003714 <User_Ip_Usart_GetChar>
 800391c:	4603      	mov	r3, r0
 800391e:	75fb      	strb	r3, [r7, #23]
		User_Ip_Usart_ReceiveBuffer(u8ChannelId,Byte_Receive);
 8003920:	7dfa      	ldrb	r2, [r7, #23]
 8003922:	79fb      	ldrb	r3, [r7, #7]
 8003924:	4611      	mov	r1, r2
 8003926:	4618      	mov	r0, r3
 8003928:	f7ff ff92 	bl	8003850 <User_Ip_Usart_ReceiveBuffer>
	if((status & USER_IP_USART_SR_FE_MASK) == USER_IP_USART_SR_FE_MASK)
	{
		/*TODO*/
	}

	if((status & USER_IP_USART_SR_ORE_MASK) == USER_IP_USART_SR_ORE_MASK)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f003 0308 	and.w	r3, r3, #8
 8003932:	2b00      	cmp	r3, #0
 8003934:	d002      	beq.n	800393c <User_Ip_Usart_IrqHandler+0x60>
	{
		/*TODO*/
		User_Ip_Usart_GetChar(HwChannel);
 8003936:	6938      	ldr	r0, [r7, #16]
 8003938:	f7ff feec 	bl	8003714 <User_Ip_Usart_GetChar>

	if((status & USER_IP_USART_SR_NF_MASK) == USER_IP_USART_SR_NF_MASK)
	{
		/*TODO*/
	}
	status = HwChannel->SR;
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	60fb      	str	r3, [r7, #12]
}
 8003942:	bf00      	nop
 8003944:	3718      	adds	r7, #24
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	08005374 	.word	0x08005374

08003950 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	af00      	add	r7, sp, #0
    User_Ip_Usart_IrqHandler(USER_IP_USART_CHANNELID_1);
 8003954:	2001      	movs	r0, #1
 8003956:	f7ff ffc1 	bl	80038dc <User_Ip_Usart_IrqHandler>
}
 800395a:	bf00      	nop
 800395c:	bd80      	pop	{r7, pc}

0800395e <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	af00      	add	r7, sp, #0
    User_Ip_Usart_IrqHandler(USER_IP_USART_CHANNELID_2);
 8003962:	2002      	movs	r0, #2
 8003964:	f7ff ffba 	bl	80038dc <User_Ip_Usart_IrqHandler>
}
 8003968:	bf00      	nop
 800396a:	bd80      	pop	{r7, pc}

0800396c <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
    User_Ip_Usart_IrqHandler(USER_IP_USART_CHANNELID_3);
 8003970:	2003      	movs	r0, #3
 8003972:	f7ff ffb3 	bl	80038dc <User_Ip_Usart_IrqHandler>
}
 8003976:	bf00      	nop
 8003978:	bd80      	pop	{r7, pc}

0800397a <USART6_IRQHandler>:

void USART6_IRQHandler(void)
{
 800397a:	b580      	push	{r7, lr}
 800397c:	af00      	add	r7, sp, #0
    User_Ip_Usart_IrqHandler(USER_IP_USART_CHANNELID_6);
 800397e:	2006      	movs	r0, #6
 8003980:	f7ff ffac 	bl	80038dc <User_Ip_Usart_IrqHandler>
}
 8003984:	bf00      	nop
 8003986:	bd80      	pop	{r7, pc}

08003988 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800398c:	4b0e      	ldr	r3, [pc, #56]	; (80039c8 <HAL_Init+0x40>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a0d      	ldr	r2, [pc, #52]	; (80039c8 <HAL_Init+0x40>)
 8003992:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003996:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003998:	4b0b      	ldr	r3, [pc, #44]	; (80039c8 <HAL_Init+0x40>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a0a      	ldr	r2, [pc, #40]	; (80039c8 <HAL_Init+0x40>)
 800399e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039a4:	4b08      	ldr	r3, [pc, #32]	; (80039c8 <HAL_Init+0x40>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a07      	ldr	r2, [pc, #28]	; (80039c8 <HAL_Init+0x40>)
 80039aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039b0:	2003      	movs	r0, #3
 80039b2:	f000 f94f 	bl	8003c54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80039b6:	200f      	movs	r0, #15
 80039b8:	f000 f808 	bl	80039cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039bc:	f7fd fbd8 	bl	8001170 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	40023c00 	.word	0x40023c00

080039cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80039d4:	4b12      	ldr	r3, [pc, #72]	; (8003a20 <HAL_InitTick+0x54>)
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	4b12      	ldr	r3, [pc, #72]	; (8003a24 <HAL_InitTick+0x58>)
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	4619      	mov	r1, r3
 80039de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80039e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ea:	4618      	mov	r0, r3
 80039ec:	f000 f967 	bl	8003cbe <HAL_SYSTICK_Config>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d001      	beq.n	80039fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e00e      	b.n	8003a18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2b0f      	cmp	r3, #15
 80039fe:	d80a      	bhi.n	8003a16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a00:	2200      	movs	r2, #0
 8003a02:	6879      	ldr	r1, [r7, #4]
 8003a04:	f04f 30ff 	mov.w	r0, #4294967295
 8003a08:	f000 f92f 	bl	8003c6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a0c:	4a06      	ldr	r2, [pc, #24]	; (8003a28 <HAL_InitTick+0x5c>)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a12:	2300      	movs	r3, #0
 8003a14:	e000      	b.n	8003a18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3708      	adds	r7, #8
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	20000000 	.word	0x20000000
 8003a24:	20000068 	.word	0x20000068
 8003a28:	20000064 	.word	0x20000064

08003a2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a30:	4b06      	ldr	r3, [pc, #24]	; (8003a4c <HAL_IncTick+0x20>)
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	461a      	mov	r2, r3
 8003a36:	4b06      	ldr	r3, [pc, #24]	; (8003a50 <HAL_IncTick+0x24>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	4a04      	ldr	r2, [pc, #16]	; (8003a50 <HAL_IncTick+0x24>)
 8003a3e:	6013      	str	r3, [r2, #0]
}
 8003a40:	bf00      	nop
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	20000068 	.word	0x20000068
 8003a50:	20000364 	.word	0x20000364

08003a54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a54:	b480      	push	{r7}
 8003a56:	af00      	add	r7, sp, #0
  return uwTick;
 8003a58:	4b03      	ldr	r3, [pc, #12]	; (8003a68 <HAL_GetTick+0x14>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	20000364 	.word	0x20000364

08003a6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a74:	f7ff ffee 	bl	8003a54 <HAL_GetTick>
 8003a78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a84:	d005      	beq.n	8003a92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a86:	4b0a      	ldr	r3, [pc, #40]	; (8003ab0 <HAL_Delay+0x44>)
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	4413      	add	r3, r2
 8003a90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003a92:	bf00      	nop
 8003a94:	f7ff ffde 	bl	8003a54 <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d8f7      	bhi.n	8003a94 <HAL_Delay+0x28>
  {
  }
}
 8003aa4:	bf00      	nop
 8003aa6:	bf00      	nop
 8003aa8:	3710      	adds	r7, #16
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	20000068 	.word	0x20000068

08003ab4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f003 0307 	and.w	r3, r3, #7
 8003ac2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ac4:	4b0c      	ldr	r3, [pc, #48]	; (8003af8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003aca:	68ba      	ldr	r2, [r7, #8]
 8003acc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003adc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ae0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ae4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ae6:	4a04      	ldr	r2, [pc, #16]	; (8003af8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	60d3      	str	r3, [r2, #12]
}
 8003aec:	bf00      	nop
 8003aee:	3714      	adds	r7, #20
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr
 8003af8:	e000ed00 	.word	0xe000ed00

08003afc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003afc:	b480      	push	{r7}
 8003afe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b00:	4b04      	ldr	r3, [pc, #16]	; (8003b14 <__NVIC_GetPriorityGrouping+0x18>)
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	0a1b      	lsrs	r3, r3, #8
 8003b06:	f003 0307 	and.w	r3, r3, #7
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr
 8003b14:	e000ed00 	.word	0xe000ed00

08003b18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	4603      	mov	r3, r0
 8003b20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	db0b      	blt.n	8003b42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b2a:	79fb      	ldrb	r3, [r7, #7]
 8003b2c:	f003 021f 	and.w	r2, r3, #31
 8003b30:	4907      	ldr	r1, [pc, #28]	; (8003b50 <__NVIC_EnableIRQ+0x38>)
 8003b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b36:	095b      	lsrs	r3, r3, #5
 8003b38:	2001      	movs	r0, #1
 8003b3a:	fa00 f202 	lsl.w	r2, r0, r2
 8003b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b42:	bf00      	nop
 8003b44:	370c      	adds	r7, #12
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	e000e100 	.word	0xe000e100

08003b54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	6039      	str	r1, [r7, #0]
 8003b5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	db0a      	blt.n	8003b7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	b2da      	uxtb	r2, r3
 8003b6c:	490c      	ldr	r1, [pc, #48]	; (8003ba0 <__NVIC_SetPriority+0x4c>)
 8003b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b72:	0112      	lsls	r2, r2, #4
 8003b74:	b2d2      	uxtb	r2, r2
 8003b76:	440b      	add	r3, r1
 8003b78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b7c:	e00a      	b.n	8003b94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	b2da      	uxtb	r2, r3
 8003b82:	4908      	ldr	r1, [pc, #32]	; (8003ba4 <__NVIC_SetPriority+0x50>)
 8003b84:	79fb      	ldrb	r3, [r7, #7]
 8003b86:	f003 030f 	and.w	r3, r3, #15
 8003b8a:	3b04      	subs	r3, #4
 8003b8c:	0112      	lsls	r2, r2, #4
 8003b8e:	b2d2      	uxtb	r2, r2
 8003b90:	440b      	add	r3, r1
 8003b92:	761a      	strb	r2, [r3, #24]
}
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr
 8003ba0:	e000e100 	.word	0xe000e100
 8003ba4:	e000ed00 	.word	0xe000ed00

08003ba8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b089      	sub	sp, #36	; 0x24
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f003 0307 	and.w	r3, r3, #7
 8003bba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	f1c3 0307 	rsb	r3, r3, #7
 8003bc2:	2b04      	cmp	r3, #4
 8003bc4:	bf28      	it	cs
 8003bc6:	2304      	movcs	r3, #4
 8003bc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	3304      	adds	r3, #4
 8003bce:	2b06      	cmp	r3, #6
 8003bd0:	d902      	bls.n	8003bd8 <NVIC_EncodePriority+0x30>
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	3b03      	subs	r3, #3
 8003bd6:	e000      	b.n	8003bda <NVIC_EncodePriority+0x32>
 8003bd8:	2300      	movs	r3, #0
 8003bda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	fa02 f303 	lsl.w	r3, r2, r3
 8003be6:	43da      	mvns	r2, r3
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	401a      	ands	r2, r3
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bf0:	f04f 31ff 	mov.w	r1, #4294967295
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8003bfa:	43d9      	mvns	r1, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c00:	4313      	orrs	r3, r2
         );
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3724      	adds	r7, #36	; 0x24
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
	...

08003c10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c20:	d301      	bcc.n	8003c26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c22:	2301      	movs	r3, #1
 8003c24:	e00f      	b.n	8003c46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c26:	4a0a      	ldr	r2, [pc, #40]	; (8003c50 <SysTick_Config+0x40>)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c2e:	210f      	movs	r1, #15
 8003c30:	f04f 30ff 	mov.w	r0, #4294967295
 8003c34:	f7ff ff8e 	bl	8003b54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c38:	4b05      	ldr	r3, [pc, #20]	; (8003c50 <SysTick_Config+0x40>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c3e:	4b04      	ldr	r3, [pc, #16]	; (8003c50 <SysTick_Config+0x40>)
 8003c40:	2207      	movs	r2, #7
 8003c42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3708      	adds	r7, #8
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	e000e010 	.word	0xe000e010

08003c54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f7ff ff29 	bl	8003ab4 <__NVIC_SetPriorityGrouping>
}
 8003c62:	bf00      	nop
 8003c64:	3708      	adds	r7, #8
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	b086      	sub	sp, #24
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	4603      	mov	r3, r0
 8003c72:	60b9      	str	r1, [r7, #8]
 8003c74:	607a      	str	r2, [r7, #4]
 8003c76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c7c:	f7ff ff3e 	bl	8003afc <__NVIC_GetPriorityGrouping>
 8003c80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	68b9      	ldr	r1, [r7, #8]
 8003c86:	6978      	ldr	r0, [r7, #20]
 8003c88:	f7ff ff8e 	bl	8003ba8 <NVIC_EncodePriority>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c92:	4611      	mov	r1, r2
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7ff ff5d 	bl	8003b54 <__NVIC_SetPriority>
}
 8003c9a:	bf00      	nop
 8003c9c:	3718      	adds	r7, #24
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ca2:	b580      	push	{r7, lr}
 8003ca4:	b082      	sub	sp, #8
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	4603      	mov	r3, r0
 8003caa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7ff ff31 	bl	8003b18 <__NVIC_EnableIRQ>
}
 8003cb6:	bf00      	nop
 8003cb8:	3708      	adds	r7, #8
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b082      	sub	sp, #8
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f7ff ffa2 	bl	8003c10 <SysTick_Config>
 8003ccc:	4603      	mov	r3, r0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3708      	adds	r7, #8
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
	...

08003cd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b089      	sub	sp, #36	; 0x24
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003cea:	2300      	movs	r3, #0
 8003cec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cee:	2300      	movs	r3, #0
 8003cf0:	61fb      	str	r3, [r7, #28]
 8003cf2:	e16b      	b.n	8003fcc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	4013      	ands	r3, r2
 8003d06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	f040 815a 	bne.w	8003fc6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f003 0303 	and.w	r3, r3, #3
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d005      	beq.n	8003d2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d130      	bne.n	8003d8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	005b      	lsls	r3, r3, #1
 8003d34:	2203      	movs	r2, #3
 8003d36:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3a:	43db      	mvns	r3, r3
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	4013      	ands	r3, r2
 8003d40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	68da      	ldr	r2, [r3, #12]
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	005b      	lsls	r3, r3, #1
 8003d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4e:	69ba      	ldr	r2, [r7, #24]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	69ba      	ldr	r2, [r7, #24]
 8003d58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d60:	2201      	movs	r2, #1
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	fa02 f303 	lsl.w	r3, r2, r3
 8003d68:	43db      	mvns	r3, r3
 8003d6a:	69ba      	ldr	r2, [r7, #24]
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	091b      	lsrs	r3, r3, #4
 8003d76:	f003 0201 	and.w	r2, r3, #1
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f003 0303 	and.w	r3, r3, #3
 8003d94:	2b03      	cmp	r3, #3
 8003d96:	d017      	beq.n	8003dc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	005b      	lsls	r3, r3, #1
 8003da2:	2203      	movs	r2, #3
 8003da4:	fa02 f303 	lsl.w	r3, r2, r3
 8003da8:	43db      	mvns	r3, r3
 8003daa:	69ba      	ldr	r2, [r7, #24]
 8003dac:	4013      	ands	r3, r2
 8003dae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	689a      	ldr	r2, [r3, #8]
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	005b      	lsls	r3, r3, #1
 8003db8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbc:	69ba      	ldr	r2, [r7, #24]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	69ba      	ldr	r2, [r7, #24]
 8003dc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f003 0303 	and.w	r3, r3, #3
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d123      	bne.n	8003e1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	08da      	lsrs	r2, r3, #3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	3208      	adds	r2, #8
 8003ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003de0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	f003 0307 	and.w	r3, r3, #7
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	220f      	movs	r2, #15
 8003dec:	fa02 f303 	lsl.w	r3, r2, r3
 8003df0:	43db      	mvns	r3, r3
 8003df2:	69ba      	ldr	r2, [r7, #24]
 8003df4:	4013      	ands	r3, r2
 8003df6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	691a      	ldr	r2, [r3, #16]
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	f003 0307 	and.w	r3, r3, #7
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	fa02 f303 	lsl.w	r3, r2, r3
 8003e08:	69ba      	ldr	r2, [r7, #24]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	08da      	lsrs	r2, r3, #3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	3208      	adds	r2, #8
 8003e16:	69b9      	ldr	r1, [r7, #24]
 8003e18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	005b      	lsls	r3, r3, #1
 8003e26:	2203      	movs	r2, #3
 8003e28:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2c:	43db      	mvns	r3, r3
 8003e2e:	69ba      	ldr	r2, [r7, #24]
 8003e30:	4013      	ands	r3, r2
 8003e32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f003 0203 	and.w	r2, r3, #3
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	005b      	lsls	r3, r3, #1
 8003e40:	fa02 f303 	lsl.w	r3, r2, r3
 8003e44:	69ba      	ldr	r2, [r7, #24]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	f000 80b4 	beq.w	8003fc6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e5e:	2300      	movs	r3, #0
 8003e60:	60fb      	str	r3, [r7, #12]
 8003e62:	4b60      	ldr	r3, [pc, #384]	; (8003fe4 <HAL_GPIO_Init+0x30c>)
 8003e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e66:	4a5f      	ldr	r2, [pc, #380]	; (8003fe4 <HAL_GPIO_Init+0x30c>)
 8003e68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e6c:	6453      	str	r3, [r2, #68]	; 0x44
 8003e6e:	4b5d      	ldr	r3, [pc, #372]	; (8003fe4 <HAL_GPIO_Init+0x30c>)
 8003e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e76:	60fb      	str	r3, [r7, #12]
 8003e78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e7a:	4a5b      	ldr	r2, [pc, #364]	; (8003fe8 <HAL_GPIO_Init+0x310>)
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	089b      	lsrs	r3, r3, #2
 8003e80:	3302      	adds	r3, #2
 8003e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	f003 0303 	and.w	r3, r3, #3
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	220f      	movs	r2, #15
 8003e92:	fa02 f303 	lsl.w	r3, r2, r3
 8003e96:	43db      	mvns	r3, r3
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a52      	ldr	r2, [pc, #328]	; (8003fec <HAL_GPIO_Init+0x314>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d02b      	beq.n	8003efe <HAL_GPIO_Init+0x226>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a51      	ldr	r2, [pc, #324]	; (8003ff0 <HAL_GPIO_Init+0x318>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d025      	beq.n	8003efa <HAL_GPIO_Init+0x222>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a50      	ldr	r2, [pc, #320]	; (8003ff4 <HAL_GPIO_Init+0x31c>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d01f      	beq.n	8003ef6 <HAL_GPIO_Init+0x21e>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a4f      	ldr	r2, [pc, #316]	; (8003ff8 <HAL_GPIO_Init+0x320>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d019      	beq.n	8003ef2 <HAL_GPIO_Init+0x21a>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a4e      	ldr	r2, [pc, #312]	; (8003ffc <HAL_GPIO_Init+0x324>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d013      	beq.n	8003eee <HAL_GPIO_Init+0x216>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a4d      	ldr	r2, [pc, #308]	; (8004000 <HAL_GPIO_Init+0x328>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d00d      	beq.n	8003eea <HAL_GPIO_Init+0x212>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a4c      	ldr	r2, [pc, #304]	; (8004004 <HAL_GPIO_Init+0x32c>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d007      	beq.n	8003ee6 <HAL_GPIO_Init+0x20e>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a4b      	ldr	r2, [pc, #300]	; (8004008 <HAL_GPIO_Init+0x330>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d101      	bne.n	8003ee2 <HAL_GPIO_Init+0x20a>
 8003ede:	2307      	movs	r3, #7
 8003ee0:	e00e      	b.n	8003f00 <HAL_GPIO_Init+0x228>
 8003ee2:	2308      	movs	r3, #8
 8003ee4:	e00c      	b.n	8003f00 <HAL_GPIO_Init+0x228>
 8003ee6:	2306      	movs	r3, #6
 8003ee8:	e00a      	b.n	8003f00 <HAL_GPIO_Init+0x228>
 8003eea:	2305      	movs	r3, #5
 8003eec:	e008      	b.n	8003f00 <HAL_GPIO_Init+0x228>
 8003eee:	2304      	movs	r3, #4
 8003ef0:	e006      	b.n	8003f00 <HAL_GPIO_Init+0x228>
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e004      	b.n	8003f00 <HAL_GPIO_Init+0x228>
 8003ef6:	2302      	movs	r3, #2
 8003ef8:	e002      	b.n	8003f00 <HAL_GPIO_Init+0x228>
 8003efa:	2301      	movs	r3, #1
 8003efc:	e000      	b.n	8003f00 <HAL_GPIO_Init+0x228>
 8003efe:	2300      	movs	r3, #0
 8003f00:	69fa      	ldr	r2, [r7, #28]
 8003f02:	f002 0203 	and.w	r2, r2, #3
 8003f06:	0092      	lsls	r2, r2, #2
 8003f08:	4093      	lsls	r3, r2
 8003f0a:	69ba      	ldr	r2, [r7, #24]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f10:	4935      	ldr	r1, [pc, #212]	; (8003fe8 <HAL_GPIO_Init+0x310>)
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	089b      	lsrs	r3, r3, #2
 8003f16:	3302      	adds	r3, #2
 8003f18:	69ba      	ldr	r2, [r7, #24]
 8003f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f1e:	4b3b      	ldr	r3, [pc, #236]	; (800400c <HAL_GPIO_Init+0x334>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	43db      	mvns	r3, r3
 8003f28:	69ba      	ldr	r2, [r7, #24]
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d003      	beq.n	8003f42 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003f3a:	69ba      	ldr	r2, [r7, #24]
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f42:	4a32      	ldr	r2, [pc, #200]	; (800400c <HAL_GPIO_Init+0x334>)
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003f48:	4b30      	ldr	r3, [pc, #192]	; (800400c <HAL_GPIO_Init+0x334>)
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	43db      	mvns	r3, r3
 8003f52:	69ba      	ldr	r2, [r7, #24]
 8003f54:	4013      	ands	r3, r2
 8003f56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d003      	beq.n	8003f6c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003f64:	69ba      	ldr	r2, [r7, #24]
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f6c:	4a27      	ldr	r2, [pc, #156]	; (800400c <HAL_GPIO_Init+0x334>)
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f72:	4b26      	ldr	r3, [pc, #152]	; (800400c <HAL_GPIO_Init+0x334>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	43db      	mvns	r3, r3
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	4013      	ands	r3, r2
 8003f80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d003      	beq.n	8003f96 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003f8e:	69ba      	ldr	r2, [r7, #24]
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f96:	4a1d      	ldr	r2, [pc, #116]	; (800400c <HAL_GPIO_Init+0x334>)
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f9c:	4b1b      	ldr	r3, [pc, #108]	; (800400c <HAL_GPIO_Init+0x334>)
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	43db      	mvns	r3, r3
 8003fa6:	69ba      	ldr	r2, [r7, #24]
 8003fa8:	4013      	ands	r3, r2
 8003faa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d003      	beq.n	8003fc0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003fb8:	69ba      	ldr	r2, [r7, #24]
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003fc0:	4a12      	ldr	r2, [pc, #72]	; (800400c <HAL_GPIO_Init+0x334>)
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	3301      	adds	r3, #1
 8003fca:	61fb      	str	r3, [r7, #28]
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	2b0f      	cmp	r3, #15
 8003fd0:	f67f ae90 	bls.w	8003cf4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003fd4:	bf00      	nop
 8003fd6:	bf00      	nop
 8003fd8:	3724      	adds	r7, #36	; 0x24
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
 8003fe2:	bf00      	nop
 8003fe4:	40023800 	.word	0x40023800
 8003fe8:	40013800 	.word	0x40013800
 8003fec:	40020000 	.word	0x40020000
 8003ff0:	40020400 	.word	0x40020400
 8003ff4:	40020800 	.word	0x40020800
 8003ff8:	40020c00 	.word	0x40020c00
 8003ffc:	40021000 	.word	0x40021000
 8004000:	40021400 	.word	0x40021400
 8004004:	40021800 	.word	0x40021800
 8004008:	40021c00 	.word	0x40021c00
 800400c:	40013c00 	.word	0x40013c00

08004010 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	460b      	mov	r3, r1
 800401a:	807b      	strh	r3, [r7, #2]
 800401c:	4613      	mov	r3, r2
 800401e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004020:	787b      	ldrb	r3, [r7, #1]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d003      	beq.n	800402e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004026:	887a      	ldrh	r2, [r7, #2]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800402c:	e003      	b.n	8004036 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800402e:	887b      	ldrh	r3, [r7, #2]
 8004030:	041a      	lsls	r2, r3, #16
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	619a      	str	r2, [r3, #24]
}
 8004036:	bf00      	nop
 8004038:	370c      	adds	r7, #12
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr

08004042 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004042:	b480      	push	{r7}
 8004044:	b085      	sub	sp, #20
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
 800404a:	460b      	mov	r3, r1
 800404c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004054:	887a      	ldrh	r2, [r7, #2]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	4013      	ands	r3, r2
 800405a:	041a      	lsls	r2, r3, #16
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	43d9      	mvns	r1, r3
 8004060:	887b      	ldrh	r3, [r7, #2]
 8004062:	400b      	ands	r3, r1
 8004064:	431a      	orrs	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	619a      	str	r2, [r3, #24]
}
 800406a:	bf00      	nop
 800406c:	3714      	adds	r7, #20
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
	...

08004078 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b086      	sub	sp, #24
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d101      	bne.n	800408a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e264      	b.n	8004554 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b00      	cmp	r3, #0
 8004094:	d075      	beq.n	8004182 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004096:	4ba3      	ldr	r3, [pc, #652]	; (8004324 <HAL_RCC_OscConfig+0x2ac>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f003 030c 	and.w	r3, r3, #12
 800409e:	2b04      	cmp	r3, #4
 80040a0:	d00c      	beq.n	80040bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040a2:	4ba0      	ldr	r3, [pc, #640]	; (8004324 <HAL_RCC_OscConfig+0x2ac>)
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040aa:	2b08      	cmp	r3, #8
 80040ac:	d112      	bne.n	80040d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040ae:	4b9d      	ldr	r3, [pc, #628]	; (8004324 <HAL_RCC_OscConfig+0x2ac>)
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040ba:	d10b      	bne.n	80040d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040bc:	4b99      	ldr	r3, [pc, #612]	; (8004324 <HAL_RCC_OscConfig+0x2ac>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d05b      	beq.n	8004180 <HAL_RCC_OscConfig+0x108>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d157      	bne.n	8004180 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e23f      	b.n	8004554 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040dc:	d106      	bne.n	80040ec <HAL_RCC_OscConfig+0x74>
 80040de:	4b91      	ldr	r3, [pc, #580]	; (8004324 <HAL_RCC_OscConfig+0x2ac>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a90      	ldr	r2, [pc, #576]	; (8004324 <HAL_RCC_OscConfig+0x2ac>)
 80040e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040e8:	6013      	str	r3, [r2, #0]
 80040ea:	e01d      	b.n	8004128 <HAL_RCC_OscConfig+0xb0>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040f4:	d10c      	bne.n	8004110 <HAL_RCC_OscConfig+0x98>
 80040f6:	4b8b      	ldr	r3, [pc, #556]	; (8004324 <HAL_RCC_OscConfig+0x2ac>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a8a      	ldr	r2, [pc, #552]	; (8004324 <HAL_RCC_OscConfig+0x2ac>)
 80040fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004100:	6013      	str	r3, [r2, #0]
 8004102:	4b88      	ldr	r3, [pc, #544]	; (8004324 <HAL_RCC_OscConfig+0x2ac>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a87      	ldr	r2, [pc, #540]	; (8004324 <HAL_RCC_OscConfig+0x2ac>)
 8004108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800410c:	6013      	str	r3, [r2, #0]
 800410e:	e00b      	b.n	8004128 <HAL_RCC_OscConfig+0xb0>
 8004110:	4b84      	ldr	r3, [pc, #528]	; (8004324 <HAL_RCC_OscConfig+0x2ac>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a83      	ldr	r2, [pc, #524]	; (8004324 <HAL_RCC_OscConfig+0x2ac>)
 8004116:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800411a:	6013      	str	r3, [r2, #0]
 800411c:	4b81      	ldr	r3, [pc, #516]	; (8004324 <HAL_RCC_OscConfig+0x2ac>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a80      	ldr	r2, [pc, #512]	; (8004324 <HAL_RCC_OscConfig+0x2ac>)
 8004122:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004126:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d013      	beq.n	8004158 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004130:	f7ff fc90 	bl	8003a54 <HAL_GetTick>
 8004134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004136:	e008      	b.n	800414a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004138:	f7ff fc8c 	bl	8003a54 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b64      	cmp	r3, #100	; 0x64
 8004144:	d901      	bls.n	800414a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e204      	b.n	8004554 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800414a:	4b76      	ldr	r3, [pc, #472]	; (8004324 <HAL_RCC_OscConfig+0x2ac>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d0f0      	beq.n	8004138 <HAL_RCC_OscConfig+0xc0>
 8004156:	e014      	b.n	8004182 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004158:	f7ff fc7c 	bl	8003a54 <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800415e:	e008      	b.n	8004172 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004160:	f7ff fc78 	bl	8003a54 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b64      	cmp	r3, #100	; 0x64
 800416c:	d901      	bls.n	8004172 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e1f0      	b.n	8004554 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004172:	4b6c      	ldr	r3, [pc, #432]	; (8004324 <HAL_RCC_OscConfig+0x2ac>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1f0      	bne.n	8004160 <HAL_RCC_OscConfig+0xe8>
 800417e:	e000      	b.n	8004182 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004180:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0302 	and.w	r3, r3, #2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d063      	beq.n	8004256 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800418e:	4b65      	ldr	r3, [pc, #404]	; (8004324 <HAL_RCC_OscConfig+0x2ac>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f003 030c 	and.w	r3, r3, #12
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00b      	beq.n	80041b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800419a:	4b62      	ldr	r3, [pc, #392]	; (8004324 <HAL_RCC_OscConfig+0x2ac>)
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041a2:	2b08      	cmp	r3, #8
 80041a4:	d11c      	bne.n	80041e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041a6:	4b5f      	ldr	r3, [pc, #380]	; (8004324 <HAL_RCC_OscConfig+0x2ac>)
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d116      	bne.n	80041e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041b2:	4b5c      	ldr	r3, [pc, #368]	; (8004324 <HAL_RCC_OscConfig+0x2ac>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0302 	and.w	r3, r3, #2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d005      	beq.n	80041ca <HAL_RCC_OscConfig+0x152>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d001      	beq.n	80041ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e1c4      	b.n	8004554 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ca:	4b56      	ldr	r3, [pc, #344]	; (8004324 <HAL_RCC_OscConfig+0x2ac>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	00db      	lsls	r3, r3, #3
 80041d8:	4952      	ldr	r1, [pc, #328]	; (8004324 <HAL_RCC_OscConfig+0x2ac>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041de:	e03a      	b.n	8004256 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d020      	beq.n	800422a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041e8:	4b4f      	ldr	r3, [pc, #316]	; (8004328 <HAL_RCC_OscConfig+0x2b0>)
 80041ea:	2201      	movs	r2, #1
 80041ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ee:	f7ff fc31 	bl	8003a54 <HAL_GetTick>
 80041f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041f4:	e008      	b.n	8004208 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041f6:	f7ff fc2d 	bl	8003a54 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	2b02      	cmp	r3, #2
 8004202:	d901      	bls.n	8004208 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e1a5      	b.n	8004554 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004208:	4b46      	ldr	r3, [pc, #280]	; (8004324 <HAL_RCC_OscConfig+0x2ac>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0302 	and.w	r3, r3, #2
 8004210:	2b00      	cmp	r3, #0
 8004212:	d0f0      	beq.n	80041f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004214:	4b43      	ldr	r3, [pc, #268]	; (8004324 <HAL_RCC_OscConfig+0x2ac>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	00db      	lsls	r3, r3, #3
 8004222:	4940      	ldr	r1, [pc, #256]	; (8004324 <HAL_RCC_OscConfig+0x2ac>)
 8004224:	4313      	orrs	r3, r2
 8004226:	600b      	str	r3, [r1, #0]
 8004228:	e015      	b.n	8004256 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800422a:	4b3f      	ldr	r3, [pc, #252]	; (8004328 <HAL_RCC_OscConfig+0x2b0>)
 800422c:	2200      	movs	r2, #0
 800422e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004230:	f7ff fc10 	bl	8003a54 <HAL_GetTick>
 8004234:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004236:	e008      	b.n	800424a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004238:	f7ff fc0c 	bl	8003a54 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b02      	cmp	r3, #2
 8004244:	d901      	bls.n	800424a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e184      	b.n	8004554 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800424a:	4b36      	ldr	r3, [pc, #216]	; (8004324 <HAL_RCC_OscConfig+0x2ac>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0302 	and.w	r3, r3, #2
 8004252:	2b00      	cmp	r3, #0
 8004254:	d1f0      	bne.n	8004238 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0308 	and.w	r3, r3, #8
 800425e:	2b00      	cmp	r3, #0
 8004260:	d030      	beq.n	80042c4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d016      	beq.n	8004298 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800426a:	4b30      	ldr	r3, [pc, #192]	; (800432c <HAL_RCC_OscConfig+0x2b4>)
 800426c:	2201      	movs	r2, #1
 800426e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004270:	f7ff fbf0 	bl	8003a54 <HAL_GetTick>
 8004274:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004276:	e008      	b.n	800428a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004278:	f7ff fbec 	bl	8003a54 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	2b02      	cmp	r3, #2
 8004284:	d901      	bls.n	800428a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e164      	b.n	8004554 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800428a:	4b26      	ldr	r3, [pc, #152]	; (8004324 <HAL_RCC_OscConfig+0x2ac>)
 800428c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800428e:	f003 0302 	and.w	r3, r3, #2
 8004292:	2b00      	cmp	r3, #0
 8004294:	d0f0      	beq.n	8004278 <HAL_RCC_OscConfig+0x200>
 8004296:	e015      	b.n	80042c4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004298:	4b24      	ldr	r3, [pc, #144]	; (800432c <HAL_RCC_OscConfig+0x2b4>)
 800429a:	2200      	movs	r2, #0
 800429c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800429e:	f7ff fbd9 	bl	8003a54 <HAL_GetTick>
 80042a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042a4:	e008      	b.n	80042b8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042a6:	f7ff fbd5 	bl	8003a54 <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d901      	bls.n	80042b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e14d      	b.n	8004554 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042b8:	4b1a      	ldr	r3, [pc, #104]	; (8004324 <HAL_RCC_OscConfig+0x2ac>)
 80042ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042bc:	f003 0302 	and.w	r3, r3, #2
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1f0      	bne.n	80042a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0304 	and.w	r3, r3, #4
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f000 80a0 	beq.w	8004412 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042d2:	2300      	movs	r3, #0
 80042d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042d6:	4b13      	ldr	r3, [pc, #76]	; (8004324 <HAL_RCC_OscConfig+0x2ac>)
 80042d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d10f      	bne.n	8004302 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042e2:	2300      	movs	r3, #0
 80042e4:	60bb      	str	r3, [r7, #8]
 80042e6:	4b0f      	ldr	r3, [pc, #60]	; (8004324 <HAL_RCC_OscConfig+0x2ac>)
 80042e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ea:	4a0e      	ldr	r2, [pc, #56]	; (8004324 <HAL_RCC_OscConfig+0x2ac>)
 80042ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042f0:	6413      	str	r3, [r2, #64]	; 0x40
 80042f2:	4b0c      	ldr	r3, [pc, #48]	; (8004324 <HAL_RCC_OscConfig+0x2ac>)
 80042f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042fa:	60bb      	str	r3, [r7, #8]
 80042fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042fe:	2301      	movs	r3, #1
 8004300:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004302:	4b0b      	ldr	r3, [pc, #44]	; (8004330 <HAL_RCC_OscConfig+0x2b8>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800430a:	2b00      	cmp	r3, #0
 800430c:	d121      	bne.n	8004352 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800430e:	4b08      	ldr	r3, [pc, #32]	; (8004330 <HAL_RCC_OscConfig+0x2b8>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a07      	ldr	r2, [pc, #28]	; (8004330 <HAL_RCC_OscConfig+0x2b8>)
 8004314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004318:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800431a:	f7ff fb9b 	bl	8003a54 <HAL_GetTick>
 800431e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004320:	e011      	b.n	8004346 <HAL_RCC_OscConfig+0x2ce>
 8004322:	bf00      	nop
 8004324:	40023800 	.word	0x40023800
 8004328:	42470000 	.word	0x42470000
 800432c:	42470e80 	.word	0x42470e80
 8004330:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004334:	f7ff fb8e 	bl	8003a54 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	2b02      	cmp	r3, #2
 8004340:	d901      	bls.n	8004346 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e106      	b.n	8004554 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004346:	4b85      	ldr	r3, [pc, #532]	; (800455c <HAL_RCC_OscConfig+0x4e4>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800434e:	2b00      	cmp	r3, #0
 8004350:	d0f0      	beq.n	8004334 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	2b01      	cmp	r3, #1
 8004358:	d106      	bne.n	8004368 <HAL_RCC_OscConfig+0x2f0>
 800435a:	4b81      	ldr	r3, [pc, #516]	; (8004560 <HAL_RCC_OscConfig+0x4e8>)
 800435c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800435e:	4a80      	ldr	r2, [pc, #512]	; (8004560 <HAL_RCC_OscConfig+0x4e8>)
 8004360:	f043 0301 	orr.w	r3, r3, #1
 8004364:	6713      	str	r3, [r2, #112]	; 0x70
 8004366:	e01c      	b.n	80043a2 <HAL_RCC_OscConfig+0x32a>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	2b05      	cmp	r3, #5
 800436e:	d10c      	bne.n	800438a <HAL_RCC_OscConfig+0x312>
 8004370:	4b7b      	ldr	r3, [pc, #492]	; (8004560 <HAL_RCC_OscConfig+0x4e8>)
 8004372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004374:	4a7a      	ldr	r2, [pc, #488]	; (8004560 <HAL_RCC_OscConfig+0x4e8>)
 8004376:	f043 0304 	orr.w	r3, r3, #4
 800437a:	6713      	str	r3, [r2, #112]	; 0x70
 800437c:	4b78      	ldr	r3, [pc, #480]	; (8004560 <HAL_RCC_OscConfig+0x4e8>)
 800437e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004380:	4a77      	ldr	r2, [pc, #476]	; (8004560 <HAL_RCC_OscConfig+0x4e8>)
 8004382:	f043 0301 	orr.w	r3, r3, #1
 8004386:	6713      	str	r3, [r2, #112]	; 0x70
 8004388:	e00b      	b.n	80043a2 <HAL_RCC_OscConfig+0x32a>
 800438a:	4b75      	ldr	r3, [pc, #468]	; (8004560 <HAL_RCC_OscConfig+0x4e8>)
 800438c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800438e:	4a74      	ldr	r2, [pc, #464]	; (8004560 <HAL_RCC_OscConfig+0x4e8>)
 8004390:	f023 0301 	bic.w	r3, r3, #1
 8004394:	6713      	str	r3, [r2, #112]	; 0x70
 8004396:	4b72      	ldr	r3, [pc, #456]	; (8004560 <HAL_RCC_OscConfig+0x4e8>)
 8004398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800439a:	4a71      	ldr	r2, [pc, #452]	; (8004560 <HAL_RCC_OscConfig+0x4e8>)
 800439c:	f023 0304 	bic.w	r3, r3, #4
 80043a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d015      	beq.n	80043d6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043aa:	f7ff fb53 	bl	8003a54 <HAL_GetTick>
 80043ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043b0:	e00a      	b.n	80043c8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043b2:	f7ff fb4f 	bl	8003a54 <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d901      	bls.n	80043c8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e0c5      	b.n	8004554 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043c8:	4b65      	ldr	r3, [pc, #404]	; (8004560 <HAL_RCC_OscConfig+0x4e8>)
 80043ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043cc:	f003 0302 	and.w	r3, r3, #2
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d0ee      	beq.n	80043b2 <HAL_RCC_OscConfig+0x33a>
 80043d4:	e014      	b.n	8004400 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043d6:	f7ff fb3d 	bl	8003a54 <HAL_GetTick>
 80043da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043dc:	e00a      	b.n	80043f4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043de:	f7ff fb39 	bl	8003a54 <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d901      	bls.n	80043f4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e0af      	b.n	8004554 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043f4:	4b5a      	ldr	r3, [pc, #360]	; (8004560 <HAL_RCC_OscConfig+0x4e8>)
 80043f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f8:	f003 0302 	and.w	r3, r3, #2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d1ee      	bne.n	80043de <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004400:	7dfb      	ldrb	r3, [r7, #23]
 8004402:	2b01      	cmp	r3, #1
 8004404:	d105      	bne.n	8004412 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004406:	4b56      	ldr	r3, [pc, #344]	; (8004560 <HAL_RCC_OscConfig+0x4e8>)
 8004408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440a:	4a55      	ldr	r2, [pc, #340]	; (8004560 <HAL_RCC_OscConfig+0x4e8>)
 800440c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004410:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	2b00      	cmp	r3, #0
 8004418:	f000 809b 	beq.w	8004552 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800441c:	4b50      	ldr	r3, [pc, #320]	; (8004560 <HAL_RCC_OscConfig+0x4e8>)
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f003 030c 	and.w	r3, r3, #12
 8004424:	2b08      	cmp	r3, #8
 8004426:	d05c      	beq.n	80044e2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	699b      	ldr	r3, [r3, #24]
 800442c:	2b02      	cmp	r3, #2
 800442e:	d141      	bne.n	80044b4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004430:	4b4c      	ldr	r3, [pc, #304]	; (8004564 <HAL_RCC_OscConfig+0x4ec>)
 8004432:	2200      	movs	r2, #0
 8004434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004436:	f7ff fb0d 	bl	8003a54 <HAL_GetTick>
 800443a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800443c:	e008      	b.n	8004450 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800443e:	f7ff fb09 	bl	8003a54 <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	2b02      	cmp	r3, #2
 800444a:	d901      	bls.n	8004450 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e081      	b.n	8004554 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004450:	4b43      	ldr	r3, [pc, #268]	; (8004560 <HAL_RCC_OscConfig+0x4e8>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d1f0      	bne.n	800443e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	69da      	ldr	r2, [r3, #28]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a1b      	ldr	r3, [r3, #32]
 8004464:	431a      	orrs	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446a:	019b      	lsls	r3, r3, #6
 800446c:	431a      	orrs	r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004472:	085b      	lsrs	r3, r3, #1
 8004474:	3b01      	subs	r3, #1
 8004476:	041b      	lsls	r3, r3, #16
 8004478:	431a      	orrs	r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447e:	061b      	lsls	r3, r3, #24
 8004480:	4937      	ldr	r1, [pc, #220]	; (8004560 <HAL_RCC_OscConfig+0x4e8>)
 8004482:	4313      	orrs	r3, r2
 8004484:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004486:	4b37      	ldr	r3, [pc, #220]	; (8004564 <HAL_RCC_OscConfig+0x4ec>)
 8004488:	2201      	movs	r2, #1
 800448a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800448c:	f7ff fae2 	bl	8003a54 <HAL_GetTick>
 8004490:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004492:	e008      	b.n	80044a6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004494:	f7ff fade 	bl	8003a54 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d901      	bls.n	80044a6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e056      	b.n	8004554 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044a6:	4b2e      	ldr	r3, [pc, #184]	; (8004560 <HAL_RCC_OscConfig+0x4e8>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d0f0      	beq.n	8004494 <HAL_RCC_OscConfig+0x41c>
 80044b2:	e04e      	b.n	8004552 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044b4:	4b2b      	ldr	r3, [pc, #172]	; (8004564 <HAL_RCC_OscConfig+0x4ec>)
 80044b6:	2200      	movs	r2, #0
 80044b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ba:	f7ff facb 	bl	8003a54 <HAL_GetTick>
 80044be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044c0:	e008      	b.n	80044d4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044c2:	f7ff fac7 	bl	8003a54 <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d901      	bls.n	80044d4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e03f      	b.n	8004554 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044d4:	4b22      	ldr	r3, [pc, #136]	; (8004560 <HAL_RCC_OscConfig+0x4e8>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1f0      	bne.n	80044c2 <HAL_RCC_OscConfig+0x44a>
 80044e0:	e037      	b.n	8004552 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d101      	bne.n	80044ee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e032      	b.n	8004554 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044ee:	4b1c      	ldr	r3, [pc, #112]	; (8004560 <HAL_RCC_OscConfig+0x4e8>)
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d028      	beq.n	800454e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004506:	429a      	cmp	r2, r3
 8004508:	d121      	bne.n	800454e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004514:	429a      	cmp	r2, r3
 8004516:	d11a      	bne.n	800454e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800451e:	4013      	ands	r3, r2
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004524:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004526:	4293      	cmp	r3, r2
 8004528:	d111      	bne.n	800454e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004534:	085b      	lsrs	r3, r3, #1
 8004536:	3b01      	subs	r3, #1
 8004538:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800453a:	429a      	cmp	r2, r3
 800453c:	d107      	bne.n	800454e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004548:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800454a:	429a      	cmp	r2, r3
 800454c:	d001      	beq.n	8004552 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e000      	b.n	8004554 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3718      	adds	r7, #24
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	40007000 	.word	0x40007000
 8004560:	40023800 	.word	0x40023800
 8004564:	42470060 	.word	0x42470060

08004568 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d101      	bne.n	800457c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e0cc      	b.n	8004716 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800457c:	4b68      	ldr	r3, [pc, #416]	; (8004720 <HAL_RCC_ClockConfig+0x1b8>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0307 	and.w	r3, r3, #7
 8004584:	683a      	ldr	r2, [r7, #0]
 8004586:	429a      	cmp	r2, r3
 8004588:	d90c      	bls.n	80045a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800458a:	4b65      	ldr	r3, [pc, #404]	; (8004720 <HAL_RCC_ClockConfig+0x1b8>)
 800458c:	683a      	ldr	r2, [r7, #0]
 800458e:	b2d2      	uxtb	r2, r2
 8004590:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004592:	4b63      	ldr	r3, [pc, #396]	; (8004720 <HAL_RCC_ClockConfig+0x1b8>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0307 	and.w	r3, r3, #7
 800459a:	683a      	ldr	r2, [r7, #0]
 800459c:	429a      	cmp	r2, r3
 800459e:	d001      	beq.n	80045a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e0b8      	b.n	8004716 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0302 	and.w	r3, r3, #2
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d020      	beq.n	80045f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0304 	and.w	r3, r3, #4
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d005      	beq.n	80045c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045bc:	4b59      	ldr	r3, [pc, #356]	; (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	4a58      	ldr	r2, [pc, #352]	; (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 80045c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80045c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0308 	and.w	r3, r3, #8
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d005      	beq.n	80045e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045d4:	4b53      	ldr	r3, [pc, #332]	; (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	4a52      	ldr	r2, [pc, #328]	; (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 80045da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80045de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045e0:	4b50      	ldr	r3, [pc, #320]	; (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	494d      	ldr	r1, [pc, #308]	; (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0301 	and.w	r3, r3, #1
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d044      	beq.n	8004688 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	2b01      	cmp	r3, #1
 8004604:	d107      	bne.n	8004616 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004606:	4b47      	ldr	r3, [pc, #284]	; (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d119      	bne.n	8004646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e07f      	b.n	8004716 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	2b02      	cmp	r3, #2
 800461c:	d003      	beq.n	8004626 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004622:	2b03      	cmp	r3, #3
 8004624:	d107      	bne.n	8004636 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004626:	4b3f      	ldr	r3, [pc, #252]	; (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d109      	bne.n	8004646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e06f      	b.n	8004716 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004636:	4b3b      	ldr	r3, [pc, #236]	; (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d101      	bne.n	8004646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e067      	b.n	8004716 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004646:	4b37      	ldr	r3, [pc, #220]	; (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f023 0203 	bic.w	r2, r3, #3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	4934      	ldr	r1, [pc, #208]	; (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 8004654:	4313      	orrs	r3, r2
 8004656:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004658:	f7ff f9fc 	bl	8003a54 <HAL_GetTick>
 800465c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800465e:	e00a      	b.n	8004676 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004660:	f7ff f9f8 	bl	8003a54 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	f241 3288 	movw	r2, #5000	; 0x1388
 800466e:	4293      	cmp	r3, r2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e04f      	b.n	8004716 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004676:	4b2b      	ldr	r3, [pc, #172]	; (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f003 020c 	and.w	r2, r3, #12
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	429a      	cmp	r2, r3
 8004686:	d1eb      	bne.n	8004660 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004688:	4b25      	ldr	r3, [pc, #148]	; (8004720 <HAL_RCC_ClockConfig+0x1b8>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0307 	and.w	r3, r3, #7
 8004690:	683a      	ldr	r2, [r7, #0]
 8004692:	429a      	cmp	r2, r3
 8004694:	d20c      	bcs.n	80046b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004696:	4b22      	ldr	r3, [pc, #136]	; (8004720 <HAL_RCC_ClockConfig+0x1b8>)
 8004698:	683a      	ldr	r2, [r7, #0]
 800469a:	b2d2      	uxtb	r2, r2
 800469c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800469e:	4b20      	ldr	r3, [pc, #128]	; (8004720 <HAL_RCC_ClockConfig+0x1b8>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0307 	and.w	r3, r3, #7
 80046a6:	683a      	ldr	r2, [r7, #0]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d001      	beq.n	80046b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e032      	b.n	8004716 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0304 	and.w	r3, r3, #4
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d008      	beq.n	80046ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046bc:	4b19      	ldr	r3, [pc, #100]	; (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	4916      	ldr	r1, [pc, #88]	; (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0308 	and.w	r3, r3, #8
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d009      	beq.n	80046ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046da:	4b12      	ldr	r3, [pc, #72]	; (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	00db      	lsls	r3, r3, #3
 80046e8:	490e      	ldr	r1, [pc, #56]	; (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046ee:	f000 f821 	bl	8004734 <HAL_RCC_GetSysClockFreq>
 80046f2:	4602      	mov	r2, r0
 80046f4:	4b0b      	ldr	r3, [pc, #44]	; (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	091b      	lsrs	r3, r3, #4
 80046fa:	f003 030f 	and.w	r3, r3, #15
 80046fe:	490a      	ldr	r1, [pc, #40]	; (8004728 <HAL_RCC_ClockConfig+0x1c0>)
 8004700:	5ccb      	ldrb	r3, [r1, r3]
 8004702:	fa22 f303 	lsr.w	r3, r2, r3
 8004706:	4a09      	ldr	r2, [pc, #36]	; (800472c <HAL_RCC_ClockConfig+0x1c4>)
 8004708:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800470a:	4b09      	ldr	r3, [pc, #36]	; (8004730 <HAL_RCC_ClockConfig+0x1c8>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4618      	mov	r0, r3
 8004710:	f7ff f95c 	bl	80039cc <HAL_InitTick>

  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3710      	adds	r7, #16
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	40023c00 	.word	0x40023c00
 8004724:	40023800 	.word	0x40023800
 8004728:	08005204 	.word	0x08005204
 800472c:	20000000 	.word	0x20000000
 8004730:	20000064 	.word	0x20000064

08004734 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004734:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004738:	b084      	sub	sp, #16
 800473a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800473c:	2300      	movs	r3, #0
 800473e:	607b      	str	r3, [r7, #4]
 8004740:	2300      	movs	r3, #0
 8004742:	60fb      	str	r3, [r7, #12]
 8004744:	2300      	movs	r3, #0
 8004746:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004748:	2300      	movs	r3, #0
 800474a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800474c:	4b67      	ldr	r3, [pc, #412]	; (80048ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f003 030c 	and.w	r3, r3, #12
 8004754:	2b08      	cmp	r3, #8
 8004756:	d00d      	beq.n	8004774 <HAL_RCC_GetSysClockFreq+0x40>
 8004758:	2b08      	cmp	r3, #8
 800475a:	f200 80bd 	bhi.w	80048d8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800475e:	2b00      	cmp	r3, #0
 8004760:	d002      	beq.n	8004768 <HAL_RCC_GetSysClockFreq+0x34>
 8004762:	2b04      	cmp	r3, #4
 8004764:	d003      	beq.n	800476e <HAL_RCC_GetSysClockFreq+0x3a>
 8004766:	e0b7      	b.n	80048d8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004768:	4b61      	ldr	r3, [pc, #388]	; (80048f0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800476a:	60bb      	str	r3, [r7, #8]
       break;
 800476c:	e0b7      	b.n	80048de <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800476e:	4b61      	ldr	r3, [pc, #388]	; (80048f4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004770:	60bb      	str	r3, [r7, #8]
      break;
 8004772:	e0b4      	b.n	80048de <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004774:	4b5d      	ldr	r3, [pc, #372]	; (80048ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800477c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800477e:	4b5b      	ldr	r3, [pc, #364]	; (80048ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d04d      	beq.n	8004826 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800478a:	4b58      	ldr	r3, [pc, #352]	; (80048ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	099b      	lsrs	r3, r3, #6
 8004790:	461a      	mov	r2, r3
 8004792:	f04f 0300 	mov.w	r3, #0
 8004796:	f240 10ff 	movw	r0, #511	; 0x1ff
 800479a:	f04f 0100 	mov.w	r1, #0
 800479e:	ea02 0800 	and.w	r8, r2, r0
 80047a2:	ea03 0901 	and.w	r9, r3, r1
 80047a6:	4640      	mov	r0, r8
 80047a8:	4649      	mov	r1, r9
 80047aa:	f04f 0200 	mov.w	r2, #0
 80047ae:	f04f 0300 	mov.w	r3, #0
 80047b2:	014b      	lsls	r3, r1, #5
 80047b4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80047b8:	0142      	lsls	r2, r0, #5
 80047ba:	4610      	mov	r0, r2
 80047bc:	4619      	mov	r1, r3
 80047be:	ebb0 0008 	subs.w	r0, r0, r8
 80047c2:	eb61 0109 	sbc.w	r1, r1, r9
 80047c6:	f04f 0200 	mov.w	r2, #0
 80047ca:	f04f 0300 	mov.w	r3, #0
 80047ce:	018b      	lsls	r3, r1, #6
 80047d0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80047d4:	0182      	lsls	r2, r0, #6
 80047d6:	1a12      	subs	r2, r2, r0
 80047d8:	eb63 0301 	sbc.w	r3, r3, r1
 80047dc:	f04f 0000 	mov.w	r0, #0
 80047e0:	f04f 0100 	mov.w	r1, #0
 80047e4:	00d9      	lsls	r1, r3, #3
 80047e6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80047ea:	00d0      	lsls	r0, r2, #3
 80047ec:	4602      	mov	r2, r0
 80047ee:	460b      	mov	r3, r1
 80047f0:	eb12 0208 	adds.w	r2, r2, r8
 80047f4:	eb43 0309 	adc.w	r3, r3, r9
 80047f8:	f04f 0000 	mov.w	r0, #0
 80047fc:	f04f 0100 	mov.w	r1, #0
 8004800:	0259      	lsls	r1, r3, #9
 8004802:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004806:	0250      	lsls	r0, r2, #9
 8004808:	4602      	mov	r2, r0
 800480a:	460b      	mov	r3, r1
 800480c:	4610      	mov	r0, r2
 800480e:	4619      	mov	r1, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	461a      	mov	r2, r3
 8004814:	f04f 0300 	mov.w	r3, #0
 8004818:	f7fc f94c 	bl	8000ab4 <__aeabi_uldivmod>
 800481c:	4602      	mov	r2, r0
 800481e:	460b      	mov	r3, r1
 8004820:	4613      	mov	r3, r2
 8004822:	60fb      	str	r3, [r7, #12]
 8004824:	e04a      	b.n	80048bc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004826:	4b31      	ldr	r3, [pc, #196]	; (80048ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	099b      	lsrs	r3, r3, #6
 800482c:	461a      	mov	r2, r3
 800482e:	f04f 0300 	mov.w	r3, #0
 8004832:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004836:	f04f 0100 	mov.w	r1, #0
 800483a:	ea02 0400 	and.w	r4, r2, r0
 800483e:	ea03 0501 	and.w	r5, r3, r1
 8004842:	4620      	mov	r0, r4
 8004844:	4629      	mov	r1, r5
 8004846:	f04f 0200 	mov.w	r2, #0
 800484a:	f04f 0300 	mov.w	r3, #0
 800484e:	014b      	lsls	r3, r1, #5
 8004850:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004854:	0142      	lsls	r2, r0, #5
 8004856:	4610      	mov	r0, r2
 8004858:	4619      	mov	r1, r3
 800485a:	1b00      	subs	r0, r0, r4
 800485c:	eb61 0105 	sbc.w	r1, r1, r5
 8004860:	f04f 0200 	mov.w	r2, #0
 8004864:	f04f 0300 	mov.w	r3, #0
 8004868:	018b      	lsls	r3, r1, #6
 800486a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800486e:	0182      	lsls	r2, r0, #6
 8004870:	1a12      	subs	r2, r2, r0
 8004872:	eb63 0301 	sbc.w	r3, r3, r1
 8004876:	f04f 0000 	mov.w	r0, #0
 800487a:	f04f 0100 	mov.w	r1, #0
 800487e:	00d9      	lsls	r1, r3, #3
 8004880:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004884:	00d0      	lsls	r0, r2, #3
 8004886:	4602      	mov	r2, r0
 8004888:	460b      	mov	r3, r1
 800488a:	1912      	adds	r2, r2, r4
 800488c:	eb45 0303 	adc.w	r3, r5, r3
 8004890:	f04f 0000 	mov.w	r0, #0
 8004894:	f04f 0100 	mov.w	r1, #0
 8004898:	0299      	lsls	r1, r3, #10
 800489a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800489e:	0290      	lsls	r0, r2, #10
 80048a0:	4602      	mov	r2, r0
 80048a2:	460b      	mov	r3, r1
 80048a4:	4610      	mov	r0, r2
 80048a6:	4619      	mov	r1, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	461a      	mov	r2, r3
 80048ac:	f04f 0300 	mov.w	r3, #0
 80048b0:	f7fc f900 	bl	8000ab4 <__aeabi_uldivmod>
 80048b4:	4602      	mov	r2, r0
 80048b6:	460b      	mov	r3, r1
 80048b8:	4613      	mov	r3, r2
 80048ba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80048bc:	4b0b      	ldr	r3, [pc, #44]	; (80048ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	0c1b      	lsrs	r3, r3, #16
 80048c2:	f003 0303 	and.w	r3, r3, #3
 80048c6:	3301      	adds	r3, #1
 80048c8:	005b      	lsls	r3, r3, #1
 80048ca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d4:	60bb      	str	r3, [r7, #8]
      break;
 80048d6:	e002      	b.n	80048de <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048d8:	4b05      	ldr	r3, [pc, #20]	; (80048f0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80048da:	60bb      	str	r3, [r7, #8]
      break;
 80048dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048de:	68bb      	ldr	r3, [r7, #8]
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3710      	adds	r7, #16
 80048e4:	46bd      	mov	sp, r7
 80048e6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80048ea:	bf00      	nop
 80048ec:	40023800 	.word	0x40023800
 80048f0:	00f42400 	.word	0x00f42400
 80048f4:	007a1200 	.word	0x007a1200

080048f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d101      	bne.n	800490a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e07b      	b.n	8004a02 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490e:	2b00      	cmp	r3, #0
 8004910:	d108      	bne.n	8004924 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800491a:	d009      	beq.n	8004930 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	61da      	str	r2, [r3, #28]
 8004922:	e005      	b.n	8004930 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800493c:	b2db      	uxtb	r3, r3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d106      	bne.n	8004950 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f7fc fbc8 	bl	80010e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2202      	movs	r2, #2
 8004954:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004966:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004978:	431a      	orrs	r2, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004982:	431a      	orrs	r2, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	f003 0302 	and.w	r3, r3, #2
 800498c:	431a      	orrs	r2, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	f003 0301 	and.w	r3, r3, #1
 8004996:	431a      	orrs	r2, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	699b      	ldr	r3, [r3, #24]
 800499c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049a0:	431a      	orrs	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	69db      	ldr	r3, [r3, #28]
 80049a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049aa:	431a      	orrs	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a1b      	ldr	r3, [r3, #32]
 80049b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049b4:	ea42 0103 	orr.w	r1, r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049bc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	430a      	orrs	r2, r1
 80049c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	0c1b      	lsrs	r3, r3, #16
 80049ce:	f003 0104 	and.w	r1, r3, #4
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d6:	f003 0210 	and.w	r2, r3, #16
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	430a      	orrs	r2, r1
 80049e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	69da      	ldr	r2, [r3, #28]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3708      	adds	r7, #8
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004a0a:	b580      	push	{r7, lr}
 8004a0c:	b08c      	sub	sp, #48	; 0x30
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	60f8      	str	r0, [r7, #12]
 8004a12:	60b9      	str	r1, [r7, #8]
 8004a14:	607a      	str	r2, [r7, #4]
 8004a16:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d101      	bne.n	8004a30 <HAL_SPI_TransmitReceive+0x26>
 8004a2c:	2302      	movs	r3, #2
 8004a2e:	e18a      	b.n	8004d46 <HAL_SPI_TransmitReceive+0x33c>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a38:	f7ff f80c 	bl	8003a54 <HAL_GetTick>
 8004a3c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004a4e:	887b      	ldrh	r3, [r7, #2]
 8004a50:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004a52:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d00f      	beq.n	8004a7a <HAL_SPI_TransmitReceive+0x70>
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a60:	d107      	bne.n	8004a72 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d103      	bne.n	8004a72 <HAL_SPI_TransmitReceive+0x68>
 8004a6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a6e:	2b04      	cmp	r3, #4
 8004a70:	d003      	beq.n	8004a7a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004a72:	2302      	movs	r3, #2
 8004a74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004a78:	e15b      	b.n	8004d32 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d005      	beq.n	8004a8c <HAL_SPI_TransmitReceive+0x82>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d002      	beq.n	8004a8c <HAL_SPI_TransmitReceive+0x82>
 8004a86:	887b      	ldrh	r3, [r7, #2]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d103      	bne.n	8004a94 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004a92:	e14e      	b.n	8004d32 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	2b04      	cmp	r3, #4
 8004a9e:	d003      	beq.n	8004aa8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2205      	movs	r2, #5
 8004aa4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	887a      	ldrh	r2, [r7, #2]
 8004ab8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	887a      	ldrh	r2, [r7, #2]
 8004abe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	68ba      	ldr	r2, [r7, #8]
 8004ac4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	887a      	ldrh	r2, [r7, #2]
 8004aca:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	887a      	ldrh	r2, [r7, #2]
 8004ad0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae8:	2b40      	cmp	r3, #64	; 0x40
 8004aea:	d007      	beq.n	8004afc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004afa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b04:	d178      	bne.n	8004bf8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d002      	beq.n	8004b14 <HAL_SPI_TransmitReceive+0x10a>
 8004b0e:	8b7b      	ldrh	r3, [r7, #26]
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d166      	bne.n	8004be2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b18:	881a      	ldrh	r2, [r3, #0]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b24:	1c9a      	adds	r2, r3, #2
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	3b01      	subs	r3, #1
 8004b32:	b29a      	uxth	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b38:	e053      	b.n	8004be2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f003 0302 	and.w	r3, r3, #2
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d11b      	bne.n	8004b80 <HAL_SPI_TransmitReceive+0x176>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d016      	beq.n	8004b80 <HAL_SPI_TransmitReceive+0x176>
 8004b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d113      	bne.n	8004b80 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5c:	881a      	ldrh	r2, [r3, #0]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b68:	1c9a      	adds	r2, r3, #2
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	3b01      	subs	r3, #1
 8004b76:	b29a      	uxth	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f003 0301 	and.w	r3, r3, #1
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d119      	bne.n	8004bc2 <HAL_SPI_TransmitReceive+0x1b8>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d014      	beq.n	8004bc2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68da      	ldr	r2, [r3, #12]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba2:	b292      	uxth	r2, r2
 8004ba4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004baa:	1c9a      	adds	r2, r3, #2
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004bc2:	f7fe ff47 	bl	8003a54 <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d807      	bhi.n	8004be2 <HAL_SPI_TransmitReceive+0x1d8>
 8004bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd8:	d003      	beq.n	8004be2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004be0:	e0a7      	b.n	8004d32 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d1a6      	bne.n	8004b3a <HAL_SPI_TransmitReceive+0x130>
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d1a1      	bne.n	8004b3a <HAL_SPI_TransmitReceive+0x130>
 8004bf6:	e07c      	b.n	8004cf2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d002      	beq.n	8004c06 <HAL_SPI_TransmitReceive+0x1fc>
 8004c00:	8b7b      	ldrh	r3, [r7, #26]
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d16b      	bne.n	8004cde <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	330c      	adds	r3, #12
 8004c10:	7812      	ldrb	r2, [r2, #0]
 8004c12:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c18:	1c5a      	adds	r2, r3, #1
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	3b01      	subs	r3, #1
 8004c26:	b29a      	uxth	r2, r3
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c2c:	e057      	b.n	8004cde <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	f003 0302 	and.w	r3, r3, #2
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d11c      	bne.n	8004c76 <HAL_SPI_TransmitReceive+0x26c>
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d017      	beq.n	8004c76 <HAL_SPI_TransmitReceive+0x26c>
 8004c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d114      	bne.n	8004c76 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	330c      	adds	r3, #12
 8004c56:	7812      	ldrb	r2, [r2, #0]
 8004c58:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c5e:	1c5a      	adds	r2, r3, #1
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	b29a      	uxth	r2, r3
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c72:	2300      	movs	r3, #0
 8004c74:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	f003 0301 	and.w	r3, r3, #1
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d119      	bne.n	8004cb8 <HAL_SPI_TransmitReceive+0x2ae>
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d014      	beq.n	8004cb8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68da      	ldr	r2, [r3, #12]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c98:	b2d2      	uxtb	r2, r2
 8004c9a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca0:	1c5a      	adds	r2, r3, #1
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	3b01      	subs	r3, #1
 8004cae:	b29a      	uxth	r2, r3
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004cb8:	f7fe fecc 	bl	8003a54 <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d803      	bhi.n	8004cd0 <HAL_SPI_TransmitReceive+0x2c6>
 8004cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cce:	d102      	bne.n	8004cd6 <HAL_SPI_TransmitReceive+0x2cc>
 8004cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d103      	bne.n	8004cde <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004cdc:	e029      	b.n	8004d32 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d1a2      	bne.n	8004c2e <HAL_SPI_TransmitReceive+0x224>
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d19d      	bne.n	8004c2e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cf4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004cf6:	68f8      	ldr	r0, [r7, #12]
 8004cf8:	f000 f8b2 	bl	8004e60 <SPI_EndRxTxTransaction>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d006      	beq.n	8004d10 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2220      	movs	r2, #32
 8004d0c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004d0e:	e010      	b.n	8004d32 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d10b      	bne.n	8004d30 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d18:	2300      	movs	r3, #0
 8004d1a:	617b      	str	r3, [r7, #20]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	617b      	str	r3, [r7, #20]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	617b      	str	r3, [r7, #20]
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	e000      	b.n	8004d32 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004d30:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2201      	movs	r2, #1
 8004d36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004d42:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3730      	adds	r7, #48	; 0x30
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
	...

08004d50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b088      	sub	sp, #32
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	603b      	str	r3, [r7, #0]
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004d60:	f7fe fe78 	bl	8003a54 <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d68:	1a9b      	subs	r3, r3, r2
 8004d6a:	683a      	ldr	r2, [r7, #0]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004d70:	f7fe fe70 	bl	8003a54 <HAL_GetTick>
 8004d74:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004d76:	4b39      	ldr	r3, [pc, #228]	; (8004e5c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	015b      	lsls	r3, r3, #5
 8004d7c:	0d1b      	lsrs	r3, r3, #20
 8004d7e:	69fa      	ldr	r2, [r7, #28]
 8004d80:	fb02 f303 	mul.w	r3, r2, r3
 8004d84:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d86:	e054      	b.n	8004e32 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d8e:	d050      	beq.n	8004e32 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d90:	f7fe fe60 	bl	8003a54 <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	69fa      	ldr	r2, [r7, #28]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d902      	bls.n	8004da6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d13d      	bne.n	8004e22 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	685a      	ldr	r2, [r3, #4]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004db4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dbe:	d111      	bne.n	8004de4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dc8:	d004      	beq.n	8004dd4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dd2:	d107      	bne.n	8004de4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004de2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dec:	d10f      	bne.n	8004e0e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004dfc:	601a      	str	r2, [r3, #0]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2201      	movs	r2, #1
 8004e12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e017      	b.n	8004e52 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d101      	bne.n	8004e2c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	689a      	ldr	r2, [r3, #8]
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	68ba      	ldr	r2, [r7, #8]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	bf0c      	ite	eq
 8004e42:	2301      	moveq	r3, #1
 8004e44:	2300      	movne	r3, #0
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	461a      	mov	r2, r3
 8004e4a:	79fb      	ldrb	r3, [r7, #7]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d19b      	bne.n	8004d88 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004e50:	2300      	movs	r3, #0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3720      	adds	r7, #32
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	20000000 	.word	0x20000000

08004e60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b088      	sub	sp, #32
 8004e64:	af02      	add	r7, sp, #8
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004e6c:	4b1b      	ldr	r3, [pc, #108]	; (8004edc <SPI_EndRxTxTransaction+0x7c>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a1b      	ldr	r2, [pc, #108]	; (8004ee0 <SPI_EndRxTxTransaction+0x80>)
 8004e72:	fba2 2303 	umull	r2, r3, r2, r3
 8004e76:	0d5b      	lsrs	r3, r3, #21
 8004e78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e7c:	fb02 f303 	mul.w	r3, r2, r3
 8004e80:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e8a:	d112      	bne.n	8004eb2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	9300      	str	r3, [sp, #0]
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	2200      	movs	r2, #0
 8004e94:	2180      	movs	r1, #128	; 0x80
 8004e96:	68f8      	ldr	r0, [r7, #12]
 8004e98:	f7ff ff5a 	bl	8004d50 <SPI_WaitFlagStateUntilTimeout>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d016      	beq.n	8004ed0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ea6:	f043 0220 	orr.w	r2, r3, #32
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e00f      	b.n	8004ed2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d00a      	beq.n	8004ece <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ec8:	2b80      	cmp	r3, #128	; 0x80
 8004eca:	d0f2      	beq.n	8004eb2 <SPI_EndRxTxTransaction+0x52>
 8004ecc:	e000      	b.n	8004ed0 <SPI_EndRxTxTransaction+0x70>
        break;
 8004ece:	bf00      	nop
  }

  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3718      	adds	r7, #24
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	20000000 	.word	0x20000000
 8004ee0:	165e9f81 	.word	0x165e9f81

08004ee4 <__libc_init_array>:
 8004ee4:	b570      	push	{r4, r5, r6, lr}
 8004ee6:	4d0d      	ldr	r5, [pc, #52]	; (8004f1c <__libc_init_array+0x38>)
 8004ee8:	4c0d      	ldr	r4, [pc, #52]	; (8004f20 <__libc_init_array+0x3c>)
 8004eea:	1b64      	subs	r4, r4, r5
 8004eec:	10a4      	asrs	r4, r4, #2
 8004eee:	2600      	movs	r6, #0
 8004ef0:	42a6      	cmp	r6, r4
 8004ef2:	d109      	bne.n	8004f08 <__libc_init_array+0x24>
 8004ef4:	4d0b      	ldr	r5, [pc, #44]	; (8004f24 <__libc_init_array+0x40>)
 8004ef6:	4c0c      	ldr	r4, [pc, #48]	; (8004f28 <__libc_init_array+0x44>)
 8004ef8:	f000 f978 	bl	80051ec <_init>
 8004efc:	1b64      	subs	r4, r4, r5
 8004efe:	10a4      	asrs	r4, r4, #2
 8004f00:	2600      	movs	r6, #0
 8004f02:	42a6      	cmp	r6, r4
 8004f04:	d105      	bne.n	8004f12 <__libc_init_array+0x2e>
 8004f06:	bd70      	pop	{r4, r5, r6, pc}
 8004f08:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f0c:	4798      	blx	r3
 8004f0e:	3601      	adds	r6, #1
 8004f10:	e7ee      	b.n	8004ef0 <__libc_init_array+0xc>
 8004f12:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f16:	4798      	blx	r3
 8004f18:	3601      	adds	r6, #1
 8004f1a:	e7f2      	b.n	8004f02 <__libc_init_array+0x1e>
 8004f1c:	08005398 	.word	0x08005398
 8004f20:	08005398 	.word	0x08005398
 8004f24:	08005398 	.word	0x08005398
 8004f28:	0800539c 	.word	0x0800539c

08004f2c <memcpy>:
 8004f2c:	440a      	add	r2, r1
 8004f2e:	4291      	cmp	r1, r2
 8004f30:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f34:	d100      	bne.n	8004f38 <memcpy+0xc>
 8004f36:	4770      	bx	lr
 8004f38:	b510      	push	{r4, lr}
 8004f3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f42:	4291      	cmp	r1, r2
 8004f44:	d1f9      	bne.n	8004f3a <memcpy+0xe>
 8004f46:	bd10      	pop	{r4, pc}

08004f48 <memset>:
 8004f48:	4402      	add	r2, r0
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d100      	bne.n	8004f52 <memset+0xa>
 8004f50:	4770      	bx	lr
 8004f52:	f803 1b01 	strb.w	r1, [r3], #1
 8004f56:	e7f9      	b.n	8004f4c <memset+0x4>

08004f58 <ceil>:
 8004f58:	ec51 0b10 	vmov	r0, r1, d0
 8004f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f60:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8004f64:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8004f68:	2e13      	cmp	r6, #19
 8004f6a:	ee10 5a10 	vmov	r5, s0
 8004f6e:	ee10 8a10 	vmov	r8, s0
 8004f72:	460c      	mov	r4, r1
 8004f74:	dc30      	bgt.n	8004fd8 <ceil+0x80>
 8004f76:	2e00      	cmp	r6, #0
 8004f78:	da12      	bge.n	8004fa0 <ceil+0x48>
 8004f7a:	a335      	add	r3, pc, #212	; (adr r3, 8005050 <ceil+0xf8>)
 8004f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f80:	f7fb f928 	bl	80001d4 <__adddf3>
 8004f84:	2200      	movs	r2, #0
 8004f86:	2300      	movs	r3, #0
 8004f88:	f7fb fd6a 	bl	8000a60 <__aeabi_dcmpgt>
 8004f8c:	b128      	cbz	r0, 8004f9a <ceil+0x42>
 8004f8e:	2c00      	cmp	r4, #0
 8004f90:	db55      	blt.n	800503e <ceil+0xe6>
 8004f92:	432c      	orrs	r4, r5
 8004f94:	d057      	beq.n	8005046 <ceil+0xee>
 8004f96:	4c30      	ldr	r4, [pc, #192]	; (8005058 <ceil+0x100>)
 8004f98:	2500      	movs	r5, #0
 8004f9a:	4621      	mov	r1, r4
 8004f9c:	4628      	mov	r0, r5
 8004f9e:	e025      	b.n	8004fec <ceil+0x94>
 8004fa0:	4f2e      	ldr	r7, [pc, #184]	; (800505c <ceil+0x104>)
 8004fa2:	4137      	asrs	r7, r6
 8004fa4:	ea01 0307 	and.w	r3, r1, r7
 8004fa8:	4303      	orrs	r3, r0
 8004faa:	d01f      	beq.n	8004fec <ceil+0x94>
 8004fac:	a328      	add	r3, pc, #160	; (adr r3, 8005050 <ceil+0xf8>)
 8004fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb2:	f7fb f90f 	bl	80001d4 <__adddf3>
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	2300      	movs	r3, #0
 8004fba:	f7fb fd51 	bl	8000a60 <__aeabi_dcmpgt>
 8004fbe:	2800      	cmp	r0, #0
 8004fc0:	d0eb      	beq.n	8004f9a <ceil+0x42>
 8004fc2:	2c00      	cmp	r4, #0
 8004fc4:	bfc2      	ittt	gt
 8004fc6:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8004fca:	fa43 f606 	asrgt.w	r6, r3, r6
 8004fce:	19a4      	addgt	r4, r4, r6
 8004fd0:	ea24 0407 	bic.w	r4, r4, r7
 8004fd4:	2500      	movs	r5, #0
 8004fd6:	e7e0      	b.n	8004f9a <ceil+0x42>
 8004fd8:	2e33      	cmp	r6, #51	; 0x33
 8004fda:	dd0b      	ble.n	8004ff4 <ceil+0x9c>
 8004fdc:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004fe0:	d104      	bne.n	8004fec <ceil+0x94>
 8004fe2:	ee10 2a10 	vmov	r2, s0
 8004fe6:	460b      	mov	r3, r1
 8004fe8:	f7fb f8f4 	bl	80001d4 <__adddf3>
 8004fec:	ec41 0b10 	vmov	d0, r0, r1
 8004ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ff4:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8004ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8004ffc:	fa23 f707 	lsr.w	r7, r3, r7
 8005000:	4207      	tst	r7, r0
 8005002:	d0f3      	beq.n	8004fec <ceil+0x94>
 8005004:	a312      	add	r3, pc, #72	; (adr r3, 8005050 <ceil+0xf8>)
 8005006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800500a:	f7fb f8e3 	bl	80001d4 <__adddf3>
 800500e:	2200      	movs	r2, #0
 8005010:	2300      	movs	r3, #0
 8005012:	f7fb fd25 	bl	8000a60 <__aeabi_dcmpgt>
 8005016:	2800      	cmp	r0, #0
 8005018:	d0bf      	beq.n	8004f9a <ceil+0x42>
 800501a:	2c00      	cmp	r4, #0
 800501c:	dd02      	ble.n	8005024 <ceil+0xcc>
 800501e:	2e14      	cmp	r6, #20
 8005020:	d103      	bne.n	800502a <ceil+0xd2>
 8005022:	3401      	adds	r4, #1
 8005024:	ea25 0507 	bic.w	r5, r5, r7
 8005028:	e7b7      	b.n	8004f9a <ceil+0x42>
 800502a:	2301      	movs	r3, #1
 800502c:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005030:	fa03 f606 	lsl.w	r6, r3, r6
 8005034:	4435      	add	r5, r6
 8005036:	4545      	cmp	r5, r8
 8005038:	bf38      	it	cc
 800503a:	18e4      	addcc	r4, r4, r3
 800503c:	e7f2      	b.n	8005024 <ceil+0xcc>
 800503e:	2500      	movs	r5, #0
 8005040:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8005044:	e7a9      	b.n	8004f9a <ceil+0x42>
 8005046:	4625      	mov	r5, r4
 8005048:	e7a7      	b.n	8004f9a <ceil+0x42>
 800504a:	bf00      	nop
 800504c:	f3af 8000 	nop.w
 8005050:	8800759c 	.word	0x8800759c
 8005054:	7e37e43c 	.word	0x7e37e43c
 8005058:	3ff00000 	.word	0x3ff00000
 800505c:	000fffff 	.word	0x000fffff

08005060 <floor>:
 8005060:	ec51 0b10 	vmov	r0, r1, d0
 8005064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005068:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800506c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005070:	2e13      	cmp	r6, #19
 8005072:	ee10 5a10 	vmov	r5, s0
 8005076:	ee10 8a10 	vmov	r8, s0
 800507a:	460c      	mov	r4, r1
 800507c:	dc32      	bgt.n	80050e4 <floor+0x84>
 800507e:	2e00      	cmp	r6, #0
 8005080:	da14      	bge.n	80050ac <floor+0x4c>
 8005082:	a333      	add	r3, pc, #204	; (adr r3, 8005150 <floor+0xf0>)
 8005084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005088:	f7fb f8a4 	bl	80001d4 <__adddf3>
 800508c:	2200      	movs	r2, #0
 800508e:	2300      	movs	r3, #0
 8005090:	f7fb fce6 	bl	8000a60 <__aeabi_dcmpgt>
 8005094:	b138      	cbz	r0, 80050a6 <floor+0x46>
 8005096:	2c00      	cmp	r4, #0
 8005098:	da57      	bge.n	800514a <floor+0xea>
 800509a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800509e:	431d      	orrs	r5, r3
 80050a0:	d001      	beq.n	80050a6 <floor+0x46>
 80050a2:	4c2d      	ldr	r4, [pc, #180]	; (8005158 <floor+0xf8>)
 80050a4:	2500      	movs	r5, #0
 80050a6:	4621      	mov	r1, r4
 80050a8:	4628      	mov	r0, r5
 80050aa:	e025      	b.n	80050f8 <floor+0x98>
 80050ac:	4f2b      	ldr	r7, [pc, #172]	; (800515c <floor+0xfc>)
 80050ae:	4137      	asrs	r7, r6
 80050b0:	ea01 0307 	and.w	r3, r1, r7
 80050b4:	4303      	orrs	r3, r0
 80050b6:	d01f      	beq.n	80050f8 <floor+0x98>
 80050b8:	a325      	add	r3, pc, #148	; (adr r3, 8005150 <floor+0xf0>)
 80050ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050be:	f7fb f889 	bl	80001d4 <__adddf3>
 80050c2:	2200      	movs	r2, #0
 80050c4:	2300      	movs	r3, #0
 80050c6:	f7fb fccb 	bl	8000a60 <__aeabi_dcmpgt>
 80050ca:	2800      	cmp	r0, #0
 80050cc:	d0eb      	beq.n	80050a6 <floor+0x46>
 80050ce:	2c00      	cmp	r4, #0
 80050d0:	bfbe      	ittt	lt
 80050d2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80050d6:	fa43 f606 	asrlt.w	r6, r3, r6
 80050da:	19a4      	addlt	r4, r4, r6
 80050dc:	ea24 0407 	bic.w	r4, r4, r7
 80050e0:	2500      	movs	r5, #0
 80050e2:	e7e0      	b.n	80050a6 <floor+0x46>
 80050e4:	2e33      	cmp	r6, #51	; 0x33
 80050e6:	dd0b      	ble.n	8005100 <floor+0xa0>
 80050e8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80050ec:	d104      	bne.n	80050f8 <floor+0x98>
 80050ee:	ee10 2a10 	vmov	r2, s0
 80050f2:	460b      	mov	r3, r1
 80050f4:	f7fb f86e 	bl	80001d4 <__adddf3>
 80050f8:	ec41 0b10 	vmov	d0, r0, r1
 80050fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005100:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8005104:	f04f 33ff 	mov.w	r3, #4294967295
 8005108:	fa23 f707 	lsr.w	r7, r3, r7
 800510c:	4207      	tst	r7, r0
 800510e:	d0f3      	beq.n	80050f8 <floor+0x98>
 8005110:	a30f      	add	r3, pc, #60	; (adr r3, 8005150 <floor+0xf0>)
 8005112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005116:	f7fb f85d 	bl	80001d4 <__adddf3>
 800511a:	2200      	movs	r2, #0
 800511c:	2300      	movs	r3, #0
 800511e:	f7fb fc9f 	bl	8000a60 <__aeabi_dcmpgt>
 8005122:	2800      	cmp	r0, #0
 8005124:	d0bf      	beq.n	80050a6 <floor+0x46>
 8005126:	2c00      	cmp	r4, #0
 8005128:	da02      	bge.n	8005130 <floor+0xd0>
 800512a:	2e14      	cmp	r6, #20
 800512c:	d103      	bne.n	8005136 <floor+0xd6>
 800512e:	3401      	adds	r4, #1
 8005130:	ea25 0507 	bic.w	r5, r5, r7
 8005134:	e7b7      	b.n	80050a6 <floor+0x46>
 8005136:	2301      	movs	r3, #1
 8005138:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800513c:	fa03 f606 	lsl.w	r6, r3, r6
 8005140:	4435      	add	r5, r6
 8005142:	4545      	cmp	r5, r8
 8005144:	bf38      	it	cc
 8005146:	18e4      	addcc	r4, r4, r3
 8005148:	e7f2      	b.n	8005130 <floor+0xd0>
 800514a:	2500      	movs	r5, #0
 800514c:	462c      	mov	r4, r5
 800514e:	e7aa      	b.n	80050a6 <floor+0x46>
 8005150:	8800759c 	.word	0x8800759c
 8005154:	7e37e43c 	.word	0x7e37e43c
 8005158:	bff00000 	.word	0xbff00000
 800515c:	000fffff 	.word	0x000fffff

08005160 <round>:
 8005160:	ec51 0b10 	vmov	r0, r1, d0
 8005164:	b570      	push	{r4, r5, r6, lr}
 8005166:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800516a:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800516e:	2c13      	cmp	r4, #19
 8005170:	ee10 2a10 	vmov	r2, s0
 8005174:	460b      	mov	r3, r1
 8005176:	dc19      	bgt.n	80051ac <round+0x4c>
 8005178:	2c00      	cmp	r4, #0
 800517a:	da09      	bge.n	8005190 <round+0x30>
 800517c:	3401      	adds	r4, #1
 800517e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8005182:	d103      	bne.n	800518c <round+0x2c>
 8005184:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005188:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800518c:	2100      	movs	r1, #0
 800518e:	e028      	b.n	80051e2 <round+0x82>
 8005190:	4d15      	ldr	r5, [pc, #84]	; (80051e8 <round+0x88>)
 8005192:	4125      	asrs	r5, r4
 8005194:	ea01 0605 	and.w	r6, r1, r5
 8005198:	4332      	orrs	r2, r6
 800519a:	d00e      	beq.n	80051ba <round+0x5a>
 800519c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80051a0:	fa42 f404 	asr.w	r4, r2, r4
 80051a4:	4423      	add	r3, r4
 80051a6:	ea23 0305 	bic.w	r3, r3, r5
 80051aa:	e7ef      	b.n	800518c <round+0x2c>
 80051ac:	2c33      	cmp	r4, #51	; 0x33
 80051ae:	dd07      	ble.n	80051c0 <round+0x60>
 80051b0:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80051b4:	d101      	bne.n	80051ba <round+0x5a>
 80051b6:	f7fb f80d 	bl	80001d4 <__adddf3>
 80051ba:	ec41 0b10 	vmov	d0, r0, r1
 80051be:	bd70      	pop	{r4, r5, r6, pc}
 80051c0:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 80051c4:	f04f 35ff 	mov.w	r5, #4294967295
 80051c8:	40f5      	lsrs	r5, r6
 80051ca:	4228      	tst	r0, r5
 80051cc:	d0f5      	beq.n	80051ba <round+0x5a>
 80051ce:	2101      	movs	r1, #1
 80051d0:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80051d4:	fa01 f404 	lsl.w	r4, r1, r4
 80051d8:	1912      	adds	r2, r2, r4
 80051da:	bf28      	it	cs
 80051dc:	185b      	addcs	r3, r3, r1
 80051de:	ea22 0105 	bic.w	r1, r2, r5
 80051e2:	4608      	mov	r0, r1
 80051e4:	4619      	mov	r1, r3
 80051e6:	e7e8      	b.n	80051ba <round+0x5a>
 80051e8:	000fffff 	.word	0x000fffff

080051ec <_init>:
 80051ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ee:	bf00      	nop
 80051f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051f2:	bc08      	pop	{r3}
 80051f4:	469e      	mov	lr, r3
 80051f6:	4770      	bx	lr

080051f8 <_fini>:
 80051f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051fa:	bf00      	nop
 80051fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051fe:	bc08      	pop	{r3}
 8005200:	469e      	mov	lr, r3
 8005202:	4770      	bx	lr

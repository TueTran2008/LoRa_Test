
GraduateV1.6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f3c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  08007128  08007128  00017128  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073a0  080073a0  00020118  2**0
                  CONTENTS
  4 .ARM          00000000  080073a0  080073a0  00020118  2**0
                  CONTENTS
  5 .preinit_array 00000000  080073a0  080073a0  00020118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073a0  080073a0  000173a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073a4  080073a4  000173a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000118  20000000  080073a8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d54  20000118  080074c0  00020118  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e6c  080074c0  00021e6c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b24e  00000000  00000000  00020141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f69  00000000  00000000  0003b38f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001350  00000000  00000000  0003f2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001150  00000000  00000000  00040648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001de97  00000000  00000000  00041798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001847c  00000000  00000000  0005f62f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4e72  00000000  00000000  00077aab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011c91d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005340  00000000  00000000  0011c970  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000118 	.word	0x20000118
 8000204:	00000000 	.word	0x00000000
 8000208:	0800710c 	.word	0x0800710c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000011c 	.word	0x2000011c
 8000224:	0800710c 	.word	0x0800710c

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2uiz>:
 8000ad4:	004a      	lsls	r2, r1, #1
 8000ad6:	d211      	bcs.n	8000afc <__aeabi_d2uiz+0x28>
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000adc:	d211      	bcs.n	8000b02 <__aeabi_d2uiz+0x2e>
 8000ade:	d50d      	bpl.n	8000afc <__aeabi_d2uiz+0x28>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d40e      	bmi.n	8000b08 <__aeabi_d2uiz+0x34>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	fa23 f002 	lsr.w	r0, r3, r2
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d102      	bne.n	8000b0e <__aeabi_d2uiz+0x3a>
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	4770      	bx	lr
 8000b0e:	f04f 0000 	mov.w	r0, #0
 8000b12:	4770      	bx	lr

08000b14 <OnCaDDetectted>:




void OnCaDDetectted(bool channelActivityDetected )
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	71fb      	strb	r3, [r7, #7]

	if( channelActivityDetected )
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d008      	beq.n	8000b36 <OnCaDDetectted+0x22>
	{
		slot.send_enable = 0;
 8000b24:	4a08      	ldr	r2, [pc, #32]	; (8000b48 <OnCaDDetectted+0x34>)
 8000b26:	7893      	ldrb	r3, [r2, #2]
 8000b28:	f36f 0341 	bfc	r3, #1, #1
 8000b2c:	7093      	strb	r3, [r2, #2]
		HAL_ADC_Start_IT(&hadc1);
 8000b2e:	4807      	ldr	r0, [pc, #28]	; (8000b4c <OnCaDDetectted+0x38>)
 8000b30:	f003 fb08 	bl	8004144 <HAL_ADC_Start_IT>
	}
	else
	{
		slot.send_enable = 1;
	}
}
 8000b34:	e004      	b.n	8000b40 <OnCaDDetectted+0x2c>
		slot.send_enable = 1;
 8000b36:	4a04      	ldr	r2, [pc, #16]	; (8000b48 <OnCaDDetectted+0x34>)
 8000b38:	7893      	ldrb	r3, [r2, #2]
 8000b3a:	f043 0302 	orr.w	r3, r3, #2
 8000b3e:	7093      	strb	r3, [r2, #2]
}
 8000b40:	bf00      	nop
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20000398 	.word	0x20000398
 8000b4c:	2000039c 	.word	0x2000039c

08000b50 <OnTxDone>:
void OnTxDone( void )
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
	DEBUG_INFO("Message Sended\r\n");
 8000b54:	f002 fc84 	bl	8003460 <sys_get_tick_ms>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	4a06      	ldr	r2, [pc, #24]	; (8000b74 <OnTxDone+0x24>)
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4806      	ldr	r0, [pc, #24]	; (8000b78 <OnTxDone+0x28>)
 8000b60:	f002 fc4a 	bl	80033f8 <app_debug_rtt_raw>
	//  Radio.Rx(1,0); dung de pollings
	Radio.Rx(1,1); // dung de test
 8000b64:	4b05      	ldr	r3, [pc, #20]	; (8000b7c <OnTxDone+0x2c>)
 8000b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b68:	2101      	movs	r1, #1
 8000b6a:	2001      	movs	r0, #1
 8000b6c:	4798      	blx	r3
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	08007128 	.word	0x08007128
 8000b78:	0800712c 	.word	0x0800712c
 8000b7c:	08007208 	.word	0x08007208

08000b80 <OnRxDone>:
void OnRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af02      	add	r7, sp, #8
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	4608      	mov	r0, r1
 8000b8a:	4611      	mov	r1, r2
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	4603      	mov	r3, r0
 8000b90:	817b      	strh	r3, [r7, #10]
 8000b92:	460b      	mov	r3, r1
 8000b94:	813b      	strh	r3, [r7, #8]
 8000b96:	4613      	mov	r3, r2
 8000b98:	71fb      	strb	r3, [r7, #7]
	uint8_t data[10];
	memcpy(data,payload,10);
 8000b9a:	68fa      	ldr	r2, [r7, #12]
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	6810      	ldr	r0, [r2, #0]
 8000ba2:	6851      	ldr	r1, [r2, #4]
 8000ba4:	c303      	stmia	r3!, {r0, r1}
 8000ba6:	8912      	ldrh	r2, [r2, #8]
 8000ba8:	801a      	strh	r2, [r3, #0]
	DEBUG_INFO("Message Comes\r\nSize:%d\r\nRSSI:%d\r\nSNR:%d",size,rssi,snr);
 8000baa:	f002 fc59 	bl	8003460 <sys_get_tick_ms>
 8000bae:	8979      	ldrh	r1, [r7, #10]
 8000bb0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000bb4:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000bb8:	9201      	str	r2, [sp, #4]
 8000bba:	9300      	str	r3, [sp, #0]
 8000bbc:	460b      	mov	r3, r1
 8000bbe:	4a0c      	ldr	r2, [pc, #48]	; (8000bf0 <OnRxDone+0x70>)
 8000bc0:	4601      	mov	r1, r0
 8000bc2:	480c      	ldr	r0, [pc, #48]	; (8000bf4 <OnRxDone+0x74>)
 8000bc4:	f002 fc18 	bl	80033f8 <app_debug_rtt_raw>
	if(strncmp(payload,"Hello",5) == 0)
 8000bc8:	2205      	movs	r2, #5
 8000bca:	490b      	ldr	r1, [pc, #44]	; (8000bf8 <OnRxDone+0x78>)
 8000bcc:	68f8      	ldr	r0, [r7, #12]
 8000bce:	f005 fd25 	bl	800661c <strncmp>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d102      	bne.n	8000bde <OnRxDone+0x5e>
	{
		test_buzz = 1;
 8000bd8:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <OnRxDone+0x7c>)
 8000bda:	2201      	movs	r2, #1
 8000bdc:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		Radio.Standby();
	}*/
	Radio.Rx(1,1);
 8000bde:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <OnRxDone+0x80>)
 8000be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000be2:	2101      	movs	r1, #1
 8000be4:	2001      	movs	r0, #1
 8000be6:	4798      	blx	r3
}
 8000be8:	bf00      	nop
 8000bea:	3720      	adds	r7, #32
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	08007128 	.word	0x08007128
 8000bf4:	08007158 	.word	0x08007158
 8000bf8:	0800719c 	.word	0x0800719c
 8000bfc:	20000134 	.word	0x20000134
 8000c00:	08007208 	.word	0x08007208

08000c04 <OnRxTimeout>:




void OnRxTimeout( void )
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
	DEBUG_WARN("Rx Timeout\r\n");
 8000c08:	f002 fc2a 	bl	8003460 <sys_get_tick_ms>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	4a06      	ldr	r2, [pc, #24]	; (8000c28 <OnRxTimeout+0x24>)
 8000c10:	4619      	mov	r1, r3
 8000c12:	4806      	ldr	r0, [pc, #24]	; (8000c2c <OnRxTimeout+0x28>)
 8000c14:	f002 fbf0 	bl	80033f8 <app_debug_rtt_raw>
	Radio.Rx(10000,0);
 8000c18:	4b05      	ldr	r3, [pc, #20]	; (8000c30 <OnRxTimeout+0x2c>)
 8000c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	f242 7010 	movw	r0, #10000	; 0x2710
 8000c22:	4798      	blx	r3
}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	08007128 	.word	0x08007128
 8000c2c:	080071a4 	.word	0x080071a4
 8000c30:	08007208 	.word	0x08007208

08000c34 <OnRxError>:
void OnRxError( void )
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bc80      	pop	{r7}
 8000c3e:	4770      	bx	lr

08000c40 <Send_Check>:


void Send_Check()
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
	Radio.Send("Hello",5);
 8000c44:	4b0a      	ldr	r3, [pc, #40]	; (8000c70 <Send_Check+0x30>)
 8000c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c48:	2105      	movs	r1, #5
 8000c4a:	480a      	ldr	r0, [pc, #40]	; (8000c74 <Send_Check+0x34>)
 8000c4c:	4798      	blx	r3
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8000c4e:	2201      	movs	r2, #1
 8000c50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c54:	4808      	ldr	r0, [pc, #32]	; (8000c78 <Send_Check+0x38>)
 8000c56:	f004 f858 	bl	8004d0a <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000c5a:	2064      	movs	r0, #100	; 0x64
 8000c5c:	f003 f964 	bl	8003f28 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 8000c60:	2200      	movs	r2, #0
 8000c62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c66:	4804      	ldr	r0, [pc, #16]	; (8000c78 <Send_Check+0x38>)
 8000c68:	f004 f84f 	bl	8004d0a <HAL_GPIO_WritePin>
}
 8000c6c:	bf00      	nop
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	08007208 	.word	0x08007208
 8000c74:	0800719c 	.word	0x0800719c
 8000c78:	40010c00 	.word	0x40010c00

08000c7c <App_TestMain>:


void App_TestMain()
{
 8000c7c:	b590      	push	{r4, r7, lr}
 8000c7e:	b099      	sub	sp, #100	; 0x64
 8000c80:	af0a      	add	r7, sp, #40	; 0x28
	User_Uart_Init(&User_Uart_ConfigPtr);
 8000c82:	4854      	ldr	r0, [pc, #336]	; (8000dd4 <App_TestMain+0x158>)
 8000c84:	f002 fd40 	bl	8003708 <User_Uart_Init>
	Button btn7;

	RadioEvents_t RadioEvents = {
 8000c88:	463b      	mov	r3, r7
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	605a      	str	r2, [r3, #4]
 8000c90:	609a      	str	r2, [r3, #8]
 8000c92:	60da      	str	r2, [r3, #12]
 8000c94:	611a      	str	r2, [r3, #16]
 8000c96:	615a      	str	r2, [r3, #20]
 8000c98:	619a      	str	r2, [r3, #24]
 8000c9a:	4b4f      	ldr	r3, [pc, #316]	; (8000dd8 <App_TestMain+0x15c>)
 8000c9c:	603b      	str	r3, [r7, #0]
 8000c9e:	4b4f      	ldr	r3, [pc, #316]	; (8000ddc <App_TestMain+0x160>)
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	4b4f      	ldr	r3, [pc, #316]	; (8000de0 <App_TestMain+0x164>)
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	4b4f      	ldr	r3, [pc, #316]	; (8000de4 <App_TestMain+0x168>)
 8000ca8:	613b      	str	r3, [r7, #16]
 8000caa:	4b4f      	ldr	r3, [pc, #316]	; (8000de8 <App_TestMain+0x16c>)
 8000cac:	61bb      	str	r3, [r7, #24]
		.RxTimeout = OnRxTimeout,
		.RxError = OnRxError,
		.CadDone = OnCaDDetectted
	};
	//Radio.Standby();
	Radio.Init( &RadioEvents );
 8000cae:	4b4f      	ldr	r3, [pc, #316]	; (8000dec <App_TestMain+0x170>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	463a      	mov	r2, r7
 8000cb4:	4610      	mov	r0, r2
 8000cb6:	4798      	blx	r3
	Radio.SetChannel( RF_FREQUENCY );
 8000cb8:	4b4c      	ldr	r3, [pc, #304]	; (8000dec <App_TestMain+0x170>)
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	484c      	ldr	r0, [pc, #304]	; (8000df0 <App_TestMain+0x174>)
 8000cbe:	4798      	blx	r3
	Radio.SetTxConfig( MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 8000cc0:	4b4a      	ldr	r3, [pc, #296]	; (8000dec <App_TestMain+0x170>)
 8000cc2:	69dc      	ldr	r4, [r3, #28]
 8000cc4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000cc8:	9308      	str	r3, [sp, #32]
 8000cca:	2300      	movs	r3, #0
 8000ccc:	9307      	str	r3, [sp, #28]
 8000cce:	2300      	movs	r3, #0
 8000cd0:	9306      	str	r3, [sp, #24]
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	9305      	str	r3, [sp, #20]
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	9304      	str	r3, [sp, #16]
 8000cda:	2300      	movs	r3, #0
 8000cdc:	9303      	str	r3, [sp, #12]
 8000cde:	2308      	movs	r3, #8
 8000ce0:	9302      	str	r3, [sp, #8]
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	9301      	str	r3, [sp, #4]
 8000ce6:	230a      	movs	r3, #10
 8000ce8:	9300      	str	r3, [sp, #0]
 8000cea:	2300      	movs	r3, #0
 8000cec:	2200      	movs	r2, #0
 8000cee:	2114      	movs	r1, #20
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	47a0      	blx	r4
                     LORA_SPREADING_FACTOR, LORA_CODINGRATE,
                     LORA_PREAMBLE_LENGTH, LORA_FIX_LENGTH_PAYLOAD_ON,
                     true, 0, 0, LORA_IQ_INVERSION_ON, 3000 );
	Radio.SetRxConfig( MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 8000cf4:	4b3d      	ldr	r3, [pc, #244]	; (8000dec <App_TestMain+0x170>)
 8000cf6:	699c      	ldr	r4, [r3, #24]
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	9309      	str	r3, [sp, #36]	; 0x24
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	9308      	str	r3, [sp, #32]
 8000d00:	2300      	movs	r3, #0
 8000d02:	9307      	str	r3, [sp, #28]
 8000d04:	2300      	movs	r3, #0
 8000d06:	9306      	str	r3, [sp, #24]
 8000d08:	2301      	movs	r3, #1
 8000d0a:	9305      	str	r3, [sp, #20]
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	9304      	str	r3, [sp, #16]
 8000d10:	2300      	movs	r3, #0
 8000d12:	9303      	str	r3, [sp, #12]
 8000d14:	2300      	movs	r3, #0
 8000d16:	9302      	str	r3, [sp, #8]
 8000d18:	2308      	movs	r3, #8
 8000d1a:	9301      	str	r3, [sp, #4]
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	9300      	str	r3, [sp, #0]
 8000d20:	2301      	movs	r3, #1
 8000d22:	220a      	movs	r2, #10
 8000d24:	2100      	movs	r1, #0
 8000d26:	2001      	movs	r0, #1
 8000d28:	47a0      	blx	r4
                     LORA_CODINGRATE, 0, LORA_PREAMBLE_LENGTH,
                     LORA_SYMBOL_TIMEOUT, LORA_FIX_LENGTH_PAYLOAD_ON,
                     0, true, 0, 0, LORA_IQ_INVERSION_ON, false );
	SX126xSetCadParams(0x02, 23, 10, 0, 00);
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	9300      	str	r3, [sp, #0]
 8000d2e:	2300      	movs	r3, #0
 8000d30:	220a      	movs	r2, #10
 8000d32:	2117      	movs	r1, #23
 8000d34:	2002      	movs	r0, #2
 8000d36:	f002 fa5d 	bl	80031f4 <SX126xSetCadParams>
	HAL_ADC_Start_IT(&hadc1);
 8000d3a:	482e      	ldr	r0, [pc, #184]	; (8000df4 <App_TestMain+0x178>)
 8000d3c:	f003 fa02 	bl	8004144 <HAL_ADC_Start_IT>
	HAL_TIM_Base_Start_IT(&htim6);	// Slotted timer
 8000d40:	482d      	ldr	r0, [pc, #180]	; (8000df8 <App_TestMain+0x17c>)
 8000d42:	f004 ffcd 	bl	8005ce0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2); //  LoRa Irq Scan
 8000d46:	482d      	ldr	r0, [pc, #180]	; (8000dfc <App_TestMain+0x180>)
 8000d48:	f004 ffca 	bl	8005ce0 <HAL_TIM_Base_Start_IT>
	button_init(&btn7,GPIOA,GPIO_PIN_2,BUTTON_ACTIVE_LOW,7);
 8000d4c:	f107 001c 	add.w	r0, r7, #28
 8000d50:	2307      	movs	r3, #7
 8000d52:	9300      	str	r3, [sp, #0]
 8000d54:	2301      	movs	r3, #1
 8000d56:	2204      	movs	r2, #4
 8000d58:	4929      	ldr	r1, [pc, #164]	; (8000e00 <App_TestMain+0x184>)
 8000d5a:	f002 fba3 	bl	80034a4 <button_init>
	Button_AddEvent(7, BUTTON_PRESSED_EVENT, Send_Check);
 8000d5e:	4a29      	ldr	r2, [pc, #164]	; (8000e04 <App_TestMain+0x188>)
 8000d60:	2100      	movs	r1, #0
 8000d62:	2007      	movs	r0, #7
 8000d64:	f002 fb84 	bl	8003470 <Button_AddEvent>
	Radio.Standby();
 8000d68:	4b20      	ldr	r3, [pc, #128]	; (8000dec <App_TestMain+0x170>)
 8000d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6c:	4798      	blx	r3
	L1_Init();
 8000d6e:	f000 fc55 	bl	800161c <L1_Init>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8000d72:	2201      	movs	r2, #1
 8000d74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d78:	4823      	ldr	r0, [pc, #140]	; (8000e08 <App_TestMain+0x18c>)
 8000d7a:	f003 ffc6 	bl	8004d0a <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000d7e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d82:	f003 f8d1 	bl	8003f28 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 8000d86:	2200      	movs	r2, #0
 8000d88:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d8c:	481e      	ldr	r0, [pc, #120]	; (8000e08 <App_TestMain+0x18c>)
 8000d8e:	f003 ffbc 	bl	8004d0a <HAL_GPIO_WritePin>
	Radio.Rx(1,1);
 8000d92:	4b16      	ldr	r3, [pc, #88]	; (8000dec <App_TestMain+0x170>)
 8000d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d96:	2101      	movs	r1, #1
 8000d98:	2001      	movs	r0, #1
 8000d9a:	4798      	blx	r3
	while(1)
	{

		//LoRa_Polling();
		button_check(&btn7);
 8000d9c:	f107 031c 	add.w	r3, r7, #28
 8000da0:	4618      	mov	r0, r3
 8000da2:	f002 fba5 	bl	80034f0 <button_check>
		if(test_buzz == 1)
 8000da6:	4b19      	ldr	r3, [pc, #100]	; (8000e0c <App_TestMain+0x190>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d1f6      	bne.n	8000d9c <App_TestMain+0x120>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8000dae:	2201      	movs	r2, #1
 8000db0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000db4:	4814      	ldr	r0, [pc, #80]	; (8000e08 <App_TestMain+0x18c>)
 8000db6:	f003 ffa8 	bl	8004d0a <HAL_GPIO_WritePin>
			HAL_Delay(200);
 8000dba:	20c8      	movs	r0, #200	; 0xc8
 8000dbc:	f003 f8b4 	bl	8003f28 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dc6:	4810      	ldr	r0, [pc, #64]	; (8000e08 <App_TestMain+0x18c>)
 8000dc8:	f003 ff9f 	bl	8004d0a <HAL_GPIO_WritePin>
			test_buzz = 0;
 8000dcc:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <App_TestMain+0x190>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	701a      	strb	r2, [r3, #0]
		button_check(&btn7);
 8000dd2:	e7e3      	b.n	8000d9c <App_TestMain+0x120>
 8000dd4:	08007348 	.word	0x08007348
 8000dd8:	08000b51 	.word	0x08000b51
 8000ddc:	08000b81 	.word	0x08000b81
 8000de0:	08000c05 	.word	0x08000c05
 8000de4:	08000c35 	.word	0x08000c35
 8000de8:	08000b15 	.word	0x08000b15
 8000dec:	08007208 	.word	0x08007208
 8000df0:	19de5080 	.word	0x19de5080
 8000df4:	2000039c 	.word	0x2000039c
 8000df8:	20000424 	.word	0x20000424
 8000dfc:	2000046c 	.word	0x2000046c
 8000e00:	40010800 	.word	0x40010800
 8000e04:	08000c41 	.word	0x08000c41
 8000e08:	40010c00 	.word	0x40010c00
 8000e0c:	20000134 	.word	0x20000134

08000e10 <HAL_TIM_PeriodElapsedCallback>:
		HAL_Delay(1);
	}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  if(htim->Instance == TIM2)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e20:	d102      	bne.n	8000e28 <HAL_TIM_PeriodElapsedCallback+0x18>
  	  Radio.IrqProcess();
 8000e22:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e26:	4798      	blx	r3
  if(htim->Instance == TIM6)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a0c      	ldr	r2, [pc, #48]	; (8000e60 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d110      	bne.n	8000e54 <HAL_TIM_PeriodElapsedCallback+0x44>
  {
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
 8000e32:	2108      	movs	r1, #8
 8000e34:	480b      	ldr	r0, [pc, #44]	; (8000e64 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000e36:	f003 ff80 	bl	8004d3a <HAL_GPIO_TogglePin>
		if(slot.synchro_enable == false)
 8000e3a:	4b0b      	ldr	r3, [pc, #44]	; (8000e68 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000e3c:	789b      	ldrb	r3, [r3, #2]
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d105      	bne.n	8000e54 <HAL_TIM_PeriodElapsedCallback+0x44>
		{
			slot.timer++;
 8000e48:	4b07      	ldr	r3, [pc, #28]	; (8000e68 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	b2da      	uxtb	r2, r3
 8000e50:	4b05      	ldr	r3, [pc, #20]	; (8000e68 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000e52:	701a      	strb	r2, [r3, #0]
		}
  }
}
 8000e54:	bf00      	nop
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	08007208 	.word	0x08007208
 8000e60:	40001000 	.word	0x40001000
 8000e64:	40011000 	.word	0x40011000
 8000e68:	20000398 	.word	0x20000398

08000e6c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  if(hadc->Instance == ADC1)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a0d      	ldr	r2, [pc, #52]	; (8000eb0 <HAL_ADC_ConvCpltCallback+0x44>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d113      	bne.n	8000ea6 <HAL_ADC_ConvCpltCallback+0x3a>
  {
		  uint16_t temp = HAL_ADC_GetValue(&hadc1);
 8000e7e:	480d      	ldr	r0, [pc, #52]	; (8000eb4 <HAL_ADC_ConvCpltCallback+0x48>)
 8000e80:	f003 fa16 	bl	80042b0 <HAL_ADC_GetValue>
 8000e84:	4603      	mov	r3, r0
 8000e86:	81fb      	strh	r3, [r7, #14]
		  slot.rnd_num = ((( temp & 0x0003) ^ (SysTick->VAL))&(0x0F));
 8000e88:	89fb      	ldrh	r3, [r7, #14]
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	f003 0303 	and.w	r3, r3, #3
 8000e90:	b2da      	uxtb	r2, r3
 8000e92:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <HAL_ADC_ConvCpltCallback+0x4c>)
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	4053      	eors	r3, r2
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	f003 030f 	and.w	r3, r3, #15
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <HAL_ADC_ConvCpltCallback+0x50>)
 8000ea4:	705a      	strb	r2, [r3, #1]
  }
}
 8000ea6:	bf00      	nop
 8000ea8:	3710      	adds	r7, #16
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40012400 	.word	0x40012400
 8000eb4:	2000039c 	.word	0x2000039c
 8000eb8:	e000e010 	.word	0xe000e010
 8000ebc:	20000398 	.word	0x20000398

08000ec0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ed0:	4b18      	ldr	r3, [pc, #96]	; (8000f34 <MX_ADC1_Init+0x74>)
 8000ed2:	4a19      	ldr	r2, [pc, #100]	; (8000f38 <MX_ADC1_Init+0x78>)
 8000ed4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ed6:	4b17      	ldr	r3, [pc, #92]	; (8000f34 <MX_ADC1_Init+0x74>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000edc:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <MX_ADC1_Init+0x74>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ee2:	4b14      	ldr	r3, [pc, #80]	; (8000f34 <MX_ADC1_Init+0x74>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ee8:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <MX_ADC1_Init+0x74>)
 8000eea:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000eee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ef0:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <MX_ADC1_Init+0x74>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000ef6:	4b0f      	ldr	r3, [pc, #60]	; (8000f34 <MX_ADC1_Init+0x74>)
 8000ef8:	2201      	movs	r2, #1
 8000efa:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000efc:	480d      	ldr	r0, [pc, #52]	; (8000f34 <MX_ADC1_Init+0x74>)
 8000efe:	f003 f837 	bl	8003f70 <HAL_ADC_Init>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000f08:	f000 f966 	bl	80011d8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f10:	2301      	movs	r3, #1
 8000f12:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000f14:	2300      	movs	r3, #0
 8000f16:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f18:	1d3b      	adds	r3, r7, #4
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4805      	ldr	r0, [pc, #20]	; (8000f34 <MX_ADC1_Init+0x74>)
 8000f1e:	f003 fa9f 	bl	8004460 <HAL_ADC_ConfigChannel>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000f28:	f000 f956 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f2c:	bf00      	nop
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	2000039c 	.word	0x2000039c
 8000f38:	40012400 	.word	0x40012400

08000f3c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b088      	sub	sp, #32
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f44:	f107 0310 	add.w	r3, r7, #16
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a18      	ldr	r2, [pc, #96]	; (8000fb8 <HAL_ADC_MspInit+0x7c>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d129      	bne.n	8000fb0 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f5c:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <HAL_ADC_MspInit+0x80>)
 8000f5e:	699b      	ldr	r3, [r3, #24]
 8000f60:	4a16      	ldr	r2, [pc, #88]	; (8000fbc <HAL_ADC_MspInit+0x80>)
 8000f62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f66:	6193      	str	r3, [r2, #24]
 8000f68:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <HAL_ADC_MspInit+0x80>)
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f74:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <HAL_ADC_MspInit+0x80>)
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	4a10      	ldr	r2, [pc, #64]	; (8000fbc <HAL_ADC_MspInit+0x80>)
 8000f7a:	f043 0304 	orr.w	r3, r3, #4
 8000f7e:	6193      	str	r3, [r2, #24]
 8000f80:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <HAL_ADC_MspInit+0x80>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	f003 0304 	and.w	r3, r3, #4
 8000f88:	60bb      	str	r3, [r7, #8]
 8000f8a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f90:	2303      	movs	r3, #3
 8000f92:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f94:	f107 0310 	add.w	r3, r7, #16
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4809      	ldr	r0, [pc, #36]	; (8000fc0 <HAL_ADC_MspInit+0x84>)
 8000f9c:	f003 fd0a 	bl	80049b4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	2012      	movs	r0, #18
 8000fa6:	f003 fcce 	bl	8004946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000faa:	2012      	movs	r0, #18
 8000fac:	f003 fce7 	bl	800497e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fb0:	bf00      	nop
 8000fb2:	3720      	adds	r7, #32
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40012400 	.word	0x40012400
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	40010800 	.word	0x40010800

08000fc4 <MX_GPIO_Init>:
        * EXTI
     PA9   ------> USART1_TX
     PA10   ------> USART1_RX
*/
void MX_GPIO_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b088      	sub	sp, #32
 8000fc8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fca:	f107 0310 	add.w	r3, r7, #16
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]
 8000fd4:	609a      	str	r2, [r3, #8]
 8000fd6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd8:	4b46      	ldr	r3, [pc, #280]	; (80010f4 <MX_GPIO_Init+0x130>)
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	4a45      	ldr	r2, [pc, #276]	; (80010f4 <MX_GPIO_Init+0x130>)
 8000fde:	f043 0304 	orr.w	r3, r3, #4
 8000fe2:	6193      	str	r3, [r2, #24]
 8000fe4:	4b43      	ldr	r3, [pc, #268]	; (80010f4 <MX_GPIO_Init+0x130>)
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	f003 0304 	and.w	r3, r3, #4
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ff0:	4b40      	ldr	r3, [pc, #256]	; (80010f4 <MX_GPIO_Init+0x130>)
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	4a3f      	ldr	r2, [pc, #252]	; (80010f4 <MX_GPIO_Init+0x130>)
 8000ff6:	f043 0310 	orr.w	r3, r3, #16
 8000ffa:	6193      	str	r3, [r2, #24]
 8000ffc:	4b3d      	ldr	r3, [pc, #244]	; (80010f4 <MX_GPIO_Init+0x130>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	f003 0310 	and.w	r3, r3, #16
 8001004:	60bb      	str	r3, [r7, #8]
 8001006:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001008:	4b3a      	ldr	r3, [pc, #232]	; (80010f4 <MX_GPIO_Init+0x130>)
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	4a39      	ldr	r2, [pc, #228]	; (80010f4 <MX_GPIO_Init+0x130>)
 800100e:	f043 0308 	orr.w	r3, r3, #8
 8001012:	6193      	str	r3, [r2, #24]
 8001014:	4b37      	ldr	r3, [pc, #220]	; (80010f4 <MX_GPIO_Init+0x130>)
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	f003 0308 	and.w	r3, r3, #8
 800101c:	607b      	str	r3, [r7, #4]
 800101e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001020:	2200      	movs	r2, #0
 8001022:	2110      	movs	r1, #16
 8001024:	4834      	ldr	r0, [pc, #208]	; (80010f8 <MX_GPIO_Init+0x134>)
 8001026:	f003 fe70 	bl	8004d0a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800102a:	2200      	movs	r2, #0
 800102c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001030:	4832      	ldr	r0, [pc, #200]	; (80010fc <MX_GPIO_Init+0x138>)
 8001032:	f003 fe6a 	bl	8004d0a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001036:	2304      	movs	r3, #4
 8001038:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800103a:	2300      	movs	r3, #0
 800103c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001042:	f107 0310 	add.w	r3, r7, #16
 8001046:	4619      	mov	r1, r3
 8001048:	482b      	ldr	r0, [pc, #172]	; (80010f8 <MX_GPIO_Init+0x134>)
 800104a:	f003 fcb3 	bl	80049b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800104e:	2310      	movs	r3, #16
 8001050:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001052:	2301      	movs	r3, #1
 8001054:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800105a:	2301      	movs	r3, #1
 800105c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105e:	f107 0310 	add.w	r3, r7, #16
 8001062:	4619      	mov	r1, r3
 8001064:	4824      	ldr	r0, [pc, #144]	; (80010f8 <MX_GPIO_Init+0x134>)
 8001066:	f003 fca5 	bl	80049b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800106a:	2310      	movs	r3, #16
 800106c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001076:	f107 0310 	add.w	r3, r7, #16
 800107a:	4619      	mov	r1, r3
 800107c:	4820      	ldr	r0, [pc, #128]	; (8001100 <MX_GPIO_Init+0x13c>)
 800107e:	f003 fc99 	bl	80049b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001082:	2304      	movs	r3, #4
 8001084:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108e:	f107 0310 	add.w	r3, r7, #16
 8001092:	4619      	mov	r1, r3
 8001094:	4819      	ldr	r0, [pc, #100]	; (80010fc <MX_GPIO_Init+0x138>)
 8001096:	f003 fc8d 	bl	80049b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800109a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800109e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a0:	2301      	movs	r3, #1
 80010a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a8:	2302      	movs	r3, #2
 80010aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ac:	f107 0310 	add.w	r3, r7, #16
 80010b0:	4619      	mov	r1, r3
 80010b2:	4812      	ldr	r0, [pc, #72]	; (80010fc <MX_GPIO_Init+0x138>)
 80010b4:	f003 fc7e 	bl	80049b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010be:	2302      	movs	r3, #2
 80010c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010c2:	2303      	movs	r3, #3
 80010c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c6:	f107 0310 	add.w	r3, r7, #16
 80010ca:	4619      	mov	r1, r3
 80010cc:	480a      	ldr	r0, [pc, #40]	; (80010f8 <MX_GPIO_Init+0x134>)
 80010ce:	f003 fc71 	bl	80049b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e0:	f107 0310 	add.w	r3, r7, #16
 80010e4:	4619      	mov	r1, r3
 80010e6:	4804      	ldr	r0, [pc, #16]	; (80010f8 <MX_GPIO_Init+0x134>)
 80010e8:	f003 fc64 	bl	80049b4 <HAL_GPIO_Init>

}
 80010ec:	bf00      	nop
 80010ee:	3720      	adds	r7, #32
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40021000 	.word	0x40021000
 80010f8:	40010800 	.word	0x40010800
 80010fc:	40010c00 	.word	0x40010c00
 8001100:	40011000 	.word	0x40011000

08001104 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001108:	f002 feac 	bl	8003e64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800110c:	f000 f80d 	bl	800112a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001110:	f7ff ff58 	bl	8000fc4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001114:	f7ff fed4 	bl	8000ec0 <MX_ADC1_Init>
  MX_SPI1_Init();
 8001118:	f000 f864 	bl	80011e4 <MX_SPI1_Init>
  MX_TIM2_Init();
 800111c:	f000 f996 	bl	800144c <MX_TIM2_Init>
  MX_TIM6_Init();
 8001120:	f000 f9e0 	bl	80014e4 <MX_TIM6_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  App_TestMain();
 8001124:	f7ff fdaa 	bl	8000c7c <App_TestMain>
 8001128:	e7fc      	b.n	8001124 <main+0x20>

0800112a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b096      	sub	sp, #88	; 0x58
 800112e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001130:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001134:	2228      	movs	r2, #40	; 0x28
 8001136:	2100      	movs	r1, #0
 8001138:	4618      	mov	r0, r3
 800113a:	f005 f9ef 	bl	800651c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800113e:	f107 031c 	add.w	r3, r7, #28
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	60da      	str	r2, [r3, #12]
 800114c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800114e:	1d3b      	adds	r3, r7, #4
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
 800115c:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800115e:	2302      	movs	r3, #2
 8001160:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001162:	2301      	movs	r3, #1
 8001164:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001166:	2310      	movs	r3, #16
 8001168:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800116a:	2302      	movs	r3, #2
 800116c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800116e:	2300      	movs	r3, #0
 8001170:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001172:	2300      	movs	r3, #0
 8001174:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001176:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800117a:	4618      	mov	r0, r3
 800117c:	f003 fdf6 	bl	8004d6c <HAL_RCC_OscConfig>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <SystemClock_Config+0x60>
  {
    Error_Handler();
 8001186:	f000 f827 	bl	80011d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800118a:	230f      	movs	r3, #15
 800118c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800118e:	2302      	movs	r3, #2
 8001190:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001192:	2300      	movs	r3, #0
 8001194:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001196:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800119a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800119c:	2300      	movs	r3, #0
 800119e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011a0:	f107 031c 	add.w	r3, r7, #28
 80011a4:	2100      	movs	r1, #0
 80011a6:	4618      	mov	r0, r3
 80011a8:	f004 f860 	bl	800526c <HAL_RCC_ClockConfig>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80011b2:	f000 f811 	bl	80011d8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80011b6:	2302      	movs	r3, #2
 80011b8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80011ba:	2300      	movs	r3, #0
 80011bc:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011be:	1d3b      	adds	r3, r7, #4
 80011c0:	4618      	mov	r0, r3
 80011c2:	f004 f9bb 	bl	800553c <HAL_RCCEx_PeriphCLKConfig>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80011cc:	f000 f804 	bl	80011d8 <Error_Handler>
  }
}
 80011d0:	bf00      	nop
 80011d2:	3758      	adds	r7, #88	; 0x58
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011dc:	b672      	cpsid	i
}
 80011de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011e0:	e7fe      	b.n	80011e0 <Error_Handler+0x8>
	...

080011e4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80011e8:	4b17      	ldr	r3, [pc, #92]	; (8001248 <MX_SPI1_Init+0x64>)
 80011ea:	4a18      	ldr	r2, [pc, #96]	; (800124c <MX_SPI1_Init+0x68>)
 80011ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011ee:	4b16      	ldr	r3, [pc, #88]	; (8001248 <MX_SPI1_Init+0x64>)
 80011f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011f6:	4b14      	ldr	r3, [pc, #80]	; (8001248 <MX_SPI1_Init+0x64>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011fc:	4b12      	ldr	r3, [pc, #72]	; (8001248 <MX_SPI1_Init+0x64>)
 80011fe:	2200      	movs	r2, #0
 8001200:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001202:	4b11      	ldr	r3, [pc, #68]	; (8001248 <MX_SPI1_Init+0x64>)
 8001204:	2200      	movs	r2, #0
 8001206:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001208:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <MX_SPI1_Init+0x64>)
 800120a:	2200      	movs	r2, #0
 800120c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800120e:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <MX_SPI1_Init+0x64>)
 8001210:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001214:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001216:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <MX_SPI1_Init+0x64>)
 8001218:	2228      	movs	r2, #40	; 0x28
 800121a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800121c:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <MX_SPI1_Init+0x64>)
 800121e:	2200      	movs	r2, #0
 8001220:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001222:	4b09      	ldr	r3, [pc, #36]	; (8001248 <MX_SPI1_Init+0x64>)
 8001224:	2200      	movs	r2, #0
 8001226:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001228:	4b07      	ldr	r3, [pc, #28]	; (8001248 <MX_SPI1_Init+0x64>)
 800122a:	2200      	movs	r2, #0
 800122c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800122e:	4b06      	ldr	r3, [pc, #24]	; (8001248 <MX_SPI1_Init+0x64>)
 8001230:	220a      	movs	r2, #10
 8001232:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001234:	4804      	ldr	r0, [pc, #16]	; (8001248 <MX_SPI1_Init+0x64>)
 8001236:	f004 fa37 	bl	80056a8 <HAL_SPI_Init>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001240:	f7ff ffca 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}
 8001248:	200003cc 	.word	0x200003cc
 800124c:	40013000 	.word	0x40013000

08001250 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b088      	sub	sp, #32
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001258:	f107 0310 	add.w	r3, r7, #16
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a1b      	ldr	r2, [pc, #108]	; (80012d8 <HAL_SPI_MspInit+0x88>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d12f      	bne.n	80012d0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001270:	4b1a      	ldr	r3, [pc, #104]	; (80012dc <HAL_SPI_MspInit+0x8c>)
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	4a19      	ldr	r2, [pc, #100]	; (80012dc <HAL_SPI_MspInit+0x8c>)
 8001276:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800127a:	6193      	str	r3, [r2, #24]
 800127c:	4b17      	ldr	r3, [pc, #92]	; (80012dc <HAL_SPI_MspInit+0x8c>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001288:	4b14      	ldr	r3, [pc, #80]	; (80012dc <HAL_SPI_MspInit+0x8c>)
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	4a13      	ldr	r2, [pc, #76]	; (80012dc <HAL_SPI_MspInit+0x8c>)
 800128e:	f043 0304 	orr.w	r3, r3, #4
 8001292:	6193      	str	r3, [r2, #24]
 8001294:	4b11      	ldr	r3, [pc, #68]	; (80012dc <HAL_SPI_MspInit+0x8c>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	f003 0304 	and.w	r3, r3, #4
 800129c:	60bb      	str	r3, [r7, #8]
 800129e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80012a0:	23a0      	movs	r3, #160	; 0xa0
 80012a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a4:	2302      	movs	r3, #2
 80012a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012a8:	2303      	movs	r3, #3
 80012aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ac:	f107 0310 	add.w	r3, r7, #16
 80012b0:	4619      	mov	r1, r3
 80012b2:	480b      	ldr	r0, [pc, #44]	; (80012e0 <HAL_SPI_MspInit+0x90>)
 80012b4:	f003 fb7e 	bl	80049b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012b8:	2340      	movs	r3, #64	; 0x40
 80012ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c4:	f107 0310 	add.w	r3, r7, #16
 80012c8:	4619      	mov	r1, r3
 80012ca:	4805      	ldr	r0, [pc, #20]	; (80012e0 <HAL_SPI_MspInit+0x90>)
 80012cc:	f003 fb72 	bl	80049b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80012d0:	bf00      	nop
 80012d2:	3720      	adds	r7, #32
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40013000 	.word	0x40013000
 80012dc:	40021000 	.word	0x40021000
 80012e0:	40010800 	.word	0x40010800

080012e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012ea:	4b15      	ldr	r3, [pc, #84]	; (8001340 <HAL_MspInit+0x5c>)
 80012ec:	699b      	ldr	r3, [r3, #24]
 80012ee:	4a14      	ldr	r2, [pc, #80]	; (8001340 <HAL_MspInit+0x5c>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	6193      	str	r3, [r2, #24]
 80012f6:	4b12      	ldr	r3, [pc, #72]	; (8001340 <HAL_MspInit+0x5c>)
 80012f8:	699b      	ldr	r3, [r3, #24]
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	60bb      	str	r3, [r7, #8]
 8001300:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001302:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <HAL_MspInit+0x5c>)
 8001304:	69db      	ldr	r3, [r3, #28]
 8001306:	4a0e      	ldr	r2, [pc, #56]	; (8001340 <HAL_MspInit+0x5c>)
 8001308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800130c:	61d3      	str	r3, [r2, #28]
 800130e:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <HAL_MspInit+0x5c>)
 8001310:	69db      	ldr	r3, [r3, #28]
 8001312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800131a:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <HAL_MspInit+0x60>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	4a04      	ldr	r2, [pc, #16]	; (8001344 <HAL_MspInit+0x60>)
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001336:	bf00      	nop
 8001338:	3714      	adds	r7, #20
 800133a:	46bd      	mov	sp, r7
 800133c:	bc80      	pop	{r7}
 800133e:	4770      	bx	lr
 8001340:	40021000 	.word	0x40021000
 8001344:	40010000 	.word	0x40010000

08001348 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800134c:	e7fe      	b.n	800134c <NMI_Handler+0x4>

0800134e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800134e:	b480      	push	{r7}
 8001350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001352:	e7fe      	b.n	8001352 <HardFault_Handler+0x4>

08001354 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001358:	e7fe      	b.n	8001358 <MemManage_Handler+0x4>

0800135a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800135a:	b480      	push	{r7}
 800135c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800135e:	e7fe      	b.n	800135e <BusFault_Handler+0x4>

08001360 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001364:	e7fe      	b.n	8001364 <UsageFault_Handler+0x4>

08001366 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	46bd      	mov	sp, r7
 800136e:	bc80      	pop	{r7}
 8001370:	4770      	bx	lr

08001372 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	46bd      	mov	sp, r7
 800137a:	bc80      	pop	{r7}
 800137c:	4770      	bx	lr

0800137e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr

0800138a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800138e:	f002 fdaf 	bl	8003ef0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
	...

08001398 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800139c:	4802      	ldr	r0, [pc, #8]	; (80013a8 <ADC1_2_IRQHandler+0x10>)
 800139e:	f002 ff93 	bl	80042c8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	2000039c 	.word	0x2000039c

080013ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013b0:	4802      	ldr	r0, [pc, #8]	; (80013bc <TIM2_IRQHandler+0x10>)
 80013b2:	f004 fcf5 	bl	8005da0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	2000046c 	.word	0x2000046c

080013c0 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80013c4:	4802      	ldr	r0, [pc, #8]	; (80013d0 <TIM6_IRQHandler+0x10>)
 80013c6:	f004 fceb 	bl	8005da0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000424 	.word	0x20000424

080013d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013dc:	4a14      	ldr	r2, [pc, #80]	; (8001430 <_sbrk+0x5c>)
 80013de:	4b15      	ldr	r3, [pc, #84]	; (8001434 <_sbrk+0x60>)
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013e8:	4b13      	ldr	r3, [pc, #76]	; (8001438 <_sbrk+0x64>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d102      	bne.n	80013f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013f0:	4b11      	ldr	r3, [pc, #68]	; (8001438 <_sbrk+0x64>)
 80013f2:	4a12      	ldr	r2, [pc, #72]	; (800143c <_sbrk+0x68>)
 80013f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013f6:	4b10      	ldr	r3, [pc, #64]	; (8001438 <_sbrk+0x64>)
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4413      	add	r3, r2
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	429a      	cmp	r2, r3
 8001402:	d207      	bcs.n	8001414 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001404:	f005 f852 	bl	80064ac <__errno>
 8001408:	4603      	mov	r3, r0
 800140a:	220c      	movs	r2, #12
 800140c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800140e:	f04f 33ff 	mov.w	r3, #4294967295
 8001412:	e009      	b.n	8001428 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001414:	4b08      	ldr	r3, [pc, #32]	; (8001438 <_sbrk+0x64>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800141a:	4b07      	ldr	r3, [pc, #28]	; (8001438 <_sbrk+0x64>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4413      	add	r3, r2
 8001422:	4a05      	ldr	r2, [pc, #20]	; (8001438 <_sbrk+0x64>)
 8001424:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001426:	68fb      	ldr	r3, [r7, #12]
}
 8001428:	4618      	mov	r0, r3
 800142a:	3718      	adds	r7, #24
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20010000 	.word	0x20010000
 8001434:	00000400 	.word	0x00000400
 8001438:	20000138 	.word	0x20000138
 800143c:	20001e70 	.word	0x20001e70

08001440 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr

0800144c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001452:	f107 0308 	add.w	r3, r7, #8
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	609a      	str	r2, [r3, #8]
 800145e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001460:	463b      	mov	r3, r7
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001468:	4b1d      	ldr	r3, [pc, #116]	; (80014e0 <MX_TIM2_Init+0x94>)
 800146a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800146e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 8001470:	4b1b      	ldr	r3, [pc, #108]	; (80014e0 <MX_TIM2_Init+0x94>)
 8001472:	2207      	movs	r2, #7
 8001474:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001476:	4b1a      	ldr	r3, [pc, #104]	; (80014e0 <MX_TIM2_Init+0x94>)
 8001478:	2200      	movs	r2, #0
 800147a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800147c:	4b18      	ldr	r3, [pc, #96]	; (80014e0 <MX_TIM2_Init+0x94>)
 800147e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001482:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001484:	4b16      	ldr	r3, [pc, #88]	; (80014e0 <MX_TIM2_Init+0x94>)
 8001486:	2200      	movs	r2, #0
 8001488:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800148a:	4b15      	ldr	r3, [pc, #84]	; (80014e0 <MX_TIM2_Init+0x94>)
 800148c:	2280      	movs	r2, #128	; 0x80
 800148e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001490:	4813      	ldr	r0, [pc, #76]	; (80014e0 <MX_TIM2_Init+0x94>)
 8001492:	f004 fbd5 	bl	8005c40 <HAL_TIM_Base_Init>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800149c:	f7ff fe9c 	bl	80011d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014a6:	f107 0308 	add.w	r3, r7, #8
 80014aa:	4619      	mov	r1, r3
 80014ac:	480c      	ldr	r0, [pc, #48]	; (80014e0 <MX_TIM2_Init+0x94>)
 80014ae:	f004 fd7f 	bl	8005fb0 <HAL_TIM_ConfigClockSource>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80014b8:	f7ff fe8e 	bl	80011d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014bc:	2300      	movs	r3, #0
 80014be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c0:	2300      	movs	r3, #0
 80014c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014c4:	463b      	mov	r3, r7
 80014c6:	4619      	mov	r1, r3
 80014c8:	4805      	ldr	r0, [pc, #20]	; (80014e0 <MX_TIM2_Init+0x94>)
 80014ca:	f004 ff69 	bl	80063a0 <HAL_TIMEx_MasterConfigSynchronization>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80014d4:	f7ff fe80 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014d8:	bf00      	nop
 80014da:	3718      	adds	r7, #24
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	2000046c 	.word	0x2000046c

080014e4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ea:	463b      	mov	r3, r7
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80014f2:	4b15      	ldr	r3, [pc, #84]	; (8001548 <MX_TIM6_Init+0x64>)
 80014f4:	4a15      	ldr	r2, [pc, #84]	; (800154c <MX_TIM6_Init+0x68>)
 80014f6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 79;
 80014f8:	4b13      	ldr	r3, [pc, #76]	; (8001548 <MX_TIM6_Init+0x64>)
 80014fa:	224f      	movs	r2, #79	; 0x4f
 80014fc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014fe:	4b12      	ldr	r3, [pc, #72]	; (8001548 <MX_TIM6_Init+0x64>)
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 31000;
 8001504:	4b10      	ldr	r3, [pc, #64]	; (8001548 <MX_TIM6_Init+0x64>)
 8001506:	f647 1218 	movw	r2, #31000	; 0x7918
 800150a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800150c:	4b0e      	ldr	r3, [pc, #56]	; (8001548 <MX_TIM6_Init+0x64>)
 800150e:	2200      	movs	r2, #0
 8001510:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001512:	480d      	ldr	r0, [pc, #52]	; (8001548 <MX_TIM6_Init+0x64>)
 8001514:	f004 fb94 	bl	8005c40 <HAL_TIM_Base_Init>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800151e:	f7ff fe5b 	bl	80011d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001522:	2300      	movs	r3, #0
 8001524:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001526:	2300      	movs	r3, #0
 8001528:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800152a:	463b      	mov	r3, r7
 800152c:	4619      	mov	r1, r3
 800152e:	4806      	ldr	r0, [pc, #24]	; (8001548 <MX_TIM6_Init+0x64>)
 8001530:	f004 ff36 	bl	80063a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800153a:	f7ff fe4d 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20000424 	.word	0x20000424
 800154c:	40001000 	.word	0x40001000

08001550 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001560:	d114      	bne.n	800158c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001562:	4b19      	ldr	r3, [pc, #100]	; (80015c8 <HAL_TIM_Base_MspInit+0x78>)
 8001564:	69db      	ldr	r3, [r3, #28]
 8001566:	4a18      	ldr	r2, [pc, #96]	; (80015c8 <HAL_TIM_Base_MspInit+0x78>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	61d3      	str	r3, [r2, #28]
 800156e:	4b16      	ldr	r3, [pc, #88]	; (80015c8 <HAL_TIM_Base_MspInit+0x78>)
 8001570:	69db      	ldr	r3, [r3, #28]
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800157a:	2200      	movs	r2, #0
 800157c:	2101      	movs	r1, #1
 800157e:	201c      	movs	r0, #28
 8001580:	f003 f9e1 	bl	8004946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001584:	201c      	movs	r0, #28
 8001586:	f003 f9fa 	bl	800497e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800158a:	e018      	b.n	80015be <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM6)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a0e      	ldr	r2, [pc, #56]	; (80015cc <HAL_TIM_Base_MspInit+0x7c>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d113      	bne.n	80015be <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001596:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <HAL_TIM_Base_MspInit+0x78>)
 8001598:	69db      	ldr	r3, [r3, #28]
 800159a:	4a0b      	ldr	r2, [pc, #44]	; (80015c8 <HAL_TIM_Base_MspInit+0x78>)
 800159c:	f043 0310 	orr.w	r3, r3, #16
 80015a0:	61d3      	str	r3, [r2, #28]
 80015a2:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <HAL_TIM_Base_MspInit+0x78>)
 80015a4:	69db      	ldr	r3, [r3, #28]
 80015a6:	f003 0310 	and.w	r3, r3, #16
 80015aa:	60bb      	str	r3, [r7, #8]
 80015ac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_IRQn, 2, 0);
 80015ae:	2200      	movs	r2, #0
 80015b0:	2102      	movs	r1, #2
 80015b2:	2036      	movs	r0, #54	; 0x36
 80015b4:	f003 f9c7 	bl	8004946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80015b8:	2036      	movs	r0, #54	; 0x36
 80015ba:	f003 f9e0 	bl	800497e <HAL_NVIC_EnableIRQ>
}
 80015be:	bf00      	nop
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40021000 	.word	0x40021000
 80015cc:	40001000 	.word	0x40001000

080015d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015d0:	480c      	ldr	r0, [pc, #48]	; (8001604 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015d2:	490d      	ldr	r1, [pc, #52]	; (8001608 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015d4:	4a0d      	ldr	r2, [pc, #52]	; (800160c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015d8:	e002      	b.n	80015e0 <LoopCopyDataInit>

080015da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015de:	3304      	adds	r3, #4

080015e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015e4:	d3f9      	bcc.n	80015da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015e6:	4a0a      	ldr	r2, [pc, #40]	; (8001610 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015e8:	4c0a      	ldr	r4, [pc, #40]	; (8001614 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015ec:	e001      	b.n	80015f2 <LoopFillZerobss>

080015ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015f0:	3204      	adds	r2, #4

080015f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015f4:	d3fb      	bcc.n	80015ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015f6:	f7ff ff23 	bl	8001440 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015fa:	f004 ff5d 	bl	80064b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015fe:	f7ff fd81 	bl	8001104 <main>
  bx lr
 8001602:	4770      	bx	lr
  ldr r0, =_sdata
 8001604:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001608:	20000118 	.word	0x20000118
  ldr r2, =_sidata
 800160c:	080073a8 	.word	0x080073a8
  ldr r2, =_sbss
 8001610:	20000118 	.word	0x20000118
  ldr r4, =_ebss
 8001614:	20001e6c 	.word	0x20001e6c

08001618 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001618:	e7fe      	b.n	8001618 <ADC3_IRQHandler>
	...

0800161c <L1_Init>:




void L1_Init()
{
 800161c:	b590      	push	{r4, r7, lr}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
	mac[0] = *(uint32_t *)(0x1FFFF7E8); // high address
 8001622:	4b19      	ldr	r3, [pc, #100]	; (8001688 <L1_Init+0x6c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a19      	ldr	r2, [pc, #100]	; (800168c <L1_Init+0x70>)
 8001628:	6013      	str	r3, [r2, #0]
	mac[1] = *(uint32_t  *)(0x1FFFF7E8 + 4); //
 800162a:	4b19      	ldr	r3, [pc, #100]	; (8001690 <L1_Init+0x74>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a17      	ldr	r2, [pc, #92]	; (800168c <L1_Init+0x70>)
 8001630:	6053      	str	r3, [r2, #4]
	mac[2] = *(uint32_t *)(0x1FFFF7E8 + 8); //  Low address
 8001632:	4b18      	ldr	r3, [pc, #96]	; (8001694 <L1_Init+0x78>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a15      	ldr	r2, [pc, #84]	; (800168c <L1_Init+0x70>)
 8001638:	6093      	str	r3, [r2, #8]
	for(uint8_t Count = 0; Count < MAX_BUFFER_SIZE; Count++)
 800163a:	2300      	movs	r3, #0
 800163c:	71fb      	strb	r3, [r7, #7]
 800163e:	e011      	b.n	8001664 <L1_Init+0x48>
	{
		DataBuffer.RxBuffer[Count].payload_ptr = (uint8_t*)calloc(3,sizeof(uint8_t));
 8001640:	79fc      	ldrb	r4, [r7, #7]
 8001642:	2101      	movs	r1, #1
 8001644:	2003      	movs	r0, #3
 8001646:	f004 ff29 	bl	800649c <calloc>
 800164a:	4603      	mov	r3, r0
 800164c:	4619      	mov	r1, r3
 800164e:	4a12      	ldr	r2, [pc, #72]	; (8001698 <L1_Init+0x7c>)
 8001650:	4623      	mov	r3, r4
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	4423      	add	r3, r4
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	4413      	add	r3, r2
 800165a:	3380      	adds	r3, #128	; 0x80
 800165c:	6019      	str	r1, [r3, #0]
	for(uint8_t Count = 0; Count < MAX_BUFFER_SIZE; Count++)
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	3301      	adds	r3, #1
 8001662:	71fb      	strb	r3, [r7, #7]
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	2b09      	cmp	r3, #9
 8001668:	d9ea      	bls.n	8001640 <L1_Init+0x24>
	}
	if(isMaster == 0)
 800166a:	4b0c      	ldr	r3, [pc, #48]	; (800169c <L1_Init+0x80>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d103      	bne.n	800167a <L1_Init+0x5e>
	{
		currentmode = 0;
 8001672:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <L1_Init+0x84>)
 8001674:	2200      	movs	r2, #0
 8001676:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		currentmode = 1;
	}
}
 8001678:	e002      	b.n	8001680 <L1_Init+0x64>
		currentmode = 1;
 800167a:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <L1_Init+0x84>)
 800167c:	2201      	movs	r2, #1
 800167e:	701a      	strb	r2, [r3, #0]
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	bd90      	pop	{r4, r7, pc}
 8001688:	1ffff7e8 	.word	0x1ffff7e8
 800168c:	200004bc 	.word	0x200004bc
 8001690:	1ffff7ec 	.word	0x1ffff7ec
 8001694:	1ffff7f0 	.word	0x1ffff7f0
 8001698:	2000029c 	.word	0x2000029c
 800169c:	2000013d 	.word	0x2000013d
 80016a0:	2000013c 	.word	0x2000013c

080016a4 <DelayMs>:

#include "my_delay.h"

void DelayMs(uint32_t delayMS){
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
	HAL_Delay(1000*delayMS);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016b2:	fb02 f303 	mul.w	r3, r2, r3
 80016b6:	4618      	mov	r0, r3
 80016b8:	f002 fc36 	bl	8003f28 <HAL_Delay>
}
 80016bc:	bf00      	nop
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <RadioGetFskBandwidthRegValue>:
 *
 * \param [IN] bandwidth Bandwidth value in Hz
 * \retval regValue Bandwidth register value.
 */
static uint8_t RadioGetFskBandwidthRegValue( uint32_t bandwidth )
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d101      	bne.n	80016d6 <RadioGetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 80016d2:	231f      	movs	r3, #31
 80016d4:	e01f      	b.n	8001716 <RadioGetFskBandwidthRegValue+0x52>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 80016d6:	2300      	movs	r3, #0
 80016d8:	73fb      	strb	r3, [r7, #15]
 80016da:	e018      	b.n	800170e <RadioGetFskBandwidthRegValue+0x4a>
    {
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 80016dc:	7bfb      	ldrb	r3, [r7, #15]
 80016de:	4a10      	ldr	r2, [pc, #64]	; (8001720 <RadioGetFskBandwidthRegValue+0x5c>)
 80016e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d30e      	bcc.n	8001708 <RadioGetFskBandwidthRegValue+0x44>
 80016ea:	7bfb      	ldrb	r3, [r7, #15]
 80016ec:	3301      	adds	r3, #1
 80016ee:	4a0c      	ldr	r2, [pc, #48]	; (8001720 <RadioGetFskBandwidthRegValue+0x5c>)
 80016f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d206      	bcs.n	8001708 <RadioGetFskBandwidthRegValue+0x44>
        {
            return FskBandwidths[i+1].RegValue;
 80016fa:	7bfb      	ldrb	r3, [r7, #15]
 80016fc:	3301      	adds	r3, #1
 80016fe:	4a08      	ldr	r2, [pc, #32]	; (8001720 <RadioGetFskBandwidthRegValue+0x5c>)
 8001700:	00db      	lsls	r3, r3, #3
 8001702:	4413      	add	r3, r2
 8001704:	791b      	ldrb	r3, [r3, #4]
 8001706:	e006      	b.n	8001716 <RadioGetFskBandwidthRegValue+0x52>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8001708:	7bfb      	ldrb	r3, [r7, #15]
 800170a:	3301      	adds	r3, #1
 800170c:	73fb      	strb	r3, [r7, #15]
 800170e:	7bfb      	ldrb	r3, [r7, #15]
 8001710:	2b14      	cmp	r3, #20
 8001712:	d9e3      	bls.n	80016dc <RadioGetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 8001714:	e7fe      	b.n	8001714 <RadioGetFskBandwidthRegValue+0x50>
}
 8001716:	4618      	mov	r0, r3
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr
 8001720:	08007274 	.word	0x08007274

08001724 <RadioInit>:

void RadioInit( RadioEvents_t *events )
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 800172c:	4a11      	ldr	r2, [pc, #68]	; (8001774 <RadioInit+0x50>)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6013      	str	r3, [r2, #0]
    
    SX126xInit( RadioOnDioIrq );
 8001732:	4811      	ldr	r0, [pc, #68]	; (8001778 <RadioInit+0x54>)
 8001734:	f001 f8ac 	bl	8002890 <SX126xInit>
    SX126xSetStandby( STDBY_RC );
 8001738:	2000      	movs	r0, #0
 800173a:	f001 f9bd 	bl	8002ab8 <SX126xSetStandby>
    SX126xSetRegulatorMode( USE_DCDC );
 800173e:	2001      	movs	r0, #1
 8001740:	f001 fa9b 	bl	8002c7a <SX126xSetRegulatorMode>
    
    SX126xSetBufferBaseAddress( 0x00, 0x00 );
 8001744:	2100      	movs	r1, #0
 8001746:	2000      	movs	r0, #0
 8001748:	f001 fd86 	bl	8003258 <SX126xSetBufferBaseAddress>
    SX126xSetTxParams( 0, RADIO_RAMP_200_US );
 800174c:	2104      	movs	r1, #4
 800174e:	2000      	movs	r0, #0
 8001750:	f001 fbce 	bl	8002ef0 <SX126xSetTxParams>
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8001754:	2300      	movs	r3, #0
 8001756:	2200      	movs	r2, #0
 8001758:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800175c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001760:	f001 fb02 	bl	8002d68 <SX126xSetDioIrqParams>
    
    //Initialize driver timeout timers
    //TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
    //TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
    
    IrqFired = false;
 8001764:	4b05      	ldr	r3, [pc, #20]	; (800177c <RadioInit+0x58>)
 8001766:	2200      	movs	r2, #0
 8001768:	701a      	strb	r2, [r3, #0]
}
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000150 	.word	0x20000150
 8001778:	0800228d 	.word	0x0800228d
 800177c:	20000148 	.word	0x20000148

08001780 <RadioGetStatus>:

RadioState_t RadioGetStatus( void )
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
    switch( SX126xGetOperatingMode( ) )
 8001784:	f001 f89c 	bl	80028c0 <SX126xGetOperatingMode>
 8001788:	4603      	mov	r3, r0
 800178a:	2b05      	cmp	r3, #5
 800178c:	d007      	beq.n	800179e <RadioGetStatus+0x1e>
 800178e:	2b05      	cmp	r3, #5
 8001790:	dc09      	bgt.n	80017a6 <RadioGetStatus+0x26>
 8001792:	2b03      	cmp	r3, #3
 8001794:	d005      	beq.n	80017a2 <RadioGetStatus+0x22>
 8001796:	2b04      	cmp	r3, #4
 8001798:	d105      	bne.n	80017a6 <RadioGetStatus+0x26>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 800179a:	2302      	movs	r3, #2
 800179c:	e004      	b.n	80017a8 <RadioGetStatus+0x28>
        case MODE_RX:
            return RF_RX_RUNNING;
 800179e:	2301      	movs	r3, #1
 80017a0:	e002      	b.n	80017a8 <RadioGetStatus+0x28>
        case RF_CAD:
            return RF_CAD;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e000      	b.n	80017a8 <RadioGetStatus+0x28>
        default:
            return RF_IDLE;
 80017a6:	2300      	movs	r3, #0
    }
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	bd80      	pop	{r7, pc}

080017ac <RadioSetModem>:

void RadioSetModem( RadioModems_t modem )
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	71fb      	strb	r3, [r7, #7]
    switch( modem )
 80017b6:	79fb      	ldrb	r3, [r7, #7]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d006      	beq.n	80017ca <RadioSetModem+0x1e>
    {
    default:
    case MODEM_FSK:
        SX126xSetPacketType( PACKET_TYPE_GFSK );
 80017bc:	2000      	movs	r0, #0
 80017be:	f001 fb79 	bl	8002eb4 <SX126xSetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        RadioPublicNetwork.Current = false;
 80017c2:	4b0d      	ldr	r3, [pc, #52]	; (80017f8 <RadioSetModem+0x4c>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	705a      	strb	r2, [r3, #1]
        break;
 80017c8:	e012      	b.n	80017f0 <RadioSetModem+0x44>
    case MODEM_LORA:
        SX126xSetPacketType( PACKET_TYPE_LORA );
 80017ca:	2001      	movs	r0, #1
 80017cc:	f001 fb72 	bl	8002eb4 <SX126xSetPacketType>
        // Public/Private network register is reset when switching modems
        if( RadioPublicNetwork.Current != RadioPublicNetwork.Previous )
 80017d0:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <RadioSetModem+0x4c>)
 80017d2:	785a      	ldrb	r2, [r3, #1]
 80017d4:	4b08      	ldr	r3, [pc, #32]	; (80017f8 <RadioSetModem+0x4c>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d008      	beq.n	80017ee <RadioSetModem+0x42>
        {
            RadioPublicNetwork.Current = RadioPublicNetwork.Previous;
 80017dc:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <RadioSetModem+0x4c>)
 80017de:	781a      	ldrb	r2, [r3, #0]
 80017e0:	4b05      	ldr	r3, [pc, #20]	; (80017f8 <RadioSetModem+0x4c>)
 80017e2:	705a      	strb	r2, [r3, #1]
            RadioSetPublicNetwork( RadioPublicNetwork.Current );
 80017e4:	4b04      	ldr	r3, [pc, #16]	; (80017f8 <RadioSetModem+0x4c>)
 80017e6:	785b      	ldrb	r3, [r3, #1]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f000 fd19 	bl	8002220 <RadioSetPublicNetwork>
        }
        break;
 80017ee:	bf00      	nop
    }
}
 80017f0:	bf00      	nop
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	2000014c 	.word	0x2000014c

080017fc <RadioSetChannel>:

void RadioSetChannel( uint32_t freq )
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
    SX126xSetRfFrequency( freq );
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f001 fb0f 	bl	8002e28 <SX126xSetRfFrequency>
}
 800180a:	bf00      	nop
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <RadioIsChannelFree>:

bool RadioIsChannelFree( RadioModems_t modem, uint32_t freq, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b086      	sub	sp, #24
 8001816:	af00      	add	r7, sp, #0
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607b      	str	r3, [r7, #4]
 800181c:	4603      	mov	r3, r0
 800181e:	73fb      	strb	r3, [r7, #15]
 8001820:	4613      	mov	r3, r2
 8001822:	81bb      	strh	r3, [r7, #12]
    bool status = true;
 8001824:	2301      	movs	r3, #1
 8001826:	75fb      	strb	r3, [r7, #23]
   // int16_t rssi = 0;
   // uint32_t carrierSenseTime = 0;

    RadioSetModem( modem );
 8001828:	7bfb      	ldrb	r3, [r7, #15]
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff ffbe 	bl	80017ac <RadioSetModem>

    RadioSetChannel( freq );
 8001830:	68b8      	ldr	r0, [r7, #8]
 8001832:	f7ff ffe3 	bl	80017fc <RadioSetChannel>

    RadioRx( 0,0 );
 8001836:	2100      	movs	r1, #0
 8001838:	2000      	movs	r0, #0
 800183a:	f000 fc09 	bl	8002050 <RadioRx>

    DelayMs( 1 );
 800183e:	2001      	movs	r0, #1
 8001840:	f7ff ff30 	bl	80016a4 <DelayMs>
//        {
//            status = false;
//            break;
//        }
//    }
    RadioSleep( );
 8001844:	f000 fbea 	bl	800201c <RadioSleep>
    return status;
 8001848:	7dfb      	ldrb	r3, [r7, #23]
}
 800184a:	4618      	mov	r0, r3
 800184c:	3718      	adds	r7, #24
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <RadioRandom>:

uint32_t RadioRandom( void )
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b082      	sub	sp, #8
 8001856:	af00      	add	r7, sp, #0
    uint8_t i;
    uint32_t rnd = 0;
 8001858:	2300      	movs	r3, #0
 800185a:	603b      	str	r3, [r7, #0]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    RadioSetModem( MODEM_LORA );
 800185c:	2001      	movs	r0, #1
 800185e:	f7ff ffa5 	bl	80017ac <RadioSetModem>

    // Set radio in continuous reception
    SX126xSetRx( 0 );
 8001862:	2000      	movs	r0, #0
 8001864:	f001 f964 	bl	8002b30 <SX126xSetRx>

    for( i = 0; i < 32; i++ )
 8001868:	2300      	movs	r3, #0
 800186a:	71fb      	strb	r3, [r7, #7]
 800186c:	e011      	b.n	8001892 <RadioRandom+0x40>
    {
        DelayMs( 1 );
 800186e:	2001      	movs	r0, #1
 8001870:	f7ff ff18 	bl	80016a4 <DelayMs>
        // Unfiltered RSSI value reading. Only takes the LSB value
        rnd |= ( ( uint32_t )SX126xGetRssiInst( ) & 0x01 ) << i;
 8001874:	f001 fd07 	bl	8003286 <SX126xGetRssiInst>
 8001878:	4603      	mov	r3, r0
 800187a:	b2db      	uxtb	r3, r3
 800187c:	f003 0201 	and.w	r2, r3, #1
 8001880:	79fb      	ldrb	r3, [r7, #7]
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	4313      	orrs	r3, r2
 800188a:	603b      	str	r3, [r7, #0]
    for( i = 0; i < 32; i++ )
 800188c:	79fb      	ldrb	r3, [r7, #7]
 800188e:	3301      	adds	r3, #1
 8001890:	71fb      	strb	r3, [r7, #7]
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	2b1f      	cmp	r3, #31
 8001896:	d9ea      	bls.n	800186e <RadioRandom+0x1c>
    }

    RadioSleep( );
 8001898:	f000 fbc0 	bl	800201c <RadioSleep>

    return rnd;
 800189c:	683b      	ldr	r3, [r7, #0]
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
	...

080018a8 <RadioSetRxConfig>:
                         uint32_t bandwidthAfc, uint16_t preambleLen,
                         uint16_t symbTimeout, bool fixLen,
                         uint8_t payloadLen,
                         bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                         bool iqInverted, bool rxContinuous )
{
 80018a8:	b5b0      	push	{r4, r5, r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60b9      	str	r1, [r7, #8]
 80018b0:	607a      	str	r2, [r7, #4]
 80018b2:	461a      	mov	r2, r3
 80018b4:	4603      	mov	r3, r0
 80018b6:	73fb      	strb	r3, [r7, #15]
 80018b8:	4613      	mov	r3, r2
 80018ba:	73bb      	strb	r3, [r7, #14]
	uint8_t syncWordByte[] ={ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80018bc:	4a92      	ldr	r2, [pc, #584]	; (8001b08 <RadioSetRxConfig+0x260>)
 80018be:	f107 0310 	add.w	r3, r7, #16
 80018c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018c6:	e883 0003 	stmia.w	r3, {r0, r1}
	
    RxContinuous = rxContinuous;
 80018ca:	4a90      	ldr	r2, [pc, #576]	; (8001b0c <RadioSetRxConfig+0x264>)
 80018cc:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80018d0:	7013      	strb	r3, [r2, #0]

    if( fixLen == true )
 80018d2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d004      	beq.n	80018e4 <RadioSetRxConfig+0x3c>
    {
        MaxPayloadLength = payloadLen;
 80018da:	4a8d      	ldr	r2, [pc, #564]	; (8001b10 <RadioSetRxConfig+0x268>)
 80018dc:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80018e0:	7013      	strb	r3, [r2, #0]
 80018e2:	e002      	b.n	80018ea <RadioSetRxConfig+0x42>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 80018e4:	4b8a      	ldr	r3, [pc, #552]	; (8001b10 <RadioSetRxConfig+0x268>)
 80018e6:	22ff      	movs	r2, #255	; 0xff
 80018e8:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 80018ea:	7bfb      	ldrb	r3, [r7, #15]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d003      	beq.n	80018f8 <RadioSetRxConfig+0x50>
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	f000 8090 	beq.w	8001a16 <RadioSetRxConfig+0x16e>
            // Timeout Max, Timeout handled directly in SetRx function
             RxTimeout = 0xFFFF;

            break;
    }
}
 80018f6:	e103      	b.n	8001b00 <RadioSetRxConfig+0x258>
            SX126xSetStopRxTimerOnPreambleDetect( false );
 80018f8:	2000      	movs	r0, #0
 80018fa:	f001 f9a0 	bl	8002c3e <SX126xSetStopRxTimerOnPreambleDetect>
            SX126x.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80018fe:	4b85      	ldr	r3, [pc, #532]	; (8001b14 <RadioSetRxConfig+0x26c>)
 8001900:	2200      	movs	r2, #0
 8001902:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            SX126x.ModulationParams.Params.Gfsk.BitRate = datarate;
 8001906:	4a83      	ldr	r2, [pc, #524]	; (8001b14 <RadioSetRxConfig+0x26c>)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	62d3      	str	r3, [r2, #44]	; 0x2c
            SX126x.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800190c:	4b81      	ldr	r3, [pc, #516]	; (8001b14 <RadioSetRxConfig+0x26c>)
 800190e:	220b      	movs	r2, #11
 8001910:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            SX126x.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue( bandwidth );
 8001914:	68b8      	ldr	r0, [r7, #8]
 8001916:	f7ff fed5 	bl	80016c4 <RadioGetFskBandwidthRegValue>
 800191a:	4603      	mov	r3, r0
 800191c:	461a      	mov	r2, r3
 800191e:	4b7d      	ldr	r3, [pc, #500]	; (8001b14 <RadioSetRxConfig+0x26c>)
 8001920:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            SX126x.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8001924:	4b7b      	ldr	r3, [pc, #492]	; (8001b14 <RadioSetRxConfig+0x26c>)
 8001926:	2200      	movs	r2, #0
 8001928:	701a      	strb	r2, [r3, #0]
            SX126x.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800192a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	b29a      	uxth	r2, r3
 8001930:	4b78      	ldr	r3, [pc, #480]	; (8001b14 <RadioSetRxConfig+0x26c>)
 8001932:	805a      	strh	r2, [r3, #2]
            SX126x.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8001934:	4b77      	ldr	r3, [pc, #476]	; (8001b14 <RadioSetRxConfig+0x26c>)
 8001936:	2204      	movs	r2, #4
 8001938:	711a      	strb	r2, [r3, #4]
            SX126x.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 800193a:	4b76      	ldr	r3, [pc, #472]	; (8001b14 <RadioSetRxConfig+0x26c>)
 800193c:	2218      	movs	r2, #24
 800193e:	715a      	strb	r2, [r3, #5]
            SX126x.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8001940:	4b74      	ldr	r3, [pc, #464]	; (8001b14 <RadioSetRxConfig+0x26c>)
 8001942:	2200      	movs	r2, #0
 8001944:	719a      	strb	r2, [r3, #6]
            SX126x.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8001946:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800194a:	f083 0301 	eor.w	r3, r3, #1
 800194e:	b2db      	uxtb	r3, r3
 8001950:	461a      	mov	r2, r3
 8001952:	4b70      	ldr	r3, [pc, #448]	; (8001b14 <RadioSetRxConfig+0x26c>)
 8001954:	71da      	strb	r2, [r3, #7]
            SX126x.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8001956:	4b6e      	ldr	r3, [pc, #440]	; (8001b10 <RadioSetRxConfig+0x268>)
 8001958:	781a      	ldrb	r2, [r3, #0]
 800195a:	4b6e      	ldr	r3, [pc, #440]	; (8001b14 <RadioSetRxConfig+0x26c>)
 800195c:	721a      	strb	r2, [r3, #8]
            if( crcOn == true )
 800195e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001962:	2b00      	cmp	r3, #0
 8001964:	d003      	beq.n	800196e <RadioSetRxConfig+0xc6>
                SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8001966:	4b6b      	ldr	r3, [pc, #428]	; (8001b14 <RadioSetRxConfig+0x26c>)
 8001968:	22f2      	movs	r2, #242	; 0xf2
 800196a:	725a      	strb	r2, [r3, #9]
 800196c:	e002      	b.n	8001974 <RadioSetRxConfig+0xcc>
                SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800196e:	4b69      	ldr	r3, [pc, #420]	; (8001b14 <RadioSetRxConfig+0x26c>)
 8001970:	2201      	movs	r2, #1
 8001972:	725a      	strb	r2, [r3, #9]
            SX126x.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8001974:	4b67      	ldr	r3, [pc, #412]	; (8001b14 <RadioSetRxConfig+0x26c>)
 8001976:	2200      	movs	r2, #0
 8001978:	729a      	strb	r2, [r3, #10]
            RadioStandby( );
 800197a:	f000 fb62 	bl	8002042 <RadioStandby>
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800197e:	4b65      	ldr	r3, [pc, #404]	; (8001b14 <RadioSetRxConfig+0x26c>)
 8001980:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001984:	2b00      	cmp	r3, #0
 8001986:	bf14      	ite	ne
 8001988:	2301      	movne	r3, #1
 800198a:	2300      	moveq	r3, #0
 800198c:	b2db      	uxtb	r3, r3
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff ff0c 	bl	80017ac <RadioSetModem>
            SX126xSetModulationParams( &SX126x.ModulationParams );
 8001994:	4860      	ldr	r0, [pc, #384]	; (8001b18 <RadioSetRxConfig+0x270>)
 8001996:	f001 fb07 	bl	8002fa8 <SX126xSetModulationParams>
            SX126xSetPacketParams( &SX126x.PacketParams );
 800199a:	485e      	ldr	r0, [pc, #376]	; (8001b14 <RadioSetRxConfig+0x26c>)
 800199c:	f001 fba2 	bl	80030e4 <SX126xSetPacketParams>
            SX126xSetSyncWord( syncWordByte );
 80019a0:	f107 0310 	add.w	r3, r7, #16
 80019a4:	4618      	mov	r0, r3
 80019a6:	f000 ffee 	bl	8002986 <SX126xSetSyncWord>
            SX126xSetWhiteningSeed( 0x01FF );
 80019aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80019ae:	f001 f839 	bl	8002a24 <SX126xSetWhiteningSeed>
            RxTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 80019b2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7fe fd89 	bl	80004cc <__aeabi_i2d>
 80019ba:	4604      	mov	r4, r0
 80019bc:	460d      	mov	r5, r1
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f7fe fd74 	bl	80004ac <__aeabi_ui2d>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	f04f 0000 	mov.w	r0, #0
 80019cc:	4953      	ldr	r1, [pc, #332]	; (8001b1c <RadioSetRxConfig+0x274>)
 80019ce:	f7fe ff11 	bl	80007f4 <__aeabi_ddiv>
 80019d2:	4602      	mov	r2, r0
 80019d4:	460b      	mov	r3, r1
 80019d6:	4610      	mov	r0, r2
 80019d8:	4619      	mov	r1, r3
 80019da:	f04f 0200 	mov.w	r2, #0
 80019de:	4b50      	ldr	r3, [pc, #320]	; (8001b20 <RadioSetRxConfig+0x278>)
 80019e0:	f7fe fdde 	bl	80005a0 <__aeabi_dmul>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	4620      	mov	r0, r4
 80019ea:	4629      	mov	r1, r5
 80019ec:	f7fe fdd8 	bl	80005a0 <__aeabi_dmul>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	4610      	mov	r0, r2
 80019f6:	4619      	mov	r1, r3
 80019f8:	f04f 0200 	mov.w	r2, #0
 80019fc:	4b49      	ldr	r3, [pc, #292]	; (8001b24 <RadioSetRxConfig+0x27c>)
 80019fe:	f7fe fdcf 	bl	80005a0 <__aeabi_dmul>
 8001a02:	4602      	mov	r2, r0
 8001a04:	460b      	mov	r3, r1
 8001a06:	4610      	mov	r0, r2
 8001a08:	4619      	mov	r1, r3
 8001a0a:	f7ff f863 	bl	8000ad4 <__aeabi_d2uiz>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	4a45      	ldr	r2, [pc, #276]	; (8001b28 <RadioSetRxConfig+0x280>)
 8001a12:	6013      	str	r3, [r2, #0]
            break;
 8001a14:	e074      	b.n	8001b00 <RadioSetRxConfig+0x258>
            SX126xSetStopRxTimerOnPreambleDetect( false );
 8001a16:	2000      	movs	r0, #0
 8001a18:	f001 f911 	bl	8002c3e <SX126xSetStopRxTimerOnPreambleDetect>
            SX126xSetLoRaSymbNumTimeout( symbTimeout );
 8001a1c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	4618      	mov	r0, r3
 8001a22:	f001 f91b 	bl	8002c5c <SX126xSetLoRaSymbNumTimeout>
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8001a26:	4b3b      	ldr	r3, [pc, #236]	; (8001b14 <RadioSetRxConfig+0x26c>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            SX126x.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	4b38      	ldr	r3, [pc, #224]	; (8001b14 <RadioSetRxConfig+0x26c>)
 8001a34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SX126x.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8001a38:	4a3c      	ldr	r2, [pc, #240]	; (8001b2c <RadioSetRxConfig+0x284>)
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	781a      	ldrb	r2, [r3, #0]
 8001a40:	4b34      	ldr	r3, [pc, #208]	; (8001b14 <RadioSetRxConfig+0x26c>)
 8001a42:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            SX126x.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8001a46:	4a33      	ldr	r2, [pc, #204]	; (8001b14 <RadioSetRxConfig+0x26c>)
 8001a48:	7bbb      	ldrb	r3, [r7, #14]
 8001a4a:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d105      	bne.n	8001a60 <RadioSetRxConfig+0x1b8>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2b0b      	cmp	r3, #11
 8001a58:	d008      	beq.n	8001a6c <RadioSetRxConfig+0x1c4>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2b0c      	cmp	r3, #12
 8001a5e:	d005      	beq.n	8001a6c <RadioSetRxConfig+0x1c4>
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d107      	bne.n	8001a76 <RadioSetRxConfig+0x1ce>
            ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2b0c      	cmp	r3, #12
 8001a6a:	d104      	bne.n	8001a76 <RadioSetRxConfig+0x1ce>
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8001a6c:	4b29      	ldr	r3, [pc, #164]	; (8001b14 <RadioSetRxConfig+0x26c>)
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8001a74:	e003      	b.n	8001a7e <RadioSetRxConfig+0x1d6>
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8001a76:	4b27      	ldr	r3, [pc, #156]	; (8001b14 <RadioSetRxConfig+0x26c>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
            SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 8001a7e:	4b25      	ldr	r3, [pc, #148]	; (8001b14 <RadioSetRxConfig+0x26c>)
 8001a80:	2201      	movs	r2, #1
 8001a82:	701a      	strb	r2, [r3, #0]
            if( ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8001a84:	4b23      	ldr	r3, [pc, #140]	; (8001b14 <RadioSetRxConfig+0x26c>)
 8001a86:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a8a:	2b05      	cmp	r3, #5
 8001a8c:	d004      	beq.n	8001a98 <RadioSetRxConfig+0x1f0>
                ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8001a8e:	4b21      	ldr	r3, [pc, #132]	; (8001b14 <RadioSetRxConfig+0x26c>)
 8001a90:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
            if( ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8001a94:	2b06      	cmp	r3, #6
 8001a96:	d10a      	bne.n	8001aae <RadioSetRxConfig+0x206>
                if( preambleLen < 12 )
 8001a98:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001a9a:	2b0b      	cmp	r3, #11
 8001a9c:	d803      	bhi.n	8001aa6 <RadioSetRxConfig+0x1fe>
                    SX126x.PacketParams.Params.LoRa.PreambleLength = 12;
 8001a9e:	4b1d      	ldr	r3, [pc, #116]	; (8001b14 <RadioSetRxConfig+0x26c>)
 8001aa0:	220c      	movs	r2, #12
 8001aa2:	819a      	strh	r2, [r3, #12]
                if( preambleLen < 12 )
 8001aa4:	e006      	b.n	8001ab4 <RadioSetRxConfig+0x20c>
                    SX126x.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8001aa6:	4a1b      	ldr	r2, [pc, #108]	; (8001b14 <RadioSetRxConfig+0x26c>)
 8001aa8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001aaa:	8193      	strh	r3, [r2, #12]
                if( preambleLen < 12 )
 8001aac:	e002      	b.n	8001ab4 <RadioSetRxConfig+0x20c>
                SX126x.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8001aae:	4a19      	ldr	r2, [pc, #100]	; (8001b14 <RadioSetRxConfig+0x26c>)
 8001ab0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001ab2:	8193      	strh	r3, [r2, #12]
            SX126x.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8001ab4:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8001ab8:	4b16      	ldr	r3, [pc, #88]	; (8001b14 <RadioSetRxConfig+0x26c>)
 8001aba:	739a      	strb	r2, [r3, #14]
            SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8001abc:	4b14      	ldr	r3, [pc, #80]	; (8001b10 <RadioSetRxConfig+0x268>)
 8001abe:	781a      	ldrb	r2, [r3, #0]
 8001ac0:	4b14      	ldr	r3, [pc, #80]	; (8001b14 <RadioSetRxConfig+0x26c>)
 8001ac2:	73da      	strb	r2, [r3, #15]
            SX126x.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8001ac4:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8001ac8:	4b12      	ldr	r3, [pc, #72]	; (8001b14 <RadioSetRxConfig+0x26c>)
 8001aca:	741a      	strb	r2, [r3, #16]
            SX126x.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8001acc:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 8001ad0:	4b10      	ldr	r3, [pc, #64]	; (8001b14 <RadioSetRxConfig+0x26c>)
 8001ad2:	745a      	strb	r2, [r3, #17]
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8001ad4:	4b0f      	ldr	r3, [pc, #60]	; (8001b14 <RadioSetRxConfig+0x26c>)
 8001ad6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	bf14      	ite	ne
 8001ade:	2301      	movne	r3, #1
 8001ae0:	2300      	moveq	r3, #0
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff fe61 	bl	80017ac <RadioSetModem>
            SX126xSetModulationParams( &SX126x.ModulationParams );
 8001aea:	480b      	ldr	r0, [pc, #44]	; (8001b18 <RadioSetRxConfig+0x270>)
 8001aec:	f001 fa5c 	bl	8002fa8 <SX126xSetModulationParams>
            SX126xSetPacketParams( &SX126x.PacketParams );
 8001af0:	4808      	ldr	r0, [pc, #32]	; (8001b14 <RadioSetRxConfig+0x26c>)
 8001af2:	f001 faf7 	bl	80030e4 <SX126xSetPacketParams>
             RxTimeout = 0xFFFF;
 8001af6:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <RadioSetRxConfig+0x280>)
 8001af8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001afc:	601a      	str	r2, [r3, #0]
            break;
 8001afe:	bf00      	nop
}
 8001b00:	bf00      	nop
 8001b02:	3718      	adds	r7, #24
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bdb0      	pop	{r4, r5, r7, pc}
 8001b08:	080071cc 	.word	0x080071cc
 8001b0c:	20000099 	.word	0x20000099
 8001b10:	20000098 	.word	0x20000098
 8001b14:	200004cc 	.word	0x200004cc
 8001b18:	200004f4 	.word	0x200004f4
 8001b1c:	3ff00000 	.word	0x3ff00000
 8001b20:	40200000 	.word	0x40200000
 8001b24:	408f4000 	.word	0x408f4000
 8001b28:	20000144 	.word	0x20000144
 8001b2c:	08007324 	.word	0x08007324

08001b30 <RadioSetTxConfig>:
void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                        uint32_t bandwidth, uint32_t datarate,
                        uint8_t coderate, uint16_t preambleLen,
                        bool fixLen, bool crcOn, bool freqHopOn,
                        uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60ba      	str	r2, [r7, #8]
 8001b38:	607b      	str	r3, [r7, #4]
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	73fb      	strb	r3, [r7, #15]
 8001b3e:	460b      	mov	r3, r1
 8001b40:	73bb      	strb	r3, [r7, #14]
	uint8_t syncWordByte[] ={ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8001b42:	4a6f      	ldr	r2, [pc, #444]	; (8001d00 <RadioSetTxConfig+0x1d0>)
 8001b44:	f107 0310 	add.w	r3, r7, #16
 8001b48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b4c:	e883 0003 	stmia.w	r3, {r0, r1}
	
    switch( modem )
 8001b50:	7bfb      	ldrb	r3, [r7, #15]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d002      	beq.n	8001b5c <RadioSetTxConfig+0x2c>
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d05a      	beq.n	8001c10 <RadioSetTxConfig+0xe0>
 8001b5a:	e0c5      	b.n	8001ce8 <RadioSetTxConfig+0x1b8>
    {
        case MODEM_FSK:
            SX126x.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8001b5c:	4b69      	ldr	r3, [pc, #420]	; (8001d04 <RadioSetTxConfig+0x1d4>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            SX126x.ModulationParams.Params.Gfsk.BitRate = datarate;
 8001b64:	4a67      	ldr	r2, [pc, #412]	; (8001d04 <RadioSetTxConfig+0x1d4>)
 8001b66:	6a3b      	ldr	r3, [r7, #32]
 8001b68:	62d3      	str	r3, [r2, #44]	; 0x2c

            SX126x.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8001b6a:	4b66      	ldr	r3, [pc, #408]	; (8001d04 <RadioSetTxConfig+0x1d4>)
 8001b6c:	220b      	movs	r2, #11
 8001b6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            SX126x.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue( bandwidth );
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f7ff fda6 	bl	80016c4 <RadioGetFskBandwidthRegValue>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	4b61      	ldr	r3, [pc, #388]	; (8001d04 <RadioSetTxConfig+0x1d4>)
 8001b7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            SX126x.ModulationParams.Params.Gfsk.Fdev = fdev;
 8001b82:	4a60      	ldr	r2, [pc, #384]	; (8001d04 <RadioSetTxConfig+0x1d4>)
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	6313      	str	r3, [r2, #48]	; 0x30

            SX126x.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8001b88:	4b5e      	ldr	r3, [pc, #376]	; (8001d04 <RadioSetTxConfig+0x1d4>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	701a      	strb	r2, [r3, #0]
            SX126x.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8001b8e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001b90:	00db      	lsls	r3, r3, #3
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	4b5b      	ldr	r3, [pc, #364]	; (8001d04 <RadioSetTxConfig+0x1d4>)
 8001b96:	805a      	strh	r2, [r3, #2]
            SX126x.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8001b98:	4b5a      	ldr	r3, [pc, #360]	; (8001d04 <RadioSetTxConfig+0x1d4>)
 8001b9a:	2204      	movs	r2, #4
 8001b9c:	711a      	strb	r2, [r3, #4]
            SX126x.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8001b9e:	4b59      	ldr	r3, [pc, #356]	; (8001d04 <RadioSetTxConfig+0x1d4>)
 8001ba0:	2218      	movs	r2, #24
 8001ba2:	715a      	strb	r2, [r3, #5]
            SX126x.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8001ba4:	4b57      	ldr	r3, [pc, #348]	; (8001d04 <RadioSetTxConfig+0x1d4>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	719a      	strb	r2, [r3, #6]
            SX126x.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8001baa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001bae:	f083 0301 	eor.w	r3, r3, #1
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	4b53      	ldr	r3, [pc, #332]	; (8001d04 <RadioSetTxConfig+0x1d4>)
 8001bb8:	71da      	strb	r2, [r3, #7]

            if( crcOn == true )
 8001bba:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <RadioSetTxConfig+0x9a>
            {
                SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8001bc2:	4b50      	ldr	r3, [pc, #320]	; (8001d04 <RadioSetTxConfig+0x1d4>)
 8001bc4:	22f2      	movs	r2, #242	; 0xf2
 8001bc6:	725a      	strb	r2, [r3, #9]
 8001bc8:	e002      	b.n	8001bd0 <RadioSetTxConfig+0xa0>
            }
            else
            {
                SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8001bca:	4b4e      	ldr	r3, [pc, #312]	; (8001d04 <RadioSetTxConfig+0x1d4>)
 8001bcc:	2201      	movs	r2, #1
 8001bce:	725a      	strb	r2, [r3, #9]
            }
            SX126x.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8001bd0:	4b4c      	ldr	r3, [pc, #304]	; (8001d04 <RadioSetTxConfig+0x1d4>)
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	729a      	strb	r2, [r3, #10]

            RadioStandby( );
 8001bd6:	f000 fa34 	bl	8002042 <RadioStandby>
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8001bda:	4b4a      	ldr	r3, [pc, #296]	; (8001d04 <RadioSetTxConfig+0x1d4>)
 8001bdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	bf14      	ite	ne
 8001be4:	2301      	movne	r3, #1
 8001be6:	2300      	moveq	r3, #0
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff fdde 	bl	80017ac <RadioSetModem>
            SX126xSetModulationParams( &SX126x.ModulationParams );
 8001bf0:	4845      	ldr	r0, [pc, #276]	; (8001d08 <RadioSetTxConfig+0x1d8>)
 8001bf2:	f001 f9d9 	bl	8002fa8 <SX126xSetModulationParams>
            SX126xSetPacketParams( &SX126x.PacketParams );
 8001bf6:	4843      	ldr	r0, [pc, #268]	; (8001d04 <RadioSetTxConfig+0x1d4>)
 8001bf8:	f001 fa74 	bl	80030e4 <SX126xSetPacketParams>
            SX126xSetSyncWord( syncWordByte );
 8001bfc:	f107 0310 	add.w	r3, r7, #16
 8001c00:	4618      	mov	r0, r3
 8001c02:	f000 fec0 	bl	8002986 <SX126xSetSyncWord>
            SX126xSetWhiteningSeed( 0x01FF );
 8001c06:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001c0a:	f000 ff0b 	bl	8002a24 <SX126xSetWhiteningSeed>
            break;
 8001c0e:	e06b      	b.n	8001ce8 <RadioSetTxConfig+0x1b8>

        case MODEM_LORA:
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8001c10:	4b3c      	ldr	r3, [pc, #240]	; (8001d04 <RadioSetTxConfig+0x1d4>)
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            SX126x.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8001c18:	6a3b      	ldr	r3, [r7, #32]
 8001c1a:	b2da      	uxtb	r2, r3
 8001c1c:	4b39      	ldr	r3, [pc, #228]	; (8001d04 <RadioSetTxConfig+0x1d4>)
 8001c1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SX126x.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8001c22:	4a3a      	ldr	r2, [pc, #232]	; (8001d0c <RadioSetTxConfig+0x1dc>)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4413      	add	r3, r2
 8001c28:	781a      	ldrb	r2, [r3, #0]
 8001c2a:	4b36      	ldr	r3, [pc, #216]	; (8001d04 <RadioSetTxConfig+0x1d4>)
 8001c2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            SX126x.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8001c30:	4a34      	ldr	r2, [pc, #208]	; (8001d04 <RadioSetTxConfig+0x1d4>)
 8001c32:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001c36:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a

            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d105      	bne.n	8001c4c <RadioSetTxConfig+0x11c>
 8001c40:	6a3b      	ldr	r3, [r7, #32]
 8001c42:	2b0b      	cmp	r3, #11
 8001c44:	d008      	beq.n	8001c58 <RadioSetTxConfig+0x128>
 8001c46:	6a3b      	ldr	r3, [r7, #32]
 8001c48:	2b0c      	cmp	r3, #12
 8001c4a:	d005      	beq.n	8001c58 <RadioSetTxConfig+0x128>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d107      	bne.n	8001c62 <RadioSetTxConfig+0x132>
            ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8001c52:	6a3b      	ldr	r3, [r7, #32]
 8001c54:	2b0c      	cmp	r3, #12
 8001c56:	d104      	bne.n	8001c62 <RadioSetTxConfig+0x132>
            {
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8001c58:	4b2a      	ldr	r3, [pc, #168]	; (8001d04 <RadioSetTxConfig+0x1d4>)
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8001c60:	e003      	b.n	8001c6a <RadioSetTxConfig+0x13a>
            }
            else
            {
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8001c62:	4b28      	ldr	r3, [pc, #160]	; (8001d04 <RadioSetTxConfig+0x1d4>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
            }

            SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 8001c6a:	4b26      	ldr	r3, [pc, #152]	; (8001d04 <RadioSetTxConfig+0x1d4>)
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	701a      	strb	r2, [r3, #0]

            if( ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8001c70:	4b24      	ldr	r3, [pc, #144]	; (8001d04 <RadioSetTxConfig+0x1d4>)
 8001c72:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c76:	2b05      	cmp	r3, #5
 8001c78:	d004      	beq.n	8001c84 <RadioSetTxConfig+0x154>
                ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8001c7a:	4b22      	ldr	r3, [pc, #136]	; (8001d04 <RadioSetTxConfig+0x1d4>)
 8001c7c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
            if( ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8001c80:	2b06      	cmp	r3, #6
 8001c82:	d10a      	bne.n	8001c9a <RadioSetTxConfig+0x16a>
            {
                if( preambleLen < 12 )
 8001c84:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001c86:	2b0b      	cmp	r3, #11
 8001c88:	d803      	bhi.n	8001c92 <RadioSetTxConfig+0x162>
                {
                    SX126x.PacketParams.Params.LoRa.PreambleLength = 12;
 8001c8a:	4b1e      	ldr	r3, [pc, #120]	; (8001d04 <RadioSetTxConfig+0x1d4>)
 8001c8c:	220c      	movs	r2, #12
 8001c8e:	819a      	strh	r2, [r3, #12]
                if( preambleLen < 12 )
 8001c90:	e006      	b.n	8001ca0 <RadioSetTxConfig+0x170>
                }
                else
                {
                    SX126x.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8001c92:	4a1c      	ldr	r2, [pc, #112]	; (8001d04 <RadioSetTxConfig+0x1d4>)
 8001c94:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001c96:	8193      	strh	r3, [r2, #12]
                if( preambleLen < 12 )
 8001c98:	e002      	b.n	8001ca0 <RadioSetTxConfig+0x170>
                }
            }
            else
            {
                SX126x.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8001c9a:	4a1a      	ldr	r2, [pc, #104]	; (8001d04 <RadioSetTxConfig+0x1d4>)
 8001c9c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001c9e:	8193      	strh	r3, [r2, #12]
            }

            SX126x.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8001ca0:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001ca4:	4b17      	ldr	r3, [pc, #92]	; (8001d04 <RadioSetTxConfig+0x1d4>)
 8001ca6:	739a      	strb	r2, [r3, #14]
            SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8001ca8:	4b19      	ldr	r3, [pc, #100]	; (8001d10 <RadioSetTxConfig+0x1e0>)
 8001caa:	781a      	ldrb	r2, [r3, #0]
 8001cac:	4b15      	ldr	r3, [pc, #84]	; (8001d04 <RadioSetTxConfig+0x1d4>)
 8001cae:	73da      	strb	r2, [r3, #15]
            SX126x.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8001cb0:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001cb4:	4b13      	ldr	r3, [pc, #76]	; (8001d04 <RadioSetTxConfig+0x1d4>)
 8001cb6:	741a      	strb	r2, [r3, #16]
            SX126x.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8001cb8:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8001cbc:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <RadioSetTxConfig+0x1d4>)
 8001cbe:	745a      	strb	r2, [r3, #17]

            RadioStandby( );
 8001cc0:	f000 f9bf 	bl	8002042 <RadioStandby>
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8001cc4:	4b0f      	ldr	r3, [pc, #60]	; (8001d04 <RadioSetTxConfig+0x1d4>)
 8001cc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	bf14      	ite	ne
 8001cce:	2301      	movne	r3, #1
 8001cd0:	2300      	moveq	r3, #0
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff fd69 	bl	80017ac <RadioSetModem>
            SX126xSetModulationParams( &SX126x.ModulationParams );
 8001cda:	480b      	ldr	r0, [pc, #44]	; (8001d08 <RadioSetTxConfig+0x1d8>)
 8001cdc:	f001 f964 	bl	8002fa8 <SX126xSetModulationParams>
            SX126xSetPacketParams( &SX126x.PacketParams );
 8001ce0:	4808      	ldr	r0, [pc, #32]	; (8001d04 <RadioSetTxConfig+0x1d4>)
 8001ce2:	f001 f9ff 	bl	80030e4 <SX126xSetPacketParams>
            break;
 8001ce6:	bf00      	nop
    }
    SX126xSetRfTxPower( power );
 8001ce8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f000 fda9 	bl	8002844 <SX126xSetRfTxPower>
    TxTimeout = timeout;
 8001cf2:	4a08      	ldr	r2, [pc, #32]	; (8001d14 <RadioSetTxConfig+0x1e4>)
 8001cf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cf6:	6013      	str	r3, [r2, #0]
}
 8001cf8:	bf00      	nop
 8001cfa:	3718      	adds	r7, #24
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	080071cc 	.word	0x080071cc
 8001d04:	200004cc 	.word	0x200004cc
 8001d08:	200004f4 	.word	0x200004f4
 8001d0c:	08007324 	.word	0x08007324
 8001d10:	20000098 	.word	0x20000098
 8001d14:	20000140 	.word	0x20000140

08001d18 <RadioCheckRfFrequency>:

bool RadioCheckRfFrequency( uint32_t frequency )
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
    return true;
 8001d20:	2301      	movs	r3, #1
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bc80      	pop	{r7}
 8001d2a:	4770      	bx	lr
 8001d2c:	0000      	movs	r0, r0
	...

08001d30 <RadioTimeOnAir>:

uint32_t RadioTimeOnAir( RadioModems_t modem, uint8_t pktLen )
{
 8001d30:	b5b0      	push	{r4, r5, r7, lr}
 8001d32:	b090      	sub	sp, #64	; 0x40
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	460a      	mov	r2, r1
 8001d3a:	71fb      	strb	r3, [r7, #7]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	71bb      	strb	r3, [r7, #6]
    uint32_t airTime = 0;
 8001d40:	2300      	movs	r3, #0
 8001d42:	63fb      	str	r3, [r7, #60]	; 0x3c

    switch( modem )
 8001d44:	79fb      	ldrb	r3, [r7, #7]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d002      	beq.n	8001d50 <RadioTimeOnAir+0x20>
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d06e      	beq.n	8001e2c <RadioTimeOnAir+0xfc>
 8001d4e:	e126      	b.n	8001f9e <RadioTimeOnAir+0x26e>
    {
    case MODEM_FSK:
        {
           airTime = rint( ( 8 * ( SX126x.PacketParams.Params.Gfsk.PreambleLength +
 8001d50:	4b97      	ldr	r3, [pc, #604]	; (8001fb0 <RadioTimeOnAir+0x280>)
 8001d52:	885b      	ldrh	r3, [r3, #2]
 8001d54:	461a      	mov	r2, r3
                                     ( SX126x.PacketParams.Params.Gfsk.SyncWordLength >> 3 ) +
 8001d56:	4b96      	ldr	r3, [pc, #600]	; (8001fb0 <RadioTimeOnAir+0x280>)
 8001d58:	795b      	ldrb	r3, [r3, #5]
 8001d5a:	08db      	lsrs	r3, r3, #3
 8001d5c:	b2db      	uxtb	r3, r3
           airTime = rint( ( 8 * ( SX126x.PacketParams.Params.Gfsk.PreambleLength +
 8001d5e:	4413      	add	r3, r2
                                     ( SX126x.PacketParams.Params.Gfsk.SyncWordLength >> 3 ) +
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7fe fbb3 	bl	80004cc <__aeabi_i2d>
 8001d66:	4602      	mov	r2, r0
 8001d68:	460b      	mov	r3, r1
                                     ( ( SX126x.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_FIXED_LENGTH ) ? 0.0 : 1.0 ) +
 8001d6a:	4991      	ldr	r1, [pc, #580]	; (8001fb0 <RadioTimeOnAir+0x280>)
 8001d6c:	79c9      	ldrb	r1, [r1, #7]
 8001d6e:	2900      	cmp	r1, #0
 8001d70:	d104      	bne.n	8001d7c <RadioTimeOnAir+0x4c>
 8001d72:	f04f 0000 	mov.w	r0, #0
 8001d76:	f04f 0100 	mov.w	r1, #0
 8001d7a:	e002      	b.n	8001d82 <RadioTimeOnAir+0x52>
 8001d7c:	f04f 0000 	mov.w	r0, #0
 8001d80:	498c      	ldr	r1, [pc, #560]	; (8001fb4 <RadioTimeOnAir+0x284>)
                                     ( SX126x.PacketParams.Params.Gfsk.SyncWordLength >> 3 ) +
 8001d82:	f7fe fa57 	bl	8000234 <__adddf3>
 8001d86:	4602      	mov	r2, r0
 8001d88:	460b      	mov	r3, r1
 8001d8a:	4614      	mov	r4, r2
 8001d8c:	461d      	mov	r5, r3
                                     ( ( SX126x.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_FIXED_LENGTH ) ? 0.0 : 1.0 ) +
 8001d8e:	79bb      	ldrb	r3, [r7, #6]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7fe fb9b 	bl	80004cc <__aeabi_i2d>
 8001d96:	4602      	mov	r2, r0
 8001d98:	460b      	mov	r3, r1
 8001d9a:	4620      	mov	r0, r4
 8001d9c:	4629      	mov	r1, r5
 8001d9e:	f7fe fa49 	bl	8000234 <__adddf3>
 8001da2:	4602      	mov	r2, r0
 8001da4:	460b      	mov	r3, r1
 8001da6:	4614      	mov	r4, r2
 8001da8:	461d      	mov	r5, r3
                                     pktLen +
                                     ( ( SX126x.PacketParams.Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES ) ? 2.0 : 0 ) ) /
 8001daa:	4b81      	ldr	r3, [pc, #516]	; (8001fb0 <RadioTimeOnAir+0x280>)
 8001dac:	7a5b      	ldrb	r3, [r3, #9]
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d104      	bne.n	8001dbc <RadioTimeOnAir+0x8c>
 8001db2:	f04f 0000 	mov.w	r0, #0
 8001db6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001dba:	e003      	b.n	8001dc4 <RadioTimeOnAir+0x94>
 8001dbc:	f04f 0000 	mov.w	r0, #0
 8001dc0:	f04f 0100 	mov.w	r1, #0
                                     pktLen +
 8001dc4:	4622      	mov	r2, r4
 8001dc6:	462b      	mov	r3, r5
 8001dc8:	f7fe fa34 	bl	8000234 <__adddf3>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	460b      	mov	r3, r1
 8001dd0:	4610      	mov	r0, r2
 8001dd2:	4619      	mov	r1, r3
           airTime = rint( ( 8 * ( SX126x.PacketParams.Params.Gfsk.PreambleLength +
 8001dd4:	f04f 0200 	mov.w	r2, #0
 8001dd8:	4b77      	ldr	r3, [pc, #476]	; (8001fb8 <RadioTimeOnAir+0x288>)
 8001dda:	f7fe fbe1 	bl	80005a0 <__aeabi_dmul>
 8001dde:	4602      	mov	r2, r0
 8001de0:	460b      	mov	r3, r1
 8001de2:	4614      	mov	r4, r2
 8001de4:	461d      	mov	r5, r3
                                     SX126x.ModulationParams.Params.Gfsk.BitRate ) * 1e3 );
 8001de6:	4b72      	ldr	r3, [pc, #456]	; (8001fb0 <RadioTimeOnAir+0x280>)
 8001de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                                     ( ( SX126x.PacketParams.Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES ) ? 2.0 : 0 ) ) /
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7fe fb5e 	bl	80004ac <__aeabi_ui2d>
 8001df0:	4602      	mov	r2, r0
 8001df2:	460b      	mov	r3, r1
 8001df4:	4620      	mov	r0, r4
 8001df6:	4629      	mov	r1, r5
 8001df8:	f7fe fcfc 	bl	80007f4 <__aeabi_ddiv>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	4610      	mov	r0, r2
 8001e02:	4619      	mov	r1, r3
           airTime = rint( ( 8 * ( SX126x.PacketParams.Params.Gfsk.PreambleLength +
 8001e04:	f04f 0200 	mov.w	r2, #0
 8001e08:	4b6c      	ldr	r3, [pc, #432]	; (8001fbc <RadioTimeOnAir+0x28c>)
 8001e0a:	f7fe fbc9 	bl	80005a0 <__aeabi_dmul>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	460b      	mov	r3, r1
 8001e12:	4610      	mov	r0, r2
 8001e14:	4619      	mov	r1, r3
 8001e16:	f005 f8ef 	bl	8006ff8 <rint>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	4610      	mov	r0, r2
 8001e20:	4619      	mov	r1, r3
 8001e22:	f7fe fe57 	bl	8000ad4 <__aeabi_d2uiz>
 8001e26:	4603      	mov	r3, r0
 8001e28:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        break;
 8001e2a:	e0b8      	b.n	8001f9e <RadioTimeOnAir+0x26e>
    case MODEM_LORA:
        {
            double ts = RadioLoRaSymbTime[SX126x.ModulationParams.Params.LoRa.Bandwidth - 4][12 - SX126x.ModulationParams.Params.LoRa.SpreadingFactor];
 8001e2c:	4b60      	ldr	r3, [pc, #384]	; (8001fb0 <RadioTimeOnAir+0x280>)
 8001e2e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001e32:	1f1a      	subs	r2, r3, #4
 8001e34:	4b5e      	ldr	r3, [pc, #376]	; (8001fb0 <RadioTimeOnAir+0x280>)
 8001e36:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e3a:	f1c3 010c 	rsb	r1, r3, #12
 8001e3e:	4860      	ldr	r0, [pc, #384]	; (8001fc0 <RadioTimeOnAir+0x290>)
 8001e40:	4613      	mov	r3, r2
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	4413      	add	r3, r2
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	440b      	add	r3, r1
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	4403      	add	r3, r0
 8001e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e52:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
            // time of preamble
            double tPreamble = ( SX126x.PacketParams.Params.LoRa.PreambleLength + 4.25 ) * ts;
 8001e56:	4b56      	ldr	r3, [pc, #344]	; (8001fb0 <RadioTimeOnAir+0x280>)
 8001e58:	899b      	ldrh	r3, [r3, #12]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7fe fb36 	bl	80004cc <__aeabi_i2d>
 8001e60:	f04f 0200 	mov.w	r2, #0
 8001e64:	4b57      	ldr	r3, [pc, #348]	; (8001fc4 <RadioTimeOnAir+0x294>)
 8001e66:	f7fe f9e5 	bl	8000234 <__adddf3>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001e72:	f7fe fb95 	bl	80005a0 <__aeabi_dmul>
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
            // Symbol length of payload and time
            double tmp = ceil( ( 8 * pktLen - 4 * SX126x.ModulationParams.Params.LoRa.SpreadingFactor +
 8001e7e:	79bb      	ldrb	r3, [r7, #6]
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	4a4b      	ldr	r2, [pc, #300]	; (8001fb0 <RadioTimeOnAir+0x280>)
 8001e84:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 8001e88:	1a9b      	subs	r3, r3, r2
 8001e8a:	1dda      	adds	r2, r3, #7
                                 28 + 16 * SX126x.PacketParams.Params.LoRa.CrcMode -
 8001e8c:	4b48      	ldr	r3, [pc, #288]	; (8001fb0 <RadioTimeOnAir+0x280>)
 8001e8e:	7c1b      	ldrb	r3, [r3, #16]
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	4413      	add	r3, r2
 8001e94:	009a      	lsls	r2, r3, #2
                                 ( ( SX126x.PacketParams.Params.LoRa.HeaderType == LORA_PACKET_FIXED_LENGTH ) ? 20 : 0 ) ) /
 8001e96:	4b46      	ldr	r3, [pc, #280]	; (8001fb0 <RadioTimeOnAir+0x280>)
 8001e98:	7b9b      	ldrb	r3, [r3, #14]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d101      	bne.n	8001ea2 <RadioTimeOnAir+0x172>
 8001e9e:	2314      	movs	r3, #20
 8001ea0:	e000      	b.n	8001ea4 <RadioTimeOnAir+0x174>
 8001ea2:	2300      	movs	r3, #0
                                 28 + 16 * SX126x.PacketParams.Params.LoRa.CrcMode -
 8001ea4:	1ad3      	subs	r3, r2, r3
            double tmp = ceil( ( 8 * pktLen - 4 * SX126x.ModulationParams.Params.LoRa.SpreadingFactor +
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7fe fb10 	bl	80004cc <__aeabi_i2d>
 8001eac:	4604      	mov	r4, r0
 8001eae:	460d      	mov	r5, r1
                                 ( double )( 4 * ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor -
 8001eb0:	4b3f      	ldr	r3, [pc, #252]	; (8001fb0 <RadioTimeOnAir+0x280>)
 8001eb2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001eb6:	461a      	mov	r2, r3
                                 ( ( SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 8001eb8:	4b3d      	ldr	r3, [pc, #244]	; (8001fb0 <RadioTimeOnAir+0x280>)
 8001eba:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <RadioTimeOnAir+0x196>
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	e000      	b.n	8001ec8 <RadioTimeOnAir+0x198>
 8001ec6:	2300      	movs	r3, #0
                                 ( double )( 4 * ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor -
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7fe fafd 	bl	80004cc <__aeabi_i2d>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	460b      	mov	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX126x.ModulationParams.Params.LoRa.SpreadingFactor +
 8001ed6:	4620      	mov	r0, r4
 8001ed8:	4629      	mov	r1, r5
 8001eda:	f7fe fc8b 	bl	80007f4 <__aeabi_ddiv>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	4610      	mov	r0, r2
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	f004 ff87 	bl	8006df8 <ceil>
 8001eea:	4604      	mov	r4, r0
 8001eec:	460d      	mov	r5, r1
                                 ( ( SX126x.ModulationParams.Params.LoRa.CodingRate % 4 ) + 4 );
 8001eee:	4b30      	ldr	r3, [pc, #192]	; (8001fb0 <RadioTimeOnAir+0x280>)
 8001ef0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001ef4:	f003 0303 	and.w	r3, r3, #3
 8001ef8:	3304      	adds	r3, #4
                                 ( ( SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7fe fae6 	bl	80004cc <__aeabi_i2d>
 8001f00:	4602      	mov	r2, r0
 8001f02:	460b      	mov	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX126x.ModulationParams.Params.LoRa.SpreadingFactor +
 8001f04:	4620      	mov	r0, r4
 8001f06:	4629      	mov	r1, r5
 8001f08:	f7fe fb4a 	bl	80005a0 <__aeabi_dmul>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	460b      	mov	r3, r1
 8001f10:	e9c7 2308 	strd	r2, r3, [r7, #32]
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 8001f14:	f04f 0200 	mov.w	r2, #0
 8001f18:	f04f 0300 	mov.w	r3, #0
 8001f1c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001f20:	f7fe fdce 	bl	8000ac0 <__aeabi_dcmpgt>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d002      	beq.n	8001f30 <RadioTimeOnAir+0x200>
 8001f2a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001f2e:	e003      	b.n	8001f38 <RadioTimeOnAir+0x208>
 8001f30:	f04f 0000 	mov.w	r0, #0
 8001f34:	f04f 0100 	mov.w	r1, #0
 8001f38:	f04f 0200 	mov.w	r2, #0
 8001f3c:	4b1e      	ldr	r3, [pc, #120]	; (8001fb8 <RadioTimeOnAir+0x288>)
 8001f3e:	f7fe f979 	bl	8000234 <__adddf3>
 8001f42:	4602      	mov	r2, r0
 8001f44:	460b      	mov	r3, r1
 8001f46:	e9c7 2306 	strd	r2, r3, [r7, #24]
            double tPayload = nPayload * ts;
 8001f4a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001f4e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001f52:	f7fe fb25 	bl	80005a0 <__aeabi_dmul>
 8001f56:	4602      	mov	r2, r0
 8001f58:	460b      	mov	r3, r1
 8001f5a:	e9c7 2304 	strd	r2, r3, [r7, #16]
            // Time on air
            double tOnAir = tPreamble + tPayload;
 8001f5e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001f62:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001f66:	f7fe f965 	bl	8000234 <__adddf3>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	e9c7 2302 	strd	r2, r3, [r7, #8]
            // return milli seconds
            airTime = floor( tOnAir + 0.999 );
 8001f72:	a30d      	add	r3, pc, #52	; (adr r3, 8001fa8 <RadioTimeOnAir+0x278>)
 8001f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f78:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f7c:	f7fe f95a 	bl	8000234 <__adddf3>
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	4610      	mov	r0, r2
 8001f86:	4619      	mov	r1, r3
 8001f88:	f004 ffb6 	bl	8006ef8 <floor>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	460b      	mov	r3, r1
 8001f90:	4610      	mov	r0, r2
 8001f92:	4619      	mov	r1, r3
 8001f94:	f7fe fd9e 	bl	8000ad4 <__aeabi_d2uiz>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        break;
 8001f9c:	bf00      	nop
    }
    return airTime;
 8001f9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3740      	adds	r7, #64	; 0x40
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bdb0      	pop	{r4, r5, r7, pc}
 8001fa8:	d916872b 	.word	0xd916872b
 8001fac:	3feff7ce 	.word	0x3feff7ce
 8001fb0:	200004cc 	.word	0x200004cc
 8001fb4:	3ff00000 	.word	0x3ff00000
 8001fb8:	40200000 	.word	0x40200000
 8001fbc:	408f4000 	.word	0x408f4000
 8001fc0:	20000008 	.word	0x20000008
 8001fc4:	40110000 	.word	0x40110000

08001fc8 <RadioSend>:

void RadioSend( uint8_t *buffer, uint8_t size )
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	70fb      	strb	r3, [r7, #3]
    SX126xSetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f240 2101 	movw	r1, #513	; 0x201
 8001fdc:	f240 2001 	movw	r0, #513	; 0x201
 8001fe0:	f000 fec2 	bl	8002d68 <SX126xSetDioIrqParams>
                           IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
                           IRQ_RADIO_NONE,
                           IRQ_RADIO_NONE );

    if( SX126xGetPacketType( ) == PACKET_TYPE_LORA )
 8001fe4:	f000 ff7a 	bl	8002edc <SX126xGetPacketType>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d103      	bne.n	8001ff6 <RadioSend+0x2e>
    {
        SX126x.PacketParams.Params.LoRa.PayloadLength = size;
 8001fee:	4a0a      	ldr	r2, [pc, #40]	; (8002018 <RadioSend+0x50>)
 8001ff0:	78fb      	ldrb	r3, [r7, #3]
 8001ff2:	73d3      	strb	r3, [r2, #15]
 8001ff4:	e002      	b.n	8001ffc <RadioSend+0x34>
    }
    else
    {
        SX126x.PacketParams.Params.Gfsk.PayloadLength = size;
 8001ff6:	4a08      	ldr	r2, [pc, #32]	; (8002018 <RadioSend+0x50>)
 8001ff8:	78fb      	ldrb	r3, [r7, #3]
 8001ffa:	7213      	strb	r3, [r2, #8]
    }
    SX126xSetPacketParams( &SX126x.PacketParams );
 8001ffc:	4806      	ldr	r0, [pc, #24]	; (8002018 <RadioSend+0x50>)
 8001ffe:	f001 f871 	bl	80030e4 <SX126xSetPacketParams>

    SX126xSendPayload( buffer, size, 0 );
 8002002:	78fb      	ldrb	r3, [r7, #3]
 8002004:	2200      	movs	r2, #0
 8002006:	4619      	mov	r1, r3
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f000 fca9 	bl	8002960 <SX126xSendPayload>
}
 800200e:	bf00      	nop
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	200004cc 	.word	0x200004cc

0800201c <RadioSleep>:

void RadioSleep( void )
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8002022:	2300      	movs	r3, #0
 8002024:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8002026:	793b      	ldrb	r3, [r7, #4]
 8002028:	f043 0304 	orr.w	r3, r3, #4
 800202c:	713b      	strb	r3, [r7, #4]
    SX126xSetSleep( params );
 800202e:	7938      	ldrb	r0, [r7, #4]
 8002030:	f000 fd2c 	bl	8002a8c <SX126xSetSleep>

    DelayMs( 2 );
 8002034:	2002      	movs	r0, #2
 8002036:	f7ff fb35 	bl	80016a4 <DelayMs>
}
 800203a:	bf00      	nop
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <RadioStandby>:

void RadioStandby( void )
{
 8002042:	b580      	push	{r7, lr}
 8002044:	af00      	add	r7, sp, #0
    SX126xSetStandby( STDBY_RC );
 8002046:	2000      	movs	r0, #0
 8002048:	f000 fd36 	bl	8002ab8 <SX126xSetStandby>
}
 800204c:	bf00      	nop
 800204e:	bd80      	pop	{r7, pc}

08002050 <RadioRx>:

void RadioRx( uint32_t timeout, uint8_t rxcontinuous )
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	460b      	mov	r3, r1
 800205a:	70fb      	strb	r3, [r7, #3]
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 800205c:	2300      	movs	r3, #0
 800205e:	2200      	movs	r2, #0
 8002060:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002064:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002068:	f000 fe7e 	bl	8002d68 <SX126xSetDioIrqParams>
                           IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
                           IRQ_RADIO_NONE,
                           IRQ_RADIO_NONE );
    
    ///RxContinuous = false;
    if( rxcontinuous != 0 )
 800206c:	78fb      	ldrb	r3, [r7, #3]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d004      	beq.n	800207c <RadioRx+0x2c>
    {
        SX126xSetRx( 0xFFFFFF ); // Rx Continuous
 8002072:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8002076:	f000 fd5b 	bl	8002b30 <SX126xSetRx>
    }
    else
    {
        SX126xSetRx( timeout << 6 );
    }
}
 800207a:	e004      	b.n	8002086 <RadioRx+0x36>
        SX126xSetRx( timeout << 6 );
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	019b      	lsls	r3, r3, #6
 8002080:	4618      	mov	r0, r3
 8002082:	f000 fd55 	bl	8002b30 <SX126xSetRx>
}
 8002086:	bf00      	nop
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
	...

08002090 <RadioRxBoosted>:

void RadioRxBoosted( uint32_t timeout )
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 8002098:	2300      	movs	r3, #0
 800209a:	2200      	movs	r2, #0
 800209c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80020a0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80020a4:	f000 fe60 	bl	8002d68 <SX126xSetDioIrqParams>
                           IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
                           IRQ_RADIO_NONE,
                           IRQ_RADIO_NONE );


    if( RxContinuous == true )
 80020a8:	4b08      	ldr	r3, [pc, #32]	; (80020cc <RadioRxBoosted+0x3c>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d004      	beq.n	80020ba <RadioRxBoosted+0x2a>
    {
        SX126xSetRxBoosted( 0xFFFFFF ); // Rx Continuous
 80020b0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80020b4:	f000 fd5c 	bl	8002b70 <SX126xSetRxBoosted>
    }
    else
    {
        SX126xSetRxBoosted( timeout << 6 );
    }
}
 80020b8:	e004      	b.n	80020c4 <RadioRxBoosted+0x34>
        SX126xSetRxBoosted( timeout << 6 );
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	019b      	lsls	r3, r3, #6
 80020be:	4618      	mov	r0, r3
 80020c0:	f000 fd56 	bl	8002b70 <SX126xSetRxBoosted>
}
 80020c4:	bf00      	nop
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	20000099 	.word	0x20000099

080020d0 <RadioSetRxDutyCycle>:

void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
    SX126xSetRxDutyCycle( rxTime, sleepTime );
 80020da:	6839      	ldr	r1, [r7, #0]
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 fd6b 	bl	8002bb8 <SX126xSetRxDutyCycle>
}
 80020e2:	bf00      	nop
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <RadioStartCad>:

void RadioStartCad( void )
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	af00      	add	r7, sp, #0
    SX126xSetCad( );
 80020ee:	f000 fd8f 	bl	8002c10 <SX126xSetCad>
}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <RadioSetTxContinuousWave>:
{
    SX126xSetTx( timeout << 6 );
}

void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b082      	sub	sp, #8
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
 80020fe:	460b      	mov	r3, r1
 8002100:	70fb      	strb	r3, [r7, #3]
 8002102:	4613      	mov	r3, r2
 8002104:	803b      	strh	r3, [r7, #0]
    SX126xSetRfFrequency( freq );
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 fe8e 	bl	8002e28 <SX126xSetRfFrequency>
    SX126xSetRfTxPower( power );
 800210c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002110:	4618      	mov	r0, r3
 8002112:	f000 fb97 	bl	8002844 <SX126xSetRfTxPower>
    SX126xSetTxContinuousWave( );
 8002116:	f000 fd89 	bl	8002c2c <SX126xSetTxContinuousWave>

//    TimerSetValue( &RxTimeoutTimer, time  * 1e3 );
//    TimerStart( &RxTimeoutTimer );
}
 800211a:	bf00      	nop
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <RadioRssi>:

int16_t RadioRssi( RadioModems_t modem )
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b082      	sub	sp, #8
 8002126:	af00      	add	r7, sp, #0
 8002128:	4603      	mov	r3, r0
 800212a:	71fb      	strb	r3, [r7, #7]
    return SX126xGetRssiInst( );
 800212c:	f001 f8ab 	bl	8003286 <SX126xGetRssiInst>
 8002130:	4603      	mov	r3, r0
 8002132:	b21b      	sxth	r3, r3
}
 8002134:	4618      	mov	r0, r3
 8002136:	3708      	adds	r7, #8
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <RadioWrite>:

void RadioWrite( uint16_t addr, uint8_t data )
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	4603      	mov	r3, r0
 8002144:	460a      	mov	r2, r1
 8002146:	80fb      	strh	r3, [r7, #6]
 8002148:	4613      	mov	r3, r2
 800214a:	717b      	strb	r3, [r7, #5]
    SX126xWriteRegister( addr, data );
 800214c:	797a      	ldrb	r2, [r7, #5]
 800214e:	88fb      	ldrh	r3, [r7, #6]
 8002150:	4611      	mov	r1, r2
 8002152:	4618      	mov	r0, r3
 8002154:	f000 fa8a 	bl	800266c <SX126xWriteRegister>
}
 8002158:	bf00      	nop
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <RadioRead>:

uint8_t RadioRead( uint16_t addr )
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	4603      	mov	r3, r0
 8002168:	80fb      	strh	r3, [r7, #6]
    return SX126xReadRegister( addr );
 800216a:	88fb      	ldrh	r3, [r7, #6]
 800216c:	4618      	mov	r0, r3
 800216e:	f000 fad9 	bl	8002724 <SX126xReadRegister>
 8002172:	4603      	mov	r3, r0
}
 8002174:	4618      	mov	r0, r3
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <RadioWriteBuffer>:

void RadioWriteBuffer( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	4603      	mov	r3, r0
 8002184:	6039      	str	r1, [r7, #0]
 8002186:	80fb      	strh	r3, [r7, #6]
 8002188:	4613      	mov	r3, r2
 800218a:	717b      	strb	r3, [r7, #5]
    SX126xWriteRegisters( addr, buffer, size );
 800218c:	797b      	ldrb	r3, [r7, #5]
 800218e:	b29a      	uxth	r2, r3
 8002190:	88fb      	ldrh	r3, [r7, #6]
 8002192:	6839      	ldr	r1, [r7, #0]
 8002194:	4618      	mov	r0, r3
 8002196:	f000 fa25 	bl	80025e4 <SX126xWriteRegisters>
}
 800219a:	bf00      	nop
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <RadioReadBuffer>:

void RadioReadBuffer( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b082      	sub	sp, #8
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	4603      	mov	r3, r0
 80021aa:	6039      	str	r1, [r7, #0]
 80021ac:	80fb      	strh	r3, [r7, #6]
 80021ae:	4613      	mov	r3, r2
 80021b0:	717b      	strb	r3, [r7, #5]
    SX126xReadRegisters( addr, buffer, size );
 80021b2:	797b      	ldrb	r3, [r7, #5]
 80021b4:	b29a      	uxth	r2, r3
 80021b6:	88fb      	ldrh	r3, [r7, #6]
 80021b8:	6839      	ldr	r1, [r7, #0]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f000 fa68 	bl	8002690 <SX126xReadRegisters>
}
 80021c0:	bf00      	nop
 80021c2:	3708      	adds	r7, #8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <RadioSetMaxPayloadLength>:
{
    SX126xReadBuffer( 0, buffer, size );
}

void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	4603      	mov	r3, r0
 80021d0:	460a      	mov	r2, r1
 80021d2:	71fb      	strb	r3, [r7, #7]
 80021d4:	4613      	mov	r3, r2
 80021d6:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 80021d8:	79fb      	ldrb	r3, [r7, #7]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d10a      	bne.n	80021f4 <RadioSetMaxPayloadLength+0x2c>
    {
        SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 80021de:	4a0e      	ldr	r2, [pc, #56]	; (8002218 <RadioSetMaxPayloadLength+0x50>)
 80021e0:	79bb      	ldrb	r3, [r7, #6]
 80021e2:	7013      	strb	r3, [r2, #0]
 80021e4:	4b0c      	ldr	r3, [pc, #48]	; (8002218 <RadioSetMaxPayloadLength+0x50>)
 80021e6:	781a      	ldrb	r2, [r3, #0]
 80021e8:	4b0c      	ldr	r3, [pc, #48]	; (800221c <RadioSetMaxPayloadLength+0x54>)
 80021ea:	73da      	strb	r2, [r3, #15]
        SX126xSetPacketParams( &SX126x.PacketParams );
 80021ec:	480b      	ldr	r0, [pc, #44]	; (800221c <RadioSetMaxPayloadLength+0x54>)
 80021ee:	f000 ff79 	bl	80030e4 <SX126xSetPacketParams>
        {
            SX126x.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SX126xSetPacketParams( &SX126x.PacketParams );
        }
    }
}
 80021f2:	e00d      	b.n	8002210 <RadioSetMaxPayloadLength+0x48>
        if( SX126x.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 80021f4:	4b09      	ldr	r3, [pc, #36]	; (800221c <RadioSetMaxPayloadLength+0x54>)
 80021f6:	79db      	ldrb	r3, [r3, #7]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d109      	bne.n	8002210 <RadioSetMaxPayloadLength+0x48>
            SX126x.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 80021fc:	4a06      	ldr	r2, [pc, #24]	; (8002218 <RadioSetMaxPayloadLength+0x50>)
 80021fe:	79bb      	ldrb	r3, [r7, #6]
 8002200:	7013      	strb	r3, [r2, #0]
 8002202:	4b05      	ldr	r3, [pc, #20]	; (8002218 <RadioSetMaxPayloadLength+0x50>)
 8002204:	781a      	ldrb	r2, [r3, #0]
 8002206:	4b05      	ldr	r3, [pc, #20]	; (800221c <RadioSetMaxPayloadLength+0x54>)
 8002208:	721a      	strb	r2, [r3, #8]
            SX126xSetPacketParams( &SX126x.PacketParams );
 800220a:	4804      	ldr	r0, [pc, #16]	; (800221c <RadioSetMaxPayloadLength+0x54>)
 800220c:	f000 ff6a 	bl	80030e4 <SX126xSetPacketParams>
}
 8002210:	bf00      	nop
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	20000098 	.word	0x20000098
 800221c:	200004cc 	.word	0x200004cc

08002220 <RadioSetPublicNetwork>:

void RadioSetPublicNetwork( bool enable )
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	4603      	mov	r3, r0
 8002228:	71fb      	strb	r3, [r7, #7]
    RadioPublicNetwork.Current = RadioPublicNetwork.Previous = enable;
 800222a:	4a13      	ldr	r2, [pc, #76]	; (8002278 <RadioSetPublicNetwork+0x58>)
 800222c:	79fb      	ldrb	r3, [r7, #7]
 800222e:	7013      	strb	r3, [r2, #0]
 8002230:	4b11      	ldr	r3, [pc, #68]	; (8002278 <RadioSetPublicNetwork+0x58>)
 8002232:	781a      	ldrb	r2, [r3, #0]
 8002234:	4b10      	ldr	r3, [pc, #64]	; (8002278 <RadioSetPublicNetwork+0x58>)
 8002236:	705a      	strb	r2, [r3, #1]

    RadioSetModem( MODEM_LORA );
 8002238:	2001      	movs	r0, #1
 800223a:	f7ff fab7 	bl	80017ac <RadioSetModem>
    if( enable == true )
 800223e:	79fb      	ldrb	r3, [r7, #7]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d00a      	beq.n	800225a <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SX126xWriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8002244:	2134      	movs	r1, #52	; 0x34
 8002246:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 800224a:	f000 fa0f 	bl	800266c <SX126xWriteRegister>
        SX126xWriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 800224e:	2144      	movs	r1, #68	; 0x44
 8002250:	f240 7041 	movw	r0, #1857	; 0x741
 8002254:	f000 fa0a 	bl	800266c <SX126xWriteRegister>
    {
        // Change LoRa modem SyncWord
        SX126xWriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SX126xWriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8002258:	e009      	b.n	800226e <RadioSetPublicNetwork+0x4e>
        SX126xWriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 800225a:	2114      	movs	r1, #20
 800225c:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8002260:	f000 fa04 	bl	800266c <SX126xWriteRegister>
        SX126xWriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8002264:	2124      	movs	r1, #36	; 0x24
 8002266:	f240 7041 	movw	r0, #1857	; 0x741
 800226a:	f000 f9ff 	bl	800266c <SX126xWriteRegister>
}
 800226e:	bf00      	nop
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	2000014c 	.word	0x2000014c

0800227c <RadioGetWakeupTime>:

uint32_t RadioGetWakeupTime( void )
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
    return( RADIO_TCXO_SETUP_TIME + RADIO_WAKEUP_TIME );
 8002280:	2303      	movs	r3, #3
}
 8002282:	4618      	mov	r0, r3
 8002284:	46bd      	mov	sp, r7
 8002286:	bc80      	pop	{r7}
 8002288:	4770      	bx	lr
	...

0800228c <RadioOnDioIrq>:
        RadioEvents->RxTimeout( );
    }
}

void RadioOnDioIrq( void )
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
    IrqFired = true;
 8002290:	4b03      	ldr	r3, [pc, #12]	; (80022a0 <RadioOnDioIrq+0x14>)
 8002292:	2201      	movs	r2, #1
 8002294:	701a      	strb	r2, [r3, #0]
}
 8002296:	bf00      	nop
 8002298:	46bd      	mov	sp, r7
 800229a:	bc80      	pop	{r7}
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	20000148 	.word	0x20000148

080022a4 <RadioIrqProcess>:

void RadioIrqProcess( void )
{
 80022a4:	b590      	push	{r4, r7, lr}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
	uint16_t irqRegs=0;
 80022aa:	2300      	movs	r3, #0
 80022ac:	80fb      	strh	r3, [r7, #6]
   // if( IrqFired == true )
    if(HAL_GPIO_ReadPin(RADIO_DIO1_PORT, RADIO_DIO1_PIN) == GPIO_PIN_SET)
 80022ae:	2110      	movs	r1, #16
 80022b0:	485c      	ldr	r0, [pc, #368]	; (8002424 <RadioIrqProcess+0x180>)
 80022b2:	f002 fd13 	bl	8004cdc <HAL_GPIO_ReadPin>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	f040 80ae 	bne.w	800241a <RadioIrqProcess+0x176>
    {
        IrqFired = false;
 80022be:	4b5a      	ldr	r3, [pc, #360]	; (8002428 <RadioIrqProcess+0x184>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	701a      	strb	r2, [r3, #0]
        irqRegs = SX126xGetIrqStatus( );
 80022c4:	f000 fd8a 	bl	8002ddc <SX126xGetIrqStatus>
 80022c8:	4603      	mov	r3, r0
 80022ca:	80fb      	strh	r3, [r7, #6]
        SX126xClearIrqStatus( IRQ_RADIO_ALL );
 80022cc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80022d0:	f001 f87a 	bl	80033c8 <SX126xClearIrqStatus>
        
        if( ( irqRegs & IRQ_TX_DONE ) == IRQ_TX_DONE )
 80022d4:	88fb      	ldrh	r3, [r7, #6]
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00c      	beq.n	80022f8 <RadioIrqProcess+0x54>
        {
 
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80022de:	4b53      	ldr	r3, [pc, #332]	; (800242c <RadioIrqProcess+0x188>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d008      	beq.n	80022f8 <RadioIrqProcess+0x54>
 80022e6:	4b51      	ldr	r3, [pc, #324]	; (800242c <RadioIrqProcess+0x188>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d003      	beq.n	80022f8 <RadioIrqProcess+0x54>
            {

                RadioEvents->TxDone( );
 80022f0:	4b4e      	ldr	r3, [pc, #312]	; (800242c <RadioIrqProcess+0x188>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4798      	blx	r3
            }
        }

        if( ( irqRegs & IRQ_RX_DONE ) == IRQ_RX_DONE )
 80022f8:	88fb      	ldrh	r3, [r7, #6]
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d022      	beq.n	8002348 <RadioIrqProcess+0xa4>
        {
            uint8_t size;

            SX126xGetPayload( RadioRxPayload, &size , 255 );
 8002302:	1d7b      	adds	r3, r7, #5
 8002304:	22ff      	movs	r2, #255	; 0xff
 8002306:	4619      	mov	r1, r3
 8002308:	4849      	ldr	r0, [pc, #292]	; (8002430 <RadioIrqProcess+0x18c>)
 800230a:	f000 fb07 	bl	800291c <SX126xGetPayload>
            SX126xGetPacketStatus( &RadioPktStatus );
 800230e:	4849      	ldr	r0, [pc, #292]	; (8002434 <RadioIrqProcess+0x190>)
 8002310:	f000 fffc 	bl	800330c <SX126xGetPacketStatus>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8002314:	4b45      	ldr	r3, [pc, #276]	; (800242c <RadioIrqProcess+0x188>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d012      	beq.n	8002342 <RadioIrqProcess+0x9e>
 800231c:	4b43      	ldr	r3, [pc, #268]	; (800242c <RadioIrqProcess+0x188>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00d      	beq.n	8002342 <RadioIrqProcess+0x9e>
            {
                RadioEvents->RxDone( RadioRxPayload, size, RadioPktStatus.Params.LoRa.RssiPkt, RadioPktStatus.Params.LoRa.SnrPkt );
 8002326:	4b41      	ldr	r3, [pc, #260]	; (800242c <RadioIrqProcess+0x188>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	689c      	ldr	r4, [r3, #8]
 800232c:	797b      	ldrb	r3, [r7, #5]
 800232e:	b299      	uxth	r1, r3
 8002330:	4b40      	ldr	r3, [pc, #256]	; (8002434 <RadioIrqProcess+0x190>)
 8002332:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8002336:	b21a      	sxth	r2, r3
 8002338:	4b3e      	ldr	r3, [pc, #248]	; (8002434 <RadioIrqProcess+0x190>)
 800233a:	f993 300d 	ldrsb.w	r3, [r3, #13]
 800233e:	483c      	ldr	r0, [pc, #240]	; (8002430 <RadioIrqProcess+0x18c>)
 8002340:	47a0      	blx	r4
            }
            SX126xClearIrqStatus( IRQ_RX_DONE );
 8002342:	2002      	movs	r0, #2
 8002344:	f001 f840 	bl	80033c8 <SX126xClearIrqStatus>
        }

        if( ( irqRegs & IRQ_CRC_ERROR ) == IRQ_CRC_ERROR )
 8002348:	88fb      	ldrh	r3, [r7, #6]
 800234a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00c      	beq.n	800236c <RadioIrqProcess+0xc8>
        {
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8002352:	4b36      	ldr	r3, [pc, #216]	; (800242c <RadioIrqProcess+0x188>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d008      	beq.n	800236c <RadioIrqProcess+0xc8>
 800235a:	4b34      	ldr	r3, [pc, #208]	; (800242c <RadioIrqProcess+0x188>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d003      	beq.n	800236c <RadioIrqProcess+0xc8>
            {
                RadioEvents->RxError( );
 8002364:	4b31      	ldr	r3, [pc, #196]	; (800242c <RadioIrqProcess+0x188>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	4798      	blx	r3
            }
           // User_Uart_AsyncTransmit(USER_UART_CHANNEL_USART1,(uint8_t*)"CRC\n",5);
        }

        if( ( irqRegs & IRQ_CAD_DONE ) == IRQ_CAD_DONE )
 800236c:	88fb      	ldrh	r3, [r7, #6]
 800236e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002372:	2b00      	cmp	r3, #0
 8002374:	d015      	beq.n	80023a2 <RadioIrqProcess+0xfe>
        {
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8002376:	4b2d      	ldr	r3, [pc, #180]	; (800242c <RadioIrqProcess+0x188>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d011      	beq.n	80023a2 <RadioIrqProcess+0xfe>
 800237e:	4b2b      	ldr	r3, [pc, #172]	; (800242c <RadioIrqProcess+0x188>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d00c      	beq.n	80023a2 <RadioIrqProcess+0xfe>
            {
                RadioEvents->CadDone( ( ( irqRegs & IRQ_CAD_ACTIVITY_DETECTED ) == IRQ_CAD_ACTIVITY_DETECTED ) );
 8002388:	4b28      	ldr	r3, [pc, #160]	; (800242c <RadioIrqProcess+0x188>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	88fa      	ldrh	r2, [r7, #6]
 8002390:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8002394:	2a00      	cmp	r2, #0
 8002396:	bf14      	ite	ne
 8002398:	2201      	movne	r2, #1
 800239a:	2200      	moveq	r2, #0
 800239c:	b2d2      	uxtb	r2, r2
 800239e:	4610      	mov	r0, r2
 80023a0:	4798      	blx	r3
            }
        }

        if( ( irqRegs & IRQ_RX_TX_TIMEOUT ) == IRQ_RX_TX_TIMEOUT )
 80023a2:	88fb      	ldrh	r3, [r7, #6]
 80023a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d024      	beq.n	80023f6 <RadioIrqProcess+0x152>
        {
            if( SX126xGetOperatingMode( ) == MODE_TX )
 80023ac:	f000 fa88 	bl	80028c0 <SX126xGetOperatingMode>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b04      	cmp	r3, #4
 80023b4:	d10d      	bne.n	80023d2 <RadioIrqProcess+0x12e>
            {
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80023b6:	4b1d      	ldr	r3, [pc, #116]	; (800242c <RadioIrqProcess+0x188>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d01b      	beq.n	80023f6 <RadioIrqProcess+0x152>
 80023be:	4b1b      	ldr	r3, [pc, #108]	; (800242c <RadioIrqProcess+0x188>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d016      	beq.n	80023f6 <RadioIrqProcess+0x152>
                {
                    RadioEvents->TxTimeout( );
 80023c8:	4b18      	ldr	r3, [pc, #96]	; (800242c <RadioIrqProcess+0x188>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	4798      	blx	r3
 80023d0:	e011      	b.n	80023f6 <RadioIrqProcess+0x152>
                }
            }
            else if( SX126xGetOperatingMode( ) == MODE_RX )
 80023d2:	f000 fa75 	bl	80028c0 <SX126xGetOperatingMode>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b05      	cmp	r3, #5
 80023da:	d10c      	bne.n	80023f6 <RadioIrqProcess+0x152>
            {
 
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80023dc:	4b13      	ldr	r3, [pc, #76]	; (800242c <RadioIrqProcess+0x188>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d008      	beq.n	80023f6 <RadioIrqProcess+0x152>
 80023e4:	4b11      	ldr	r3, [pc, #68]	; (800242c <RadioIrqProcess+0x188>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d003      	beq.n	80023f6 <RadioIrqProcess+0x152>
                {
                    RadioEvents->RxTimeout( );
 80023ee:	4b0f      	ldr	r3, [pc, #60]	; (800242c <RadioIrqProcess+0x188>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	4798      	blx	r3
        {
            //__NOP( );
        	//User_Uart_AsyncTransmit(USER_UART_CHANNEL_USART1,(uint8_t*)"HDV\n",5);
        }

        if( ( irqRegs & IRQ_HEADER_ERROR ) == IRQ_HEADER_ERROR )
 80023f6:	88fb      	ldrh	r3, [r7, #6]
 80023f8:	f003 0320 	and.w	r3, r3, #32
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d00c      	beq.n	800241a <RadioIrqProcess+0x176>
        {
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8002400:	4b0a      	ldr	r3, [pc, #40]	; (800242c <RadioIrqProcess+0x188>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d008      	beq.n	800241a <RadioIrqProcess+0x176>
 8002408:	4b08      	ldr	r3, [pc, #32]	; (800242c <RadioIrqProcess+0x188>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d003      	beq.n	800241a <RadioIrqProcess+0x176>
            {
                RadioEvents->RxTimeout( );
 8002412:	4b06      	ldr	r3, [pc, #24]	; (800242c <RadioIrqProcess+0x188>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	4798      	blx	r3
            }
          //  User_Uart_AsyncTransmit(USER_UART_CHANNEL_USART1,(uint8_t*)"HDE\n",5);
        }
    }
}
 800241a:	bf00      	nop
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	bd90      	pop	{r4, r7, pc}
 8002422:	bf00      	nop
 8002424:	40011000 	.word	0x40011000
 8002428:	20000148 	.word	0x20000148
 800242c:	20000150 	.word	0x20000150
 8002430:	20000508 	.word	0x20000508
 8002434:	20000608 	.word	0x20000608

08002438 <HALSpiInOut>:




uint8_t HALSpiInOut(SPI_HandleTypeDef *hspi, uint8_t transmitdata)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af02      	add	r7, sp, #8
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	460b      	mov	r3, r1
 8002442:	70fb      	strb	r3, [r7, #3]
	uint8_t *data = &transmitdata;
 8002444:	1cfb      	adds	r3, r7, #3
 8002446:	60fb      	str	r3, [r7, #12]
	uint8_t receive_data = 0;
 8002448:	2300      	movs	r3, #0
 800244a:	72fb      	strb	r3, [r7, #11]
	HAL_SPI_TransmitReceive(hspi, data, &receive_data, 1, 200);
 800244c:	f107 020b 	add.w	r2, r7, #11
 8002450:	23c8      	movs	r3, #200	; 0xc8
 8002452:	9300      	str	r3, [sp, #0]
 8002454:	2301      	movs	r3, #1
 8002456:	68f9      	ldr	r1, [r7, #12]
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f003 f9a9 	bl	80057b0 <HAL_SPI_TransmitReceive>
	return receive_data;
 800245e:	7afb      	ldrb	r3, [r7, #11]
}
 8002460:	4618      	mov	r0, r3
 8002462:	3710      	adds	r7, #16
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <SX126xReset>:




void SX126xReset( void )
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
    DelayMs( 1 );
 800246c:	2001      	movs	r0, #1
 800246e:	f7ff f919 	bl	80016a4 <DelayMs>
    HAL_GPIO_WritePin(SX1278_RST_PIN_INDEX_GPIO_Port, SX1278_RST_PIN_INDEX_GPIO_Pin, GPIO_PIN_RESET);
 8002472:	2200      	movs	r2, #0
 8002474:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002478:	4808      	ldr	r0, [pc, #32]	; (800249c <SX126xReset+0x34>)
 800247a:	f002 fc46 	bl	8004d0a <HAL_GPIO_WritePin>
    DelayMs( 2 );
 800247e:	2002      	movs	r0, #2
 8002480:	f7ff f910 	bl	80016a4 <DelayMs>
    HAL_GPIO_WritePin(SX1278_RST_PIN_INDEX_GPIO_Port, SX1278_RST_PIN_INDEX_GPIO_Pin, GPIO_PIN_SET);
 8002484:	2201      	movs	r2, #1
 8002486:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800248a:	4804      	ldr	r0, [pc, #16]	; (800249c <SX126xReset+0x34>)
 800248c:	f002 fc3d 	bl	8004d0a <HAL_GPIO_WritePin>
    DelayMs( 1);
 8002490:	2001      	movs	r0, #1
 8002492:	f7ff f907 	bl	80016a4 <DelayMs>
}
 8002496:	bf00      	nop
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	40010800 	.word	0x40010800

080024a0 <SX126xWaitOnBusy>:

void SX126xWaitOnBusy( void )
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
   while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2));
 80024a4:	bf00      	nop
 80024a6:	2104      	movs	r1, #4
 80024a8:	4804      	ldr	r0, [pc, #16]	; (80024bc <SX126xWaitOnBusy+0x1c>)
 80024aa:	f002 fc17 	bl	8004cdc <HAL_GPIO_ReadPin>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1f8      	bne.n	80024a6 <SX126xWaitOnBusy+0x6>
}
 80024b4:	bf00      	nop
 80024b6:	bf00      	nop
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40010c00 	.word	0x40010c00

080024c0 <SX126xWakeup>:


void SX126xWakeup( void )
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin( SPI_CSS_Pin_GPIO_Port, SPI_CSS_Pin_Pin,GPIO_PIN_RESET);
 80024c4:	2200      	movs	r2, #0
 80024c6:	2110      	movs	r1, #16
 80024c8:	4809      	ldr	r0, [pc, #36]	; (80024f0 <SX126xWakeup+0x30>)
 80024ca:	f002 fc1e 	bl	8004d0a <HAL_GPIO_WritePin>
   
    HALSpiInOut(&hspi1,RADIO_GET_STATUS);
 80024ce:	21c0      	movs	r1, #192	; 0xc0
 80024d0:	4808      	ldr	r0, [pc, #32]	; (80024f4 <SX126xWakeup+0x34>)
 80024d2:	f7ff ffb1 	bl	8002438 <HALSpiInOut>
    HALSpiInOut(&hspi1,0);
 80024d6:	2100      	movs	r1, #0
 80024d8:	4806      	ldr	r0, [pc, #24]	; (80024f4 <SX126xWakeup+0x34>)
 80024da:	f7ff ffad 	bl	8002438 <HALSpiInOut>
    
    HAL_GPIO_WritePin( SPI_CSS_Pin_GPIO_Port, SPI_CSS_Pin_Pin,GPIO_PIN_SET);
 80024de:	2201      	movs	r2, #1
 80024e0:	2110      	movs	r1, #16
 80024e2:	4803      	ldr	r0, [pc, #12]	; (80024f0 <SX126xWakeup+0x30>)
 80024e4:	f002 fc11 	bl	8004d0a <HAL_GPIO_WritePin>

    // Wait for chip to be ready.
    SX126xWaitOnBusy( );
 80024e8:	f7ff ffda 	bl	80024a0 <SX126xWaitOnBusy>
}
 80024ec:	bf00      	nop
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40010800 	.word	0x40010800
 80024f4:	200003cc 	.word	0x200003cc

080024f8 <SX126xWriteCommand>:

void SX126xWriteCommand( RadioCommands_t command, uint8_t *buffer, uint16_t size )
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	4603      	mov	r3, r0
 8002500:	6039      	str	r1, [r7, #0]
 8002502:	71fb      	strb	r3, [r7, #7]
 8002504:	4613      	mov	r3, r2
 8002506:	80bb      	strh	r3, [r7, #4]
	uint16_t i = 0;
 8002508:	2300      	movs	r3, #0
 800250a:	81fb      	strh	r3, [r7, #14]
    SX126xCheckDeviceReady( );
 800250c:	f000 f9e2 	bl	80028d4 <SX126xCheckDeviceReady>

    HAL_GPIO_WritePin( SPI_CSS_Pin_GPIO_Port, SPI_CSS_Pin_Pin,GPIO_PIN_RESET);
 8002510:	2200      	movs	r2, #0
 8002512:	2110      	movs	r1, #16
 8002514:	4813      	ldr	r0, [pc, #76]	; (8002564 <SX126xWriteCommand+0x6c>)
 8002516:	f002 fbf8 	bl	8004d0a <HAL_GPIO_WritePin>

    HALSpiInOut(&hspi1,( uint8_t )command );
 800251a:	79fb      	ldrb	r3, [r7, #7]
 800251c:	4619      	mov	r1, r3
 800251e:	4812      	ldr	r0, [pc, #72]	; (8002568 <SX126xWriteCommand+0x70>)
 8002520:	f7ff ff8a 	bl	8002438 <HALSpiInOut>

    for( i = 0; i < size; i++ )
 8002524:	2300      	movs	r3, #0
 8002526:	81fb      	strh	r3, [r7, #14]
 8002528:	e00a      	b.n	8002540 <SX126xWriteCommand+0x48>
    {
        HALSpiInOut(&hspi1,buffer[i] );
 800252a:	89fb      	ldrh	r3, [r7, #14]
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	4413      	add	r3, r2
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	4619      	mov	r1, r3
 8002534:	480c      	ldr	r0, [pc, #48]	; (8002568 <SX126xWriteCommand+0x70>)
 8002536:	f7ff ff7f 	bl	8002438 <HALSpiInOut>
    for( i = 0; i < size; i++ )
 800253a:	89fb      	ldrh	r3, [r7, #14]
 800253c:	3301      	adds	r3, #1
 800253e:	81fb      	strh	r3, [r7, #14]
 8002540:	89fa      	ldrh	r2, [r7, #14]
 8002542:	88bb      	ldrh	r3, [r7, #4]
 8002544:	429a      	cmp	r2, r3
 8002546:	d3f0      	bcc.n	800252a <SX126xWriteCommand+0x32>
    }

    HAL_GPIO_WritePin( SPI_CSS_Pin_GPIO_Port, SPI_CSS_Pin_Pin,GPIO_PIN_SET);
 8002548:	2201      	movs	r2, #1
 800254a:	2110      	movs	r1, #16
 800254c:	4805      	ldr	r0, [pc, #20]	; (8002564 <SX126xWriteCommand+0x6c>)
 800254e:	f002 fbdc 	bl	8004d0a <HAL_GPIO_WritePin>
    
    if( command != RADIO_SET_SLEEP )
 8002552:	79fb      	ldrb	r3, [r7, #7]
 8002554:	2b84      	cmp	r3, #132	; 0x84
 8002556:	d001      	beq.n	800255c <SX126xWriteCommand+0x64>
    {
        SX126xWaitOnBusy( );
 8002558:	f7ff ffa2 	bl	80024a0 <SX126xWaitOnBusy>
    }
}
 800255c:	bf00      	nop
 800255e:	3710      	adds	r7, #16
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	40010800 	.word	0x40010800
 8002568:	200003cc 	.word	0x200003cc

0800256c <SX126xReadCommand>:

void SX126xReadCommand( RadioCommands_t command, uint8_t *buffer, uint16_t size )
{
 800256c:	b590      	push	{r4, r7, lr}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	4603      	mov	r3, r0
 8002574:	6039      	str	r1, [r7, #0]
 8002576:	71fb      	strb	r3, [r7, #7]
 8002578:	4613      	mov	r3, r2
 800257a:	80bb      	strh	r3, [r7, #4]
	uint16_t i = 0;
 800257c:	2300      	movs	r3, #0
 800257e:	81fb      	strh	r3, [r7, #14]
    SX126xCheckDeviceReady( );
 8002580:	f000 f9a8 	bl	80028d4 <SX126xCheckDeviceReady>

    HAL_GPIO_WritePin( SPI_CSS_Pin_GPIO_Port, SPI_CSS_Pin_Pin,GPIO_PIN_RESET);
 8002584:	2200      	movs	r2, #0
 8002586:	2110      	movs	r1, #16
 8002588:	4814      	ldr	r0, [pc, #80]	; (80025dc <SX126xReadCommand+0x70>)
 800258a:	f002 fbbe 	bl	8004d0a <HAL_GPIO_WritePin>

    HALSpiInOut(&hspi1,( uint8_t )command );
 800258e:	79fb      	ldrb	r3, [r7, #7]
 8002590:	4619      	mov	r1, r3
 8002592:	4813      	ldr	r0, [pc, #76]	; (80025e0 <SX126xReadCommand+0x74>)
 8002594:	f7ff ff50 	bl	8002438 <HALSpiInOut>
    HALSpiInOut(&hspi1,0x00 );
 8002598:	2100      	movs	r1, #0
 800259a:	4811      	ldr	r0, [pc, #68]	; (80025e0 <SX126xReadCommand+0x74>)
 800259c:	f7ff ff4c 	bl	8002438 <HALSpiInOut>
    for( i = 0; i < size; i++ )
 80025a0:	2300      	movs	r3, #0
 80025a2:	81fb      	strh	r3, [r7, #14]
 80025a4:	e00b      	b.n	80025be <SX126xReadCommand+0x52>
    {
        buffer[i] = HALSpiInOut(&hspi1,0 );
 80025a6:	89fb      	ldrh	r3, [r7, #14]
 80025a8:	683a      	ldr	r2, [r7, #0]
 80025aa:	18d4      	adds	r4, r2, r3
 80025ac:	2100      	movs	r1, #0
 80025ae:	480c      	ldr	r0, [pc, #48]	; (80025e0 <SX126xReadCommand+0x74>)
 80025b0:	f7ff ff42 	bl	8002438 <HALSpiInOut>
 80025b4:	4603      	mov	r3, r0
 80025b6:	7023      	strb	r3, [r4, #0]
    for( i = 0; i < size; i++ )
 80025b8:	89fb      	ldrh	r3, [r7, #14]
 80025ba:	3301      	adds	r3, #1
 80025bc:	81fb      	strh	r3, [r7, #14]
 80025be:	89fa      	ldrh	r2, [r7, #14]
 80025c0:	88bb      	ldrh	r3, [r7, #4]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d3ef      	bcc.n	80025a6 <SX126xReadCommand+0x3a>
    }

    HAL_GPIO_WritePin( SPI_CSS_Pin_GPIO_Port, SPI_CSS_Pin_Pin,GPIO_PIN_SET);
 80025c6:	2201      	movs	r2, #1
 80025c8:	2110      	movs	r1, #16
 80025ca:	4804      	ldr	r0, [pc, #16]	; (80025dc <SX126xReadCommand+0x70>)
 80025cc:	f002 fb9d 	bl	8004d0a <HAL_GPIO_WritePin>

    SX126xWaitOnBusy( );
 80025d0:	f7ff ff66 	bl	80024a0 <SX126xWaitOnBusy>
}
 80025d4:	bf00      	nop
 80025d6:	3714      	adds	r7, #20
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd90      	pop	{r4, r7, pc}
 80025dc:	40010800 	.word	0x40010800
 80025e0:	200003cc 	.word	0x200003cc

080025e4 <SX126xWriteRegisters>:

void SX126xWriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	4603      	mov	r3, r0
 80025ec:	6039      	str	r1, [r7, #0]
 80025ee:	80fb      	strh	r3, [r7, #6]
 80025f0:	4613      	mov	r3, r2
 80025f2:	80bb      	strh	r3, [r7, #4]
	uint16_t i = 0;
 80025f4:	2300      	movs	r3, #0
 80025f6:	81fb      	strh	r3, [r7, #14]
	
    SX126xCheckDeviceReady( );
 80025f8:	f000 f96c 	bl	80028d4 <SX126xCheckDeviceReady>

    HAL_GPIO_WritePin( SPI_CSS_Pin_GPIO_Port, SPI_CSS_Pin_Pin,GPIO_PIN_RESET);
 80025fc:	2200      	movs	r2, #0
 80025fe:	2110      	movs	r1, #16
 8002600:	4818      	ldr	r0, [pc, #96]	; (8002664 <SX126xWriteRegisters+0x80>)
 8002602:	f002 fb82 	bl	8004d0a <HAL_GPIO_WritePin>
    
    HALSpiInOut(&hspi1,RADIO_WRITE_REGISTER );
 8002606:	210d      	movs	r1, #13
 8002608:	4817      	ldr	r0, [pc, #92]	; (8002668 <SX126xWriteRegisters+0x84>)
 800260a:	f7ff ff15 	bl	8002438 <HALSpiInOut>
    HALSpiInOut(&hspi1,( address & 0xFF00 ) >> 8 );
 800260e:	88fb      	ldrh	r3, [r7, #6]
 8002610:	0a1b      	lsrs	r3, r3, #8
 8002612:	b29b      	uxth	r3, r3
 8002614:	b2db      	uxtb	r3, r3
 8002616:	4619      	mov	r1, r3
 8002618:	4813      	ldr	r0, [pc, #76]	; (8002668 <SX126xWriteRegisters+0x84>)
 800261a:	f7ff ff0d 	bl	8002438 <HALSpiInOut>
    HALSpiInOut(&hspi1, address & 0x00FF );
 800261e:	88fb      	ldrh	r3, [r7, #6]
 8002620:	b2db      	uxtb	r3, r3
 8002622:	4619      	mov	r1, r3
 8002624:	4810      	ldr	r0, [pc, #64]	; (8002668 <SX126xWriteRegisters+0x84>)
 8002626:	f7ff ff07 	bl	8002438 <HALSpiInOut>
    
    for( i = 0; i < size; i++ )
 800262a:	2300      	movs	r3, #0
 800262c:	81fb      	strh	r3, [r7, #14]
 800262e:	e00a      	b.n	8002646 <SX126xWriteRegisters+0x62>
    {
        HALSpiInOut(&hspi1,buffer[i] );
 8002630:	89fb      	ldrh	r3, [r7, #14]
 8002632:	683a      	ldr	r2, [r7, #0]
 8002634:	4413      	add	r3, r2
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	4619      	mov	r1, r3
 800263a:	480b      	ldr	r0, [pc, #44]	; (8002668 <SX126xWriteRegisters+0x84>)
 800263c:	f7ff fefc 	bl	8002438 <HALSpiInOut>
    for( i = 0; i < size; i++ )
 8002640:	89fb      	ldrh	r3, [r7, #14]
 8002642:	3301      	adds	r3, #1
 8002644:	81fb      	strh	r3, [r7, #14]
 8002646:	89fa      	ldrh	r2, [r7, #14]
 8002648:	88bb      	ldrh	r3, [r7, #4]
 800264a:	429a      	cmp	r2, r3
 800264c:	d3f0      	bcc.n	8002630 <SX126xWriteRegisters+0x4c>
    }


    HAL_GPIO_WritePin( SPI_CSS_Pin_GPIO_Port, SPI_CSS_Pin_Pin,GPIO_PIN_SET);
 800264e:	2201      	movs	r2, #1
 8002650:	2110      	movs	r1, #16
 8002652:	4804      	ldr	r0, [pc, #16]	; (8002664 <SX126xWriteRegisters+0x80>)
 8002654:	f002 fb59 	bl	8004d0a <HAL_GPIO_WritePin>

    SX126xWaitOnBusy( );
 8002658:	f7ff ff22 	bl	80024a0 <SX126xWaitOnBusy>
}
 800265c:	bf00      	nop
 800265e:	3710      	adds	r7, #16
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	40010800 	.word	0x40010800
 8002668:	200003cc 	.word	0x200003cc

0800266c <SX126xWriteRegister>:

void SX126xWriteRegister( uint16_t address, uint8_t value )
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	4603      	mov	r3, r0
 8002674:	460a      	mov	r2, r1
 8002676:	80fb      	strh	r3, [r7, #6]
 8002678:	4613      	mov	r3, r2
 800267a:	717b      	strb	r3, [r7, #5]
    SX126xWriteRegisters( address, &value, 1 );
 800267c:	1d79      	adds	r1, r7, #5
 800267e:	88fb      	ldrh	r3, [r7, #6]
 8002680:	2201      	movs	r2, #1
 8002682:	4618      	mov	r0, r3
 8002684:	f7ff ffae 	bl	80025e4 <SX126xWriteRegisters>
}
 8002688:	bf00      	nop
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <SX126xReadRegisters>:

void SX126xReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8002690:	b590      	push	{r4, r7, lr}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	4603      	mov	r3, r0
 8002698:	6039      	str	r1, [r7, #0]
 800269a:	80fb      	strh	r3, [r7, #6]
 800269c:	4613      	mov	r3, r2
 800269e:	80bb      	strh	r3, [r7, #4]
	uint16_t i = 0;
 80026a0:	2300      	movs	r3, #0
 80026a2:	81fb      	strh	r3, [r7, #14]
    SX126xCheckDeviceReady( );
 80026a4:	f000 f916 	bl	80028d4 <SX126xCheckDeviceReady>

    HAL_GPIO_WritePin( SPI_CSS_Pin_GPIO_Port, SPI_CSS_Pin_Pin,GPIO_PIN_RESET);
 80026a8:	2200      	movs	r2, #0
 80026aa:	2110      	movs	r1, #16
 80026ac:	481b      	ldr	r0, [pc, #108]	; (800271c <SX126xReadRegisters+0x8c>)
 80026ae:	f002 fb2c 	bl	8004d0a <HAL_GPIO_WritePin>

    HALSpiInOut(&hspi1,RADIO_READ_REGISTER );
 80026b2:	211d      	movs	r1, #29
 80026b4:	481a      	ldr	r0, [pc, #104]	; (8002720 <SX126xReadRegisters+0x90>)
 80026b6:	f7ff febf 	bl	8002438 <HALSpiInOut>
    HALSpiInOut(&hspi1,( address & 0xFF00 ) >> 8 );
 80026ba:	88fb      	ldrh	r3, [r7, #6]
 80026bc:	0a1b      	lsrs	r3, r3, #8
 80026be:	b29b      	uxth	r3, r3
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	4619      	mov	r1, r3
 80026c4:	4816      	ldr	r0, [pc, #88]	; (8002720 <SX126xReadRegisters+0x90>)
 80026c6:	f7ff feb7 	bl	8002438 <HALSpiInOut>
    HALSpiInOut(&hspi1, address & 0x00FF );
 80026ca:	88fb      	ldrh	r3, [r7, #6]
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	4619      	mov	r1, r3
 80026d0:	4813      	ldr	r0, [pc, #76]	; (8002720 <SX126xReadRegisters+0x90>)
 80026d2:	f7ff feb1 	bl	8002438 <HALSpiInOut>
    HALSpiInOut(&hspi1, 0 );
 80026d6:	2100      	movs	r1, #0
 80026d8:	4811      	ldr	r0, [pc, #68]	; (8002720 <SX126xReadRegisters+0x90>)
 80026da:	f7ff fead 	bl	8002438 <HALSpiInOut>
    for( i = 0; i < size; i++ )
 80026de:	2300      	movs	r3, #0
 80026e0:	81fb      	strh	r3, [r7, #14]
 80026e2:	e00b      	b.n	80026fc <SX126xReadRegisters+0x6c>
    {
        buffer[i] = HALSpiInOut(&hspi1,0 );
 80026e4:	89fb      	ldrh	r3, [r7, #14]
 80026e6:	683a      	ldr	r2, [r7, #0]
 80026e8:	18d4      	adds	r4, r2, r3
 80026ea:	2100      	movs	r1, #0
 80026ec:	480c      	ldr	r0, [pc, #48]	; (8002720 <SX126xReadRegisters+0x90>)
 80026ee:	f7ff fea3 	bl	8002438 <HALSpiInOut>
 80026f2:	4603      	mov	r3, r0
 80026f4:	7023      	strb	r3, [r4, #0]
    for( i = 0; i < size; i++ )
 80026f6:	89fb      	ldrh	r3, [r7, #14]
 80026f8:	3301      	adds	r3, #1
 80026fa:	81fb      	strh	r3, [r7, #14]
 80026fc:	89fa      	ldrh	r2, [r7, #14]
 80026fe:	88bb      	ldrh	r3, [r7, #4]
 8002700:	429a      	cmp	r2, r3
 8002702:	d3ef      	bcc.n	80026e4 <SX126xReadRegisters+0x54>
    }

    HAL_GPIO_WritePin( SPI_CSS_Pin_GPIO_Port, SPI_CSS_Pin_Pin,GPIO_PIN_SET);
 8002704:	2201      	movs	r2, #1
 8002706:	2110      	movs	r1, #16
 8002708:	4804      	ldr	r0, [pc, #16]	; (800271c <SX126xReadRegisters+0x8c>)
 800270a:	f002 fafe 	bl	8004d0a <HAL_GPIO_WritePin>

    SX126xWaitOnBusy( );
 800270e:	f7ff fec7 	bl	80024a0 <SX126xWaitOnBusy>
}
 8002712:	bf00      	nop
 8002714:	3714      	adds	r7, #20
 8002716:	46bd      	mov	sp, r7
 8002718:	bd90      	pop	{r4, r7, pc}
 800271a:	bf00      	nop
 800271c:	40010800 	.word	0x40010800
 8002720:	200003cc 	.word	0x200003cc

08002724 <SX126xReadRegister>:

uint8_t SX126xReadRegister( uint16_t address )
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	4603      	mov	r3, r0
 800272c:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    SX126xReadRegisters( address, &data, 1 );
 800272e:	f107 010f 	add.w	r1, r7, #15
 8002732:	88fb      	ldrh	r3, [r7, #6]
 8002734:	2201      	movs	r2, #1
 8002736:	4618      	mov	r0, r3
 8002738:	f7ff ffaa 	bl	8002690 <SX126xReadRegisters>
    return data;
 800273c:	7bfb      	ldrb	r3, [r7, #15]
}
 800273e:	4618      	mov	r0, r3
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
	...

08002748 <SX126xWriteBuffer>:

void SX126xWriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	4603      	mov	r3, r0
 8002750:	6039      	str	r1, [r7, #0]
 8002752:	71fb      	strb	r3, [r7, #7]
 8002754:	4613      	mov	r3, r2
 8002756:	71bb      	strb	r3, [r7, #6]
	uint16_t i = 0;
 8002758:	2300      	movs	r3, #0
 800275a:	81fb      	strh	r3, [r7, #14]
    SX126xCheckDeviceReady( );
 800275c:	f000 f8ba 	bl	80028d4 <SX126xCheckDeviceReady>

    HAL_GPIO_WritePin( SPI_CSS_Pin_GPIO_Port, SPI_CSS_Pin_Pin,GPIO_PIN_RESET);
 8002760:	2200      	movs	r2, #0
 8002762:	2110      	movs	r1, #16
 8002764:	4814      	ldr	r0, [pc, #80]	; (80027b8 <SX126xWriteBuffer+0x70>)
 8002766:	f002 fad0 	bl	8004d0a <HAL_GPIO_WritePin>
    
    HALSpiInOut(&hspi1, RADIO_WRITE_BUFFER );
 800276a:	210e      	movs	r1, #14
 800276c:	4813      	ldr	r0, [pc, #76]	; (80027bc <SX126xWriteBuffer+0x74>)
 800276e:	f7ff fe63 	bl	8002438 <HALSpiInOut>
    HALSpiInOut(&hspi1, offset );
 8002772:	79fb      	ldrb	r3, [r7, #7]
 8002774:	4619      	mov	r1, r3
 8002776:	4811      	ldr	r0, [pc, #68]	; (80027bc <SX126xWriteBuffer+0x74>)
 8002778:	f7ff fe5e 	bl	8002438 <HALSpiInOut>
    for( i = 0; i < size; i++ )
 800277c:	2300      	movs	r3, #0
 800277e:	81fb      	strh	r3, [r7, #14]
 8002780:	e00a      	b.n	8002798 <SX126xWriteBuffer+0x50>
    {
        HALSpiInOut(&hspi1, buffer[i] );
 8002782:	89fb      	ldrh	r3, [r7, #14]
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	4413      	add	r3, r2
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	4619      	mov	r1, r3
 800278c:	480b      	ldr	r0, [pc, #44]	; (80027bc <SX126xWriteBuffer+0x74>)
 800278e:	f7ff fe53 	bl	8002438 <HALSpiInOut>
    for( i = 0; i < size; i++ )
 8002792:	89fb      	ldrh	r3, [r7, #14]
 8002794:	3301      	adds	r3, #1
 8002796:	81fb      	strh	r3, [r7, #14]
 8002798:	79bb      	ldrb	r3, [r7, #6]
 800279a:	b29b      	uxth	r3, r3
 800279c:	89fa      	ldrh	r2, [r7, #14]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d3ef      	bcc.n	8002782 <SX126xWriteBuffer+0x3a>
    }

    HAL_GPIO_WritePin( SPI_CSS_Pin_GPIO_Port, SPI_CSS_Pin_Pin,GPIO_PIN_SET);
 80027a2:	2201      	movs	r2, #1
 80027a4:	2110      	movs	r1, #16
 80027a6:	4804      	ldr	r0, [pc, #16]	; (80027b8 <SX126xWriteBuffer+0x70>)
 80027a8:	f002 faaf 	bl	8004d0a <HAL_GPIO_WritePin>

    SX126xWaitOnBusy( );
 80027ac:	f7ff fe78 	bl	80024a0 <SX126xWaitOnBusy>
}
 80027b0:	bf00      	nop
 80027b2:	3710      	adds	r7, #16
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	40010800 	.word	0x40010800
 80027bc:	200003cc 	.word	0x200003cc

080027c0 <SX126xReadBuffer>:

void SX126xReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 80027c0:	b590      	push	{r4, r7, lr}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	4603      	mov	r3, r0
 80027c8:	6039      	str	r1, [r7, #0]
 80027ca:	71fb      	strb	r3, [r7, #7]
 80027cc:	4613      	mov	r3, r2
 80027ce:	71bb      	strb	r3, [r7, #6]
	uint16_t i = 0;
 80027d0:	2300      	movs	r3, #0
 80027d2:	81fb      	strh	r3, [r7, #14]
	
    SX126xCheckDeviceReady( );
 80027d4:	f000 f87e 	bl	80028d4 <SX126xCheckDeviceReady>

    HAL_GPIO_WritePin( SPI_CSS_Pin_GPIO_Port, SPI_CSS_Pin_Pin,GPIO_PIN_RESET);
 80027d8:	2200      	movs	r2, #0
 80027da:	2110      	movs	r1, #16
 80027dc:	4817      	ldr	r0, [pc, #92]	; (800283c <SX126xReadBuffer+0x7c>)
 80027de:	f002 fa94 	bl	8004d0a <HAL_GPIO_WritePin>

    HALSpiInOut(&hspi1,  RADIO_READ_BUFFER );
 80027e2:	211e      	movs	r1, #30
 80027e4:	4816      	ldr	r0, [pc, #88]	; (8002840 <SX126xReadBuffer+0x80>)
 80027e6:	f7ff fe27 	bl	8002438 <HALSpiInOut>
    HALSpiInOut(&hspi1,  offset );
 80027ea:	79fb      	ldrb	r3, [r7, #7]
 80027ec:	4619      	mov	r1, r3
 80027ee:	4814      	ldr	r0, [pc, #80]	; (8002840 <SX126xReadBuffer+0x80>)
 80027f0:	f7ff fe22 	bl	8002438 <HALSpiInOut>
    HALSpiInOut(&hspi1,  0 );
 80027f4:	2100      	movs	r1, #0
 80027f6:	4812      	ldr	r0, [pc, #72]	; (8002840 <SX126xReadBuffer+0x80>)
 80027f8:	f7ff fe1e 	bl	8002438 <HALSpiInOut>
    for( i = 0; i < size; i++ )
 80027fc:	2300      	movs	r3, #0
 80027fe:	81fb      	strh	r3, [r7, #14]
 8002800:	e00b      	b.n	800281a <SX126xReadBuffer+0x5a>
    {
        buffer[i] = HALSpiInOut(&hspi1, 0 );
 8002802:	89fb      	ldrh	r3, [r7, #14]
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	18d4      	adds	r4, r2, r3
 8002808:	2100      	movs	r1, #0
 800280a:	480d      	ldr	r0, [pc, #52]	; (8002840 <SX126xReadBuffer+0x80>)
 800280c:	f7ff fe14 	bl	8002438 <HALSpiInOut>
 8002810:	4603      	mov	r3, r0
 8002812:	7023      	strb	r3, [r4, #0]
    for( i = 0; i < size; i++ )
 8002814:	89fb      	ldrh	r3, [r7, #14]
 8002816:	3301      	adds	r3, #1
 8002818:	81fb      	strh	r3, [r7, #14]
 800281a:	79bb      	ldrb	r3, [r7, #6]
 800281c:	b29b      	uxth	r3, r3
 800281e:	89fa      	ldrh	r2, [r7, #14]
 8002820:	429a      	cmp	r2, r3
 8002822:	d3ee      	bcc.n	8002802 <SX126xReadBuffer+0x42>
    }

    HAL_GPIO_WritePin( SPI_CSS_Pin_GPIO_Port, SPI_CSS_Pin_Pin,GPIO_PIN_SET);
 8002824:	2201      	movs	r2, #1
 8002826:	2110      	movs	r1, #16
 8002828:	4804      	ldr	r0, [pc, #16]	; (800283c <SX126xReadBuffer+0x7c>)
 800282a:	f002 fa6e 	bl	8004d0a <HAL_GPIO_WritePin>
    
    SX126xWaitOnBusy( );
 800282e:	f7ff fe37 	bl	80024a0 <SX126xWaitOnBusy>
}
 8002832:	bf00      	nop
 8002834:	3714      	adds	r7, #20
 8002836:	46bd      	mov	sp, r7
 8002838:	bd90      	pop	{r4, r7, pc}
 800283a:	bf00      	nop
 800283c:	40010800 	.word	0x40010800
 8002840:	200003cc 	.word	0x200003cc

08002844 <SX126xSetRfTxPower>:

void SX126xSetRfTxPower( int8_t power )
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	4603      	mov	r3, r0
 800284c:	71fb      	strb	r3, [r7, #7]
    SX126xSetTxParams( power, RADIO_RAMP_40_US );
 800284e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002852:	2102      	movs	r1, #2
 8002854:	4618      	mov	r0, r3
 8002856:	f000 fb4b 	bl	8002ef0 <SX126xSetTxParams>
}
 800285a:	bf00      	nop
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <SX126xGetPaSelect>:

uint8_t SX126xGetPaSelect( uint32_t channel )
{
 8002862:	b480      	push	{r7}
 8002864:	b083      	sub	sp, #12
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
//    else
//    {
//        return SX1262;
//    }
  
  return SX1262;
 800286a:	2302      	movs	r3, #2
}
 800286c:	4618      	mov	r0, r3
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	bc80      	pop	{r7}
 8002874:	4770      	bx	lr

08002876 <SX126xAntSwOn>:

void SX126xAntSwOn( void )
{
 8002876:	b480      	push	{r7}
 8002878:	af00      	add	r7, sp, #0
    //GpioInit( &AntPow, ANT_SWITCH_POWER, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 1 );
}
 800287a:	bf00      	nop
 800287c:	46bd      	mov	sp, r7
 800287e:	bc80      	pop	{r7}
 8002880:	4770      	bx	lr

08002882 <SX126xAntSwOff>:

void SX126xAntSwOff( void )
{
 8002882:	b480      	push	{r7}
 8002884:	af00      	add	r7, sp, #0
   // GpioInit( &AntPow, ANT_SWITCH_POWER, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
}
 8002886:	bf00      	nop
 8002888:	46bd      	mov	sp, r7
 800288a:	bc80      	pop	{r7}
 800288c:	4770      	bx	lr
	...

08002890 <SX126xInit>:
 */
void SX126xProcessIrqs( void );


void SX126xInit( DioIrqHandler dioIrq )
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
    SX126xReset( );
 8002898:	f7ff fde6 	bl	8002468 <SX126xReset>
    SX126xWakeup( );
 800289c:	f7ff fe10 	bl	80024c0 <SX126xWakeup>
    SX126xSetStandby( STDBY_RC );
 80028a0:	2000      	movs	r0, #0
 80028a2:	f000 f909 	bl	8002ab8 <SX126xSetStandby>
    calibParam.Value = 0x7F;    
    SX126xCalibrate( calibParam );

#endif
    
    SX126xSetDio2AsRfSwitchCtrl( true );
 80028a6:	2001      	movs	r0, #1
 80028a8:	f000 faad 	bl	8002e06 <SX126xSetDio2AsRfSwitchCtrl>
    OperatingMode = MODE_STDBY_RC;
 80028ac:	4b03      	ldr	r3, [pc, #12]	; (80028bc <SX126xInit+0x2c>)
 80028ae:	2201      	movs	r2, #1
 80028b0:	701a      	strb	r2, [r3, #0]
}
 80028b2:	bf00      	nop
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	20000154 	.word	0x20000154

080028c0 <SX126xGetOperatingMode>:

RadioOperatingModes_t SX126xGetOperatingMode( void )
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
    return OperatingMode;
 80028c4:	4b02      	ldr	r3, [pc, #8]	; (80028d0 <SX126xGetOperatingMode+0x10>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bc80      	pop	{r7}
 80028ce:	4770      	bx	lr
 80028d0:	20000154 	.word	0x20000154

080028d4 <SX126xCheckDeviceReady>:

void SX126xCheckDeviceReady( void )
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
    if( ( SX126xGetOperatingMode( ) == MODE_SLEEP ) || ( SX126xGetOperatingMode( ) == MODE_RX_DC ) )
 80028d8:	f7ff fff2 	bl	80028c0 <SX126xGetOperatingMode>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d004      	beq.n	80028ec <SX126xCheckDeviceReady+0x18>
 80028e2:	f7ff ffed 	bl	80028c0 <SX126xGetOperatingMode>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b06      	cmp	r3, #6
 80028ea:	d103      	bne.n	80028f4 <SX126xCheckDeviceReady+0x20>
    {
        SX126xWakeup( );
 80028ec:	f7ff fde8 	bl	80024c0 <SX126xWakeup>
        // Switch is turned off when device is in sleep mode and turned on is all other modes
        SX126xAntSwOn( );
 80028f0:	f7ff ffc1 	bl	8002876 <SX126xAntSwOn>
    }
    SX126xWaitOnBusy( );
 80028f4:	f7ff fdd4 	bl	80024a0 <SX126xWaitOnBusy>
}
 80028f8:	bf00      	nop
 80028fa:	bd80      	pop	{r7, pc}

080028fc <SX126xSetPayload>:

void SX126xSetPayload( uint8_t *payload, uint8_t size )
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	460b      	mov	r3, r1
 8002906:	70fb      	strb	r3, [r7, #3]
    SX126xWriteBuffer( 0x00, payload, size );
 8002908:	78fb      	ldrb	r3, [r7, #3]
 800290a:	461a      	mov	r2, r3
 800290c:	6879      	ldr	r1, [r7, #4]
 800290e:	2000      	movs	r0, #0
 8002910:	f7ff ff1a 	bl	8002748 <SX126xWriteBuffer>
}
 8002914:	bf00      	nop
 8002916:	3708      	adds	r7, #8
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <SX126xGetPayload>:

uint8_t SX126xGetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	4613      	mov	r3, r2
 8002928:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 800292a:	2300      	movs	r3, #0
 800292c:	75fb      	strb	r3, [r7, #23]

    SX126xGetRxBufferStatus( size, &offset );
 800292e:	f107 0317 	add.w	r3, r7, #23
 8002932:	4619      	mov	r1, r3
 8002934:	68b8      	ldr	r0, [r7, #8]
 8002936:	f000 fcbb 	bl	80032b0 <SX126xGetRxBufferStatus>
    if( *size > maxSize )
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	79fa      	ldrb	r2, [r7, #7]
 8002940:	429a      	cmp	r2, r3
 8002942:	d201      	bcs.n	8002948 <SX126xGetPayload+0x2c>
    {
        return 1;
 8002944:	2301      	movs	r3, #1
 8002946:	e007      	b.n	8002958 <SX126xGetPayload+0x3c>
    }
    SX126xReadBuffer( offset, buffer, *size );
 8002948:	7df8      	ldrb	r0, [r7, #23]
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	461a      	mov	r2, r3
 8002950:	68f9      	ldr	r1, [r7, #12]
 8002952:	f7ff ff35 	bl	80027c0 <SX126xReadBuffer>
    return 0;
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	3718      	adds	r7, #24
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <SX126xSendPayload>:

void SX126xSendPayload( uint8_t *payload, uint8_t size, uint32_t timeout )
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	460b      	mov	r3, r1
 800296a:	607a      	str	r2, [r7, #4]
 800296c:	72fb      	strb	r3, [r7, #11]
    SX126xSetPayload( payload, size );
 800296e:	7afb      	ldrb	r3, [r7, #11]
 8002970:	4619      	mov	r1, r3
 8002972:	68f8      	ldr	r0, [r7, #12]
 8002974:	f7ff ffc2 	bl	80028fc <SX126xSetPayload>
    SX126xSetTx( timeout );
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f000 f8b9 	bl	8002af0 <SX126xSetTx>
}
 800297e:	bf00      	nop
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <SX126xSetSyncWord>:

uint8_t SX126xSetSyncWord( uint8_t *syncWord )
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b082      	sub	sp, #8
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
    SX126xWriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 800298e:	2208      	movs	r2, #8
 8002990:	6879      	ldr	r1, [r7, #4]
 8002992:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 8002996:	f7ff fe25 	bl	80025e4 <SX126xWriteRegisters>
    return 0;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3708      	adds	r7, #8
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <SX126xSetCrcSeed>:

void SX126xSetCrcSeed( uint16_t seed )
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	4603      	mov	r3, r0
 80029ac:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 80029ae:	88fb      	ldrh	r3, [r7, #6]
 80029b0:	0a1b      	lsrs	r3, r3, #8
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 80029b8:	88fb      	ldrh	r3, [r7, #6]
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	737b      	strb	r3, [r7, #13]

    switch( SX126xGetPacketType( ) )
 80029be:	f000 fa8d 	bl	8002edc <SX126xGetPacketType>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d108      	bne.n	80029da <SX126xSetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SX126xWriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 80029c8:	f107 030c 	add.w	r3, r7, #12
 80029cc:	2202      	movs	r2, #2
 80029ce:	4619      	mov	r1, r3
 80029d0:	f240 60bc 	movw	r0, #1724	; 0x6bc
 80029d4:	f7ff fe06 	bl	80025e4 <SX126xWriteRegisters>
            break;
 80029d8:	e000      	b.n	80029dc <SX126xSetCrcSeed+0x38>

        default:
            break;
 80029da:	bf00      	nop
    }
}
 80029dc:	bf00      	nop
 80029de:	3710      	adds	r7, #16
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <SX126xSetCrcPolynomial>:

void SX126xSetCrcPolynomial( uint16_t polynomial )
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	4603      	mov	r3, r0
 80029ec:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 80029ee:	88fb      	ldrh	r3, [r7, #6]
 80029f0:	0a1b      	lsrs	r3, r3, #8
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 80029f8:	88fb      	ldrh	r3, [r7, #6]
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	737b      	strb	r3, [r7, #13]

    switch( SX126xGetPacketType( ) )
 80029fe:	f000 fa6d 	bl	8002edc <SX126xGetPacketType>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d108      	bne.n	8002a1a <SX126xSetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SX126xWriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8002a08:	f107 030c 	add.w	r3, r7, #12
 8002a0c:	2202      	movs	r2, #2
 8002a0e:	4619      	mov	r1, r3
 8002a10:	f240 60be 	movw	r0, #1726	; 0x6be
 8002a14:	f7ff fde6 	bl	80025e4 <SX126xWriteRegisters>
            break;
 8002a18:	e000      	b.n	8002a1c <SX126xSetCrcPolynomial+0x38>

        default:
            break;
 8002a1a:	bf00      	nop
    }
}
 8002a1c:	bf00      	nop
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <SX126xSetWhiteningSeed>:

void SX126xSetWhiteningSeed( uint16_t seed )
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	73fb      	strb	r3, [r7, #15]
    
    switch( SX126xGetPacketType( ) )
 8002a32:	f000 fa53 	bl	8002edc <SX126xGetPacketType>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d121      	bne.n	8002a80 <SX126xSetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SX126xReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8002a3c:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8002a40:	f7ff fe70 	bl	8002724 <SX126xReadRegister>
 8002a44:	4603      	mov	r3, r0
 8002a46:	f023 0301 	bic.w	r3, r3, #1
 8002a4a:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8002a4c:	88fb      	ldrh	r3, [r7, #6]
 8002a4e:	0a1b      	lsrs	r3, r3, #8
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	b25b      	sxtb	r3, r3
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	b25a      	sxtb	r2, r3
 8002a5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	b25b      	sxtb	r3, r3
 8002a62:	73fb      	strb	r3, [r7, #15]
            SX126xWriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8002a64:	7bfb      	ldrb	r3, [r7, #15]
 8002a66:	4619      	mov	r1, r3
 8002a68:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8002a6c:	f7ff fdfe 	bl	800266c <SX126xWriteRegister>
            SX126xWriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, ( uint8_t )seed );
 8002a70:	88fb      	ldrh	r3, [r7, #6]
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	4619      	mov	r1, r3
 8002a76:	f240 60b9 	movw	r0, #1721	; 0x6b9
 8002a7a:	f7ff fdf7 	bl	800266c <SX126xWriteRegister>
            break;
 8002a7e:	e000      	b.n	8002a82 <SX126xSetWhiteningSeed+0x5e>

        default:
            break;
 8002a80:	bf00      	nop
    }
}
 8002a82:	bf00      	nop
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
	...

08002a8c <SX126xSetSleep>:

    return ( buf[0] << 24 ) | ( buf[1] << 16 ) | ( buf[2] << 8 ) | buf[3];
}

void SX126xSetSleep( SleepParams_t sleepConfig )
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	7138      	strb	r0, [r7, #4]
    SX126xAntSwOff( );
 8002a94:	f7ff fef5 	bl	8002882 <SX126xAntSwOff>

    SX126xWriteCommand( RADIO_SET_SLEEP, &sleepConfig.Value, 1 );
 8002a98:	1d3b      	adds	r3, r7, #4
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	2084      	movs	r0, #132	; 0x84
 8002aa0:	f7ff fd2a 	bl	80024f8 <SX126xWriteCommand>
    OperatingMode = MODE_SLEEP;
 8002aa4:	4b03      	ldr	r3, [pc, #12]	; (8002ab4 <SX126xSetSleep+0x28>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	701a      	strb	r2, [r3, #0]
}
 8002aaa:	bf00      	nop
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	20000154 	.word	0x20000154

08002ab8 <SX126xSetStandby>:

void SX126xSetStandby( RadioStandbyModes_t standbyConfig )
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	4603      	mov	r3, r0
 8002ac0:	71fb      	strb	r3, [r7, #7]
    SX126xWriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8002ac2:	1dfb      	adds	r3, r7, #7
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	2080      	movs	r0, #128	; 0x80
 8002aca:	f7ff fd15 	bl	80024f8 <SX126xWriteCommand>
    if( standbyConfig == STDBY_RC )
 8002ace:	79fb      	ldrb	r3, [r7, #7]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d103      	bne.n	8002adc <SX126xSetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8002ad4:	4b05      	ldr	r3, [pc, #20]	; (8002aec <SX126xSetStandby+0x34>)
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8002ada:	e002      	b.n	8002ae2 <SX126xSetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8002adc:	4b03      	ldr	r3, [pc, #12]	; (8002aec <SX126xSetStandby+0x34>)
 8002ade:	2202      	movs	r2, #2
 8002ae0:	701a      	strb	r2, [r3, #0]
}
 8002ae2:	bf00      	nop
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	20000154 	.word	0x20000154

08002af0 <SX126xSetTx>:
    SX126xWriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SX126xSetTx( uint32_t timeout )
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8002af8:	4b0c      	ldr	r3, [pc, #48]	; (8002b2c <SX126xSetTx+0x3c>)
 8002afa:	2204      	movs	r2, #4
 8002afc:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	0c1b      	lsrs	r3, r3, #16
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	0a1b      	lsrs	r3, r3, #8
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	73bb      	strb	r3, [r7, #14]
    SX126xWriteCommand( RADIO_SET_TX, buf, 3 );
 8002b14:	f107 030c 	add.w	r3, r7, #12
 8002b18:	2203      	movs	r2, #3
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	2083      	movs	r0, #131	; 0x83
 8002b1e:	f7ff fceb 	bl	80024f8 <SX126xWriteCommand>
}
 8002b22:	bf00      	nop
 8002b24:	3710      	adds	r7, #16
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	20000154 	.word	0x20000154

08002b30 <SX126xSetRx>:

void SX126xSetRx( uint32_t timeout )
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8002b38:	4b0c      	ldr	r3, [pc, #48]	; (8002b6c <SX126xSetRx+0x3c>)
 8002b3a:	2205      	movs	r2, #5
 8002b3c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	0c1b      	lsrs	r3, r3, #16
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	0a1b      	lsrs	r3, r3, #8
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	73bb      	strb	r3, [r7, #14]
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
 8002b54:	f107 030c 	add.w	r3, r7, #12
 8002b58:	2203      	movs	r2, #3
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	2082      	movs	r0, #130	; 0x82
 8002b5e:	f7ff fccb 	bl	80024f8 <SX126xWriteCommand>
}
 8002b62:	bf00      	nop
 8002b64:	3710      	adds	r7, #16
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	20000154 	.word	0x20000154

08002b70 <SX126xSetRxBoosted>:

void SX126xSetRxBoosted( uint32_t timeout )
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8002b78:	4b0e      	ldr	r3, [pc, #56]	; (8002bb4 <SX126xSetRxBoosted+0x44>)
 8002b7a:	2205      	movs	r2, #5
 8002b7c:	701a      	strb	r2, [r3, #0]

    SX126xWriteRegister( REG_RX_GAIN, 0x96 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensivity
 8002b7e:	2196      	movs	r1, #150	; 0x96
 8002b80:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8002b84:	f7ff fd72 	bl	800266c <SX126xWriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	0c1b      	lsrs	r3, r3, #16
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	0a1b      	lsrs	r3, r3, #8
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	73bb      	strb	r3, [r7, #14]
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
 8002b9e:	f107 030c 	add.w	r3, r7, #12
 8002ba2:	2203      	movs	r2, #3
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	2082      	movs	r0, #130	; 0x82
 8002ba8:	f7ff fca6 	bl	80024f8 <SX126xWriteCommand>
}
 8002bac:	bf00      	nop
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	20000154 	.word	0x20000154

08002bb8 <SX126xSetRxDutyCycle>:

void SX126xSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	0c1b      	lsrs	r3, r3, #16
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	0a1b      	lsrs	r3, r3, #8
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	0c1b      	lsrs	r3, r3, #16
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	0a1b      	lsrs	r3, r3, #8
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	737b      	strb	r3, [r7, #13]
    SX126xWriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8002bee:	f107 0308 	add.w	r3, r7, #8
 8002bf2:	2206      	movs	r2, #6
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	2094      	movs	r0, #148	; 0x94
 8002bf8:	f7ff fc7e 	bl	80024f8 <SX126xWriteCommand>
    OperatingMode = MODE_RX_DC;
 8002bfc:	4b03      	ldr	r3, [pc, #12]	; (8002c0c <SX126xSetRxDutyCycle+0x54>)
 8002bfe:	2206      	movs	r2, #6
 8002c00:	701a      	strb	r2, [r3, #0]
}
 8002c02:	bf00      	nop
 8002c04:	3710      	adds	r7, #16
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	20000154 	.word	0x20000154

08002c10 <SX126xSetCad>:

void SX126xSetCad( void )
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
    SX126xWriteCommand( RADIO_SET_CAD, 0, 0 );
 8002c14:	2200      	movs	r2, #0
 8002c16:	2100      	movs	r1, #0
 8002c18:	20c5      	movs	r0, #197	; 0xc5
 8002c1a:	f7ff fc6d 	bl	80024f8 <SX126xWriteCommand>
    OperatingMode = MODE_CAD;
 8002c1e:	4b02      	ldr	r3, [pc, #8]	; (8002c28 <SX126xSetCad+0x18>)
 8002c20:	2207      	movs	r2, #7
 8002c22:	701a      	strb	r2, [r3, #0]
}
 8002c24:	bf00      	nop
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	20000154 	.word	0x20000154

08002c2c <SX126xSetTxContinuousWave>:

void SX126xSetTxContinuousWave( void )
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
    SX126xWriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8002c30:	2200      	movs	r2, #0
 8002c32:	2100      	movs	r1, #0
 8002c34:	20d1      	movs	r0, #209	; 0xd1
 8002c36:	f7ff fc5f 	bl	80024f8 <SX126xWriteCommand>
}
 8002c3a:	bf00      	nop
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <SX126xSetStopRxTimerOnPreambleDetect>:
{
    SX126xWriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
}

void SX126xSetStopRxTimerOnPreambleDetect( bool enable )
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b082      	sub	sp, #8
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	4603      	mov	r3, r0
 8002c46:	71fb      	strb	r3, [r7, #7]
    SX126xWriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8002c48:	1dfb      	adds	r3, r7, #7
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	209f      	movs	r0, #159	; 0x9f
 8002c50:	f7ff fc52 	bl	80024f8 <SX126xWriteCommand>
}
 8002c54:	bf00      	nop
 8002c56:	3708      	adds	r7, #8
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <SX126xSetLoRaSymbNumTimeout>:

void SX126xSetLoRaSymbNumTimeout( uint8_t SymbNum )
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	4603      	mov	r3, r0
 8002c64:	71fb      	strb	r3, [r7, #7]
    SX126xWriteCommand( RADIO_SET_LORASYMBTIMEOUT, &SymbNum, 1 );
 8002c66:	1dfb      	adds	r3, r7, #7
 8002c68:	2201      	movs	r2, #1
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	20a0      	movs	r0, #160	; 0xa0
 8002c6e:	f7ff fc43 	bl	80024f8 <SX126xWriteCommand>
}
 8002c72:	bf00      	nop
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <SX126xSetRegulatorMode>:

void SX126xSetRegulatorMode( RadioRegulatorMode_t mode )
{
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b082      	sub	sp, #8
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	4603      	mov	r3, r0
 8002c82:	71fb      	strb	r3, [r7, #7]
    SX126xWriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8002c84:	1dfb      	adds	r3, r7, #7
 8002c86:	2201      	movs	r2, #1
 8002c88:	4619      	mov	r1, r3
 8002c8a:	2096      	movs	r0, #150	; 0x96
 8002c8c:	f7ff fc34 	bl	80024f8 <SX126xWriteCommand>
}
 8002c90:	bf00      	nop
 8002c92:	3708      	adds	r7, #8
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <SX126xCalibrateImage>:
{
    SX126xWriteCommand( RADIO_CALIBRATE, ( uint8_t* )&calibParam, 1 );
}

void SX126xCalibrateImage( uint32_t freq )
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a1b      	ldr	r2, [pc, #108]	; (8002d10 <SX126xCalibrateImage+0x78>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d904      	bls.n	8002cb2 <SX126xCalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8002ca8:	23e1      	movs	r3, #225	; 0xe1
 8002caa:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8002cac:	23e9      	movs	r3, #233	; 0xe9
 8002cae:	737b      	strb	r3, [r7, #13]
 8002cb0:	e022      	b.n	8002cf8 <SX126xCalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a17      	ldr	r2, [pc, #92]	; (8002d14 <SX126xCalibrateImage+0x7c>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d904      	bls.n	8002cc4 <SX126xCalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 8002cba:	23d7      	movs	r3, #215	; 0xd7
 8002cbc:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xD8;
 8002cbe:	23d8      	movs	r3, #216	; 0xd8
 8002cc0:	737b      	strb	r3, [r7, #13]
 8002cc2:	e019      	b.n	8002cf8 <SX126xCalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a14      	ldr	r2, [pc, #80]	; (8002d18 <SX126xCalibrateImage+0x80>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d904      	bls.n	8002cd6 <SX126xCalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8002ccc:	23c1      	movs	r3, #193	; 0xc1
 8002cce:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8002cd0:	23c5      	movs	r3, #197	; 0xc5
 8002cd2:	737b      	strb	r3, [r7, #13]
 8002cd4:	e010      	b.n	8002cf8 <SX126xCalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a10      	ldr	r2, [pc, #64]	; (8002d1c <SX126xCalibrateImage+0x84>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d904      	bls.n	8002ce8 <SX126xCalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 8002cde:	2375      	movs	r3, #117	; 0x75
 8002ce0:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 8002ce2:	2381      	movs	r3, #129	; 0x81
 8002ce4:	737b      	strb	r3, [r7, #13]
 8002ce6:	e007      	b.n	8002cf8 <SX126xCalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a0d      	ldr	r2, [pc, #52]	; (8002d20 <SX126xCalibrateImage+0x88>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d903      	bls.n	8002cf8 <SX126xCalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 8002cf0:	236b      	movs	r3, #107	; 0x6b
 8002cf2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8002cf4:	236f      	movs	r3, #111	; 0x6f
 8002cf6:	737b      	strb	r3, [r7, #13]
    }
    SX126xWriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8002cf8:	f107 030c 	add.w	r3, r7, #12
 8002cfc:	2202      	movs	r2, #2
 8002cfe:	4619      	mov	r1, r3
 8002d00:	2098      	movs	r0, #152	; 0x98
 8002d02:	f7ff fbf9 	bl	80024f8 <SX126xWriteCommand>
}
 8002d06:	bf00      	nop
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	35a4e900 	.word	0x35a4e900
 8002d14:	32a9f880 	.word	0x32a9f880
 8002d18:	2de54480 	.word	0x2de54480
 8002d1c:	1b6b0b00 	.word	0x1b6b0b00
 8002d20:	1954fc40 	.word	0x1954fc40

08002d24 <SX126xSetPaConfig>:

void SX126xSetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8002d24:	b590      	push	{r4, r7, lr}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	4604      	mov	r4, r0
 8002d2c:	4608      	mov	r0, r1
 8002d2e:	4611      	mov	r1, r2
 8002d30:	461a      	mov	r2, r3
 8002d32:	4623      	mov	r3, r4
 8002d34:	71fb      	strb	r3, [r7, #7]
 8002d36:	4603      	mov	r3, r0
 8002d38:	71bb      	strb	r3, [r7, #6]
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	717b      	strb	r3, [r7, #5]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 8002d42:	79fb      	ldrb	r3, [r7, #7]
 8002d44:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8002d46:	79bb      	ldrb	r3, [r7, #6]
 8002d48:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8002d4a:	797b      	ldrb	r3, [r7, #5]
 8002d4c:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 8002d4e:	793b      	ldrb	r3, [r7, #4]
 8002d50:	73fb      	strb	r3, [r7, #15]
    SX126xWriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8002d52:	f107 030c 	add.w	r3, r7, #12
 8002d56:	2204      	movs	r2, #4
 8002d58:	4619      	mov	r1, r3
 8002d5a:	2095      	movs	r0, #149	; 0x95
 8002d5c:	f7ff fbcc 	bl	80024f8 <SX126xWriteCommand>
}
 8002d60:	bf00      	nop
 8002d62:	3714      	adds	r7, #20
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd90      	pop	{r4, r7, pc}

08002d68 <SX126xSetDioIrqParams>:
{
    SX126xWriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SX126xSetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8002d68:	b590      	push	{r4, r7, lr}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	4604      	mov	r4, r0
 8002d70:	4608      	mov	r0, r1
 8002d72:	4611      	mov	r1, r2
 8002d74:	461a      	mov	r2, r3
 8002d76:	4623      	mov	r3, r4
 8002d78:	80fb      	strh	r3, [r7, #6]
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	80bb      	strh	r3, [r7, #4]
 8002d7e:	460b      	mov	r3, r1
 8002d80:	807b      	strh	r3, [r7, #2]
 8002d82:	4613      	mov	r3, r2
 8002d84:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8002d86:	88fb      	ldrh	r3, [r7, #6]
 8002d88:	0a1b      	lsrs	r3, r3, #8
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8002d90:	88fb      	ldrh	r3, [r7, #6]
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8002d96:	88bb      	ldrh	r3, [r7, #4]
 8002d98:	0a1b      	lsrs	r3, r3, #8
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8002da0:	88bb      	ldrh	r3, [r7, #4]
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8002da6:	887b      	ldrh	r3, [r7, #2]
 8002da8:	0a1b      	lsrs	r3, r3, #8
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8002db0:	887b      	ldrh	r3, [r7, #2]
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8002db6:	883b      	ldrh	r3, [r7, #0]
 8002db8:	0a1b      	lsrs	r3, r3, #8
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8002dc0:	883b      	ldrh	r3, [r7, #0]
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	73fb      	strb	r3, [r7, #15]
    SX126xWriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8002dc6:	f107 0308 	add.w	r3, r7, #8
 8002dca:	2208      	movs	r2, #8
 8002dcc:	4619      	mov	r1, r3
 8002dce:	2008      	movs	r0, #8
 8002dd0:	f7ff fb92 	bl	80024f8 <SX126xWriteCommand>
}
 8002dd4:	bf00      	nop
 8002dd6:	3714      	adds	r7, #20
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd90      	pop	{r4, r7, pc}

08002ddc <SX126xGetIrqStatus>:

uint16_t SX126xGetIrqStatus( void )
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
    uint8_t irqStatus[2];

    SX126xReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
 8002de2:	1d3b      	adds	r3, r7, #4
 8002de4:	2202      	movs	r2, #2
 8002de6:	4619      	mov	r1, r3
 8002de8:	2012      	movs	r0, #18
 8002dea:	f7ff fbbf 	bl	800256c <SX126xReadCommand>
    return ( irqStatus[0] << 8 ) | irqStatus[1];
 8002dee:	793b      	ldrb	r3, [r7, #4]
 8002df0:	021b      	lsls	r3, r3, #8
 8002df2:	b21a      	sxth	r2, r3
 8002df4:	797b      	ldrb	r3, [r7, #5]
 8002df6:	b21b      	sxth	r3, r3
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	b21b      	sxth	r3, r3
 8002dfc:	b29b      	uxth	r3, r3
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <SX126xSetDio2AsRfSwitchCtrl>:

void SX126xSetDio2AsRfSwitchCtrl( uint8_t enable )
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b082      	sub	sp, #8
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	71fb      	strb	r3, [r7, #7]
    SX126xWriteCommand( RADIO_SET_RFSWITCHMODE, &enable, 1 );
 8002e10:	1dfb      	adds	r3, r7, #7
 8002e12:	2201      	movs	r2, #1
 8002e14:	4619      	mov	r1, r3
 8002e16:	209d      	movs	r0, #157	; 0x9d
 8002e18:	f7ff fb6e 	bl	80024f8 <SX126xWriteCommand>
}
 8002e1c:	bf00      	nop
 8002e1e:	3708      	adds	r7, #8
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	0000      	movs	r0, r0
	...

08002e28 <SX126xSetRfFrequency>:

    SX126xWriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
}

void SX126xSetRfFrequency( uint32_t frequency )
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t freq = 0;
 8002e30:	2300      	movs	r3, #0
 8002e32:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 8002e34:	4b1e      	ldr	r3, [pc, #120]	; (8002eb0 <SX126xSetRfFrequency+0x88>)
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	f083 0301 	eor.w	r3, r3, #1
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d005      	beq.n	8002e4e <SX126xSetRfFrequency+0x26>
    {
        SX126xCalibrateImage( frequency );
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f7ff ff28 	bl	8002c98 <SX126xCalibrateImage>
        ImageCalibrated = true;
 8002e48:	4b19      	ldr	r3, [pc, #100]	; (8002eb0 <SX126xSetRfFrequency+0x88>)
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	701a      	strb	r2, [r3, #0]
    }

    freq = ( uint32_t )( ( double )frequency / ( double )FREQ_STEP );
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f7fd fb2c 	bl	80004ac <__aeabi_ui2d>
 8002e54:	a314      	add	r3, pc, #80	; (adr r3, 8002ea8 <SX126xSetRfFrequency+0x80>)
 8002e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e5a:	f7fd fccb 	bl	80007f4 <__aeabi_ddiv>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	460b      	mov	r3, r1
 8002e62:	4610      	mov	r0, r2
 8002e64:	4619      	mov	r1, r3
 8002e66:	f7fd fe35 	bl	8000ad4 <__aeabi_d2uiz>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( freq >> 24 ) & 0xFF );
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	0e1b      	lsrs	r3, r3, #24
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( freq >> 16 ) & 0xFF );
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	0c1b      	lsrs	r3, r3, #16
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( freq >> 8 ) & 0xFF );
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	0a1b      	lsrs	r3, r3, #8
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( freq & 0xFF );
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	72fb      	strb	r3, [r7, #11]
    SX126xWriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8002e8c:	f107 0308 	add.w	r3, r7, #8
 8002e90:	2204      	movs	r2, #4
 8002e92:	4619      	mov	r1, r3
 8002e94:	2086      	movs	r0, #134	; 0x86
 8002e96:	f7ff fb2f 	bl	80024f8 <SX126xWriteCommand>
}
 8002e9a:	bf00      	nop
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	f3af 8000 	nop.w
 8002ea8:	00000000 	.word	0x00000000
 8002eac:	3fee8480 	.word	0x3fee8480
 8002eb0:	2000015c 	.word	0x2000015c

08002eb4 <SX126xSetPacketType>:

void SX126xSetPacketType( RadioPacketTypes_t packetType )
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	4603      	mov	r3, r0
 8002ebc:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8002ebe:	79fa      	ldrb	r2, [r7, #7]
 8002ec0:	4b05      	ldr	r3, [pc, #20]	; (8002ed8 <SX126xSetPacketType+0x24>)
 8002ec2:	701a      	strb	r2, [r3, #0]
    SX126xWriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8002ec4:	1dfb      	adds	r3, r7, #7
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	4619      	mov	r1, r3
 8002eca:	208a      	movs	r0, #138	; 0x8a
 8002ecc:	f7ff fb14 	bl	80024f8 <SX126xWriteCommand>
}
 8002ed0:	bf00      	nop
 8002ed2:	3708      	adds	r7, #8
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	20000155 	.word	0x20000155

08002edc <SX126xGetPacketType>:

RadioPacketTypes_t SX126xGetPacketType( void )
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
    return PacketType;
 8002ee0:	4b02      	ldr	r3, [pc, #8]	; (8002eec <SX126xGetPacketType+0x10>)
 8002ee2:	781b      	ldrb	r3, [r3, #0]
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bc80      	pop	{r7}
 8002eea:	4770      	bx	lr
 8002eec:	20000155 	.word	0x20000155

08002ef0 <SX126xSetTxParams>:

void SX126xSetTxParams( int8_t power, RadioRampTimes_t rampTime )
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	460a      	mov	r2, r1
 8002efa:	71fb      	strb	r3, [r7, #7]
 8002efc:	4613      	mov	r3, r2
 8002efe:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    if( SX126xGetPaSelect( 0 ) == SX1261 )
 8002f00:	2000      	movs	r0, #0
 8002f02:	f7ff fcae 	bl	8002862 <SX126xGetPaSelect>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d124      	bne.n	8002f56 <SX126xSetTxParams+0x66>
    {
        if( power == 15 )
 8002f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f10:	2b0f      	cmp	r3, #15
 8002f12:	d106      	bne.n	8002f22 <SX126xSetTxParams+0x32>
        {
            SX126xSetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 8002f14:	2301      	movs	r3, #1
 8002f16:	2201      	movs	r2, #1
 8002f18:	2100      	movs	r1, #0
 8002f1a:	2006      	movs	r0, #6
 8002f1c:	f7ff ff02 	bl	8002d24 <SX126xSetPaConfig>
 8002f20:	e005      	b.n	8002f2e <SX126xSetTxParams+0x3e>
        }
        else
        {
            SX126xSetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 8002f22:	2301      	movs	r3, #1
 8002f24:	2201      	movs	r2, #1
 8002f26:	2100      	movs	r1, #0
 8002f28:	2004      	movs	r0, #4
 8002f2a:	f7ff fefb 	bl	8002d24 <SX126xSetPaConfig>
        }
        if( power >= 14 )
 8002f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f32:	2b0d      	cmp	r3, #13
 8002f34:	dd02      	ble.n	8002f3c <SX126xSetTxParams+0x4c>
        {
            power = 14;
 8002f36:	230e      	movs	r3, #14
 8002f38:	71fb      	strb	r3, [r7, #7]
 8002f3a:	e006      	b.n	8002f4a <SX126xSetTxParams+0x5a>
        }
        else if( power < -3 )
 8002f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f40:	f113 0f03 	cmn.w	r3, #3
 8002f44:	da01      	bge.n	8002f4a <SX126xSetTxParams+0x5a>
        {
            power = -3;
 8002f46:	23fd      	movs	r3, #253	; 0xfd
 8002f48:	71fb      	strb	r3, [r7, #7]
        }
        SX126xWriteRegister( REG_OCP, 0x18 ); // current max is 80 mA for the whole device
 8002f4a:	2118      	movs	r1, #24
 8002f4c:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8002f50:	f7ff fb8c 	bl	800266c <SX126xWriteRegister>
 8002f54:	e018      	b.n	8002f88 <SX126xSetTxParams+0x98>
    }
    else // sx1262
    {
        SX126xSetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 8002f56:	2301      	movs	r3, #1
 8002f58:	2200      	movs	r2, #0
 8002f5a:	2107      	movs	r1, #7
 8002f5c:	2004      	movs	r0, #4
 8002f5e:	f7ff fee1 	bl	8002d24 <SX126xSetPaConfig>
        if( power > 22 )
 8002f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f66:	2b16      	cmp	r3, #22
 8002f68:	dd02      	ble.n	8002f70 <SX126xSetTxParams+0x80>
        {
            power = 22;
 8002f6a:	2316      	movs	r3, #22
 8002f6c:	71fb      	strb	r3, [r7, #7]
 8002f6e:	e006      	b.n	8002f7e <SX126xSetTxParams+0x8e>
        }
        else if( power < -3 )
 8002f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f74:	f113 0f03 	cmn.w	r3, #3
 8002f78:	da01      	bge.n	8002f7e <SX126xSetTxParams+0x8e>
        {
            power = -3;
 8002f7a:	23fd      	movs	r3, #253	; 0xfd
 8002f7c:	71fb      	strb	r3, [r7, #7]
        }
        SX126xWriteRegister( REG_OCP, 0x38 ); // current max 160mA for the whole device
 8002f7e:	2138      	movs	r1, #56	; 0x38
 8002f80:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8002f84:	f7ff fb72 	bl	800266c <SX126xWriteRegister>
    }
    buf[0] = power;
 8002f88:	79fb      	ldrb	r3, [r7, #7]
 8002f8a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )rampTime;
 8002f8c:	79bb      	ldrb	r3, [r7, #6]
 8002f8e:	737b      	strb	r3, [r7, #13]
    SX126xWriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 8002f90:	f107 030c 	add.w	r3, r7, #12
 8002f94:	2202      	movs	r2, #2
 8002f96:	4619      	mov	r1, r3
 8002f98:	208e      	movs	r0, #142	; 0x8e
 8002f9a:	f7ff faad 	bl	80024f8 <SX126xWriteCommand>
}
 8002f9e:	bf00      	nop
 8002fa0:	3710      	adds	r7, #16
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
	...

08002fa8 <SX126xSetModulationParams>:

void SX126xSetModulationParams( ModulationParams_t *modulationParams )
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8002fb4:	4a48      	ldr	r2, [pc, #288]	; (80030d8 <SX126xSetModulationParams+0x130>)
 8002fb6:	f107 0308 	add.w	r3, r7, #8
 8002fba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002fbe:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	781a      	ldrb	r2, [r3, #0]
 8002fc6:	4b45      	ldr	r3, [pc, #276]	; (80030dc <SX126xSetModulationParams+0x134>)
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d004      	beq.n	8002fd8 <SX126xSetModulationParams+0x30>
    {
        SX126xSetPacketType( modulationParams->PacketType );
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7ff ff6e 	bl	8002eb4 <SX126xSetPacketType>
    }

    switch( modulationParams->PacketType )
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d002      	beq.n	8002fe6 <SX126xSetModulationParams+0x3e>
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d056      	beq.n	8003092 <SX126xSetModulationParams+0xea>
        SX126xWriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );

        break;
    default:
    case PACKET_TYPE_NONE:
        return;
 8002fe4:	e06c      	b.n	80030c0 <SX126xSetModulationParams+0x118>
        n = 8;
 8002fe6:	2308      	movs	r3, #8
 8002fe8:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )( 32 * ( ( double )XTAL_FREQ / ( double )modulationParams->Params.Gfsk.BitRate ) );
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7fd fa5c 	bl	80004ac <__aeabi_ui2d>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	a133      	add	r1, pc, #204	; (adr r1, 80030c8 <SX126xSetModulationParams+0x120>)
 8002ffa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002ffe:	f7fd fbf9 	bl	80007f4 <__aeabi_ddiv>
 8003002:	4602      	mov	r2, r0
 8003004:	460b      	mov	r3, r1
 8003006:	4610      	mov	r0, r2
 8003008:	4619      	mov	r1, r3
 800300a:	f04f 0200 	mov.w	r2, #0
 800300e:	4b34      	ldr	r3, [pc, #208]	; (80030e0 <SX126xSetModulationParams+0x138>)
 8003010:	f7fd fac6 	bl	80005a0 <__aeabi_dmul>
 8003014:	4602      	mov	r2, r0
 8003016:	460b      	mov	r3, r1
 8003018:	4610      	mov	r0, r2
 800301a:	4619      	mov	r1, r3
 800301c:	f7fd fd5a 	bl	8000ad4 <__aeabi_d2uiz>
 8003020:	4603      	mov	r3, r0
 8003022:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	0c1b      	lsrs	r3, r3, #16
 8003028:	b2db      	uxtb	r3, r3
 800302a:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	0a1b      	lsrs	r3, r3, #8
 8003030:	b2db      	uxtb	r3, r3
 8003032:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	b2db      	uxtb	r3, r3
 8003038:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	7b1b      	ldrb	r3, [r3, #12]
 800303e:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	7b5b      	ldrb	r3, [r3, #13]
 8003044:	733b      	strb	r3, [r7, #12]
        tempVal = ( uint32_t )( ( double )modulationParams->Params.Gfsk.Fdev / ( double )FREQ_STEP );
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	4618      	mov	r0, r3
 800304c:	f7fd fa2e 	bl	80004ac <__aeabi_ui2d>
 8003050:	a31f      	add	r3, pc, #124	; (adr r3, 80030d0 <SX126xSetModulationParams+0x128>)
 8003052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003056:	f7fd fbcd 	bl	80007f4 <__aeabi_ddiv>
 800305a:	4602      	mov	r2, r0
 800305c:	460b      	mov	r3, r1
 800305e:	4610      	mov	r0, r2
 8003060:	4619      	mov	r1, r3
 8003062:	f7fd fd37 	bl	8000ad4 <__aeabi_d2uiz>
 8003066:	4603      	mov	r3, r0
 8003068:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	0c1b      	lsrs	r3, r3, #16
 800306e:	b2db      	uxtb	r3, r3
 8003070:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	0a1b      	lsrs	r3, r3, #8
 8003076:	b2db      	uxtb	r3, r3
 8003078:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	b2db      	uxtb	r3, r3
 800307e:	73fb      	strb	r3, [r7, #15]
        SX126xWriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8003080:	7cfb      	ldrb	r3, [r7, #19]
 8003082:	b29a      	uxth	r2, r3
 8003084:	f107 0308 	add.w	r3, r7, #8
 8003088:	4619      	mov	r1, r3
 800308a:	208b      	movs	r0, #139	; 0x8b
 800308c:	f7ff fa34 	bl	80024f8 <SX126xWriteCommand>
        break;
 8003090:	e016      	b.n	80030c0 <SX126xSetModulationParams+0x118>
        n = 4;
 8003092:	2304      	movs	r3, #4
 8003094:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	7c1b      	ldrb	r3, [r3, #16]
 800309a:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	7c5b      	ldrb	r3, [r3, #17]
 80030a0:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	7c9b      	ldrb	r3, [r3, #18]
 80030a6:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	7cdb      	ldrb	r3, [r3, #19]
 80030ac:	72fb      	strb	r3, [r7, #11]
        SX126xWriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80030ae:	7cfb      	ldrb	r3, [r7, #19]
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	f107 0308 	add.w	r3, r7, #8
 80030b6:	4619      	mov	r1, r3
 80030b8:	208b      	movs	r0, #139	; 0x8b
 80030ba:	f7ff fa1d 	bl	80024f8 <SX126xWriteCommand>
        break;
 80030be:	bf00      	nop
    }
}
 80030c0:	3718      	adds	r7, #24
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	00000000 	.word	0x00000000
 80030cc:	417e8480 	.word	0x417e8480
 80030d0:	00000000 	.word	0x00000000
 80030d4:	3fee8480 	.word	0x3fee8480
 80030d8:	080071d4 	.word	0x080071d4
 80030dc:	20000155 	.word	0x20000155
 80030e0:	40400000 	.word	0x40400000

080030e4 <SX126xSetPacketParams>:

void SX126xSetPacketParams( PacketParams_t *packetParams )
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b086      	sub	sp, #24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 80030ec:	2300      	movs	r3, #0
 80030ee:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80030f0:	4a3e      	ldr	r2, [pc, #248]	; (80031ec <SX126xSetPacketParams+0x108>)
 80030f2:	f107 030c 	add.w	r3, r7, #12
 80030f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80030f8:	c303      	stmia	r3!, {r0, r1}
 80030fa:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	781a      	ldrb	r2, [r3, #0]
 8003100:	4b3b      	ldr	r3, [pc, #236]	; (80031f0 <SX126xSetPacketParams+0x10c>)
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	429a      	cmp	r2, r3
 8003106:	d004      	beq.n	8003112 <SX126xSetPacketParams+0x2e>
    {
        SX126xSetPacketType( packetParams->PacketType );
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	4618      	mov	r0, r3
 800310e:	f7ff fed1 	bl	8002eb4 <SX126xSetPacketType>
    }

    switch( packetParams->PacketType )
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d002      	beq.n	8003120 <SX126xSetPacketParams+0x3c>
 800311a:	2b01      	cmp	r3, #1
 800311c:	d042      	beq.n	80031a4 <SX126xSetPacketParams+0xc0>
        buf[4] = packetParams->Params.LoRa.CrcMode;
        buf[5] = packetParams->Params.LoRa.InvertIQ;
        break;
    default:
    case PACKET_TYPE_NONE:
        return;
 800311e:	e062      	b.n	80031e6 <SX126xSetPacketParams+0x102>
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	7a5b      	ldrb	r3, [r3, #9]
 8003124:	2bf1      	cmp	r3, #241	; 0xf1
 8003126:	d10a      	bne.n	800313e <SX126xSetPacketParams+0x5a>
            SX126xSetCrcSeed( CRC_IBM_SEED );
 8003128:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800312c:	f7ff fc3a 	bl	80029a4 <SX126xSetCrcSeed>
            SX126xSetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8003130:	f248 0005 	movw	r0, #32773	; 0x8005
 8003134:	f7ff fc56 	bl	80029e4 <SX126xSetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8003138:	2302      	movs	r3, #2
 800313a:	75bb      	strb	r3, [r7, #22]
 800313c:	e011      	b.n	8003162 <SX126xSetPacketParams+0x7e>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	7a5b      	ldrb	r3, [r3, #9]
 8003142:	2bf2      	cmp	r3, #242	; 0xf2
 8003144:	d10a      	bne.n	800315c <SX126xSetPacketParams+0x78>
            SX126xSetCrcSeed( CRC_CCITT_SEED );
 8003146:	f641 500f 	movw	r0, #7439	; 0x1d0f
 800314a:	f7ff fc2b 	bl	80029a4 <SX126xSetCrcSeed>
            SX126xSetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 800314e:	f241 0021 	movw	r0, #4129	; 0x1021
 8003152:	f7ff fc47 	bl	80029e4 <SX126xSetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8003156:	2306      	movs	r3, #6
 8003158:	75bb      	strb	r3, [r7, #22]
 800315a:	e002      	b.n	8003162 <SX126xSetPacketParams+0x7e>
            crcVal = packetParams->Params.Gfsk.CrcLength;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	7a5b      	ldrb	r3, [r3, #9]
 8003160:	75bb      	strb	r3, [r7, #22]
        n = 9;
 8003162:	2309      	movs	r3, #9
 8003164:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	885b      	ldrh	r3, [r3, #2]
 800316a:	0a1b      	lsrs	r3, r3, #8
 800316c:	b29b      	uxth	r3, r3
 800316e:	b2db      	uxtb	r3, r3
 8003170:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	885b      	ldrh	r3, [r3, #2]
 8003176:	b2db      	uxtb	r3, r3
 8003178:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	791b      	ldrb	r3, [r3, #4]
 800317e:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	795b      	ldrb	r3, [r3, #5]
 8003184:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	799b      	ldrb	r3, [r3, #6]
 800318a:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	79db      	ldrb	r3, [r3, #7]
 8003190:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	7a1b      	ldrb	r3, [r3, #8]
 8003196:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8003198:	7dbb      	ldrb	r3, [r7, #22]
 800319a:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	7a9b      	ldrb	r3, [r3, #10]
 80031a0:	753b      	strb	r3, [r7, #20]
        break;
 80031a2:	e018      	b.n	80031d6 <SX126xSetPacketParams+0xf2>
        n = 6;
 80031a4:	2306      	movs	r3, #6
 80031a6:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	899b      	ldrh	r3, [r3, #12]
 80031ac:	0a1b      	lsrs	r3, r3, #8
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	899b      	ldrh	r3, [r3, #12]
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.LoRa.HeaderType;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	7b9b      	ldrb	r3, [r3, #14]
 80031c0:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	7bdb      	ldrb	r3, [r3, #15]
 80031c6:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	7c1b      	ldrb	r3, [r3, #16]
 80031cc:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	7c5b      	ldrb	r3, [r3, #17]
 80031d2:	747b      	strb	r3, [r7, #17]
        break;
 80031d4:	bf00      	nop
    }
    SX126xWriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 80031d6:	7dfb      	ldrb	r3, [r7, #23]
 80031d8:	b29a      	uxth	r2, r3
 80031da:	f107 030c 	add.w	r3, r7, #12
 80031de:	4619      	mov	r1, r3
 80031e0:	208c      	movs	r0, #140	; 0x8c
 80031e2:	f7ff f989 	bl	80024f8 <SX126xWriteCommand>
}
 80031e6:	3718      	adds	r7, #24
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	080071dc 	.word	0x080071dc
 80031f0:	20000155 	.word	0x20000155

080031f4 <SX126xSetCadParams>:

void SX126xSetCadParams( RadioLoRaCadSymbols_t cadSymbolNum, uint8_t cadDetPeak, uint8_t cadDetMin, RadioCadExitModes_t cadExitMode, uint32_t cadTimeout )
{
 80031f4:	b590      	push	{r4, r7, lr}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	4604      	mov	r4, r0
 80031fc:	4608      	mov	r0, r1
 80031fe:	4611      	mov	r1, r2
 8003200:	461a      	mov	r2, r3
 8003202:	4623      	mov	r3, r4
 8003204:	71fb      	strb	r3, [r7, #7]
 8003206:	4603      	mov	r3, r0
 8003208:	71bb      	strb	r3, [r7, #6]
 800320a:	460b      	mov	r3, r1
 800320c:	717b      	strb	r3, [r7, #5]
 800320e:	4613      	mov	r3, r2
 8003210:	713b      	strb	r3, [r7, #4]
    uint8_t buf[7];

    buf[0] = ( uint8_t )cadSymbolNum;
 8003212:	79fb      	ldrb	r3, [r7, #7]
 8003214:	723b      	strb	r3, [r7, #8]
    buf[1] = cadDetPeak;
 8003216:	79bb      	ldrb	r3, [r7, #6]
 8003218:	727b      	strb	r3, [r7, #9]
    buf[2] = cadDetMin;
 800321a:	797b      	ldrb	r3, [r7, #5]
 800321c:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )cadExitMode;
 800321e:	793b      	ldrb	r3, [r7, #4]
 8003220:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( cadTimeout >> 16 ) & 0xFF );
 8003222:	6a3b      	ldr	r3, [r7, #32]
 8003224:	0c1b      	lsrs	r3, r3, #16
 8003226:	b2db      	uxtb	r3, r3
 8003228:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( ( cadTimeout >> 8 ) & 0xFF );
 800322a:	6a3b      	ldr	r3, [r7, #32]
 800322c:	0a1b      	lsrs	r3, r3, #8
 800322e:	b2db      	uxtb	r3, r3
 8003230:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( cadTimeout & 0xFF );
 8003232:	6a3b      	ldr	r3, [r7, #32]
 8003234:	b2db      	uxtb	r3, r3
 8003236:	73bb      	strb	r3, [r7, #14]
    SX126xWriteCommand( RADIO_SET_CADPARAMS, buf, 5 );
 8003238:	f107 0308 	add.w	r3, r7, #8
 800323c:	2205      	movs	r2, #5
 800323e:	4619      	mov	r1, r3
 8003240:	2088      	movs	r0, #136	; 0x88
 8003242:	f7ff f959 	bl	80024f8 <SX126xWriteCommand>
    OperatingMode = MODE_CAD;
 8003246:	4b03      	ldr	r3, [pc, #12]	; (8003254 <SX126xSetCadParams+0x60>)
 8003248:	2207      	movs	r2, #7
 800324a:	701a      	strb	r2, [r3, #0]
}
 800324c:	bf00      	nop
 800324e:	3714      	adds	r7, #20
 8003250:	46bd      	mov	sp, r7
 8003252:	bd90      	pop	{r4, r7, pc}
 8003254:	20000154 	.word	0x20000154

08003258 <SX126xSetBufferBaseAddress>:

void SX126xSetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	4603      	mov	r3, r0
 8003260:	460a      	mov	r2, r1
 8003262:	71fb      	strb	r3, [r7, #7]
 8003264:	4613      	mov	r3, r2
 8003266:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8003268:	79fb      	ldrb	r3, [r7, #7]
 800326a:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 800326c:	79bb      	ldrb	r3, [r7, #6]
 800326e:	737b      	strb	r3, [r7, #13]
    SX126xWriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8003270:	f107 030c 	add.w	r3, r7, #12
 8003274:	2202      	movs	r2, #2
 8003276:	4619      	mov	r1, r3
 8003278:	208f      	movs	r0, #143	; 0x8f
 800327a:	f7ff f93d 	bl	80024f8 <SX126xWriteCommand>
}
 800327e:	bf00      	nop
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <SX126xGetRssiInst>:
    status.Value = stat;
    return status;
}

int8_t SX126xGetRssiInst( void )
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b082      	sub	sp, #8
 800328a:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 800328c:	2300      	movs	r3, #0
 800328e:	71fb      	strb	r3, [r7, #7]

    SX126xReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8003290:	1d3b      	adds	r3, r7, #4
 8003292:	2201      	movs	r2, #1
 8003294:	4619      	mov	r1, r3
 8003296:	2015      	movs	r0, #21
 8003298:	f7ff f968 	bl	800256c <SX126xReadCommand>
    rssi = -buf[0] >> 1;
 800329c:	793b      	ldrb	r3, [r7, #4]
 800329e:	425b      	negs	r3, r3
 80032a0:	105b      	asrs	r3, r3, #1
 80032a2:	71fb      	strb	r3, [r7, #7]
    return rssi;
 80032a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3708      	adds	r7, #8
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <SX126xGetRxBufferStatus>:

void SX126xGetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SX126xReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 80032ba:	f107 030c 	add.w	r3, r7, #12
 80032be:	2202      	movs	r2, #2
 80032c0:	4619      	mov	r1, r3
 80032c2:	2013      	movs	r0, #19
 80032c4:	f7ff f952 	bl	800256c <SX126xReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SX126xGetPacketType( ) == PACKET_TYPE_LORA ) && ( SX126xReadRegister( REG_LR_PACKETPARAMS ) >> 7 == 1 ) )
 80032c8:	f7ff fe08 	bl	8002edc <SX126xGetPacketType>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d111      	bne.n	80032f6 <SX126xGetRxBufferStatus+0x46>
 80032d2:	f240 7004 	movw	r0, #1796	; 0x704
 80032d6:	f7ff fa25 	bl	8002724 <SX126xReadRegister>
 80032da:	4603      	mov	r3, r0
 80032dc:	09db      	lsrs	r3, r3, #7
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d108      	bne.n	80032f6 <SX126xGetRxBufferStatus+0x46>
    {
        *payloadLength = SX126xReadRegister( REG_LR_PAYLOADLENGTH );
 80032e4:	f240 7002 	movw	r0, #1794	; 0x702
 80032e8:	f7ff fa1c 	bl	8002724 <SX126xReadRegister>
 80032ec:	4603      	mov	r3, r0
 80032ee:	461a      	mov	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	701a      	strb	r2, [r3, #0]
 80032f4:	e002      	b.n	80032fc <SX126xGetRxBufferStatus+0x4c>
    }
    else
    {
        *payloadLength = status[0];
 80032f6:	7b3a      	ldrb	r2, [r7, #12]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 80032fc:	7b7a      	ldrb	r2, [r7, #13]
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	701a      	strb	r2, [r3, #0]
}
 8003302:	bf00      	nop
 8003304:	3710      	adds	r7, #16
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
	...

0800330c <SX126xGetPacketStatus>:

void SX126xGetPacketStatus( PacketStatus_t *pktStatus )
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SX126xReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8003314:	f107 030c 	add.w	r3, r7, #12
 8003318:	2203      	movs	r2, #3
 800331a:	4619      	mov	r1, r3
 800331c:	2014      	movs	r0, #20
 800331e:	f7ff f925 	bl	800256c <SX126xReadCommand>

    pktStatus->packetType = SX126xGetPacketType( );
 8003322:	f7ff fddb 	bl	8002edc <SX126xGetPacketType>
 8003326:	4603      	mov	r3, r0
 8003328:	461a      	mov	r2, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d002      	beq.n	800333c <SX126xGetPacketStatus+0x30>
 8003336:	2b01      	cmp	r3, #1
 8003338:	d013      	beq.n	8003362 <SX126xGetPacketStatus+0x56>
 800333a:	e035      	b.n	80033a8 <SX126xGetPacketStatus+0x9c>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800333c:	7b3a      	ldrb	r2, [r7, #12]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8003342:	7b7b      	ldrb	r3, [r7, #13]
 8003344:	425b      	negs	r3, r3
 8003346:	105b      	asrs	r3, r3, #1
 8003348:	b25a      	sxtb	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800334e:	7bbb      	ldrb	r3, [r7, #14]
 8003350:	425b      	negs	r3, r3
 8003352:	105b      	asrs	r3, r3, #1
 8003354:	b25a      	sxtb	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	609a      	str	r2, [r3, #8]
            break;
 8003360:	e02b      	b.n	80033ba <SX126xGetPacketStatus+0xae>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8003362:	7b3b      	ldrb	r3, [r7, #12]
 8003364:	425b      	negs	r3, r3
 8003366:	105b      	asrs	r3, r3, #1
 8003368:	b25a      	sxtb	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	731a      	strb	r2, [r3, #12]
            ( status[1] < 128 ) ? ( pktStatus->Params.LoRa.SnrPkt = status[1] >> 2 ) : ( pktStatus->Params.LoRa.SnrPkt = ( ( status[1] - 256 ) >> 2 ) );
 800336e:	7b7b      	ldrb	r3, [r7, #13]
 8003370:	b25b      	sxtb	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	db06      	blt.n	8003384 <SX126xGetPacketStatus+0x78>
 8003376:	7b7b      	ldrb	r3, [r7, #13]
 8003378:	089b      	lsrs	r3, r3, #2
 800337a:	b2db      	uxtb	r3, r3
 800337c:	b25a      	sxtb	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	735a      	strb	r2, [r3, #13]
 8003382:	e006      	b.n	8003392 <SX126xGetPacketStatus+0x86>
 8003384:	7b7b      	ldrb	r3, [r7, #13]
 8003386:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800338a:	109b      	asrs	r3, r3, #2
 800338c:	b25a      	sxtb	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8003392:	7bbb      	ldrb	r3, [r7, #14]
 8003394:	425b      	negs	r3, r3
 8003396:	105b      	asrs	r3, r3, #1
 8003398:	b25a      	sxtb	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800339e:	4b09      	ldr	r3, [pc, #36]	; (80033c4 <SX126xGetPacketStatus+0xb8>)
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	611a      	str	r2, [r3, #16]
            break;
 80033a6:	e008      	b.n	80033ba <SX126xGetPacketStatus+0xae>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            memset( pktStatus, 0, sizeof( PacketStatus_t ) );
 80033a8:	2214      	movs	r2, #20
 80033aa:	2100      	movs	r1, #0
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f003 f8b5 	bl	800651c <memset>
            pktStatus->packetType = PACKET_TYPE_NONE;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	220f      	movs	r2, #15
 80033b6:	701a      	strb	r2, [r3, #0]
            break;
 80033b8:	bf00      	nop
    }
}
 80033ba:	bf00      	nop
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	20000158 	.word	0x20000158

080033c8 <SX126xClearIrqStatus>:
    uint8_t buf[2] = { 0x00, 0x00 };
    SX126xWriteCommand( RADIO_CLR_ERROR, buf, 2 );
}

void SX126xClearIrqStatus( uint16_t irq )
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	4603      	mov	r3, r0
 80033d0:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( ( uint16_t )irq >> 8 ) & 0x00FF );
 80033d2:	88fb      	ldrh	r3, [r7, #6]
 80033d4:	0a1b      	lsrs	r3, r3, #8
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
 80033dc:	88fb      	ldrh	r3, [r7, #6]
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	737b      	strb	r3, [r7, #13]
    SX126xWriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
 80033e2:	f107 030c 	add.w	r3, r7, #12
 80033e6:	2202      	movs	r2, #2
 80033e8:	4619      	mov	r1, r3
 80033ea:	2002      	movs	r0, #2
 80033ec:	f7ff f884 	bl	80024f8 <SX126xWriteCommand>
}
 80033f0:	bf00      	nop
 80033f2:	3710      	adds	r7, #16
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <app_debug_rtt_raw>:
    
    return n;
}

int32_t app_debug_rtt_raw(const char *fmt,...)
{
 80033f8:	b40f      	push	{r0, r1, r2, r3}
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b084      	sub	sp, #16
 80033fe:	af00      	add	r7, sp, #0
    int32_t     n;

    char *p = &m_debug_buffer[0];
 8003400:	4b16      	ldr	r3, [pc, #88]	; (800345c <app_debug_rtt_raw+0x64>)
 8003402:	60fb      	str	r3, [r7, #12]
    int32_t size = SEGGER_RTT_PRINTF_BUFFER_SIZE;
 8003404:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003408:	60bb      	str	r3, [r7, #8]
    va_list args;

    va_start (args, fmt);
 800340a:	f107 031c 	add.w	r3, r7, #28
 800340e:	603b      	str	r3, [r7, #0]
    n = vsnprintf(p, size, fmt, args);
 8003410:	68b9      	ldr	r1, [r7, #8]
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f003 f93e 	bl	8006698 <vsniprintf>
 800341c:	6078      	str	r0, [r7, #4]
    if (n > (int)size) 
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	429a      	cmp	r2, r3
 8003424:	dd07      	ble.n	8003436 <app_debug_rtt_raw+0x3e>
    {
    	User_Uart_AsyncTransmit(USER_UART_CHANNEL_USART1, m_debug_buffer, size);
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	b29b      	uxth	r3, r3
 800342a:	461a      	mov	r2, r3
 800342c:	490b      	ldr	r1, [pc, #44]	; (800345c <app_debug_rtt_raw+0x64>)
 800342e:	2003      	movs	r0, #3
 8003430:	f000 f9b2 	bl	8003798 <User_Uart_AsyncTransmit>
 8003434:	e009      	b.n	800344a <app_debug_rtt_raw+0x52>
        //SEGGER_RTT_Write(0, m_debug_buffer, size);
    } 
    else if (n > 0) 
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2b00      	cmp	r3, #0
 800343a:	dd06      	ble.n	800344a <app_debug_rtt_raw+0x52>
    {
    	User_Uart_AsyncTransmit(USER_UART_CHANNEL_USART1, m_debug_buffer, n);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	b29b      	uxth	r3, r3
 8003440:	461a      	mov	r2, r3
 8003442:	4906      	ldr	r1, [pc, #24]	; (800345c <app_debug_rtt_raw+0x64>)
 8003444:	2003      	movs	r0, #3
 8003446:	f000 f9a7 	bl	8003798 <User_Uart_AsyncTransmit>
        //SEGGER_RTT_Write(0, m_debug_buffer, n);
    }
    va_end(args);
    
    return n;
 800344a:	687b      	ldr	r3, [r7, #4]
}
 800344c:	4618      	mov	r0, r3
 800344e:	3710      	adds	r7, #16
 8003450:	46bd      	mov	sp, r7
 8003452:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003456:	b004      	add	sp, #16
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	20000160 	.word	0x20000160

08003460 <sys_get_tick_ms>:
    }
}


uint32_t sys_get_tick_ms()
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8003464:	f000 fd56 	bl	8003f14 <HAL_GetTick>
 8003468:	4603      	mov	r3, r0
}
 800346a:	4618      	mov	r0, r3
 800346c:	bd80      	pop	{r7, pc}
	...

08003470 <Button_AddEvent>:



static Button_Event	ButtonCallBack[NUMBER_BUTTON][NUMBER_EVENT];
void Button_AddEvent(uint8_t button_id,button_event event,void (*func)())
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	4603      	mov	r3, r0
 8003478:	603a      	str	r2, [r7, #0]
 800347a:	71fb      	strb	r3, [r7, #7]
 800347c:	460b      	mov	r3, r1
 800347e:	71bb      	strb	r3, [r7, #6]
	ButtonCallBack[button_id][event] = func;
 8003480:	79fa      	ldrb	r2, [r7, #7]
 8003482:	79b9      	ldrb	r1, [r7, #6]
 8003484:	4806      	ldr	r0, [pc, #24]	; (80034a0 <Button_AddEvent+0x30>)
 8003486:	4613      	mov	r3, r2
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	4413      	add	r3, r2
 800348c:	440b      	add	r3, r1
 800348e:	683a      	ldr	r2, [r7, #0]
 8003490:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8003494:	bf00      	nop
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	bc80      	pop	{r7}
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	20000260 	.word	0x20000260

080034a4 <button_init>:
}
/*
 * Config CubeMX for Button GPIO
 */
void button_init(Button *btn,GPIO_TypeDef *port,uint16_t pin,Button_active_t button_active,uint8_t button_id)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	4611      	mov	r1, r2
 80034b0:	461a      	mov	r2, r3
 80034b2:	460b      	mov	r3, r1
 80034b4:	80fb      	strh	r3, [r7, #6]
 80034b6:	4613      	mov	r3, r2
 80034b8:	717b      	strb	r3, [r7, #5]
	btn->last_status = 1;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2201      	movs	r2, #1
 80034be:	71da      	strb	r2, [r3, #7]
	btn->button_id = button_id;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	7e3a      	ldrb	r2, [r7, #24]
 80034c4:	749a      	strb	r2, [r3, #18]
	btn->gpio_pin = pin;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	88fa      	ldrh	r2, [r7, #6]
 80034ca:	809a      	strh	r2, [r3, #4]
	btn->gpio_port = port;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	68ba      	ldr	r2, [r7, #8]
 80034d0:	601a      	str	r2, [r3, #0]
	btn->current_status = 1;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2201      	movs	r2, #1
 80034d6:	719a      	strb	r2, [r3, #6]
	btn->button_state = BUTTON_READ;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	741a      	strb	r2, [r3, #16]
	btn->button_active = button_active;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	797a      	ldrb	r2, [r7, #5]
 80034e2:	745a      	strb	r2, [r3, #17]
}
 80034e4:	bf00      	nop
 80034e6:	3714      	adds	r7, #20
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bc80      	pop	{r7}
 80034ec:	4770      	bx	lr
	...

080034f0 <button_check>:
void button_check(Button *button)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
	button->current_status = HAL_GPIO_ReadPin(button->gpio_port, button->gpio_pin);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	889b      	ldrh	r3, [r3, #4]
 8003500:	4619      	mov	r1, r3
 8003502:	4610      	mov	r0, r2
 8003504:	f001 fbea 	bl	8004cdc <HAL_GPIO_ReadPin>
 8003508:	4603      	mov	r3, r0
 800350a:	461a      	mov	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	719a      	strb	r2, [r3, #6]
	if(button->button_active == BUTTON_ACTIVE_HIGH)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	7c5b      	ldrb	r3, [r3, #17]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d109      	bne.n	800352c <button_check+0x3c>
	{
		button->current_status = !button->current_status;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	799b      	ldrb	r3, [r3, #6]
 800351c:	2b00      	cmp	r3, #0
 800351e:	bf0c      	ite	eq
 8003520:	2301      	moveq	r3, #1
 8003522:	2300      	movne	r3, #0
 8003524:	b2db      	uxtb	r3, r3
 8003526:	461a      	mov	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	719a      	strb	r2, [r3, #6]
	}
	switch(button->button_state)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	7c1b      	ldrb	r3, [r3, #16]
 8003530:	2b03      	cmp	r3, #3
 8003532:	f200 80d9 	bhi.w	80036e8 <button_check+0x1f8>
 8003536:	a201      	add	r2, pc, #4	; (adr r2, 800353c <button_check+0x4c>)
 8003538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800353c:	0800354d 	.word	0x0800354d
 8003540:	08003573 	.word	0x08003573
 8003544:	08003655 	.word	0x08003655
 8003548:	080036c1 	.word	0x080036c1
	{
		case BUTTON_READ:
		{
			if(button->current_status == 0 && button->last_status == 1)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	799b      	ldrb	r3, [r3, #6]
 8003550:	2b00      	cmp	r3, #0
 8003552:	f040 80cb 	bne.w	80036ec <button_check+0x1fc>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	79db      	ldrb	r3, [r3, #7]
 800355a:	2b01      	cmp	r3, #1
 800355c:	f040 80c6 	bne.w	80036ec <button_check+0x1fc>
			{
				button->time_debounce = HAL_GetTick();
 8003560:	f000 fcd8 	bl	8003f14 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	609a      	str	r2, [r3, #8]
				button->button_state = BUTTON_WAIT_DEBOUND;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2201      	movs	r2, #1
 800356e:	741a      	strb	r2, [r3, #16]
			}
		}
		break;
 8003570:	e0bc      	b.n	80036ec <button_check+0x1fc>
		case BUTTON_WAIT_DEBOUND:
		{
			if( (HAL_GetTick() - button->time_debounce) > BUTTON_DEBOUND_WAIT)
 8003572:	f000 fccf 	bl	8003f14 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b14      	cmp	r3, #20
 8003580:	f240 80b6 	bls.w	80036f0 <button_check+0x200>
			{
				if(button->current_status == 0 && button->last_status == 1) // Button is pressed
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	799b      	ldrb	r3, [r3, #6]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d126      	bne.n	80035da <button_check+0xea>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	79db      	ldrb	r3, [r3, #7]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d122      	bne.n	80035da <button_check+0xea>
				{
					if( ButtonCallBack[button->button_id][BUTTON_PRESSED_EVENT] != NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	7c9b      	ldrb	r3, [r3, #18]
 8003598:	4619      	mov	r1, r3
 800359a:	4a5a      	ldr	r2, [pc, #360]	; (8003704 <button_check+0x214>)
 800359c:	460b      	mov	r3, r1
 800359e:	005b      	lsls	r3, r3, #1
 80035a0:	440b      	add	r3, r1
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	4413      	add	r3, r2
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00a      	beq.n	80035c2 <button_check+0xd2>
					{
						ButtonCallBack[button->button_id][BUTTON_PRESSED_EVENT]();
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	7c9b      	ldrb	r3, [r3, #18]
 80035b0:	4619      	mov	r1, r3
 80035b2:	4a54      	ldr	r2, [pc, #336]	; (8003704 <button_check+0x214>)
 80035b4:	460b      	mov	r3, r1
 80035b6:	005b      	lsls	r3, r3, #1
 80035b8:	440b      	add	r3, r1
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	4413      	add	r3, r2
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4798      	blx	r3
					}

					button->t_long_press = HAL_GetTick();
 80035c2:	f000 fca7 	bl	8003f14 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	60da      	str	r2, [r3, #12]
					button->button_state = BUTTON_WAIT_RELEASE_AND_CHECK_LONG_PRESS;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2202      	movs	r2, #2
 80035d0:	741a      	strb	r2, [r3, #16]
					button->last_status = 0; //
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	71da      	strb	r2, [r3, #7]
 80035d8:	e03b      	b.n	8003652 <button_check+0x162>
				}
				else if(button->current_status == 1 && button->last_status == 0)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	799b      	ldrb	r3, [r3, #6]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d130      	bne.n	8003644 <button_check+0x154>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	79db      	ldrb	r3, [r3, #7]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d12c      	bne.n	8003644 <button_check+0x154>
				{
					button->t_long_press = HAL_GetTick() - button->t_long_press;
 80035ea:	f000 fc93 	bl	8003f14 <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	1ad2      	subs	r2, r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	60da      	str	r2, [r3, #12]
					if(button->t_long_press >= BUTTON_SHORTHPRESS)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003602:	d318      	bcc.n	8003636 <button_check+0x146>
					{
						if( ButtonCallBack[button->button_id][BUTTON_SHORTPRESSED_EVENT] != NULL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	7c9b      	ldrb	r3, [r3, #18]
 8003608:	4619      	mov	r1, r3
 800360a:	4a3e      	ldr	r2, [pc, #248]	; (8003704 <button_check+0x214>)
 800360c:	460b      	mov	r3, r1
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	440b      	add	r3, r1
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	4413      	add	r3, r2
 8003616:	3308      	adds	r3, #8
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00b      	beq.n	8003636 <button_check+0x146>
						{
							ButtonCallBack[button->button_id][BUTTON_SHORTPRESSED_EVENT]();
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	7c9b      	ldrb	r3, [r3, #18]
 8003622:	4619      	mov	r1, r3
 8003624:	4a37      	ldr	r2, [pc, #220]	; (8003704 <button_check+0x214>)
 8003626:	460b      	mov	r3, r1
 8003628:	005b      	lsls	r3, r3, #1
 800362a:	440b      	add	r3, r1
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	4413      	add	r3, r2
 8003630:	3308      	adds	r3, #8
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4798      	blx	r3
						}
						//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
					}
					button->last_status = 1;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2201      	movs	r2, #1
 800363a:	71da      	strb	r2, [r3, #7]
					button->button_state = BUTTON_READ;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	741a      	strb	r2, [r3, #16]
 8003642:	e006      	b.n	8003652 <button_check+0x162>
				}
				else
				{
					button->last_status = 1;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	71da      	strb	r2, [r3, #7]
					button->button_state = BUTTON_READ;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	741a      	strb	r2, [r3, #16]
				}
			}
		}
		break;
 8003650:	e04e      	b.n	80036f0 <button_check+0x200>
 8003652:	e04d      	b.n	80036f0 <button_check+0x200>
		case BUTTON_WAIT_RELEASE_AND_CHECK_LONG_PRESS:
		{
			if(button->current_status == 1 && button->last_status == 0)// No pressing
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	799b      	ldrb	r3, [r3, #6]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d107      	bne.n	800366c <button_check+0x17c>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	79db      	ldrb	r3, [r3, #7]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d103      	bne.n	800366c <button_check+0x17c>
			{
				//button->last_status = 1;
				button->button_state = BUTTON_WAIT_DEBOUND;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	741a      	strb	r2, [r3, #16]
				}
				button->last_status = 0;
				button->button_state = BUTTON_WAIT_RELEASE;
			}
		}
		break;
 800366a:	e043      	b.n	80036f4 <button_check+0x204>
			else if((HAL_GetTick() - button->t_long_press) > BUTTON_LONGPRESS)
 800366c:	f000 fc52 	bl	8003f14 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800367c:	4293      	cmp	r3, r2
 800367e:	d939      	bls.n	80036f4 <button_check+0x204>
				if( ButtonCallBack[button->button_id][BUTTON_LONGPRESSED_EVENT] != NULL)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	7c9b      	ldrb	r3, [r3, #18]
 8003684:	4619      	mov	r1, r3
 8003686:	4a1f      	ldr	r2, [pc, #124]	; (8003704 <button_check+0x214>)
 8003688:	460b      	mov	r3, r1
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	440b      	add	r3, r1
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	4413      	add	r3, r2
 8003692:	3304      	adds	r3, #4
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00b      	beq.n	80036b2 <button_check+0x1c2>
					ButtonCallBack[button->button_id][BUTTON_LONGPRESSED_EVENT]();
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	7c9b      	ldrb	r3, [r3, #18]
 800369e:	4619      	mov	r1, r3
 80036a0:	4a18      	ldr	r2, [pc, #96]	; (8003704 <button_check+0x214>)
 80036a2:	460b      	mov	r3, r1
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	440b      	add	r3, r1
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	4413      	add	r3, r2
 80036ac:	3304      	adds	r3, #4
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4798      	blx	r3
				button->last_status = 0;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	71da      	strb	r2, [r3, #7]
				button->button_state = BUTTON_WAIT_RELEASE;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2203      	movs	r2, #3
 80036bc:	741a      	strb	r2, [r3, #16]
		break;
 80036be:	e019      	b.n	80036f4 <button_check+0x204>
		case BUTTON_WAIT_RELEASE:
		{
			if(button->current_status == 1 && button->last_status == 0)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	799b      	ldrb	r3, [r3, #6]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d117      	bne.n	80036f8 <button_check+0x208>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	79db      	ldrb	r3, [r3, #7]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d113      	bne.n	80036f8 <button_check+0x208>
			{

				button->button_state = BUTTON_READ;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	741a      	strb	r2, [r3, #16]
				button->last_status = 1;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	71da      	strb	r2, [r3, #7]
				button->time_debounce = HAL_GetTick();
 80036dc:	f000 fc1a 	bl	8003f14 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	609a      	str	r2, [r3, #8]
			}
		}
		break;
 80036e6:	e007      	b.n	80036f8 <button_check+0x208>
		default :
		break;
 80036e8:	bf00      	nop
 80036ea:	e006      	b.n	80036fa <button_check+0x20a>
		break;
 80036ec:	bf00      	nop
 80036ee:	e004      	b.n	80036fa <button_check+0x20a>
		break;
 80036f0:	bf00      	nop
 80036f2:	e002      	b.n	80036fa <button_check+0x20a>
		break;
 80036f4:	bf00      	nop
 80036f6:	e000      	b.n	80036fa <button_check+0x20a>
		break;
 80036f8:	bf00      	nop
	}
}
 80036fa:	bf00      	nop
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	20000260 	.word	0x20000260

08003708 <User_Uart_Init>:
#include "User_Uart.h"
static User_Uart_ConfigType *ConfigPtr = NULL;
static uint8_t User_Uart_RxBuffer[USER_UART_NUMBEROFCHANNEL_USED][USER_UART_MAX_MESSAGE_LENGHH];

void User_Uart_Init(const User_Uart_ConfigType *UartConfing)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b088      	sub	sp, #32
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
	User_Uart_HwConfigType HwConfig;
	uint8_t u8CountChannel;
	ConfigPtr = (User_Uart_ConfigType*) UartConfing;
 8003710:	4a20      	ldr	r2, [pc, #128]	; (8003794 <User_Uart_Init+0x8c>)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6013      	str	r3, [r2, #0]

	for ( u8CountChannel = 0 ; u8CountChannel <UartConfing->NumberofChannel; u8CountChannel++)
 8003716:	2300      	movs	r3, #0
 8003718:	77fb      	strb	r3, [r7, #31]
 800371a:	e031      	b.n	8003780 <User_Uart_Init+0x78>
	{
		HwConfig.ParityMode = UartConfing->ChannelConfigType[u8CountChannel].ParityMode;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685a      	ldr	r2, [r3, #4]
 8003720:	7ffb      	ldrb	r3, [r7, #31]
 8003722:	011b      	lsls	r3, r3, #4
 8003724:	4413      	add	r3, r2
 8003726:	7b1b      	ldrb	r3, [r3, #12]
 8003728:	763b      	strb	r3, [r7, #24]
		HwConfig.SlipStatus = UartConfing->ChannelConfigType[u8CountChannel].SlipStatus;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685a      	ldr	r2, [r3, #4]
 800372e:	7ffb      	ldrb	r3, [r7, #31]
 8003730:	011b      	lsls	r3, r3, #4
 8003732:	4413      	add	r3, r2
 8003734:	7b9b      	ldrb	r3, [r3, #14]
 8003736:	76bb      	strb	r3, [r7, #26]
		HwConfig.StopBitCount = UartConfing->ChannelConfigType[u8CountChannel].StopBitCount;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685a      	ldr	r2, [r3, #4]
 800373c:	7ffb      	ldrb	r3, [r7, #31]
 800373e:	011b      	lsls	r3, r3, #4
 8003740:	4413      	add	r3, r2
 8003742:	7b5b      	ldrb	r3, [r3, #13]
 8003744:	767b      	strb	r3, [r7, #25]
		HwConfig.u32BaudRate = UartConfing->ChannelConfigType[u8CountChannel].u32BaudRate;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685a      	ldr	r2, [r3, #4]
 800374a:	7ffb      	ldrb	r3, [r7, #31]
 800374c:	011b      	lsls	r3, r3, #4
 800374e:	4413      	add	r3, r2
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	617b      	str	r3, [r7, #20]
		HwConfig.u32SourceClock = UartConfing->ChannelConfigType[u8CountChannel].u32SourceClock;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685a      	ldr	r2, [r3, #4]
 8003758:	7ffb      	ldrb	r3, [r7, #31]
 800375a:	011b      	lsls	r3, r3, #4
 800375c:	4413      	add	r3, r2
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	613b      	str	r3, [r7, #16]
		HwConfig.u8ChannelID = UartConfing->ChannelConfigType[u8CountChannel].u8ChannelID;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685a      	ldr	r2, [r3, #4]
 8003766:	7ffb      	ldrb	r3, [r7, #31]
 8003768:	011b      	lsls	r3, r3, #4
 800376a:	4413      	add	r3, r2
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	733b      	strb	r3, [r7, #12]
		User_Uart_Ipw_Init(&HwConfig);
 8003770:	f107 030c 	add.w	r3, r7, #12
 8003774:	4618      	mov	r0, r3
 8003776:	f000 f85d 	bl	8003834 <User_Uart_Ipw_Init>
	for ( u8CountChannel = 0 ; u8CountChannel <UartConfing->NumberofChannel; u8CountChannel++)
 800377a:	7ffb      	ldrb	r3, [r7, #31]
 800377c:	3301      	adds	r3, #1
 800377e:	77fb      	strb	r3, [r7, #31]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	7ffa      	ldrb	r2, [r7, #31]
 8003786:	429a      	cmp	r2, r3
 8003788:	d3c8      	bcc.n	800371c <User_Uart_Init+0x14>
	}
}
 800378a:	bf00      	nop
 800378c:	bf00      	nop
 800378e:	3720      	adds	r7, #32
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	20000284 	.word	0x20000284

08003798 <User_Uart_AsyncTransmit>:

Std_ReturnType User_Uart_AsyncTransmit(uint8_t u8ChannelID, uint8_t *u8DatPtr,uint16_t u16Datalen)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	4603      	mov	r3, r0
 80037a0:	6039      	str	r1, [r7, #0]
 80037a2:	71fb      	strb	r3, [r7, #7]
 80037a4:	4613      	mov	r3, r2
 80037a6:	80bb      	strh	r3, [r7, #4]
	Std_ReturnType ret = E_NOT_OK;
 80037a8:	2301      	movs	r3, #1
 80037aa:	73fb      	strb	r3, [r7, #15]
	uint8_t u8Count;
	uint8_t ChannelID = 0xFFU;
 80037ac:	23ff      	movs	r3, #255	; 0xff
 80037ae:	737b      	strb	r3, [r7, #13]
	if (ConfigPtr == NULL)
 80037b0:	4b1f      	ldr	r3, [pc, #124]	; (8003830 <User_Uart_AsyncTransmit+0x98>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d101      	bne.n	80037bc <User_Uart_AsyncTransmit+0x24>
	{
		return E_NOT_OK;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e034      	b.n	8003826 <User_Uart_AsyncTransmit+0x8e>
	}
	if (u8DatPtr == NULL)
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <User_Uart_AsyncTransmit+0x2e>
	{
		return E_NOT_OK;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e02f      	b.n	8003826 <User_Uart_AsyncTransmit+0x8e>
	}
	for( u8Count = 0;  u8Count < ConfigPtr->NumberofChannel ; u8Count++)
 80037c6:	2300      	movs	r3, #0
 80037c8:	73bb      	strb	r3, [r7, #14]
 80037ca:	e00f      	b.n	80037ec <User_Uart_AsyncTransmit+0x54>
	{
		if(ConfigPtr->ChannelConfigType[u8Count].u8ChannelID == u8ChannelID )
 80037cc:	4b18      	ldr	r3, [pc, #96]	; (8003830 <User_Uart_AsyncTransmit+0x98>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	7bbb      	ldrb	r3, [r7, #14]
 80037d4:	011b      	lsls	r3, r3, #4
 80037d6:	4413      	add	r3, r2
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	79fa      	ldrb	r2, [r7, #7]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d102      	bne.n	80037e6 <User_Uart_AsyncTransmit+0x4e>
		{
			ChannelID = u8Count;
 80037e0:	7bbb      	ldrb	r3, [r7, #14]
 80037e2:	737b      	strb	r3, [r7, #13]
			break;
 80037e4:	e008      	b.n	80037f8 <User_Uart_AsyncTransmit+0x60>
	for( u8Count = 0;  u8Count < ConfigPtr->NumberofChannel ; u8Count++)
 80037e6:	7bbb      	ldrb	r3, [r7, #14]
 80037e8:	3301      	adds	r3, #1
 80037ea:	73bb      	strb	r3, [r7, #14]
 80037ec:	4b10      	ldr	r3, [pc, #64]	; (8003830 <User_Uart_AsyncTransmit+0x98>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	7bba      	ldrb	r2, [r7, #14]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d3e9      	bcc.n	80037cc <User_Uart_AsyncTransmit+0x34>
		}
	}
	if (ChannelID == 0xFFU)
 80037f8:	7b7b      	ldrb	r3, [r7, #13]
 80037fa:	2bff      	cmp	r3, #255	; 0xff
 80037fc:	d101      	bne.n	8003802 <User_Uart_AsyncTransmit+0x6a>
	{
		return E_NOT_OK;
 80037fe:	2301      	movs	r3, #1
 8003800:	e011      	b.n	8003826 <User_Uart_AsyncTransmit+0x8e>
	}
	if (ConfigPtr->ChannelConfigType[ChannelID].SlipStatus == USER_UART_SLIPSTATUS_ENABLE)
 8003802:	4b0b      	ldr	r3, [pc, #44]	; (8003830 <User_Uart_AsyncTransmit+0x98>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	685a      	ldr	r2, [r3, #4]
 8003808:	7b7b      	ldrb	r3, [r7, #13]
 800380a:	011b      	lsls	r3, r3, #4
 800380c:	4413      	add	r3, r2
 800380e:	7b9b      	ldrb	r3, [r3, #14]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d007      	beq.n	8003824 <User_Uart_AsyncTransmit+0x8c>
	{
	//	ret = User_Uart_Ipw_SlipSend();
	}
	else
	{
		ret = User_Uart_Ipw_AsyncTransmit(u8ChannelID,u8DatPtr,u16Datalen);
 8003814:	88ba      	ldrh	r2, [r7, #4]
 8003816:	79fb      	ldrb	r3, [r7, #7]
 8003818:	6839      	ldr	r1, [r7, #0]
 800381a:	4618      	mov	r0, r3
 800381c:	f000 f823 	bl	8003866 <User_Uart_Ipw_AsyncTransmit>
 8003820:	4603      	mov	r3, r0
 8003822:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8003824:	7bfb      	ldrb	r3, [r7, #15]
}
 8003826:	4618      	mov	r0, r3
 8003828:	3710      	adds	r7, #16
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	20000284 	.word	0x20000284

08003834 <User_Uart_Ipw_Init>:
 *      Author: Admin
 */
#include "User_Uart_Ipw.h"

void User_Uart_Ipw_Init(User_Uart_HwConfigType *HwConfig)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]

	if ((HwConfig->u8ChannelID >= USER_UART_CHANNEL_USART1) && (HwConfig->u8ChannelID <= USER_UART_CHANNEL_USART6))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	2b02      	cmp	r3, #2
 8003842:	d909      	bls.n	8003858 <User_Uart_Ipw_Init+0x24>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	2b08      	cmp	r3, #8
 800384a:	d805      	bhi.n	8003858 <User_Uart_Ipw_Init+0x24>
	{
		HwConfig->u8ChannelID = HwConfig->u8ChannelID - USER_UART_CHANNEL_USART1;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	3b03      	subs	r3, #3
 8003852:	b2da      	uxtb	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	701a      	strb	r2, [r3, #0]
	}
	User_Ip_Usart_Init(HwConfig);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 f8ef 	bl	8003a3c <User_Ip_Usart_Init>
}
 800385e:	bf00      	nop
 8003860:	3708      	adds	r7, #8
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <User_Uart_Ipw_AsyncTransmit>:
Std_ReturnType User_Uart_Ipw_AsyncTransmit(uint8_t u8Channel, uint8_t *u8Data, uint16_t u16DataLen)
{
 8003866:	b580      	push	{r7, lr}
 8003868:	b084      	sub	sp, #16
 800386a:	af00      	add	r7, sp, #0
 800386c:	4603      	mov	r3, r0
 800386e:	6039      	str	r1, [r7, #0]
 8003870:	71fb      	strb	r3, [r7, #7]
 8003872:	4613      	mov	r3, r2
 8003874:	80bb      	strh	r3, [r7, #4]
	Std_ReturnType ret = E_NOT_OK;
 8003876:	2301      	movs	r3, #1
 8003878:	73fb      	strb	r3, [r7, #15]

	if ((u8Channel >= USER_UART_CHANNEL_USART1) && (u8Channel <= USER_UART_CHANNEL_USART6))
 800387a:	79fb      	ldrb	r3, [r7, #7]
 800387c:	2b02      	cmp	r3, #2
 800387e:	d90d      	bls.n	800389c <User_Uart_Ipw_AsyncTransmit+0x36>
 8003880:	79fb      	ldrb	r3, [r7, #7]
 8003882:	2b08      	cmp	r3, #8
 8003884:	d80a      	bhi.n	800389c <User_Uart_Ipw_AsyncTransmit+0x36>
	{
		u8Channel = u8Channel - USER_UART_CHANNEL_USART1;
 8003886:	79fb      	ldrb	r3, [r7, #7]
 8003888:	3b03      	subs	r3, #3
 800388a:	71fb      	strb	r3, [r7, #7]
		ret = User_Ip_Usart_WriteBuffer(u8Channel, u8Data, u16DataLen);
 800388c:	88ba      	ldrh	r2, [r7, #4]
 800388e:	79fb      	ldrb	r3, [r7, #7]
 8003890:	6839      	ldr	r1, [r7, #0]
 8003892:	4618      	mov	r0, r3
 8003894:	f000 f986 	bl	8003ba4 <User_Ip_Usart_WriteBuffer>
 8003898:	4603      	mov	r3, r0
 800389a:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 800389c:	7bfb      	ldrb	r3, [r7, #15]
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <User_Ip_Usart_SetBaurate>:


static User_Ip_RingBuffer_t *User_Ip_Usart_GetBuffer(uint8_t u8ChannelID);

static Std_ReturnType User_Ip_Usart_SetBaurate(User_Ip_Usart_Type *HwChannel, uint32_t u32SoureClock, uint32_t u32Baudrate)
{
 80038a6:	b480      	push	{r7}
 80038a8:	b089      	sub	sp, #36	; 0x24
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	60f8      	str	r0, [r7, #12]
 80038ae:	60b9      	str	r1, [r7, #8]
 80038b0:	607a      	str	r2, [r7, #4]
	Std_ReturnType ret = E_NOT_OK;
 80038b2:	2301      	movs	r3, #1
 80038b4:	77fb      	strb	r3, [r7, #31]
	uint32_t DIV_Mantissa = 0;
 80038b6:	2300      	movs	r3, #0
 80038b8:	61bb      	str	r3, [r7, #24]
	uint16_t DIV_Fraction = 0;
 80038ba:	2300      	movs	r3, #0
 80038bc:	82fb      	strh	r3, [r7, #22]
	if (u32Baudrate < 4800)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
 80038c4:	d202      	bcs.n	80038cc <User_Ip_Usart_SetBaurate+0x26>
	{
		ret = E_NOT_OK;
 80038c6:	2301      	movs	r3, #1
 80038c8:	77fb      	strb	r3, [r7, #31]
 80038ca:	e01f      	b.n	800390c <User_Ip_Usart_SetBaurate+0x66>
	}
	else
	{
		DIV_Fraction = (u32SoureClock/u32Baudrate)%16;
 80038cc:	68ba      	ldr	r2, [r7, #8]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	f003 030f 	and.w	r3, r3, #15
 80038da:	82fb      	strh	r3, [r7, #22]
		DIV_Mantissa = (u32SoureClock/(u32Baudrate*16));
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	011b      	lsls	r3, r3, #4
 80038e0:	68ba      	ldr	r2, [r7, #8]
 80038e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e6:	61bb      	str	r3, [r7, #24]
		HwChannel->BRR |= (DIV_Mantissa << USER_IP_USART_BRR_DIV_MANTISSA_SHIFT) & (USER_IP_USART_BRR_DIV_MANTISSA_MASK);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	689a      	ldr	r2, [r3, #8]
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	011b      	lsls	r3, r3, #4
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	431a      	orrs	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	609a      	str	r2, [r3, #8]
		HwChannel->BRR |= DIV_Fraction & USER_IP_USART_BRR_DIV_FRACTION_MASK;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	689a      	ldr	r2, [r3, #8]
 80038fc:	8afb      	ldrh	r3, [r7, #22]
 80038fe:	f003 030f 	and.w	r3, r3, #15
 8003902:	431a      	orrs	r2, r3
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	609a      	str	r2, [r3, #8]
		ret = E_OK;
 8003908:	2300      	movs	r3, #0
 800390a:	77fb      	strb	r3, [r7, #31]
	}
	return ret;
 800390c:	7ffb      	ldrb	r3, [r7, #31]
}
 800390e:	4618      	mov	r0, r3
 8003910:	3724      	adds	r7, #36	; 0x24
 8003912:	46bd      	mov	sp, r7
 8003914:	bc80      	pop	{r7}
 8003916:	4770      	bx	lr

08003918 <User_Ip_Usart_Set_ParityMode>:
static void User_Ip_Usart_Set_ParityMode(User_Ip_Usart_Type *HwChannel, User_Uart_ParityMode_t ParityMode)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	460b      	mov	r3, r1
 8003922:	70fb      	strb	r3, [r7, #3]
	if(ParityMode == USER_UART_PARITYMODE_NONE)
 8003924:	78fb      	ldrb	r3, [r7, #3]
 8003926:	2b02      	cmp	r3, #2
 8003928:	d106      	bne.n	8003938 <User_Ip_Usart_Set_ParityMode+0x20>
	{
		HwChannel->CR1 &= ~USER_IP_USART_CR1_PCE_MASK;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	60da      	str	r2, [r3, #12]
	{
		HwChannel->CR1 |= USER_IP_USART_CR1_PCE_MASK;
		HwChannel->CR1 &= ~USER_IP_USART_CR1_PS_MASK;
		HwChannel->CR1 |= (ParityMode << USER_IP_USART_CR1_PS_SHIFT) & (USER_IP_USART_CR1_PS_MASK);
	}
}
 8003936:	e014      	b.n	8003962 <User_Ip_Usart_Set_ParityMode+0x4a>
		HwChannel->CR1 |= USER_IP_USART_CR1_PCE_MASK;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	60da      	str	r2, [r3, #12]
		HwChannel->CR1 &= ~USER_IP_USART_CR1_PS_MASK;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	60da      	str	r2, [r3, #12]
		HwChannel->CR1 |= (ParityMode << USER_IP_USART_CR1_PS_SHIFT) & (USER_IP_USART_CR1_PS_MASK);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	68da      	ldr	r2, [r3, #12]
 8003954:	78fb      	ldrb	r3, [r7, #3]
 8003956:	025b      	lsls	r3, r3, #9
 8003958:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800395c:	431a      	orrs	r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	60da      	str	r2, [r3, #12]
}
 8003962:	bf00      	nop
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	bc80      	pop	{r7}
 800396a:	4770      	bx	lr

0800396c <User_Ip_Usart_Set_StopBit>:
static void User_Ip_Usart_Set_StopBit(User_Ip_Usart_Type *HwChannel,User_Uart_StopBitCount_t StopBitCouunt)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	460b      	mov	r3, r1
 8003976:	70fb      	strb	r3, [r7, #3]
	HwChannel->CR2 &= ~USER_IP_USART_CR2_STOP_MASK;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	611a      	str	r2, [r3, #16]
	HwChannel->CR2 |= (StopBitCouunt << USER_IP_USART_CR2_STOP_SHIFT) &USER_IP_USART_CR2_STOP_MASK;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	691a      	ldr	r2, [r3, #16]
 8003988:	78fb      	ldrb	r3, [r7, #3]
 800398a:	031b      	lsls	r3, r3, #12
 800398c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003990:	431a      	orrs	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	611a      	str	r2, [r3, #16]
}
 8003996:	bf00      	nop
 8003998:	370c      	adds	r7, #12
 800399a:	46bd      	mov	sp, r7
 800399c:	bc80      	pop	{r7}
 800399e:	4770      	bx	lr

080039a0 <User_Ip_Usart_DeInit>:


void static User_Ip_Usart_DeInit(User_Ip_Usart_Type *HwConfig)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
	uint16_t u16Count;
	uint8_t  u8Count;
	User_Ip_RingBuffer_t *BufferChannel;

	HwConfig->CR1 = USER_IP_USART_RESET_VALUE;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	60da      	str	r2, [r3, #12]
	HwConfig->CR2 = USER_IP_USART_RESET_VALUE;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	611a      	str	r2, [r3, #16]
	HwConfig->CR3 = USER_IP_USART_RESET_VALUE;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	615a      	str	r2, [r3, #20]
	HwConfig->GTPR = USER_IP_USART_RESET_VALUE;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	619a      	str	r2, [r3, #24]

	for ( u8Count = 0; u8Count < USER_IP_USART_INSTANCE_COUNT; u8Count++)
 80039c0:	2300      	movs	r3, #0
 80039c2:	737b      	strb	r3, [r7, #13]
 80039c4:	e02f      	b.n	8003a26 <User_Ip_Usart_DeInit+0x86>
	{
		BufferChannel = RingBuffer_Ptr_Arr[u8Count];
 80039c6:	7b7b      	ldrb	r3, [r7, #13]
 80039c8:	4a1b      	ldr	r2, [pc, #108]	; (8003a38 <User_Ip_Usart_DeInit+0x98>)
 80039ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039ce:	60bb      	str	r3, [r7, #8]
		BufferChannel->RxHead = 0U;
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		BufferChannel->RxTail = 0U;
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	2200      	movs	r2, #0
 80039dc:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
		BufferChannel->TxHead = 0U;
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
		BufferChannel->TxTail = 0U;
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
		BufferChannel->BufferStatus = USER_BUFFER_UNLOCK;
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 2810 	strb.w	r2, [r3, #2064]	; 0x810
		for( u16Count = 0 ; u16Count < USER_IP_USART_SIZE_RINGBUFFER; u16Count++ )
 80039f8:	2300      	movs	r3, #0
 80039fa:	81fb      	strh	r3, [r7, #14]
 80039fc:	e00c      	b.n	8003a18 <User_Ip_Usart_DeInit+0x78>
		{
			BufferChannel->User_Usart_RxRingBufferChannel[u16Count] = 0x00U;
 80039fe:	89fb      	ldrh	r3, [r7, #14]
 8003a00:	68ba      	ldr	r2, [r7, #8]
 8003a02:	2100      	movs	r1, #0
 8003a04:	54d1      	strb	r1, [r2, r3]
			BufferChannel->User_Usart_TxRingBufferChannel[u16Count] = 0x00U;
 8003a06:	89fb      	ldrh	r3, [r7, #14]
 8003a08:	68ba      	ldr	r2, [r7, #8]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
		for( u16Count = 0 ; u16Count < USER_IP_USART_SIZE_RINGBUFFER; u16Count++ )
 8003a12:	89fb      	ldrh	r3, [r7, #14]
 8003a14:	3301      	adds	r3, #1
 8003a16:	81fb      	strh	r3, [r7, #14]
 8003a18:	89fb      	ldrh	r3, [r7, #14]
 8003a1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a1e:	d3ee      	bcc.n	80039fe <User_Ip_Usart_DeInit+0x5e>
	for ( u8Count = 0; u8Count < USER_IP_USART_INSTANCE_COUNT; u8Count++)
 8003a20:	7b7b      	ldrb	r3, [r7, #13]
 8003a22:	3301      	adds	r3, #1
 8003a24:	737b      	strb	r3, [r7, #13]
 8003a26:	7b7b      	ldrb	r3, [r7, #13]
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d9cc      	bls.n	80039c6 <User_Ip_Usart_DeInit+0x26>
		}

	}

}
 8003a2c:	bf00      	nop
 8003a2e:	bf00      	nop
 8003a30:	3714      	adds	r7, #20
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bc80      	pop	{r7}
 8003a36:	4770      	bx	lr
 8003a38:	2000009c 	.word	0x2000009c

08003a3c <User_Ip_Usart_Init>:

void User_Ip_Usart_Init(User_Uart_HwConfigType *HwConfig)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b086      	sub	sp, #24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
	uint8_t u8ChannelID = HwConfig->u8ChannelID;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	75fb      	strb	r3, [r7, #23]
	User_Ip_Usart_Type *Usart = User_Ip_Usart_BaseAddress[u8ChannelID];
 8003a4a:	7dfb      	ldrb	r3, [r7, #23]
 8003a4c:	4a30      	ldr	r2, [pc, #192]	; (8003b10 <User_Ip_Usart_Init+0xd4>)
 8003a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a52:	613b      	str	r3, [r7, #16]
	__HAL_RCC_USART1_CLK_ENABLE();
 8003a54:	4b2f      	ldr	r3, [pc, #188]	; (8003b14 <User_Ip_Usart_Init+0xd8>)
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	4a2e      	ldr	r2, [pc, #184]	; (8003b14 <User_Ip_Usart_Init+0xd8>)
 8003a5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a5e:	6193      	str	r3, [r2, #24]
 8003a60:	4b2c      	ldr	r3, [pc, #176]	; (8003b14 <User_Ip_Usart_Init+0xd8>)
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a68:	60fb      	str	r3, [r7, #12]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_USART2_CLK_ENABLE();
 8003a6c:	4b29      	ldr	r3, [pc, #164]	; (8003b14 <User_Ip_Usart_Init+0xd8>)
 8003a6e:	69db      	ldr	r3, [r3, #28]
 8003a70:	4a28      	ldr	r2, [pc, #160]	; (8003b14 <User_Ip_Usart_Init+0xd8>)
 8003a72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a76:	61d3      	str	r3, [r2, #28]
 8003a78:	4b26      	ldr	r3, [pc, #152]	; (8003b14 <User_Ip_Usart_Init+0xd8>)
 8003a7a:	69db      	ldr	r3, [r3, #28]
 8003a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a80:	60bb      	str	r3, [r7, #8]
 8003a82:	68bb      	ldr	r3, [r7, #8]
	User_Ip_Usart_DeInit(Usart);
 8003a84:	6938      	ldr	r0, [r7, #16]
 8003a86:	f7ff ff8b 	bl	80039a0 <User_Ip_Usart_DeInit>

	Usart->CR1 &= ~USER_IP_USART_CR1_TE_MASK;
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	f023 0208 	bic.w	r2, r3, #8
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	60da      	str	r2, [r3, #12]
	Usart->CR1 &= ~USER_IP_USART_CR1_RE_MASK;
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	f023 0204 	bic.w	r2, r3, #4
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	60da      	str	r2, [r3, #12]
	User_Ip_Usart_SetBaurate(Usart,HwConfig->u32SourceClock,HwConfig->u32BaudRate);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6859      	ldr	r1, [r3, #4]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	461a      	mov	r2, r3
 8003aac:	6938      	ldr	r0, [r7, #16]
 8003aae:	f7ff fefa 	bl	80038a6 <User_Ip_Usart_SetBaurate>
	User_Ip_Usart_Set_ParityMode(Usart,HwConfig->ParityMode);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	7b1b      	ldrb	r3, [r3, #12]
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	6938      	ldr	r0, [r7, #16]
 8003aba:	f7ff ff2d 	bl	8003918 <User_Ip_Usart_Set_ParityMode>
	User_Ip_Usart_Set_StopBit(Usart,HwConfig->StopBitCount);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	7b5b      	ldrb	r3, [r3, #13]
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	6938      	ldr	r0, [r7, #16]
 8003ac6:	f7ff ff51 	bl	800396c <User_Ip_Usart_Set_StopBit>

	Usart->CR3 |= USER_IP_USART_CR1_IDLEIE_MASK;
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	f043 0210 	orr.w	r2, r3, #16
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	615a      	str	r2, [r3, #20]
	Usart->CR1 |= (USER_IP_USART_CR1_TE_MASK|
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003ade:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 8003ae2:	693a      	ldr	r2, [r7, #16]
 8003ae4:	60d3      	str	r3, [r2, #12]
				   USER_IP_USART_CR1_RE_MASK|
				   USER_IP_USART_CR1_RXNEIE_MASK|
				   USER_IP_USART_CR1_UE_MASK);
	HAL_NVIC_SetPriority(User_Ip_IRQn[u8ChannelID],USER_IP_USART_PRIORITY,0u);
 8003ae6:	7dfb      	ldrb	r3, [r7, #23]
 8003ae8:	4a0b      	ldr	r2, [pc, #44]	; (8003b18 <User_Ip_Usart_Init+0xdc>)
 8003aea:	5cd3      	ldrb	r3, [r2, r3]
 8003aec:	b25b      	sxtb	r3, r3
 8003aee:	2200      	movs	r2, #0
 8003af0:	2100      	movs	r1, #0
 8003af2:	4618      	mov	r0, r3
 8003af4:	f000 ff27 	bl	8004946 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(User_Ip_IRQn[u8ChannelID]);
 8003af8:	7dfb      	ldrb	r3, [r7, #23]
 8003afa:	4a07      	ldr	r2, [pc, #28]	; (8003b18 <User_Ip_Usart_Init+0xdc>)
 8003afc:	5cd3      	ldrb	r3, [r2, r3]
 8003afe:	b25b      	sxtb	r3, r3
 8003b00:	4618      	mov	r0, r3
 8003b02:	f000 ff3c 	bl	800497e <HAL_NVIC_EnableIRQ>
}
 8003b06:	bf00      	nop
 8003b08:	3718      	adds	r7, #24
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	08007350 	.word	0x08007350
 8003b14:	40021000 	.word	0x40021000
 8003b18:	200000a8 	.word	0x200000a8

08003b1c <User_Ip_Usart_StartAsyncTransmit>:

static inline void User_Ip_Usart_StartAsyncTransmit(User_Ip_Usart_Type *HwChannel)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
	HwChannel->CR1 |= USER_IP_USART_CR1_TXEIE_MASK;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	60da      	str	r2, [r3, #12]
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bc80      	pop	{r7}
 8003b38:	4770      	bx	lr

08003b3a <User_Ip_Usart_StoptAsyncTransmit>:
static inline void User_Ip_Usart_StoptAsyncTransmit(User_Ip_Usart_Type *HwChannel)
{
 8003b3a:	b480      	push	{r7}
 8003b3c:	b083      	sub	sp, #12
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
	HwChannel->CR1 &= ~USER_IP_USART_CR1_TXEIE_MASK;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	60da      	str	r2, [r3, #12]
}
 8003b4e:	bf00      	nop
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bc80      	pop	{r7}
 8003b56:	4770      	bx	lr

08003b58 <User_Ip_Usart_GetBuffer>:




static User_Ip_RingBuffer_t *User_Ip_Usart_GetBuffer(uint8_t u8ChannelID)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	4603      	mov	r3, r0
 8003b60:	71fb      	strb	r3, [r7, #7]
	User_Ip_RingBuffer_t *RingBuffer;
	if (u8ChannelID == USER_IP_USART_CHANNELID_1)
 8003b62:	79fb      	ldrb	r3, [r7, #7]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d102      	bne.n	8003b6e <User_Ip_Usart_GetBuffer+0x16>
	{
		RingBuffer = &RingBufferUsart1Channel;
 8003b68:	4b0b      	ldr	r3, [pc, #44]	; (8003b98 <User_Ip_Usart_GetBuffer+0x40>)
 8003b6a:	60fb      	str	r3, [r7, #12]
 8003b6c:	e00d      	b.n	8003b8a <User_Ip_Usart_GetBuffer+0x32>
	}
	else if (u8ChannelID == USER_IP_USART_CHANNELID_2)
 8003b6e:	79fb      	ldrb	r3, [r7, #7]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d102      	bne.n	8003b7a <User_Ip_Usart_GetBuffer+0x22>
	{
		RingBuffer = &RingBufferUsart2Channel;
 8003b74:	4b09      	ldr	r3, [pc, #36]	; (8003b9c <User_Ip_Usart_GetBuffer+0x44>)
 8003b76:	60fb      	str	r3, [r7, #12]
 8003b78:	e007      	b.n	8003b8a <User_Ip_Usart_GetBuffer+0x32>
	}
	else if (u8ChannelID == USER_IP_USART_CHANNELID_3)
 8003b7a:	79fb      	ldrb	r3, [r7, #7]
 8003b7c:	2b03      	cmp	r3, #3
 8003b7e:	d102      	bne.n	8003b86 <User_Ip_Usart_GetBuffer+0x2e>
	{
		RingBuffer = &RingBufferUsart3Channel;
 8003b80:	4b07      	ldr	r3, [pc, #28]	; (8003ba0 <User_Ip_Usart_GetBuffer+0x48>)
 8003b82:	60fb      	str	r3, [r7, #12]
 8003b84:	e001      	b.n	8003b8a <User_Ip_Usart_GetBuffer+0x32>
	}
	else
	{
		RingBuffer = NULL;
 8003b86:	2300      	movs	r3, #0
 8003b88:	60fb      	str	r3, [r7, #12]
	}
	return RingBuffer;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3714      	adds	r7, #20
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bc80      	pop	{r7}
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	20000e30 	.word	0x20000e30
 8003b9c:	20001644 	.word	0x20001644
 8003ba0:	2000061c 	.word	0x2000061c

08003ba4 <User_Ip_Usart_WriteBuffer>:

Std_ReturnType User_Ip_Usart_WriteBuffer(uint8_t u8ChannelID, const uint8_t *u8Data, uint16_t u16DataLen)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	4603      	mov	r3, r0
 8003bac:	6039      	str	r1, [r7, #0]
 8003bae:	71fb      	strb	r3, [r7, #7]
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	80bb      	strh	r3, [r7, #4]
	Std_ReturnType ret = E_NOT_OK;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	75fb      	strb	r3, [r7, #23]
	uint16_t u16DataAvailable = 0;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	82bb      	strh	r3, [r7, #20]
	uint16_t u16Count;

	User_Ip_RingBuffer_t *BufferChannel;
	BufferChannel = User_Ip_Usart_GetBuffer(u8ChannelID);
 8003bbc:	79fb      	ldrb	r3, [r7, #7]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f7ff ffca 	bl	8003b58 <User_Ip_Usart_GetBuffer>
 8003bc4:	60f8      	str	r0, [r7, #12]
	if(BufferChannel == NULL)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d101      	bne.n	8003bd0 <User_Ip_Usart_WriteBuffer+0x2c>
	{
		return E_NOT_OK;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e062      	b.n	8003c96 <User_Ip_Usart_WriteBuffer+0xf2>
	}
	if (u8Data == NULL || u16DataLen == 0)
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d002      	beq.n	8003bdc <User_Ip_Usart_WriteBuffer+0x38>
 8003bd6:	88bb      	ldrh	r3, [r7, #4]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d101      	bne.n	8003be0 <User_Ip_Usart_WriteBuffer+0x3c>
	{
		return E_NOT_OK;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e05a      	b.n	8003c96 <User_Ip_Usart_WriteBuffer+0xf2>
	}
	if (BufferChannel->BufferStatus ==  USER_BUFFER_UNLOCK)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f893 3810 	ldrb.w	r3, [r3, #2064]	; 0x810
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d154      	bne.n	8003c94 <User_Ip_Usart_WriteBuffer+0xf0>
	{
		if(BufferChannel->TxHead > BufferChannel->TxTail)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d90a      	bls.n	8003c10 <User_Ip_Usart_WriteBuffer+0x6c>
		{
			u16DataAvailable = BufferChannel->TxHead - BufferChannel->TxTail;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	82bb      	strh	r3, [r7, #20]
 8003c0e:	e00c      	b.n	8003c2a <User_Ip_Usart_WriteBuffer+0x86>
		}
		else
		{
			u16DataAvailable = ( USER_IP_USART_SIZE_RINGBUFFER - BufferChannel->TxHead) + BufferChannel->TxTail;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c28:	82bb      	strh	r3, [r7, #20]
		}
		if ( u16DataAvailable > u16DataLen)
 8003c2a:	8aba      	ldrh	r2, [r7, #20]
 8003c2c:	88bb      	ldrh	r3, [r7, #4]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d930      	bls.n	8003c94 <User_Ip_Usart_WriteBuffer+0xf0>
		{
			BufferChannel->BufferStatus = USER_BUFFER_LOCK;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 2810 	strb.w	r2, [r3, #2064]	; 0x810
			for (u16Count = 0;u16Count < u16DataLen; u16Count++)
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	827b      	strh	r3, [r7, #18]
 8003c3e:	e018      	b.n	8003c72 <User_Ip_Usart_WriteBuffer+0xce>
			{
				BufferChannel->User_Usart_TxRingBufferChannel[BufferChannel->TxTail] = *u8Data;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8003c46:	683a      	ldr	r2, [r7, #0]
 8003c48:	7811      	ldrb	r1, [r2, #0]
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	460a      	mov	r2, r1
 8003c50:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
				BufferChannel->TxTail = (BufferChannel->TxTail + 1) & (USER_IP_USART_SIZE_RINGBUFFER - 1);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
				u8Data++;
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	3301      	adds	r3, #1
 8003c6a:	603b      	str	r3, [r7, #0]
			for (u16Count = 0;u16Count < u16DataLen; u16Count++)
 8003c6c:	8a7b      	ldrh	r3, [r7, #18]
 8003c6e:	3301      	adds	r3, #1
 8003c70:	827b      	strh	r3, [r7, #18]
 8003c72:	8a7a      	ldrh	r2, [r7, #18]
 8003c74:	88bb      	ldrh	r3, [r7, #4]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d3e2      	bcc.n	8003c40 <User_Ip_Usart_WriteBuffer+0x9c>
			}
			BufferChannel->BufferStatus = USER_BUFFER_UNLOCK;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 2810 	strb.w	r2, [r3, #2064]	; 0x810
			User_Ip_Usart_StartAsyncTransmit(User_Ip_Usart_BaseAddress[u8ChannelID]);
 8003c82:	79fb      	ldrb	r3, [r7, #7]
 8003c84:	4a06      	ldr	r2, [pc, #24]	; (8003ca0 <User_Ip_Usart_WriteBuffer+0xfc>)
 8003c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7ff ff46 	bl	8003b1c <User_Ip_Usart_StartAsyncTransmit>
			ret = E_OK;
 8003c90:	2300      	movs	r3, #0
 8003c92:	75fb      	strb	r3, [r7, #23]
		}
	}
		return ret;
 8003c94:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3718      	adds	r7, #24
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	08007350 	.word	0x08007350

08003ca4 <User_Ip_Usart_PutChar>:
static inline void User_Ip_Usart_PutChar(User_Ip_Usart_Type *HwChannel,uint8_t u8Data)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	460b      	mov	r3, r1
 8003cae:	70fb      	strb	r3, [r7, #3]
	HwChannel->DR = u8Data;
 8003cb0:	78fa      	ldrb	r2, [r7, #3]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	605a      	str	r2, [r3, #4]
}
 8003cb6:	bf00      	nop
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bc80      	pop	{r7}
 8003cbe:	4770      	bx	lr

08003cc0 <User_Ip_Usart_TransmitBuffer>:

static inline void User_Ip_Usart_TransmitBuffer(uint8_t u8ChannelID)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	71fb      	strb	r3, [r7, #7]
	User_Ip_RingBuffer_t *BufferChannel;
	BufferChannel = User_Ip_Usart_GetBuffer(u8ChannelID);
 8003cca:	79fb      	ldrb	r3, [r7, #7]
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f7ff ff43 	bl	8003b58 <User_Ip_Usart_GetBuffer>
 8003cd2:	60f8      	str	r0, [r7, #12]
	User_Ip_Usart_Type *HwChannel = User_Ip_Usart_BaseAddress[u8ChannelID];
 8003cd4:	79fb      	ldrb	r3, [r7, #7]
 8003cd6:	4a16      	ldr	r2, [pc, #88]	; (8003d30 <User_Ip_Usart_TransmitBuffer+0x70>)
 8003cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cdc:	60bb      	str	r3, [r7, #8]

	if (BufferChannel == NULL)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d021      	beq.n	8003d28 <User_Ip_Usart_TransmitBuffer+0x68>
	{
		return ;
	}

	if (BufferChannel->TxHead != BufferChannel->TxTail )
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d015      	beq.n	8003d20 <User_Ip_Usart_TransmitBuffer+0x60>
	{
		User_Ip_Usart_PutChar(HwChannel,BufferChannel->User_Usart_TxRingBufferChannel[BufferChannel->TxHead]);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	4619      	mov	r1, r3
 8003d06:	68b8      	ldr	r0, [r7, #8]
 8003d08:	f7ff ffcc 	bl	8003ca4 <User_Ip_Usart_PutChar>
		BufferChannel->TxHead = (BufferChannel->TxHead + 1)& (USER_IP_USART_SIZE_RINGBUFFER - 1);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8003d12:	3301      	adds	r3, #1
 8003d14:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
 8003d1e:	e004      	b.n	8003d2a <User_Ip_Usart_TransmitBuffer+0x6a>
	}
	else
	{
		User_Ip_Usart_StoptAsyncTransmit(HwChannel);
 8003d20:	68b8      	ldr	r0, [r7, #8]
 8003d22:	f7ff ff0a 	bl	8003b3a <User_Ip_Usart_StoptAsyncTransmit>
 8003d26:	e000      	b.n	8003d2a <User_Ip_Usart_TransmitBuffer+0x6a>
		return ;
 8003d28:	bf00      	nop
	}
}
 8003d2a:	3710      	adds	r7, #16
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	08007350 	.word	0x08007350

08003d34 <User_Ip_Usart_GetChar>:
static inline uint8_t User_Ip_Usart_GetChar(User_Ip_Usart_Type* HwChannel)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
	return (HwChannel->DR);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	b2db      	uxtb	r3, r3
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bc80      	pop	{r7}
 8003d4a:	4770      	bx	lr

08003d4c <User_Ip_Usart_ReceiveBuffer>:
}



static void User_Ip_Usart_ReceiveBuffer(uint8_t u8ChannelUD, uint8_t u8data)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	4603      	mov	r3, r0
 8003d54:	460a      	mov	r2, r1
 8003d56:	71fb      	strb	r3, [r7, #7]
 8003d58:	4613      	mov	r3, r2
 8003d5a:	71bb      	strb	r3, [r7, #6]
	User_Ip_RingBuffer_t *BufferChannel;
	BufferChannel = User_Ip_Usart_GetBuffer(u8ChannelUD);
 8003d5c:	79fb      	ldrb	r3, [r7, #7]
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f7ff fefa 	bl	8003b58 <User_Ip_Usart_GetBuffer>
 8003d64:	60f8      	str	r0, [r7, #12]
	if (BufferChannel == NULL)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d02b      	beq.n	8003dc4 <User_Ip_Usart_ReceiveBuffer+0x78>
	{
		return;
	}
	BufferChannel->User_Usart_RxRingBufferChannel[BufferChannel->RxTail] = u8data;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	79b9      	ldrb	r1, [r7, #6]
 8003d76:	54d1      	strb	r1, [r2, r3]
	BufferChannel->RxTail = ( BufferChannel->RxTail + 1 ) & (USER_IP_USART_SIZE_RINGBUFFER -1 );
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8003d7e:	3301      	adds	r3, #1
 8003d80:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
	if(BufferChannel->RxTail == BufferChannel->RxHead )
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d115      	bne.n	8003dc6 <User_Ip_Usart_ReceiveBuffer+0x7a>
	{
		if(BufferChannel->RxHead == 0)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d105      	bne.n	8003db0 <User_Ip_Usart_ReceiveBuffer+0x64>
		{
			BufferChannel->RxTail = USER_IP_USART_SIZE_RINGBUFFER - 1;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8003daa:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 8003dae:	e00a      	b.n	8003dc6 <User_Ip_Usart_ReceiveBuffer+0x7a>
		}
		else
		{
			BufferChannel->RxTail = (BufferChannel->RxTail  - 1) & (USER_IP_USART_SIZE_RINGBUFFER - 1);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8003db6:	3b01      	subs	r3, #1
 8003db8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 8003dc2:	e000      	b.n	8003dc6 <User_Ip_Usart_ReceiveBuffer+0x7a>
		return;
 8003dc4:	bf00      	nop
		}
	}
}
 8003dc6:	3710      	adds	r7, #16
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <User_Ip_Usart_IrqHandler>:




void User_Ip_Usart_IrqHandler(uint8_t u8ChannelID)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	71fb      	strb	r3, [r7, #7]
	uint8_t receive_data = 0;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	73fb      	strb	r3, [r7, #15]
	User_Ip_Usart_Type *HwChannel = User_Ip_Usart_BaseAddress[u8ChannelID];
 8003dda:	79fb      	ldrb	r3, [r7, #7]
 8003ddc:	4a15      	ldr	r2, [pc, #84]	; (8003e34 <User_Ip_Usart_IrqHandler+0x68>)
 8003dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003de2:	60bb      	str	r3, [r7, #8]
	if( (HwChannel->SR & USER_IP_USART_SR_TXE_MASK)  == USER_IP_USART_SR_TXE_MASK)
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	881b      	ldrh	r3, [r3, #0]
 8003de8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d003      	beq.n	8003df8 <User_Ip_Usart_IrqHandler+0x2c>
	{
		User_Ip_Usart_TransmitBuffer(u8ChannelID);
 8003df0:	79fb      	ldrb	r3, [r7, #7]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7ff ff64 	bl	8003cc0 <User_Ip_Usart_TransmitBuffer>
	}
	if( (HwChannel->SR & USER_IP_USART_SR_RXNE_MASK)  == USER_IP_USART_SR_RXNE_MASK)
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	881b      	ldrh	r3, [r3, #0]
 8003dfc:	f003 0320 	and.w	r3, r3, #32
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d00a      	beq.n	8003e1a <User_Ip_Usart_IrqHandler+0x4e>
	{
		receive_data = User_Ip_Usart_GetChar(HwChannel);
 8003e04:	68b8      	ldr	r0, [r7, #8]
 8003e06:	f7ff ff95 	bl	8003d34 <User_Ip_Usart_GetChar>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	73fb      	strb	r3, [r7, #15]
		User_Ip_Usart_ReceiveBuffer(u8ChannelID,receive_data);
 8003e0e:	7bfa      	ldrb	r2, [r7, #15]
 8003e10:	79fb      	ldrb	r3, [r7, #7]
 8003e12:	4611      	mov	r1, r2
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7ff ff99 	bl	8003d4c <User_Ip_Usart_ReceiveBuffer>
	}
	if( (HwChannel->SR & USER_IP_USART_SR_ORE_MASK)  == USER_IP_USART_SR_ORE_MASK)
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	881b      	ldrh	r3, [r3, #0]
 8003e1e:	f003 0308 	and.w	r3, r3, #8
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d002      	beq.n	8003e2c <User_Ip_Usart_IrqHandler+0x60>
	{
		User_Ip_Usart_GetChar(HwChannel);
 8003e26:	68b8      	ldr	r0, [r7, #8]
 8003e28:	f7ff ff84 	bl	8003d34 <User_Ip_Usart_GetChar>
	}
	if( (HwChannel->SR & USER_IP_USART_SR_FE_MASK)  == USER_IP_USART_SR_FE_MASK)
	{

	}
}
 8003e2c:	bf00      	nop
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	08007350 	.word	0x08007350

08003e38 <USART1_IRQHandler>:




void USART1_IRQHandler(void)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	af00      	add	r7, sp, #0
	User_Ip_Usart_IrqHandler(USER_IP_USART_CHANNELID_1);
 8003e3c:	2000      	movs	r0, #0
 8003e3e:	f7ff ffc5 	bl	8003dcc <User_Ip_Usart_IrqHandler>
}
 8003e42:	bf00      	nop
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
 8003e46:	b580      	push	{r7, lr}
 8003e48:	af00      	add	r7, sp, #0
	User_Ip_Usart_IrqHandler(USER_IP_USART_CHANNELID_2);
 8003e4a:	2001      	movs	r0, #1
 8003e4c:	f7ff ffbe 	bl	8003dcc <User_Ip_Usart_IrqHandler>
}
 8003e50:	bf00      	nop
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	af00      	add	r7, sp, #0
	User_Ip_Usart_IrqHandler(USER_IP_USART_CHANNELID_3);
 8003e58:	2003      	movs	r0, #3
 8003e5a:	f7ff ffb7 	bl	8003dcc <User_Ip_Usart_IrqHandler>
}
 8003e5e:	bf00      	nop
 8003e60:	bd80      	pop	{r7, pc}
	...

08003e64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e68:	4b08      	ldr	r3, [pc, #32]	; (8003e8c <HAL_Init+0x28>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a07      	ldr	r2, [pc, #28]	; (8003e8c <HAL_Init+0x28>)
 8003e6e:	f043 0310 	orr.w	r3, r3, #16
 8003e72:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e74:	2003      	movs	r0, #3
 8003e76:	f000 fd5b 	bl	8004930 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e7a:	200f      	movs	r0, #15
 8003e7c:	f000 f808 	bl	8003e90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003e80:	f7fd fa30 	bl	80012e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	40022000 	.word	0x40022000

08003e90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003e98:	4b12      	ldr	r3, [pc, #72]	; (8003ee4 <HAL_InitTick+0x54>)
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	4b12      	ldr	r3, [pc, #72]	; (8003ee8 <HAL_InitTick+0x58>)
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ea6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f000 fd73 	bl	800499a <HAL_SYSTICK_Config>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d001      	beq.n	8003ebe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e00e      	b.n	8003edc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2b0f      	cmp	r3, #15
 8003ec2:	d80a      	bhi.n	8003eda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	6879      	ldr	r1, [r7, #4]
 8003ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ecc:	f000 fd3b 	bl	8004946 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ed0:	4a06      	ldr	r2, [pc, #24]	; (8003eec <HAL_InitTick+0x5c>)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	e000      	b.n	8003edc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3708      	adds	r7, #8
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	20000000 	.word	0x20000000
 8003ee8:	200000b0 	.word	0x200000b0
 8003eec:	200000ac 	.word	0x200000ac

08003ef0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ef4:	4b05      	ldr	r3, [pc, #20]	; (8003f0c <HAL_IncTick+0x1c>)
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	461a      	mov	r2, r3
 8003efa:	4b05      	ldr	r3, [pc, #20]	; (8003f10 <HAL_IncTick+0x20>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4413      	add	r3, r2
 8003f00:	4a03      	ldr	r2, [pc, #12]	; (8003f10 <HAL_IncTick+0x20>)
 8003f02:	6013      	str	r3, [r2, #0]
}
 8003f04:	bf00      	nop
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bc80      	pop	{r7}
 8003f0a:	4770      	bx	lr
 8003f0c:	200000b0 	.word	0x200000b0
 8003f10:	20001e58 	.word	0x20001e58

08003f14 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f14:	b480      	push	{r7}
 8003f16:	af00      	add	r7, sp, #0
  return uwTick;
 8003f18:	4b02      	ldr	r3, [pc, #8]	; (8003f24 <HAL_GetTick+0x10>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bc80      	pop	{r7}
 8003f22:	4770      	bx	lr
 8003f24:	20001e58 	.word	0x20001e58

08003f28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f30:	f7ff fff0 	bl	8003f14 <HAL_GetTick>
 8003f34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f40:	d005      	beq.n	8003f4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f42:	4b0a      	ldr	r3, [pc, #40]	; (8003f6c <HAL_Delay+0x44>)
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	461a      	mov	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003f4e:	bf00      	nop
 8003f50:	f7ff ffe0 	bl	8003f14 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d8f7      	bhi.n	8003f50 <HAL_Delay+0x28>
  {
  }
}
 8003f60:	bf00      	nop
 8003f62:	bf00      	nop
 8003f64:	3710      	adds	r7, #16
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	200000b0 	.word	0x200000b0

08003f70 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b086      	sub	sp, #24
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003f80:	2300      	movs	r3, #0
 8003f82:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003f84:	2300      	movs	r3, #0
 8003f86:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d101      	bne.n	8003f92 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e0ce      	b.n	8004130 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d109      	bne.n	8003fb4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f7fc ffc4 	bl	8000f3c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f000 fba5 	bl	8004704 <ADC_ConversionStop_Disable>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc2:	f003 0310 	and.w	r3, r3, #16
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f040 80a9 	bne.w	800411e <HAL_ADC_Init+0x1ae>
 8003fcc:	7dfb      	ldrb	r3, [r7, #23]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	f040 80a5 	bne.w	800411e <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003fdc:	f023 0302 	bic.w	r3, r3, #2
 8003fe0:	f043 0202 	orr.w	r2, r3, #2
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4951      	ldr	r1, [pc, #324]	; (8004138 <HAL_ADC_Init+0x1c8>)
 8003ff2:	428b      	cmp	r3, r1
 8003ff4:	d10a      	bne.n	800400c <HAL_ADC_Init+0x9c>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	69db      	ldr	r3, [r3, #28]
 8003ffa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003ffe:	d002      	beq.n	8004006 <HAL_ADC_Init+0x96>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	69db      	ldr	r3, [r3, #28]
 8004004:	e004      	b.n	8004010 <HAL_ADC_Init+0xa0>
 8004006:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800400a:	e001      	b.n	8004010 <HAL_ADC_Init+0xa0>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004010:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	7b1b      	ldrb	r3, [r3, #12]
 8004016:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004018:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800401a:	68ba      	ldr	r2, [r7, #8]
 800401c:	4313      	orrs	r3, r2
 800401e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004028:	d003      	beq.n	8004032 <HAL_ADC_Init+0xc2>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	2b01      	cmp	r3, #1
 8004030:	d102      	bne.n	8004038 <HAL_ADC_Init+0xc8>
 8004032:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004036:	e000      	b.n	800403a <HAL_ADC_Init+0xca>
 8004038:	2300      	movs	r3, #0
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	4313      	orrs	r3, r2
 800403e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	7d1b      	ldrb	r3, [r3, #20]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d119      	bne.n	800407c <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	7b1b      	ldrb	r3, [r3, #12]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d109      	bne.n	8004064 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	3b01      	subs	r3, #1
 8004056:	035a      	lsls	r2, r3, #13
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	4313      	orrs	r3, r2
 800405c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004060:	613b      	str	r3, [r7, #16]
 8004062:	e00b      	b.n	800407c <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004068:	f043 0220 	orr.w	r2, r3, #32
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004074:	f043 0201 	orr.w	r2, r3, #1
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	693a      	ldr	r2, [r7, #16]
 800408c:	430a      	orrs	r2, r1
 800408e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	689a      	ldr	r2, [r3, #8]
 8004096:	4b29      	ldr	r3, [pc, #164]	; (800413c <HAL_ADC_Init+0x1cc>)
 8004098:	4013      	ands	r3, r2
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	6812      	ldr	r2, [r2, #0]
 800409e:	68b9      	ldr	r1, [r7, #8]
 80040a0:	430b      	orrs	r3, r1
 80040a2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040ac:	d003      	beq.n	80040b6 <HAL_ADC_Init+0x146>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d104      	bne.n	80040c0 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	3b01      	subs	r3, #1
 80040bc:	051b      	lsls	r3, r3, #20
 80040be:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	430a      	orrs	r2, r1
 80040d2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	689a      	ldr	r2, [r3, #8]
 80040da:	4b19      	ldr	r3, [pc, #100]	; (8004140 <HAL_ADC_Init+0x1d0>)
 80040dc:	4013      	ands	r3, r2
 80040de:	68ba      	ldr	r2, [r7, #8]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d10b      	bne.n	80040fc <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ee:	f023 0303 	bic.w	r3, r3, #3
 80040f2:	f043 0201 	orr.w	r2, r3, #1
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80040fa:	e018      	b.n	800412e <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004100:	f023 0312 	bic.w	r3, r3, #18
 8004104:	f043 0210 	orr.w	r2, r3, #16
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004110:	f043 0201 	orr.w	r2, r3, #1
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800411c:	e007      	b.n	800412e <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004122:	f043 0210 	orr.w	r2, r3, #16
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800412e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004130:	4618      	mov	r0, r3
 8004132:	3718      	adds	r7, #24
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	40013c00 	.word	0x40013c00
 800413c:	ffe1f7fd 	.word	0xffe1f7fd
 8004140:	ff1f0efe 	.word	0xff1f0efe

08004144 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800414c:	2300      	movs	r3, #0
 800414e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004156:	2b01      	cmp	r3, #1
 8004158:	d101      	bne.n	800415e <HAL_ADC_Start_IT+0x1a>
 800415a:	2302      	movs	r3, #2
 800415c:	e0a0      	b.n	80042a0 <HAL_ADC_Start_IT+0x15c>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2201      	movs	r2, #1
 8004162:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 fa72 	bl	8004650 <ADC_Enable>
 800416c:	4603      	mov	r3, r0
 800416e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8004170:	7bfb      	ldrb	r3, [r7, #15]
 8004172:	2b00      	cmp	r3, #0
 8004174:	f040 808f 	bne.w	8004296 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800417c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004180:	f023 0301 	bic.w	r3, r3, #1
 8004184:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a45      	ldr	r2, [pc, #276]	; (80042a8 <HAL_ADC_Start_IT+0x164>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d105      	bne.n	80041a2 <HAL_ADC_Start_IT+0x5e>
 8004196:	4b45      	ldr	r3, [pc, #276]	; (80042ac <HAL_ADC_Start_IT+0x168>)
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d115      	bne.n	80041ce <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d026      	beq.n	800420a <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80041c4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80041cc:	e01d      	b.n	800420a <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a33      	ldr	r2, [pc, #204]	; (80042ac <HAL_ADC_Start_IT+0x168>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d004      	beq.n	80041ee <HAL_ADC_Start_IT+0xaa>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a2f      	ldr	r2, [pc, #188]	; (80042a8 <HAL_ADC_Start_IT+0x164>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d10d      	bne.n	800420a <HAL_ADC_Start_IT+0xc6>
 80041ee:	4b2f      	ldr	r3, [pc, #188]	; (80042ac <HAL_ADC_Start_IT+0x168>)
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d007      	beq.n	800420a <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004202:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d006      	beq.n	8004224 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421a:	f023 0206 	bic.w	r2, r3, #6
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	62da      	str	r2, [r3, #44]	; 0x2c
 8004222:	e002      	b.n	800422a <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f06f 0202 	mvn.w	r2, #2
 800423a:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	685a      	ldr	r2, [r3, #4]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f042 0220 	orr.w	r2, r2, #32
 800424a:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004256:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800425a:	d113      	bne.n	8004284 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004260:	4a11      	ldr	r2, [pc, #68]	; (80042a8 <HAL_ADC_Start_IT+0x164>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d105      	bne.n	8004272 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8004266:	4b11      	ldr	r3, [pc, #68]	; (80042ac <HAL_ADC_Start_IT+0x168>)
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800426e:	2b00      	cmp	r3, #0
 8004270:	d108      	bne.n	8004284 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	689a      	ldr	r2, [r3, #8]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8004280:	609a      	str	r2, [r3, #8]
 8004282:	e00c      	b.n	800429e <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	689a      	ldr	r2, [r3, #8]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004292:	609a      	str	r2, [r3, #8]
 8004294:	e003      	b.n	800429e <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 800429e:	7bfb      	ldrb	r3, [r7, #15]
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3710      	adds	r7, #16
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	40012800 	.word	0x40012800
 80042ac:	40012400 	.word	0x40012400

080042b0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80042be:	4618      	mov	r0, r3
 80042c0:	370c      	adds	r7, #12
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bc80      	pop	{r7}
 80042c6:	4770      	bx	lr

080042c8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f003 0320 	and.w	r3, r3, #32
 80042da:	2b20      	cmp	r3, #32
 80042dc:	d140      	bne.n	8004360 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0302 	and.w	r3, r3, #2
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d139      	bne.n	8004360 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f0:	f003 0310 	and.w	r3, r3, #16
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d105      	bne.n	8004304 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042fc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800430e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004312:	d11d      	bne.n	8004350 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004318:	2b00      	cmp	r3, #0
 800431a:	d119      	bne.n	8004350 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	685a      	ldr	r2, [r3, #4]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f022 0220 	bic.w	r2, r2, #32
 800432a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004330:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800433c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d105      	bne.n	8004350 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004348:	f043 0201 	orr.w	r2, r3, #1
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f7fc fd8b 	bl	8000e6c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f06f 0212 	mvn.w	r2, #18
 800435e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800436a:	2b80      	cmp	r3, #128	; 0x80
 800436c:	d14f      	bne.n	800440e <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0304 	and.w	r3, r3, #4
 8004378:	2b04      	cmp	r3, #4
 800437a:	d148      	bne.n	800440e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004380:	f003 0310 	and.w	r3, r3, #16
 8004384:	2b00      	cmp	r3, #0
 8004386:	d105      	bne.n	8004394 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800438c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800439e:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80043a2:	d012      	beq.n	80043ca <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d125      	bne.n	80043fe <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80043bc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80043c0:	d11d      	bne.n	80043fe <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d119      	bne.n	80043fe <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	685a      	ldr	r2, [r3, #4]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043d8:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d105      	bne.n	80043fe <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f6:	f043 0201 	orr.w	r2, r3, #1
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 f9c1 	bl	8004786 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f06f 020c 	mvn.w	r2, #12
 800440c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004418:	2b40      	cmp	r3, #64	; 0x40
 800441a:	d114      	bne.n	8004446 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	2b01      	cmp	r3, #1
 8004428:	d10d      	bne.n	8004446 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 f809 	bl	800444e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f06f 0201 	mvn.w	r2, #1
 8004444:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8004446:	bf00      	nop
 8004448:	3708      	adds	r7, #8
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800444e:	b480      	push	{r7}
 8004450:	b083      	sub	sp, #12
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004456:	bf00      	nop
 8004458:	370c      	adds	r7, #12
 800445a:	46bd      	mov	sp, r7
 800445c:	bc80      	pop	{r7}
 800445e:	4770      	bx	lr

08004460 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004460:	b480      	push	{r7}
 8004462:	b085      	sub	sp, #20
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800446a:	2300      	movs	r3, #0
 800446c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800446e:	2300      	movs	r3, #0
 8004470:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004478:	2b01      	cmp	r3, #1
 800447a:	d101      	bne.n	8004480 <HAL_ADC_ConfigChannel+0x20>
 800447c:	2302      	movs	r3, #2
 800447e:	e0dc      	b.n	800463a <HAL_ADC_ConfigChannel+0x1da>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	2b06      	cmp	r3, #6
 800448e:	d81c      	bhi.n	80044ca <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	685a      	ldr	r2, [r3, #4]
 800449a:	4613      	mov	r3, r2
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	4413      	add	r3, r2
 80044a0:	3b05      	subs	r3, #5
 80044a2:	221f      	movs	r2, #31
 80044a4:	fa02 f303 	lsl.w	r3, r2, r3
 80044a8:	43db      	mvns	r3, r3
 80044aa:	4019      	ands	r1, r3
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	6818      	ldr	r0, [r3, #0]
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	685a      	ldr	r2, [r3, #4]
 80044b4:	4613      	mov	r3, r2
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	4413      	add	r3, r2
 80044ba:	3b05      	subs	r3, #5
 80044bc:	fa00 f203 	lsl.w	r2, r0, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	430a      	orrs	r2, r1
 80044c6:	635a      	str	r2, [r3, #52]	; 0x34
 80044c8:	e03c      	b.n	8004544 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	2b0c      	cmp	r3, #12
 80044d0:	d81c      	bhi.n	800450c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	685a      	ldr	r2, [r3, #4]
 80044dc:	4613      	mov	r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	4413      	add	r3, r2
 80044e2:	3b23      	subs	r3, #35	; 0x23
 80044e4:	221f      	movs	r2, #31
 80044e6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ea:	43db      	mvns	r3, r3
 80044ec:	4019      	ands	r1, r3
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	6818      	ldr	r0, [r3, #0]
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	685a      	ldr	r2, [r3, #4]
 80044f6:	4613      	mov	r3, r2
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	4413      	add	r3, r2
 80044fc:	3b23      	subs	r3, #35	; 0x23
 80044fe:	fa00 f203 	lsl.w	r2, r0, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	430a      	orrs	r2, r1
 8004508:	631a      	str	r2, [r3, #48]	; 0x30
 800450a:	e01b      	b.n	8004544 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	685a      	ldr	r2, [r3, #4]
 8004516:	4613      	mov	r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	4413      	add	r3, r2
 800451c:	3b41      	subs	r3, #65	; 0x41
 800451e:	221f      	movs	r2, #31
 8004520:	fa02 f303 	lsl.w	r3, r2, r3
 8004524:	43db      	mvns	r3, r3
 8004526:	4019      	ands	r1, r3
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	6818      	ldr	r0, [r3, #0]
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	685a      	ldr	r2, [r3, #4]
 8004530:	4613      	mov	r3, r2
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	4413      	add	r3, r2
 8004536:	3b41      	subs	r3, #65	; 0x41
 8004538:	fa00 f203 	lsl.w	r2, r0, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	430a      	orrs	r2, r1
 8004542:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2b09      	cmp	r3, #9
 800454a:	d91c      	bls.n	8004586 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68d9      	ldr	r1, [r3, #12]
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	4613      	mov	r3, r2
 8004558:	005b      	lsls	r3, r3, #1
 800455a:	4413      	add	r3, r2
 800455c:	3b1e      	subs	r3, #30
 800455e:	2207      	movs	r2, #7
 8004560:	fa02 f303 	lsl.w	r3, r2, r3
 8004564:	43db      	mvns	r3, r3
 8004566:	4019      	ands	r1, r3
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	6898      	ldr	r0, [r3, #8]
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	4613      	mov	r3, r2
 8004572:	005b      	lsls	r3, r3, #1
 8004574:	4413      	add	r3, r2
 8004576:	3b1e      	subs	r3, #30
 8004578:	fa00 f203 	lsl.w	r2, r0, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	430a      	orrs	r2, r1
 8004582:	60da      	str	r2, [r3, #12]
 8004584:	e019      	b.n	80045ba <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	6919      	ldr	r1, [r3, #16]
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	4613      	mov	r3, r2
 8004592:	005b      	lsls	r3, r3, #1
 8004594:	4413      	add	r3, r2
 8004596:	2207      	movs	r2, #7
 8004598:	fa02 f303 	lsl.w	r3, r2, r3
 800459c:	43db      	mvns	r3, r3
 800459e:	4019      	ands	r1, r3
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	6898      	ldr	r0, [r3, #8]
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	4613      	mov	r3, r2
 80045aa:	005b      	lsls	r3, r3, #1
 80045ac:	4413      	add	r3, r2
 80045ae:	fa00 f203 	lsl.w	r2, r0, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	430a      	orrs	r2, r1
 80045b8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2b10      	cmp	r3, #16
 80045c0:	d003      	beq.n	80045ca <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80045c6:	2b11      	cmp	r3, #17
 80045c8:	d132      	bne.n	8004630 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a1d      	ldr	r2, [pc, #116]	; (8004644 <HAL_ADC_ConfigChannel+0x1e4>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d125      	bne.n	8004620 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d126      	bne.n	8004630 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	689a      	ldr	r2, [r3, #8]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80045f0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2b10      	cmp	r3, #16
 80045f8:	d11a      	bne.n	8004630 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80045fa:	4b13      	ldr	r3, [pc, #76]	; (8004648 <HAL_ADC_ConfigChannel+0x1e8>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a13      	ldr	r2, [pc, #76]	; (800464c <HAL_ADC_ConfigChannel+0x1ec>)
 8004600:	fba2 2303 	umull	r2, r3, r2, r3
 8004604:	0c9a      	lsrs	r2, r3, #18
 8004606:	4613      	mov	r3, r2
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	4413      	add	r3, r2
 800460c:	005b      	lsls	r3, r3, #1
 800460e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004610:	e002      	b.n	8004618 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	3b01      	subs	r3, #1
 8004616:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d1f9      	bne.n	8004612 <HAL_ADC_ConfigChannel+0x1b2>
 800461e:	e007      	b.n	8004630 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004624:	f043 0220 	orr.w	r2, r3, #32
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004638:	7bfb      	ldrb	r3, [r7, #15]
}
 800463a:	4618      	mov	r0, r3
 800463c:	3714      	adds	r7, #20
 800463e:	46bd      	mov	sp, r7
 8004640:	bc80      	pop	{r7}
 8004642:	4770      	bx	lr
 8004644:	40012400 	.word	0x40012400
 8004648:	20000000 	.word	0x20000000
 800464c:	431bde83 	.word	0x431bde83

08004650 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004658:	2300      	movs	r3, #0
 800465a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800465c:	2300      	movs	r3, #0
 800465e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	2b01      	cmp	r3, #1
 800466c:	d040      	beq.n	80046f0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	689a      	ldr	r2, [r3, #8]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f042 0201 	orr.w	r2, r2, #1
 800467c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800467e:	4b1f      	ldr	r3, [pc, #124]	; (80046fc <ADC_Enable+0xac>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a1f      	ldr	r2, [pc, #124]	; (8004700 <ADC_Enable+0xb0>)
 8004684:	fba2 2303 	umull	r2, r3, r2, r3
 8004688:	0c9b      	lsrs	r3, r3, #18
 800468a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800468c:	e002      	b.n	8004694 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	3b01      	subs	r3, #1
 8004692:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1f9      	bne.n	800468e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800469a:	f7ff fc3b 	bl	8003f14 <HAL_GetTick>
 800469e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80046a0:	e01f      	b.n	80046e2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80046a2:	f7ff fc37 	bl	8003f14 <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d918      	bls.n	80046e2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f003 0301 	and.w	r3, r3, #1
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d011      	beq.n	80046e2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c2:	f043 0210 	orr.w	r2, r3, #16
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ce:	f043 0201 	orr.w	r2, r3, #1
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e007      	b.n	80046f2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f003 0301 	and.w	r3, r3, #1
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d1d8      	bne.n	80046a2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3710      	adds	r7, #16
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	20000000 	.word	0x20000000
 8004700:	431bde83 	.word	0x431bde83

08004704 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800470c:	2300      	movs	r3, #0
 800470e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	2b01      	cmp	r3, #1
 800471c:	d12e      	bne.n	800477c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	689a      	ldr	r2, [r3, #8]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f022 0201 	bic.w	r2, r2, #1
 800472c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800472e:	f7ff fbf1 	bl	8003f14 <HAL_GetTick>
 8004732:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004734:	e01b      	b.n	800476e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004736:	f7ff fbed 	bl	8003f14 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	2b02      	cmp	r3, #2
 8004742:	d914      	bls.n	800476e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b01      	cmp	r3, #1
 8004750:	d10d      	bne.n	800476e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004756:	f043 0210 	orr.w	r2, r3, #16
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004762:	f043 0201 	orr.w	r2, r3, #1
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e007      	b.n	800477e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f003 0301 	and.w	r3, r3, #1
 8004778:	2b01      	cmp	r3, #1
 800477a:	d0dc      	beq.n	8004736 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	3710      	adds	r7, #16
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}

08004786 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004786:	b480      	push	{r7}
 8004788:	b083      	sub	sp, #12
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800478e:	bf00      	nop
 8004790:	370c      	adds	r7, #12
 8004792:	46bd      	mov	sp, r7
 8004794:	bc80      	pop	{r7}
 8004796:	4770      	bx	lr

08004798 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004798:	b480      	push	{r7}
 800479a:	b085      	sub	sp, #20
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f003 0307 	and.w	r3, r3, #7
 80047a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80047a8:	4b0c      	ldr	r3, [pc, #48]	; (80047dc <__NVIC_SetPriorityGrouping+0x44>)
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047ae:	68ba      	ldr	r2, [r7, #8]
 80047b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80047b4:	4013      	ands	r3, r2
 80047b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80047c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80047c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047ca:	4a04      	ldr	r2, [pc, #16]	; (80047dc <__NVIC_SetPriorityGrouping+0x44>)
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	60d3      	str	r3, [r2, #12]
}
 80047d0:	bf00      	nop
 80047d2:	3714      	adds	r7, #20
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bc80      	pop	{r7}
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	e000ed00 	.word	0xe000ed00

080047e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047e0:	b480      	push	{r7}
 80047e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047e4:	4b04      	ldr	r3, [pc, #16]	; (80047f8 <__NVIC_GetPriorityGrouping+0x18>)
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	0a1b      	lsrs	r3, r3, #8
 80047ea:	f003 0307 	and.w	r3, r3, #7
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bc80      	pop	{r7}
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	e000ed00 	.word	0xe000ed00

080047fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	4603      	mov	r3, r0
 8004804:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800480a:	2b00      	cmp	r3, #0
 800480c:	db0b      	blt.n	8004826 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800480e:	79fb      	ldrb	r3, [r7, #7]
 8004810:	f003 021f 	and.w	r2, r3, #31
 8004814:	4906      	ldr	r1, [pc, #24]	; (8004830 <__NVIC_EnableIRQ+0x34>)
 8004816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800481a:	095b      	lsrs	r3, r3, #5
 800481c:	2001      	movs	r0, #1
 800481e:	fa00 f202 	lsl.w	r2, r0, r2
 8004822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004826:	bf00      	nop
 8004828:	370c      	adds	r7, #12
 800482a:	46bd      	mov	sp, r7
 800482c:	bc80      	pop	{r7}
 800482e:	4770      	bx	lr
 8004830:	e000e100 	.word	0xe000e100

08004834 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	4603      	mov	r3, r0
 800483c:	6039      	str	r1, [r7, #0]
 800483e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004844:	2b00      	cmp	r3, #0
 8004846:	db0a      	blt.n	800485e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	b2da      	uxtb	r2, r3
 800484c:	490c      	ldr	r1, [pc, #48]	; (8004880 <__NVIC_SetPriority+0x4c>)
 800484e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004852:	0112      	lsls	r2, r2, #4
 8004854:	b2d2      	uxtb	r2, r2
 8004856:	440b      	add	r3, r1
 8004858:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800485c:	e00a      	b.n	8004874 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	b2da      	uxtb	r2, r3
 8004862:	4908      	ldr	r1, [pc, #32]	; (8004884 <__NVIC_SetPriority+0x50>)
 8004864:	79fb      	ldrb	r3, [r7, #7]
 8004866:	f003 030f 	and.w	r3, r3, #15
 800486a:	3b04      	subs	r3, #4
 800486c:	0112      	lsls	r2, r2, #4
 800486e:	b2d2      	uxtb	r2, r2
 8004870:	440b      	add	r3, r1
 8004872:	761a      	strb	r2, [r3, #24]
}
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	bc80      	pop	{r7}
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	e000e100 	.word	0xe000e100
 8004884:	e000ed00 	.word	0xe000ed00

08004888 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004888:	b480      	push	{r7}
 800488a:	b089      	sub	sp, #36	; 0x24
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f003 0307 	and.w	r3, r3, #7
 800489a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	f1c3 0307 	rsb	r3, r3, #7
 80048a2:	2b04      	cmp	r3, #4
 80048a4:	bf28      	it	cs
 80048a6:	2304      	movcs	r3, #4
 80048a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	3304      	adds	r3, #4
 80048ae:	2b06      	cmp	r3, #6
 80048b0:	d902      	bls.n	80048b8 <NVIC_EncodePriority+0x30>
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	3b03      	subs	r3, #3
 80048b6:	e000      	b.n	80048ba <NVIC_EncodePriority+0x32>
 80048b8:	2300      	movs	r3, #0
 80048ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048bc:	f04f 32ff 	mov.w	r2, #4294967295
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	fa02 f303 	lsl.w	r3, r2, r3
 80048c6:	43da      	mvns	r2, r3
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	401a      	ands	r2, r3
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048d0:	f04f 31ff 	mov.w	r1, #4294967295
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	fa01 f303 	lsl.w	r3, r1, r3
 80048da:	43d9      	mvns	r1, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048e0:	4313      	orrs	r3, r2
         );
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3724      	adds	r7, #36	; 0x24
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bc80      	pop	{r7}
 80048ea:	4770      	bx	lr

080048ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	3b01      	subs	r3, #1
 80048f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048fc:	d301      	bcc.n	8004902 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80048fe:	2301      	movs	r3, #1
 8004900:	e00f      	b.n	8004922 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004902:	4a0a      	ldr	r2, [pc, #40]	; (800492c <SysTick_Config+0x40>)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	3b01      	subs	r3, #1
 8004908:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800490a:	210f      	movs	r1, #15
 800490c:	f04f 30ff 	mov.w	r0, #4294967295
 8004910:	f7ff ff90 	bl	8004834 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004914:	4b05      	ldr	r3, [pc, #20]	; (800492c <SysTick_Config+0x40>)
 8004916:	2200      	movs	r2, #0
 8004918:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800491a:	4b04      	ldr	r3, [pc, #16]	; (800492c <SysTick_Config+0x40>)
 800491c:	2207      	movs	r2, #7
 800491e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3708      	adds	r7, #8
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	e000e010 	.word	0xe000e010

08004930 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f7ff ff2d 	bl	8004798 <__NVIC_SetPriorityGrouping>
}
 800493e:	bf00      	nop
 8004940:	3708      	adds	r7, #8
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}

08004946 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004946:	b580      	push	{r7, lr}
 8004948:	b086      	sub	sp, #24
 800494a:	af00      	add	r7, sp, #0
 800494c:	4603      	mov	r3, r0
 800494e:	60b9      	str	r1, [r7, #8]
 8004950:	607a      	str	r2, [r7, #4]
 8004952:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004954:	2300      	movs	r3, #0
 8004956:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004958:	f7ff ff42 	bl	80047e0 <__NVIC_GetPriorityGrouping>
 800495c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	68b9      	ldr	r1, [r7, #8]
 8004962:	6978      	ldr	r0, [r7, #20]
 8004964:	f7ff ff90 	bl	8004888 <NVIC_EncodePriority>
 8004968:	4602      	mov	r2, r0
 800496a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800496e:	4611      	mov	r1, r2
 8004970:	4618      	mov	r0, r3
 8004972:	f7ff ff5f 	bl	8004834 <__NVIC_SetPriority>
}
 8004976:	bf00      	nop
 8004978:	3718      	adds	r7, #24
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}

0800497e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800497e:	b580      	push	{r7, lr}
 8004980:	b082      	sub	sp, #8
 8004982:	af00      	add	r7, sp, #0
 8004984:	4603      	mov	r3, r0
 8004986:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800498c:	4618      	mov	r0, r3
 800498e:	f7ff ff35 	bl	80047fc <__NVIC_EnableIRQ>
}
 8004992:	bf00      	nop
 8004994:	3708      	adds	r7, #8
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800499a:	b580      	push	{r7, lr}
 800499c:	b082      	sub	sp, #8
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f7ff ffa2 	bl	80048ec <SysTick_Config>
 80049a8:	4603      	mov	r3, r0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3708      	adds	r7, #8
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
	...

080049b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b08b      	sub	sp, #44	; 0x2c
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80049be:	2300      	movs	r3, #0
 80049c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80049c2:	2300      	movs	r3, #0
 80049c4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049c6:	e179      	b.n	8004cbc <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80049c8:	2201      	movs	r2, #1
 80049ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049cc:	fa02 f303 	lsl.w	r3, r2, r3
 80049d0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	69fa      	ldr	r2, [r7, #28]
 80049d8:	4013      	ands	r3, r2
 80049da:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80049dc:	69ba      	ldr	r2, [r7, #24]
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	f040 8168 	bne.w	8004cb6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	4aa0      	ldr	r2, [pc, #640]	; (8004c6c <HAL_GPIO_Init+0x2b8>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d05e      	beq.n	8004aae <HAL_GPIO_Init+0xfa>
 80049f0:	4a9e      	ldr	r2, [pc, #632]	; (8004c6c <HAL_GPIO_Init+0x2b8>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d875      	bhi.n	8004ae2 <HAL_GPIO_Init+0x12e>
 80049f6:	4a9e      	ldr	r2, [pc, #632]	; (8004c70 <HAL_GPIO_Init+0x2bc>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d058      	beq.n	8004aae <HAL_GPIO_Init+0xfa>
 80049fc:	4a9c      	ldr	r2, [pc, #624]	; (8004c70 <HAL_GPIO_Init+0x2bc>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d86f      	bhi.n	8004ae2 <HAL_GPIO_Init+0x12e>
 8004a02:	4a9c      	ldr	r2, [pc, #624]	; (8004c74 <HAL_GPIO_Init+0x2c0>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d052      	beq.n	8004aae <HAL_GPIO_Init+0xfa>
 8004a08:	4a9a      	ldr	r2, [pc, #616]	; (8004c74 <HAL_GPIO_Init+0x2c0>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d869      	bhi.n	8004ae2 <HAL_GPIO_Init+0x12e>
 8004a0e:	4a9a      	ldr	r2, [pc, #616]	; (8004c78 <HAL_GPIO_Init+0x2c4>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d04c      	beq.n	8004aae <HAL_GPIO_Init+0xfa>
 8004a14:	4a98      	ldr	r2, [pc, #608]	; (8004c78 <HAL_GPIO_Init+0x2c4>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d863      	bhi.n	8004ae2 <HAL_GPIO_Init+0x12e>
 8004a1a:	4a98      	ldr	r2, [pc, #608]	; (8004c7c <HAL_GPIO_Init+0x2c8>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d046      	beq.n	8004aae <HAL_GPIO_Init+0xfa>
 8004a20:	4a96      	ldr	r2, [pc, #600]	; (8004c7c <HAL_GPIO_Init+0x2c8>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d85d      	bhi.n	8004ae2 <HAL_GPIO_Init+0x12e>
 8004a26:	2b12      	cmp	r3, #18
 8004a28:	d82a      	bhi.n	8004a80 <HAL_GPIO_Init+0xcc>
 8004a2a:	2b12      	cmp	r3, #18
 8004a2c:	d859      	bhi.n	8004ae2 <HAL_GPIO_Init+0x12e>
 8004a2e:	a201      	add	r2, pc, #4	; (adr r2, 8004a34 <HAL_GPIO_Init+0x80>)
 8004a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a34:	08004aaf 	.word	0x08004aaf
 8004a38:	08004a89 	.word	0x08004a89
 8004a3c:	08004a9b 	.word	0x08004a9b
 8004a40:	08004add 	.word	0x08004add
 8004a44:	08004ae3 	.word	0x08004ae3
 8004a48:	08004ae3 	.word	0x08004ae3
 8004a4c:	08004ae3 	.word	0x08004ae3
 8004a50:	08004ae3 	.word	0x08004ae3
 8004a54:	08004ae3 	.word	0x08004ae3
 8004a58:	08004ae3 	.word	0x08004ae3
 8004a5c:	08004ae3 	.word	0x08004ae3
 8004a60:	08004ae3 	.word	0x08004ae3
 8004a64:	08004ae3 	.word	0x08004ae3
 8004a68:	08004ae3 	.word	0x08004ae3
 8004a6c:	08004ae3 	.word	0x08004ae3
 8004a70:	08004ae3 	.word	0x08004ae3
 8004a74:	08004ae3 	.word	0x08004ae3
 8004a78:	08004a91 	.word	0x08004a91
 8004a7c:	08004aa5 	.word	0x08004aa5
 8004a80:	4a7f      	ldr	r2, [pc, #508]	; (8004c80 <HAL_GPIO_Init+0x2cc>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d013      	beq.n	8004aae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004a86:	e02c      	b.n	8004ae2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	623b      	str	r3, [r7, #32]
          break;
 8004a8e:	e029      	b.n	8004ae4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	3304      	adds	r3, #4
 8004a96:	623b      	str	r3, [r7, #32]
          break;
 8004a98:	e024      	b.n	8004ae4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	3308      	adds	r3, #8
 8004aa0:	623b      	str	r3, [r7, #32]
          break;
 8004aa2:	e01f      	b.n	8004ae4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	330c      	adds	r3, #12
 8004aaa:	623b      	str	r3, [r7, #32]
          break;
 8004aac:	e01a      	b.n	8004ae4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d102      	bne.n	8004abc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004ab6:	2304      	movs	r3, #4
 8004ab8:	623b      	str	r3, [r7, #32]
          break;
 8004aba:	e013      	b.n	8004ae4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d105      	bne.n	8004ad0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004ac4:	2308      	movs	r3, #8
 8004ac6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	69fa      	ldr	r2, [r7, #28]
 8004acc:	611a      	str	r2, [r3, #16]
          break;
 8004ace:	e009      	b.n	8004ae4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004ad0:	2308      	movs	r3, #8
 8004ad2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	69fa      	ldr	r2, [r7, #28]
 8004ad8:	615a      	str	r2, [r3, #20]
          break;
 8004ada:	e003      	b.n	8004ae4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004adc:	2300      	movs	r3, #0
 8004ade:	623b      	str	r3, [r7, #32]
          break;
 8004ae0:	e000      	b.n	8004ae4 <HAL_GPIO_Init+0x130>
          break;
 8004ae2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	2bff      	cmp	r3, #255	; 0xff
 8004ae8:	d801      	bhi.n	8004aee <HAL_GPIO_Init+0x13a>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	e001      	b.n	8004af2 <HAL_GPIO_Init+0x13e>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	3304      	adds	r3, #4
 8004af2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	2bff      	cmp	r3, #255	; 0xff
 8004af8:	d802      	bhi.n	8004b00 <HAL_GPIO_Init+0x14c>
 8004afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	e002      	b.n	8004b06 <HAL_GPIO_Init+0x152>
 8004b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b02:	3b08      	subs	r3, #8
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	210f      	movs	r1, #15
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	fa01 f303 	lsl.w	r3, r1, r3
 8004b14:	43db      	mvns	r3, r3
 8004b16:	401a      	ands	r2, r3
 8004b18:	6a39      	ldr	r1, [r7, #32]
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b20:	431a      	orrs	r2, r3
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	f000 80c1 	beq.w	8004cb6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004b34:	4b53      	ldr	r3, [pc, #332]	; (8004c84 <HAL_GPIO_Init+0x2d0>)
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	4a52      	ldr	r2, [pc, #328]	; (8004c84 <HAL_GPIO_Init+0x2d0>)
 8004b3a:	f043 0301 	orr.w	r3, r3, #1
 8004b3e:	6193      	str	r3, [r2, #24]
 8004b40:	4b50      	ldr	r3, [pc, #320]	; (8004c84 <HAL_GPIO_Init+0x2d0>)
 8004b42:	699b      	ldr	r3, [r3, #24]
 8004b44:	f003 0301 	and.w	r3, r3, #1
 8004b48:	60bb      	str	r3, [r7, #8]
 8004b4a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004b4c:	4a4e      	ldr	r2, [pc, #312]	; (8004c88 <HAL_GPIO_Init+0x2d4>)
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b50:	089b      	lsrs	r3, r3, #2
 8004b52:	3302      	adds	r3, #2
 8004b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b58:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5c:	f003 0303 	and.w	r3, r3, #3
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	220f      	movs	r2, #15
 8004b64:	fa02 f303 	lsl.w	r3, r2, r3
 8004b68:	43db      	mvns	r3, r3
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a46      	ldr	r2, [pc, #280]	; (8004c8c <HAL_GPIO_Init+0x2d8>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d01f      	beq.n	8004bb8 <HAL_GPIO_Init+0x204>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a45      	ldr	r2, [pc, #276]	; (8004c90 <HAL_GPIO_Init+0x2dc>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d019      	beq.n	8004bb4 <HAL_GPIO_Init+0x200>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a44      	ldr	r2, [pc, #272]	; (8004c94 <HAL_GPIO_Init+0x2e0>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d013      	beq.n	8004bb0 <HAL_GPIO_Init+0x1fc>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a43      	ldr	r2, [pc, #268]	; (8004c98 <HAL_GPIO_Init+0x2e4>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d00d      	beq.n	8004bac <HAL_GPIO_Init+0x1f8>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a42      	ldr	r2, [pc, #264]	; (8004c9c <HAL_GPIO_Init+0x2e8>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d007      	beq.n	8004ba8 <HAL_GPIO_Init+0x1f4>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a41      	ldr	r2, [pc, #260]	; (8004ca0 <HAL_GPIO_Init+0x2ec>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d101      	bne.n	8004ba4 <HAL_GPIO_Init+0x1f0>
 8004ba0:	2305      	movs	r3, #5
 8004ba2:	e00a      	b.n	8004bba <HAL_GPIO_Init+0x206>
 8004ba4:	2306      	movs	r3, #6
 8004ba6:	e008      	b.n	8004bba <HAL_GPIO_Init+0x206>
 8004ba8:	2304      	movs	r3, #4
 8004baa:	e006      	b.n	8004bba <HAL_GPIO_Init+0x206>
 8004bac:	2303      	movs	r3, #3
 8004bae:	e004      	b.n	8004bba <HAL_GPIO_Init+0x206>
 8004bb0:	2302      	movs	r3, #2
 8004bb2:	e002      	b.n	8004bba <HAL_GPIO_Init+0x206>
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e000      	b.n	8004bba <HAL_GPIO_Init+0x206>
 8004bb8:	2300      	movs	r3, #0
 8004bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bbc:	f002 0203 	and.w	r2, r2, #3
 8004bc0:	0092      	lsls	r2, r2, #2
 8004bc2:	4093      	lsls	r3, r2
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004bca:	492f      	ldr	r1, [pc, #188]	; (8004c88 <HAL_GPIO_Init+0x2d4>)
 8004bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bce:	089b      	lsrs	r3, r3, #2
 8004bd0:	3302      	adds	r3, #2
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d006      	beq.n	8004bf2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004be4:	4b2f      	ldr	r3, [pc, #188]	; (8004ca4 <HAL_GPIO_Init+0x2f0>)
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	492e      	ldr	r1, [pc, #184]	; (8004ca4 <HAL_GPIO_Init+0x2f0>)
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	600b      	str	r3, [r1, #0]
 8004bf0:	e006      	b.n	8004c00 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004bf2:	4b2c      	ldr	r3, [pc, #176]	; (8004ca4 <HAL_GPIO_Init+0x2f0>)
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	43db      	mvns	r3, r3
 8004bfa:	492a      	ldr	r1, [pc, #168]	; (8004ca4 <HAL_GPIO_Init+0x2f0>)
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d006      	beq.n	8004c1a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004c0c:	4b25      	ldr	r3, [pc, #148]	; (8004ca4 <HAL_GPIO_Init+0x2f0>)
 8004c0e:	685a      	ldr	r2, [r3, #4]
 8004c10:	4924      	ldr	r1, [pc, #144]	; (8004ca4 <HAL_GPIO_Init+0x2f0>)
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	604b      	str	r3, [r1, #4]
 8004c18:	e006      	b.n	8004c28 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004c1a:	4b22      	ldr	r3, [pc, #136]	; (8004ca4 <HAL_GPIO_Init+0x2f0>)
 8004c1c:	685a      	ldr	r2, [r3, #4]
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	43db      	mvns	r3, r3
 8004c22:	4920      	ldr	r1, [pc, #128]	; (8004ca4 <HAL_GPIO_Init+0x2f0>)
 8004c24:	4013      	ands	r3, r2
 8004c26:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d006      	beq.n	8004c42 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004c34:	4b1b      	ldr	r3, [pc, #108]	; (8004ca4 <HAL_GPIO_Init+0x2f0>)
 8004c36:	689a      	ldr	r2, [r3, #8]
 8004c38:	491a      	ldr	r1, [pc, #104]	; (8004ca4 <HAL_GPIO_Init+0x2f0>)
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	608b      	str	r3, [r1, #8]
 8004c40:	e006      	b.n	8004c50 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004c42:	4b18      	ldr	r3, [pc, #96]	; (8004ca4 <HAL_GPIO_Init+0x2f0>)
 8004c44:	689a      	ldr	r2, [r3, #8]
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	43db      	mvns	r3, r3
 8004c4a:	4916      	ldr	r1, [pc, #88]	; (8004ca4 <HAL_GPIO_Init+0x2f0>)
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d025      	beq.n	8004ca8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004c5c:	4b11      	ldr	r3, [pc, #68]	; (8004ca4 <HAL_GPIO_Init+0x2f0>)
 8004c5e:	68da      	ldr	r2, [r3, #12]
 8004c60:	4910      	ldr	r1, [pc, #64]	; (8004ca4 <HAL_GPIO_Init+0x2f0>)
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	60cb      	str	r3, [r1, #12]
 8004c68:	e025      	b.n	8004cb6 <HAL_GPIO_Init+0x302>
 8004c6a:	bf00      	nop
 8004c6c:	10320000 	.word	0x10320000
 8004c70:	10310000 	.word	0x10310000
 8004c74:	10220000 	.word	0x10220000
 8004c78:	10210000 	.word	0x10210000
 8004c7c:	10120000 	.word	0x10120000
 8004c80:	10110000 	.word	0x10110000
 8004c84:	40021000 	.word	0x40021000
 8004c88:	40010000 	.word	0x40010000
 8004c8c:	40010800 	.word	0x40010800
 8004c90:	40010c00 	.word	0x40010c00
 8004c94:	40011000 	.word	0x40011000
 8004c98:	40011400 	.word	0x40011400
 8004c9c:	40011800 	.word	0x40011800
 8004ca0:	40011c00 	.word	0x40011c00
 8004ca4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004ca8:	4b0b      	ldr	r3, [pc, #44]	; (8004cd8 <HAL_GPIO_Init+0x324>)
 8004caa:	68da      	ldr	r2, [r3, #12]
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	43db      	mvns	r3, r3
 8004cb0:	4909      	ldr	r1, [pc, #36]	; (8004cd8 <HAL_GPIO_Init+0x324>)
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb8:	3301      	adds	r3, #1
 8004cba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	f47f ae7e 	bne.w	80049c8 <HAL_GPIO_Init+0x14>
  }
}
 8004ccc:	bf00      	nop
 8004cce:	bf00      	nop
 8004cd0:	372c      	adds	r7, #44	; 0x2c
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bc80      	pop	{r7}
 8004cd6:	4770      	bx	lr
 8004cd8:	40010400 	.word	0x40010400

08004cdc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	460b      	mov	r3, r1
 8004ce6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689a      	ldr	r2, [r3, #8]
 8004cec:	887b      	ldrh	r3, [r7, #2]
 8004cee:	4013      	ands	r3, r2
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d002      	beq.n	8004cfa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	73fb      	strb	r3, [r7, #15]
 8004cf8:	e001      	b.n	8004cfe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3714      	adds	r7, #20
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bc80      	pop	{r7}
 8004d08:	4770      	bx	lr

08004d0a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	b083      	sub	sp, #12
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
 8004d12:	460b      	mov	r3, r1
 8004d14:	807b      	strh	r3, [r7, #2]
 8004d16:	4613      	mov	r3, r2
 8004d18:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d1a:	787b      	ldrb	r3, [r7, #1]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d003      	beq.n	8004d28 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d20:	887a      	ldrh	r2, [r7, #2]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004d26:	e003      	b.n	8004d30 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004d28:	887b      	ldrh	r3, [r7, #2]
 8004d2a:	041a      	lsls	r2, r3, #16
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	611a      	str	r2, [r3, #16]
}
 8004d30:	bf00      	nop
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bc80      	pop	{r7}
 8004d38:	4770      	bx	lr

08004d3a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004d3a:	b480      	push	{r7}
 8004d3c:	b085      	sub	sp, #20
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
 8004d42:	460b      	mov	r3, r1
 8004d44:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004d4c:	887a      	ldrh	r2, [r7, #2]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	4013      	ands	r3, r2
 8004d52:	041a      	lsls	r2, r3, #16
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	43d9      	mvns	r1, r3
 8004d58:	887b      	ldrh	r3, [r7, #2]
 8004d5a:	400b      	ands	r3, r1
 8004d5c:	431a      	orrs	r2, r3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	611a      	str	r2, [r3, #16]
}
 8004d62:	bf00      	nop
 8004d64:	3714      	adds	r7, #20
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bc80      	pop	{r7}
 8004d6a:	4770      	bx	lr

08004d6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b086      	sub	sp, #24
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d101      	bne.n	8004d7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e26c      	b.n	8005258 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0301 	and.w	r3, r3, #1
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	f000 8087 	beq.w	8004e9a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d8c:	4b92      	ldr	r3, [pc, #584]	; (8004fd8 <HAL_RCC_OscConfig+0x26c>)
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	f003 030c 	and.w	r3, r3, #12
 8004d94:	2b04      	cmp	r3, #4
 8004d96:	d00c      	beq.n	8004db2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004d98:	4b8f      	ldr	r3, [pc, #572]	; (8004fd8 <HAL_RCC_OscConfig+0x26c>)
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	f003 030c 	and.w	r3, r3, #12
 8004da0:	2b08      	cmp	r3, #8
 8004da2:	d112      	bne.n	8004dca <HAL_RCC_OscConfig+0x5e>
 8004da4:	4b8c      	ldr	r3, [pc, #560]	; (8004fd8 <HAL_RCC_OscConfig+0x26c>)
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004db0:	d10b      	bne.n	8004dca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004db2:	4b89      	ldr	r3, [pc, #548]	; (8004fd8 <HAL_RCC_OscConfig+0x26c>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d06c      	beq.n	8004e98 <HAL_RCC_OscConfig+0x12c>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d168      	bne.n	8004e98 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e246      	b.n	8005258 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dd2:	d106      	bne.n	8004de2 <HAL_RCC_OscConfig+0x76>
 8004dd4:	4b80      	ldr	r3, [pc, #512]	; (8004fd8 <HAL_RCC_OscConfig+0x26c>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a7f      	ldr	r2, [pc, #508]	; (8004fd8 <HAL_RCC_OscConfig+0x26c>)
 8004dda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dde:	6013      	str	r3, [r2, #0]
 8004de0:	e02e      	b.n	8004e40 <HAL_RCC_OscConfig+0xd4>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d10c      	bne.n	8004e04 <HAL_RCC_OscConfig+0x98>
 8004dea:	4b7b      	ldr	r3, [pc, #492]	; (8004fd8 <HAL_RCC_OscConfig+0x26c>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a7a      	ldr	r2, [pc, #488]	; (8004fd8 <HAL_RCC_OscConfig+0x26c>)
 8004df0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004df4:	6013      	str	r3, [r2, #0]
 8004df6:	4b78      	ldr	r3, [pc, #480]	; (8004fd8 <HAL_RCC_OscConfig+0x26c>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a77      	ldr	r2, [pc, #476]	; (8004fd8 <HAL_RCC_OscConfig+0x26c>)
 8004dfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e00:	6013      	str	r3, [r2, #0]
 8004e02:	e01d      	b.n	8004e40 <HAL_RCC_OscConfig+0xd4>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e0c:	d10c      	bne.n	8004e28 <HAL_RCC_OscConfig+0xbc>
 8004e0e:	4b72      	ldr	r3, [pc, #456]	; (8004fd8 <HAL_RCC_OscConfig+0x26c>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a71      	ldr	r2, [pc, #452]	; (8004fd8 <HAL_RCC_OscConfig+0x26c>)
 8004e14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e18:	6013      	str	r3, [r2, #0]
 8004e1a:	4b6f      	ldr	r3, [pc, #444]	; (8004fd8 <HAL_RCC_OscConfig+0x26c>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a6e      	ldr	r2, [pc, #440]	; (8004fd8 <HAL_RCC_OscConfig+0x26c>)
 8004e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e24:	6013      	str	r3, [r2, #0]
 8004e26:	e00b      	b.n	8004e40 <HAL_RCC_OscConfig+0xd4>
 8004e28:	4b6b      	ldr	r3, [pc, #428]	; (8004fd8 <HAL_RCC_OscConfig+0x26c>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a6a      	ldr	r2, [pc, #424]	; (8004fd8 <HAL_RCC_OscConfig+0x26c>)
 8004e2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e32:	6013      	str	r3, [r2, #0]
 8004e34:	4b68      	ldr	r3, [pc, #416]	; (8004fd8 <HAL_RCC_OscConfig+0x26c>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a67      	ldr	r2, [pc, #412]	; (8004fd8 <HAL_RCC_OscConfig+0x26c>)
 8004e3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e3e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d013      	beq.n	8004e70 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e48:	f7ff f864 	bl	8003f14 <HAL_GetTick>
 8004e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e4e:	e008      	b.n	8004e62 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e50:	f7ff f860 	bl	8003f14 <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	2b64      	cmp	r3, #100	; 0x64
 8004e5c:	d901      	bls.n	8004e62 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e1fa      	b.n	8005258 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e62:	4b5d      	ldr	r3, [pc, #372]	; (8004fd8 <HAL_RCC_OscConfig+0x26c>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d0f0      	beq.n	8004e50 <HAL_RCC_OscConfig+0xe4>
 8004e6e:	e014      	b.n	8004e9a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e70:	f7ff f850 	bl	8003f14 <HAL_GetTick>
 8004e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e76:	e008      	b.n	8004e8a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e78:	f7ff f84c 	bl	8003f14 <HAL_GetTick>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	2b64      	cmp	r3, #100	; 0x64
 8004e84:	d901      	bls.n	8004e8a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e1e6      	b.n	8005258 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e8a:	4b53      	ldr	r3, [pc, #332]	; (8004fd8 <HAL_RCC_OscConfig+0x26c>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d1f0      	bne.n	8004e78 <HAL_RCC_OscConfig+0x10c>
 8004e96:	e000      	b.n	8004e9a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0302 	and.w	r3, r3, #2
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d063      	beq.n	8004f6e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ea6:	4b4c      	ldr	r3, [pc, #304]	; (8004fd8 <HAL_RCC_OscConfig+0x26c>)
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f003 030c 	and.w	r3, r3, #12
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00b      	beq.n	8004eca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004eb2:	4b49      	ldr	r3, [pc, #292]	; (8004fd8 <HAL_RCC_OscConfig+0x26c>)
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	f003 030c 	and.w	r3, r3, #12
 8004eba:	2b08      	cmp	r3, #8
 8004ebc:	d11c      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x18c>
 8004ebe:	4b46      	ldr	r3, [pc, #280]	; (8004fd8 <HAL_RCC_OscConfig+0x26c>)
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d116      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004eca:	4b43      	ldr	r3, [pc, #268]	; (8004fd8 <HAL_RCC_OscConfig+0x26c>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0302 	and.w	r3, r3, #2
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d005      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x176>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d001      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e1ba      	b.n	8005258 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ee2:	4b3d      	ldr	r3, [pc, #244]	; (8004fd8 <HAL_RCC_OscConfig+0x26c>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	00db      	lsls	r3, r3, #3
 8004ef0:	4939      	ldr	r1, [pc, #228]	; (8004fd8 <HAL_RCC_OscConfig+0x26c>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ef6:	e03a      	b.n	8004f6e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d020      	beq.n	8004f42 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f00:	4b36      	ldr	r3, [pc, #216]	; (8004fdc <HAL_RCC_OscConfig+0x270>)
 8004f02:	2201      	movs	r2, #1
 8004f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f06:	f7ff f805 	bl	8003f14 <HAL_GetTick>
 8004f0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f0c:	e008      	b.n	8004f20 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f0e:	f7ff f801 	bl	8003f14 <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d901      	bls.n	8004f20 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e19b      	b.n	8005258 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f20:	4b2d      	ldr	r3, [pc, #180]	; (8004fd8 <HAL_RCC_OscConfig+0x26c>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0302 	and.w	r3, r3, #2
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d0f0      	beq.n	8004f0e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f2c:	4b2a      	ldr	r3, [pc, #168]	; (8004fd8 <HAL_RCC_OscConfig+0x26c>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	695b      	ldr	r3, [r3, #20]
 8004f38:	00db      	lsls	r3, r3, #3
 8004f3a:	4927      	ldr	r1, [pc, #156]	; (8004fd8 <HAL_RCC_OscConfig+0x26c>)
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	600b      	str	r3, [r1, #0]
 8004f40:	e015      	b.n	8004f6e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f42:	4b26      	ldr	r3, [pc, #152]	; (8004fdc <HAL_RCC_OscConfig+0x270>)
 8004f44:	2200      	movs	r2, #0
 8004f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f48:	f7fe ffe4 	bl	8003f14 <HAL_GetTick>
 8004f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f4e:	e008      	b.n	8004f62 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f50:	f7fe ffe0 	bl	8003f14 <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d901      	bls.n	8004f62 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e17a      	b.n	8005258 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f62:	4b1d      	ldr	r3, [pc, #116]	; (8004fd8 <HAL_RCC_OscConfig+0x26c>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0302 	and.w	r3, r3, #2
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1f0      	bne.n	8004f50 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0308 	and.w	r3, r3, #8
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d03a      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d019      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f82:	4b17      	ldr	r3, [pc, #92]	; (8004fe0 <HAL_RCC_OscConfig+0x274>)
 8004f84:	2201      	movs	r2, #1
 8004f86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f88:	f7fe ffc4 	bl	8003f14 <HAL_GetTick>
 8004f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f8e:	e008      	b.n	8004fa2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f90:	f7fe ffc0 	bl	8003f14 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d901      	bls.n	8004fa2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e15a      	b.n	8005258 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fa2:	4b0d      	ldr	r3, [pc, #52]	; (8004fd8 <HAL_RCC_OscConfig+0x26c>)
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa6:	f003 0302 	and.w	r3, r3, #2
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d0f0      	beq.n	8004f90 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004fae:	2001      	movs	r0, #1
 8004fb0:	f000 faa6 	bl	8005500 <RCC_Delay>
 8004fb4:	e01c      	b.n	8004ff0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fb6:	4b0a      	ldr	r3, [pc, #40]	; (8004fe0 <HAL_RCC_OscConfig+0x274>)
 8004fb8:	2200      	movs	r2, #0
 8004fba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fbc:	f7fe ffaa 	bl	8003f14 <HAL_GetTick>
 8004fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fc2:	e00f      	b.n	8004fe4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fc4:	f7fe ffa6 	bl	8003f14 <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d908      	bls.n	8004fe4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e140      	b.n	8005258 <HAL_RCC_OscConfig+0x4ec>
 8004fd6:	bf00      	nop
 8004fd8:	40021000 	.word	0x40021000
 8004fdc:	42420000 	.word	0x42420000
 8004fe0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fe4:	4b9e      	ldr	r3, [pc, #632]	; (8005260 <HAL_RCC_OscConfig+0x4f4>)
 8004fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe8:	f003 0302 	and.w	r3, r3, #2
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d1e9      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0304 	and.w	r3, r3, #4
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	f000 80a6 	beq.w	800514a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ffe:	2300      	movs	r3, #0
 8005000:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005002:	4b97      	ldr	r3, [pc, #604]	; (8005260 <HAL_RCC_OscConfig+0x4f4>)
 8005004:	69db      	ldr	r3, [r3, #28]
 8005006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d10d      	bne.n	800502a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800500e:	4b94      	ldr	r3, [pc, #592]	; (8005260 <HAL_RCC_OscConfig+0x4f4>)
 8005010:	69db      	ldr	r3, [r3, #28]
 8005012:	4a93      	ldr	r2, [pc, #588]	; (8005260 <HAL_RCC_OscConfig+0x4f4>)
 8005014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005018:	61d3      	str	r3, [r2, #28]
 800501a:	4b91      	ldr	r3, [pc, #580]	; (8005260 <HAL_RCC_OscConfig+0x4f4>)
 800501c:	69db      	ldr	r3, [r3, #28]
 800501e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005022:	60bb      	str	r3, [r7, #8]
 8005024:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005026:	2301      	movs	r3, #1
 8005028:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800502a:	4b8e      	ldr	r3, [pc, #568]	; (8005264 <HAL_RCC_OscConfig+0x4f8>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005032:	2b00      	cmp	r3, #0
 8005034:	d118      	bne.n	8005068 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005036:	4b8b      	ldr	r3, [pc, #556]	; (8005264 <HAL_RCC_OscConfig+0x4f8>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a8a      	ldr	r2, [pc, #552]	; (8005264 <HAL_RCC_OscConfig+0x4f8>)
 800503c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005040:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005042:	f7fe ff67 	bl	8003f14 <HAL_GetTick>
 8005046:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005048:	e008      	b.n	800505c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800504a:	f7fe ff63 	bl	8003f14 <HAL_GetTick>
 800504e:	4602      	mov	r2, r0
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	2b64      	cmp	r3, #100	; 0x64
 8005056:	d901      	bls.n	800505c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e0fd      	b.n	8005258 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800505c:	4b81      	ldr	r3, [pc, #516]	; (8005264 <HAL_RCC_OscConfig+0x4f8>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005064:	2b00      	cmp	r3, #0
 8005066:	d0f0      	beq.n	800504a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	2b01      	cmp	r3, #1
 800506e:	d106      	bne.n	800507e <HAL_RCC_OscConfig+0x312>
 8005070:	4b7b      	ldr	r3, [pc, #492]	; (8005260 <HAL_RCC_OscConfig+0x4f4>)
 8005072:	6a1b      	ldr	r3, [r3, #32]
 8005074:	4a7a      	ldr	r2, [pc, #488]	; (8005260 <HAL_RCC_OscConfig+0x4f4>)
 8005076:	f043 0301 	orr.w	r3, r3, #1
 800507a:	6213      	str	r3, [r2, #32]
 800507c:	e02d      	b.n	80050da <HAL_RCC_OscConfig+0x36e>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d10c      	bne.n	80050a0 <HAL_RCC_OscConfig+0x334>
 8005086:	4b76      	ldr	r3, [pc, #472]	; (8005260 <HAL_RCC_OscConfig+0x4f4>)
 8005088:	6a1b      	ldr	r3, [r3, #32]
 800508a:	4a75      	ldr	r2, [pc, #468]	; (8005260 <HAL_RCC_OscConfig+0x4f4>)
 800508c:	f023 0301 	bic.w	r3, r3, #1
 8005090:	6213      	str	r3, [r2, #32]
 8005092:	4b73      	ldr	r3, [pc, #460]	; (8005260 <HAL_RCC_OscConfig+0x4f4>)
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	4a72      	ldr	r2, [pc, #456]	; (8005260 <HAL_RCC_OscConfig+0x4f4>)
 8005098:	f023 0304 	bic.w	r3, r3, #4
 800509c:	6213      	str	r3, [r2, #32]
 800509e:	e01c      	b.n	80050da <HAL_RCC_OscConfig+0x36e>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	2b05      	cmp	r3, #5
 80050a6:	d10c      	bne.n	80050c2 <HAL_RCC_OscConfig+0x356>
 80050a8:	4b6d      	ldr	r3, [pc, #436]	; (8005260 <HAL_RCC_OscConfig+0x4f4>)
 80050aa:	6a1b      	ldr	r3, [r3, #32]
 80050ac:	4a6c      	ldr	r2, [pc, #432]	; (8005260 <HAL_RCC_OscConfig+0x4f4>)
 80050ae:	f043 0304 	orr.w	r3, r3, #4
 80050b2:	6213      	str	r3, [r2, #32]
 80050b4:	4b6a      	ldr	r3, [pc, #424]	; (8005260 <HAL_RCC_OscConfig+0x4f4>)
 80050b6:	6a1b      	ldr	r3, [r3, #32]
 80050b8:	4a69      	ldr	r2, [pc, #420]	; (8005260 <HAL_RCC_OscConfig+0x4f4>)
 80050ba:	f043 0301 	orr.w	r3, r3, #1
 80050be:	6213      	str	r3, [r2, #32]
 80050c0:	e00b      	b.n	80050da <HAL_RCC_OscConfig+0x36e>
 80050c2:	4b67      	ldr	r3, [pc, #412]	; (8005260 <HAL_RCC_OscConfig+0x4f4>)
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	4a66      	ldr	r2, [pc, #408]	; (8005260 <HAL_RCC_OscConfig+0x4f4>)
 80050c8:	f023 0301 	bic.w	r3, r3, #1
 80050cc:	6213      	str	r3, [r2, #32]
 80050ce:	4b64      	ldr	r3, [pc, #400]	; (8005260 <HAL_RCC_OscConfig+0x4f4>)
 80050d0:	6a1b      	ldr	r3, [r3, #32]
 80050d2:	4a63      	ldr	r2, [pc, #396]	; (8005260 <HAL_RCC_OscConfig+0x4f4>)
 80050d4:	f023 0304 	bic.w	r3, r3, #4
 80050d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d015      	beq.n	800510e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050e2:	f7fe ff17 	bl	8003f14 <HAL_GetTick>
 80050e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050e8:	e00a      	b.n	8005100 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050ea:	f7fe ff13 	bl	8003f14 <HAL_GetTick>
 80050ee:	4602      	mov	r2, r0
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d901      	bls.n	8005100 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e0ab      	b.n	8005258 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005100:	4b57      	ldr	r3, [pc, #348]	; (8005260 <HAL_RCC_OscConfig+0x4f4>)
 8005102:	6a1b      	ldr	r3, [r3, #32]
 8005104:	f003 0302 	and.w	r3, r3, #2
 8005108:	2b00      	cmp	r3, #0
 800510a:	d0ee      	beq.n	80050ea <HAL_RCC_OscConfig+0x37e>
 800510c:	e014      	b.n	8005138 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800510e:	f7fe ff01 	bl	8003f14 <HAL_GetTick>
 8005112:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005114:	e00a      	b.n	800512c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005116:	f7fe fefd 	bl	8003f14 <HAL_GetTick>
 800511a:	4602      	mov	r2, r0
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	f241 3288 	movw	r2, #5000	; 0x1388
 8005124:	4293      	cmp	r3, r2
 8005126:	d901      	bls.n	800512c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e095      	b.n	8005258 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800512c:	4b4c      	ldr	r3, [pc, #304]	; (8005260 <HAL_RCC_OscConfig+0x4f4>)
 800512e:	6a1b      	ldr	r3, [r3, #32]
 8005130:	f003 0302 	and.w	r3, r3, #2
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1ee      	bne.n	8005116 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005138:	7dfb      	ldrb	r3, [r7, #23]
 800513a:	2b01      	cmp	r3, #1
 800513c:	d105      	bne.n	800514a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800513e:	4b48      	ldr	r3, [pc, #288]	; (8005260 <HAL_RCC_OscConfig+0x4f4>)
 8005140:	69db      	ldr	r3, [r3, #28]
 8005142:	4a47      	ldr	r2, [pc, #284]	; (8005260 <HAL_RCC_OscConfig+0x4f4>)
 8005144:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005148:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	69db      	ldr	r3, [r3, #28]
 800514e:	2b00      	cmp	r3, #0
 8005150:	f000 8081 	beq.w	8005256 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005154:	4b42      	ldr	r3, [pc, #264]	; (8005260 <HAL_RCC_OscConfig+0x4f4>)
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	f003 030c 	and.w	r3, r3, #12
 800515c:	2b08      	cmp	r3, #8
 800515e:	d061      	beq.n	8005224 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	69db      	ldr	r3, [r3, #28]
 8005164:	2b02      	cmp	r3, #2
 8005166:	d146      	bne.n	80051f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005168:	4b3f      	ldr	r3, [pc, #252]	; (8005268 <HAL_RCC_OscConfig+0x4fc>)
 800516a:	2200      	movs	r2, #0
 800516c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800516e:	f7fe fed1 	bl	8003f14 <HAL_GetTick>
 8005172:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005174:	e008      	b.n	8005188 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005176:	f7fe fecd 	bl	8003f14 <HAL_GetTick>
 800517a:	4602      	mov	r2, r0
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	2b02      	cmp	r3, #2
 8005182:	d901      	bls.n	8005188 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005184:	2303      	movs	r3, #3
 8005186:	e067      	b.n	8005258 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005188:	4b35      	ldr	r3, [pc, #212]	; (8005260 <HAL_RCC_OscConfig+0x4f4>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005190:	2b00      	cmp	r3, #0
 8005192:	d1f0      	bne.n	8005176 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a1b      	ldr	r3, [r3, #32]
 8005198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800519c:	d108      	bne.n	80051b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800519e:	4b30      	ldr	r3, [pc, #192]	; (8005260 <HAL_RCC_OscConfig+0x4f4>)
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	492d      	ldr	r1, [pc, #180]	; (8005260 <HAL_RCC_OscConfig+0x4f4>)
 80051ac:	4313      	orrs	r3, r2
 80051ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051b0:	4b2b      	ldr	r3, [pc, #172]	; (8005260 <HAL_RCC_OscConfig+0x4f4>)
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a19      	ldr	r1, [r3, #32]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c0:	430b      	orrs	r3, r1
 80051c2:	4927      	ldr	r1, [pc, #156]	; (8005260 <HAL_RCC_OscConfig+0x4f4>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051c8:	4b27      	ldr	r3, [pc, #156]	; (8005268 <HAL_RCC_OscConfig+0x4fc>)
 80051ca:	2201      	movs	r2, #1
 80051cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ce:	f7fe fea1 	bl	8003f14 <HAL_GetTick>
 80051d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80051d4:	e008      	b.n	80051e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051d6:	f7fe fe9d 	bl	8003f14 <HAL_GetTick>
 80051da:	4602      	mov	r2, r0
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	d901      	bls.n	80051e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80051e4:	2303      	movs	r3, #3
 80051e6:	e037      	b.n	8005258 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80051e8:	4b1d      	ldr	r3, [pc, #116]	; (8005260 <HAL_RCC_OscConfig+0x4f4>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d0f0      	beq.n	80051d6 <HAL_RCC_OscConfig+0x46a>
 80051f4:	e02f      	b.n	8005256 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051f6:	4b1c      	ldr	r3, [pc, #112]	; (8005268 <HAL_RCC_OscConfig+0x4fc>)
 80051f8:	2200      	movs	r2, #0
 80051fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051fc:	f7fe fe8a 	bl	8003f14 <HAL_GetTick>
 8005200:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005202:	e008      	b.n	8005216 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005204:	f7fe fe86 	bl	8003f14 <HAL_GetTick>
 8005208:	4602      	mov	r2, r0
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	2b02      	cmp	r3, #2
 8005210:	d901      	bls.n	8005216 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005212:	2303      	movs	r3, #3
 8005214:	e020      	b.n	8005258 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005216:	4b12      	ldr	r3, [pc, #72]	; (8005260 <HAL_RCC_OscConfig+0x4f4>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1f0      	bne.n	8005204 <HAL_RCC_OscConfig+0x498>
 8005222:	e018      	b.n	8005256 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	69db      	ldr	r3, [r3, #28]
 8005228:	2b01      	cmp	r3, #1
 800522a:	d101      	bne.n	8005230 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e013      	b.n	8005258 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005230:	4b0b      	ldr	r3, [pc, #44]	; (8005260 <HAL_RCC_OscConfig+0x4f4>)
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a1b      	ldr	r3, [r3, #32]
 8005240:	429a      	cmp	r2, r3
 8005242:	d106      	bne.n	8005252 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800524e:	429a      	cmp	r2, r3
 8005250:	d001      	beq.n	8005256 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e000      	b.n	8005258 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005256:	2300      	movs	r3, #0
}
 8005258:	4618      	mov	r0, r3
 800525a:	3718      	adds	r7, #24
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}
 8005260:	40021000 	.word	0x40021000
 8005264:	40007000 	.word	0x40007000
 8005268:	42420060 	.word	0x42420060

0800526c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d101      	bne.n	8005280 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e0d0      	b.n	8005422 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005280:	4b6a      	ldr	r3, [pc, #424]	; (800542c <HAL_RCC_ClockConfig+0x1c0>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0307 	and.w	r3, r3, #7
 8005288:	683a      	ldr	r2, [r7, #0]
 800528a:	429a      	cmp	r2, r3
 800528c:	d910      	bls.n	80052b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800528e:	4b67      	ldr	r3, [pc, #412]	; (800542c <HAL_RCC_ClockConfig+0x1c0>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f023 0207 	bic.w	r2, r3, #7
 8005296:	4965      	ldr	r1, [pc, #404]	; (800542c <HAL_RCC_ClockConfig+0x1c0>)
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	4313      	orrs	r3, r2
 800529c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800529e:	4b63      	ldr	r3, [pc, #396]	; (800542c <HAL_RCC_ClockConfig+0x1c0>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 0307 	and.w	r3, r3, #7
 80052a6:	683a      	ldr	r2, [r7, #0]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d001      	beq.n	80052b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e0b8      	b.n	8005422 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0302 	and.w	r3, r3, #2
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d020      	beq.n	80052fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0304 	and.w	r3, r3, #4
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d005      	beq.n	80052d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052c8:	4b59      	ldr	r3, [pc, #356]	; (8005430 <HAL_RCC_ClockConfig+0x1c4>)
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	4a58      	ldr	r2, [pc, #352]	; (8005430 <HAL_RCC_ClockConfig+0x1c4>)
 80052ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80052d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 0308 	and.w	r3, r3, #8
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d005      	beq.n	80052ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052e0:	4b53      	ldr	r3, [pc, #332]	; (8005430 <HAL_RCC_ClockConfig+0x1c4>)
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	4a52      	ldr	r2, [pc, #328]	; (8005430 <HAL_RCC_ClockConfig+0x1c4>)
 80052e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80052ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052ec:	4b50      	ldr	r3, [pc, #320]	; (8005430 <HAL_RCC_ClockConfig+0x1c4>)
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	494d      	ldr	r1, [pc, #308]	; (8005430 <HAL_RCC_ClockConfig+0x1c4>)
 80052fa:	4313      	orrs	r3, r2
 80052fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0301 	and.w	r3, r3, #1
 8005306:	2b00      	cmp	r3, #0
 8005308:	d040      	beq.n	800538c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	2b01      	cmp	r3, #1
 8005310:	d107      	bne.n	8005322 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005312:	4b47      	ldr	r3, [pc, #284]	; (8005430 <HAL_RCC_ClockConfig+0x1c4>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d115      	bne.n	800534a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e07f      	b.n	8005422 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	2b02      	cmp	r3, #2
 8005328:	d107      	bne.n	800533a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800532a:	4b41      	ldr	r3, [pc, #260]	; (8005430 <HAL_RCC_ClockConfig+0x1c4>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005332:	2b00      	cmp	r3, #0
 8005334:	d109      	bne.n	800534a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e073      	b.n	8005422 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800533a:	4b3d      	ldr	r3, [pc, #244]	; (8005430 <HAL_RCC_ClockConfig+0x1c4>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 0302 	and.w	r3, r3, #2
 8005342:	2b00      	cmp	r3, #0
 8005344:	d101      	bne.n	800534a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e06b      	b.n	8005422 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800534a:	4b39      	ldr	r3, [pc, #228]	; (8005430 <HAL_RCC_ClockConfig+0x1c4>)
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	f023 0203 	bic.w	r2, r3, #3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	4936      	ldr	r1, [pc, #216]	; (8005430 <HAL_RCC_ClockConfig+0x1c4>)
 8005358:	4313      	orrs	r3, r2
 800535a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800535c:	f7fe fdda 	bl	8003f14 <HAL_GetTick>
 8005360:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005362:	e00a      	b.n	800537a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005364:	f7fe fdd6 	bl	8003f14 <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005372:	4293      	cmp	r3, r2
 8005374:	d901      	bls.n	800537a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	e053      	b.n	8005422 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800537a:	4b2d      	ldr	r3, [pc, #180]	; (8005430 <HAL_RCC_ClockConfig+0x1c4>)
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	f003 020c 	and.w	r2, r3, #12
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	429a      	cmp	r2, r3
 800538a:	d1eb      	bne.n	8005364 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800538c:	4b27      	ldr	r3, [pc, #156]	; (800542c <HAL_RCC_ClockConfig+0x1c0>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0307 	and.w	r3, r3, #7
 8005394:	683a      	ldr	r2, [r7, #0]
 8005396:	429a      	cmp	r2, r3
 8005398:	d210      	bcs.n	80053bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800539a:	4b24      	ldr	r3, [pc, #144]	; (800542c <HAL_RCC_ClockConfig+0x1c0>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f023 0207 	bic.w	r2, r3, #7
 80053a2:	4922      	ldr	r1, [pc, #136]	; (800542c <HAL_RCC_ClockConfig+0x1c0>)
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053aa:	4b20      	ldr	r3, [pc, #128]	; (800542c <HAL_RCC_ClockConfig+0x1c0>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0307 	and.w	r3, r3, #7
 80053b2:	683a      	ldr	r2, [r7, #0]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d001      	beq.n	80053bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e032      	b.n	8005422 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0304 	and.w	r3, r3, #4
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d008      	beq.n	80053da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053c8:	4b19      	ldr	r3, [pc, #100]	; (8005430 <HAL_RCC_ClockConfig+0x1c4>)
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	4916      	ldr	r1, [pc, #88]	; (8005430 <HAL_RCC_ClockConfig+0x1c4>)
 80053d6:	4313      	orrs	r3, r2
 80053d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0308 	and.w	r3, r3, #8
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d009      	beq.n	80053fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80053e6:	4b12      	ldr	r3, [pc, #72]	; (8005430 <HAL_RCC_ClockConfig+0x1c4>)
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	00db      	lsls	r3, r3, #3
 80053f4:	490e      	ldr	r1, [pc, #56]	; (8005430 <HAL_RCC_ClockConfig+0x1c4>)
 80053f6:	4313      	orrs	r3, r2
 80053f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80053fa:	f000 f821 	bl	8005440 <HAL_RCC_GetSysClockFreq>
 80053fe:	4602      	mov	r2, r0
 8005400:	4b0b      	ldr	r3, [pc, #44]	; (8005430 <HAL_RCC_ClockConfig+0x1c4>)
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	091b      	lsrs	r3, r3, #4
 8005406:	f003 030f 	and.w	r3, r3, #15
 800540a:	490a      	ldr	r1, [pc, #40]	; (8005434 <HAL_RCC_ClockConfig+0x1c8>)
 800540c:	5ccb      	ldrb	r3, [r1, r3]
 800540e:	fa22 f303 	lsr.w	r3, r2, r3
 8005412:	4a09      	ldr	r2, [pc, #36]	; (8005438 <HAL_RCC_ClockConfig+0x1cc>)
 8005414:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005416:	4b09      	ldr	r3, [pc, #36]	; (800543c <HAL_RCC_ClockConfig+0x1d0>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4618      	mov	r0, r3
 800541c:	f7fe fd38 	bl	8003e90 <HAL_InitTick>

  return HAL_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3710      	adds	r7, #16
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	40022000 	.word	0x40022000
 8005430:	40021000 	.word	0x40021000
 8005434:	080071f8 	.word	0x080071f8
 8005438:	20000000 	.word	0x20000000
 800543c:	200000ac 	.word	0x200000ac

08005440 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005440:	b490      	push	{r4, r7}
 8005442:	b08a      	sub	sp, #40	; 0x28
 8005444:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005446:	4b2a      	ldr	r3, [pc, #168]	; (80054f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005448:	1d3c      	adds	r4, r7, #4
 800544a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800544c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005450:	f240 2301 	movw	r3, #513	; 0x201
 8005454:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005456:	2300      	movs	r3, #0
 8005458:	61fb      	str	r3, [r7, #28]
 800545a:	2300      	movs	r3, #0
 800545c:	61bb      	str	r3, [r7, #24]
 800545e:	2300      	movs	r3, #0
 8005460:	627b      	str	r3, [r7, #36]	; 0x24
 8005462:	2300      	movs	r3, #0
 8005464:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005466:	2300      	movs	r3, #0
 8005468:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800546a:	4b22      	ldr	r3, [pc, #136]	; (80054f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	f003 030c 	and.w	r3, r3, #12
 8005476:	2b04      	cmp	r3, #4
 8005478:	d002      	beq.n	8005480 <HAL_RCC_GetSysClockFreq+0x40>
 800547a:	2b08      	cmp	r3, #8
 800547c:	d003      	beq.n	8005486 <HAL_RCC_GetSysClockFreq+0x46>
 800547e:	e02d      	b.n	80054dc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005480:	4b1d      	ldr	r3, [pc, #116]	; (80054f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005482:	623b      	str	r3, [r7, #32]
      break;
 8005484:	e02d      	b.n	80054e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	0c9b      	lsrs	r3, r3, #18
 800548a:	f003 030f 	and.w	r3, r3, #15
 800548e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005492:	4413      	add	r3, r2
 8005494:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005498:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d013      	beq.n	80054cc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80054a4:	4b13      	ldr	r3, [pc, #76]	; (80054f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	0c5b      	lsrs	r3, r3, #17
 80054aa:	f003 0301 	and.w	r3, r3, #1
 80054ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80054b2:	4413      	add	r3, r2
 80054b4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80054b8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	4a0e      	ldr	r2, [pc, #56]	; (80054f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80054be:	fb02 f203 	mul.w	r2, r2, r3
 80054c2:	69bb      	ldr	r3, [r7, #24]
 80054c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054c8:	627b      	str	r3, [r7, #36]	; 0x24
 80054ca:	e004      	b.n	80054d6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	4a0b      	ldr	r2, [pc, #44]	; (80054fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80054d0:	fb02 f303 	mul.w	r3, r2, r3
 80054d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80054d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d8:	623b      	str	r3, [r7, #32]
      break;
 80054da:	e002      	b.n	80054e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80054dc:	4b06      	ldr	r3, [pc, #24]	; (80054f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80054de:	623b      	str	r3, [r7, #32]
      break;
 80054e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054e2:	6a3b      	ldr	r3, [r7, #32]
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3728      	adds	r7, #40	; 0x28
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bc90      	pop	{r4, r7}
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop
 80054f0:	080071e8 	.word	0x080071e8
 80054f4:	40021000 	.word	0x40021000
 80054f8:	007a1200 	.word	0x007a1200
 80054fc:	003d0900 	.word	0x003d0900

08005500 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005500:	b480      	push	{r7}
 8005502:	b085      	sub	sp, #20
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005508:	4b0a      	ldr	r3, [pc, #40]	; (8005534 <RCC_Delay+0x34>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a0a      	ldr	r2, [pc, #40]	; (8005538 <RCC_Delay+0x38>)
 800550e:	fba2 2303 	umull	r2, r3, r2, r3
 8005512:	0a5b      	lsrs	r3, r3, #9
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	fb02 f303 	mul.w	r3, r2, r3
 800551a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800551c:	bf00      	nop
  }
  while (Delay --);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	1e5a      	subs	r2, r3, #1
 8005522:	60fa      	str	r2, [r7, #12]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d1f9      	bne.n	800551c <RCC_Delay+0x1c>
}
 8005528:	bf00      	nop
 800552a:	bf00      	nop
 800552c:	3714      	adds	r7, #20
 800552e:	46bd      	mov	sp, r7
 8005530:	bc80      	pop	{r7}
 8005532:	4770      	bx	lr
 8005534:	20000000 	.word	0x20000000
 8005538:	10624dd3 	.word	0x10624dd3

0800553c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b086      	sub	sp, #24
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005544:	2300      	movs	r3, #0
 8005546:	613b      	str	r3, [r7, #16]
 8005548:	2300      	movs	r3, #0
 800554a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0301 	and.w	r3, r3, #1
 8005554:	2b00      	cmp	r3, #0
 8005556:	d07d      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005558:	2300      	movs	r3, #0
 800555a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800555c:	4b4f      	ldr	r3, [pc, #316]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800555e:	69db      	ldr	r3, [r3, #28]
 8005560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005564:	2b00      	cmp	r3, #0
 8005566:	d10d      	bne.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005568:	4b4c      	ldr	r3, [pc, #304]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800556a:	69db      	ldr	r3, [r3, #28]
 800556c:	4a4b      	ldr	r2, [pc, #300]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800556e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005572:	61d3      	str	r3, [r2, #28]
 8005574:	4b49      	ldr	r3, [pc, #292]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005576:	69db      	ldr	r3, [r3, #28]
 8005578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800557c:	60bb      	str	r3, [r7, #8]
 800557e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005580:	2301      	movs	r3, #1
 8005582:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005584:	4b46      	ldr	r3, [pc, #280]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800558c:	2b00      	cmp	r3, #0
 800558e:	d118      	bne.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005590:	4b43      	ldr	r3, [pc, #268]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a42      	ldr	r2, [pc, #264]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800559a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800559c:	f7fe fcba 	bl	8003f14 <HAL_GetTick>
 80055a0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055a2:	e008      	b.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055a4:	f7fe fcb6 	bl	8003f14 <HAL_GetTick>
 80055a8:	4602      	mov	r2, r0
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	2b64      	cmp	r3, #100	; 0x64
 80055b0:	d901      	bls.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	e06d      	b.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055b6:	4b3a      	ldr	r3, [pc, #232]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d0f0      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80055c2:	4b36      	ldr	r3, [pc, #216]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055c4:	6a1b      	ldr	r3, [r3, #32]
 80055c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055ca:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d02e      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055da:	68fa      	ldr	r2, [r7, #12]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d027      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80055e0:	4b2e      	ldr	r3, [pc, #184]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055e2:	6a1b      	ldr	r3, [r3, #32]
 80055e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055e8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80055ea:	4b2e      	ldr	r3, [pc, #184]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80055ec:	2201      	movs	r2, #1
 80055ee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80055f0:	4b2c      	ldr	r3, [pc, #176]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80055f2:	2200      	movs	r2, #0
 80055f4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80055f6:	4a29      	ldr	r2, [pc, #164]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f003 0301 	and.w	r3, r3, #1
 8005602:	2b00      	cmp	r3, #0
 8005604:	d014      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005606:	f7fe fc85 	bl	8003f14 <HAL_GetTick>
 800560a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800560c:	e00a      	b.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800560e:	f7fe fc81 	bl	8003f14 <HAL_GetTick>
 8005612:	4602      	mov	r2, r0
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	f241 3288 	movw	r2, #5000	; 0x1388
 800561c:	4293      	cmp	r3, r2
 800561e:	d901      	bls.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005620:	2303      	movs	r3, #3
 8005622:	e036      	b.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005624:	4b1d      	ldr	r3, [pc, #116]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005626:	6a1b      	ldr	r3, [r3, #32]
 8005628:	f003 0302 	and.w	r3, r3, #2
 800562c:	2b00      	cmp	r3, #0
 800562e:	d0ee      	beq.n	800560e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005630:	4b1a      	ldr	r3, [pc, #104]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005632:	6a1b      	ldr	r3, [r3, #32]
 8005634:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	4917      	ldr	r1, [pc, #92]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800563e:	4313      	orrs	r3, r2
 8005640:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005642:	7dfb      	ldrb	r3, [r7, #23]
 8005644:	2b01      	cmp	r3, #1
 8005646:	d105      	bne.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005648:	4b14      	ldr	r3, [pc, #80]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800564a:	69db      	ldr	r3, [r3, #28]
 800564c:	4a13      	ldr	r2, [pc, #76]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800564e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005652:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0302 	and.w	r3, r3, #2
 800565c:	2b00      	cmp	r3, #0
 800565e:	d008      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005660:	4b0e      	ldr	r3, [pc, #56]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	490b      	ldr	r1, [pc, #44]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800566e:	4313      	orrs	r3, r2
 8005670:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0310 	and.w	r3, r3, #16
 800567a:	2b00      	cmp	r3, #0
 800567c:	d008      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800567e:	4b07      	ldr	r3, [pc, #28]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	695b      	ldr	r3, [r3, #20]
 800568a:	4904      	ldr	r1, [pc, #16]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800568c:	4313      	orrs	r3, r2
 800568e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3718      	adds	r7, #24
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	40021000 	.word	0x40021000
 80056a0:	40007000 	.word	0x40007000
 80056a4:	42420440 	.word	0x42420440

080056a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d101      	bne.n	80056ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e076      	b.n	80057a8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d108      	bne.n	80056d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056ca:	d009      	beq.n	80056e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	61da      	str	r2, [r3, #28]
 80056d2:	e005      	b.n	80056e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d106      	bne.n	8005700 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f7fb fda8 	bl	8001250 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2202      	movs	r2, #2
 8005704:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005716:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005728:	431a      	orrs	r2, r3
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005732:	431a      	orrs	r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	f003 0302 	and.w	r3, r3, #2
 800573c:	431a      	orrs	r2, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	695b      	ldr	r3, [r3, #20]
 8005742:	f003 0301 	and.w	r3, r3, #1
 8005746:	431a      	orrs	r2, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	699b      	ldr	r3, [r3, #24]
 800574c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005750:	431a      	orrs	r2, r3
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	69db      	ldr	r3, [r3, #28]
 8005756:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800575a:	431a      	orrs	r2, r3
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a1b      	ldr	r3, [r3, #32]
 8005760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005764:	ea42 0103 	orr.w	r1, r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800576c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	430a      	orrs	r2, r1
 8005776:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	699b      	ldr	r3, [r3, #24]
 800577c:	0c1a      	lsrs	r2, r3, #16
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f002 0204 	and.w	r2, r2, #4
 8005786:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	69da      	ldr	r2, [r3, #28]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005796:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2201      	movs	r2, #1
 80057a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3708      	adds	r7, #8
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b08c      	sub	sp, #48	; 0x30
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	607a      	str	r2, [r7, #4]
 80057bc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80057be:	2301      	movs	r3, #1
 80057c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80057c2:	2300      	movs	r3, #0
 80057c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d101      	bne.n	80057d6 <HAL_SPI_TransmitReceive+0x26>
 80057d2:	2302      	movs	r3, #2
 80057d4:	e18a      	b.n	8005aec <HAL_SPI_TransmitReceive+0x33c>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2201      	movs	r2, #1
 80057da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057de:	f7fe fb99 	bl	8003f14 <HAL_GetTick>
 80057e2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80057f4:	887b      	ldrh	r3, [r7, #2]
 80057f6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80057f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d00f      	beq.n	8005820 <HAL_SPI_TransmitReceive+0x70>
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005806:	d107      	bne.n	8005818 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d103      	bne.n	8005818 <HAL_SPI_TransmitReceive+0x68>
 8005810:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005814:	2b04      	cmp	r3, #4
 8005816:	d003      	beq.n	8005820 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005818:	2302      	movs	r3, #2
 800581a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800581e:	e15b      	b.n	8005ad8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d005      	beq.n	8005832 <HAL_SPI_TransmitReceive+0x82>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d002      	beq.n	8005832 <HAL_SPI_TransmitReceive+0x82>
 800582c:	887b      	ldrh	r3, [r7, #2]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d103      	bne.n	800583a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005838:	e14e      	b.n	8005ad8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005840:	b2db      	uxtb	r3, r3
 8005842:	2b04      	cmp	r3, #4
 8005844:	d003      	beq.n	800584e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2205      	movs	r2, #5
 800584a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2200      	movs	r2, #0
 8005852:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	887a      	ldrh	r2, [r7, #2]
 800585e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	887a      	ldrh	r2, [r7, #2]
 8005864:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	68ba      	ldr	r2, [r7, #8]
 800586a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	887a      	ldrh	r2, [r7, #2]
 8005870:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	887a      	ldrh	r2, [r7, #2]
 8005876:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2200      	movs	r2, #0
 8005882:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800588e:	2b40      	cmp	r3, #64	; 0x40
 8005890:	d007      	beq.n	80058a2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058aa:	d178      	bne.n	800599e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d002      	beq.n	80058ba <HAL_SPI_TransmitReceive+0x10a>
 80058b4:	8b7b      	ldrh	r3, [r7, #26]
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d166      	bne.n	8005988 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058be:	881a      	ldrh	r2, [r3, #0]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ca:	1c9a      	adds	r2, r3, #2
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	3b01      	subs	r3, #1
 80058d8:	b29a      	uxth	r2, r3
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058de:	e053      	b.n	8005988 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	f003 0302 	and.w	r3, r3, #2
 80058ea:	2b02      	cmp	r3, #2
 80058ec:	d11b      	bne.n	8005926 <HAL_SPI_TransmitReceive+0x176>
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d016      	beq.n	8005926 <HAL_SPI_TransmitReceive+0x176>
 80058f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d113      	bne.n	8005926 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005902:	881a      	ldrh	r2, [r3, #0]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800590e:	1c9a      	adds	r2, r3, #2
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005918:	b29b      	uxth	r3, r3
 800591a:	3b01      	subs	r3, #1
 800591c:	b29a      	uxth	r2, r3
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005922:	2300      	movs	r3, #0
 8005924:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	f003 0301 	and.w	r3, r3, #1
 8005930:	2b01      	cmp	r3, #1
 8005932:	d119      	bne.n	8005968 <HAL_SPI_TransmitReceive+0x1b8>
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005938:	b29b      	uxth	r3, r3
 800593a:	2b00      	cmp	r3, #0
 800593c:	d014      	beq.n	8005968 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68da      	ldr	r2, [r3, #12]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005948:	b292      	uxth	r2, r2
 800594a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005950:	1c9a      	adds	r2, r3, #2
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800595a:	b29b      	uxth	r3, r3
 800595c:	3b01      	subs	r3, #1
 800595e:	b29a      	uxth	r2, r3
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005964:	2301      	movs	r3, #1
 8005966:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005968:	f7fe fad4 	bl	8003f14 <HAL_GetTick>
 800596c:	4602      	mov	r2, r0
 800596e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005974:	429a      	cmp	r2, r3
 8005976:	d807      	bhi.n	8005988 <HAL_SPI_TransmitReceive+0x1d8>
 8005978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800597a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800597e:	d003      	beq.n	8005988 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005980:	2303      	movs	r3, #3
 8005982:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005986:	e0a7      	b.n	8005ad8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800598c:	b29b      	uxth	r3, r3
 800598e:	2b00      	cmp	r3, #0
 8005990:	d1a6      	bne.n	80058e0 <HAL_SPI_TransmitReceive+0x130>
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005996:	b29b      	uxth	r3, r3
 8005998:	2b00      	cmp	r3, #0
 800599a:	d1a1      	bne.n	80058e0 <HAL_SPI_TransmitReceive+0x130>
 800599c:	e07c      	b.n	8005a98 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d002      	beq.n	80059ac <HAL_SPI_TransmitReceive+0x1fc>
 80059a6:	8b7b      	ldrh	r3, [r7, #26]
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d16b      	bne.n	8005a84 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	330c      	adds	r3, #12
 80059b6:	7812      	ldrb	r2, [r2, #0]
 80059b8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059be:	1c5a      	adds	r2, r3, #1
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	3b01      	subs	r3, #1
 80059cc:	b29a      	uxth	r2, r3
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059d2:	e057      	b.n	8005a84 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	f003 0302 	and.w	r3, r3, #2
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d11c      	bne.n	8005a1c <HAL_SPI_TransmitReceive+0x26c>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d017      	beq.n	8005a1c <HAL_SPI_TransmitReceive+0x26c>
 80059ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d114      	bne.n	8005a1c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	330c      	adds	r3, #12
 80059fc:	7812      	ldrb	r2, [r2, #0]
 80059fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a04:	1c5a      	adds	r2, r3, #1
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	3b01      	subs	r3, #1
 8005a12:	b29a      	uxth	r2, r3
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	f003 0301 	and.w	r3, r3, #1
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d119      	bne.n	8005a5e <HAL_SPI_TransmitReceive+0x2ae>
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d014      	beq.n	8005a5e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68da      	ldr	r2, [r3, #12]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a3e:	b2d2      	uxtb	r2, r2
 8005a40:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a46:	1c5a      	adds	r2, r3, #1
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	3b01      	subs	r3, #1
 8005a54:	b29a      	uxth	r2, r3
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005a5e:	f7fe fa59 	bl	8003f14 <HAL_GetTick>
 8005a62:	4602      	mov	r2, r0
 8005a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a66:	1ad3      	subs	r3, r2, r3
 8005a68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d803      	bhi.n	8005a76 <HAL_SPI_TransmitReceive+0x2c6>
 8005a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a74:	d102      	bne.n	8005a7c <HAL_SPI_TransmitReceive+0x2cc>
 8005a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d103      	bne.n	8005a84 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005a82:	e029      	b.n	8005ad8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d1a2      	bne.n	80059d4 <HAL_SPI_TransmitReceive+0x224>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d19d      	bne.n	80059d4 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005a9c:	68f8      	ldr	r0, [r7, #12]
 8005a9e:	f000 f8b1 	bl	8005c04 <SPI_EndRxTxTransaction>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d006      	beq.n	8005ab6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2220      	movs	r2, #32
 8005ab2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005ab4:	e010      	b.n	8005ad8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d10b      	bne.n	8005ad6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005abe:	2300      	movs	r3, #0
 8005ac0:	617b      	str	r3, [r7, #20]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	617b      	str	r3, [r7, #20]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	617b      	str	r3, [r7, #20]
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	e000      	b.n	8005ad8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005ad6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005ae8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3730      	adds	r7, #48	; 0x30
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b088      	sub	sp, #32
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	603b      	str	r3, [r7, #0]
 8005b00:	4613      	mov	r3, r2
 8005b02:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005b04:	f7fe fa06 	bl	8003f14 <HAL_GetTick>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b0c:	1a9b      	subs	r3, r3, r2
 8005b0e:	683a      	ldr	r2, [r7, #0]
 8005b10:	4413      	add	r3, r2
 8005b12:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005b14:	f7fe f9fe 	bl	8003f14 <HAL_GetTick>
 8005b18:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005b1a:	4b39      	ldr	r3, [pc, #228]	; (8005c00 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	015b      	lsls	r3, r3, #5
 8005b20:	0d1b      	lsrs	r3, r3, #20
 8005b22:	69fa      	ldr	r2, [r7, #28]
 8005b24:	fb02 f303 	mul.w	r3, r2, r3
 8005b28:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b2a:	e054      	b.n	8005bd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b32:	d050      	beq.n	8005bd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005b34:	f7fe f9ee 	bl	8003f14 <HAL_GetTick>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	69fa      	ldr	r2, [r7, #28]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d902      	bls.n	8005b4a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d13d      	bne.n	8005bc6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	685a      	ldr	r2, [r3, #4]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005b58:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b62:	d111      	bne.n	8005b88 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b6c:	d004      	beq.n	8005b78 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b76:	d107      	bne.n	8005b88 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b86:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b90:	d10f      	bne.n	8005bb2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ba0:	601a      	str	r2, [r3, #0]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005bb0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	e017      	b.n	8005bf6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d101      	bne.n	8005bd0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	3b01      	subs	r3, #1
 8005bd4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	689a      	ldr	r2, [r3, #8]
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	4013      	ands	r3, r2
 8005be0:	68ba      	ldr	r2, [r7, #8]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	bf0c      	ite	eq
 8005be6:	2301      	moveq	r3, #1
 8005be8:	2300      	movne	r3, #0
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	461a      	mov	r2, r3
 8005bee:	79fb      	ldrb	r3, [r7, #7]
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d19b      	bne.n	8005b2c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3720      	adds	r7, #32
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	20000000 	.word	0x20000000

08005c04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b086      	sub	sp, #24
 8005c08:	af02      	add	r7, sp, #8
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	60b9      	str	r1, [r7, #8]
 8005c0e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	9300      	str	r3, [sp, #0]
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	2200      	movs	r2, #0
 8005c18:	2180      	movs	r1, #128	; 0x80
 8005c1a:	68f8      	ldr	r0, [r7, #12]
 8005c1c:	f7ff ff6a 	bl	8005af4 <SPI_WaitFlagStateUntilTimeout>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d007      	beq.n	8005c36 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c2a:	f043 0220 	orr.w	r2, r3, #32
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005c32:	2303      	movs	r3, #3
 8005c34:	e000      	b.n	8005c38 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005c36:	2300      	movs	r3, #0
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3710      	adds	r7, #16
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b082      	sub	sp, #8
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d101      	bne.n	8005c52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e041      	b.n	8005cd6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d106      	bne.n	8005c6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f7fb fc72 	bl	8001550 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2202      	movs	r2, #2
 8005c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	3304      	adds	r3, #4
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	4610      	mov	r0, r2
 8005c80:	f000 fa7e 	bl	8006180 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3708      	adds	r7, #8
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
	...

08005ce0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b085      	sub	sp, #20
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d001      	beq.n	8005cf8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e044      	b.n	8005d82 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2202      	movs	r2, #2
 8005cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68da      	ldr	r2, [r3, #12]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f042 0201 	orr.w	r2, r2, #1
 8005d0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a1d      	ldr	r2, [pc, #116]	; (8005d8c <HAL_TIM_Base_Start_IT+0xac>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d018      	beq.n	8005d4c <HAL_TIM_Base_Start_IT+0x6c>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a1c      	ldr	r2, [pc, #112]	; (8005d90 <HAL_TIM_Base_Start_IT+0xb0>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d013      	beq.n	8005d4c <HAL_TIM_Base_Start_IT+0x6c>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d2c:	d00e      	beq.n	8005d4c <HAL_TIM_Base_Start_IT+0x6c>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a18      	ldr	r2, [pc, #96]	; (8005d94 <HAL_TIM_Base_Start_IT+0xb4>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d009      	beq.n	8005d4c <HAL_TIM_Base_Start_IT+0x6c>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a16      	ldr	r2, [pc, #88]	; (8005d98 <HAL_TIM_Base_Start_IT+0xb8>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d004      	beq.n	8005d4c <HAL_TIM_Base_Start_IT+0x6c>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a15      	ldr	r2, [pc, #84]	; (8005d9c <HAL_TIM_Base_Start_IT+0xbc>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d111      	bne.n	8005d70 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	f003 0307 	and.w	r3, r3, #7
 8005d56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2b06      	cmp	r3, #6
 8005d5c:	d010      	beq.n	8005d80 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f042 0201 	orr.w	r2, r2, #1
 8005d6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d6e:	e007      	b.n	8005d80 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f042 0201 	orr.w	r2, r2, #1
 8005d7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d80:	2300      	movs	r3, #0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3714      	adds	r7, #20
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bc80      	pop	{r7}
 8005d8a:	4770      	bx	lr
 8005d8c:	40012c00 	.word	0x40012c00
 8005d90:	40013400 	.word	0x40013400
 8005d94:	40000400 	.word	0x40000400
 8005d98:	40000800 	.word	0x40000800
 8005d9c:	40000c00 	.word	0x40000c00

08005da0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b082      	sub	sp, #8
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	f003 0302 	and.w	r3, r3, #2
 8005db2:	2b02      	cmp	r3, #2
 8005db4:	d122      	bne.n	8005dfc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	f003 0302 	and.w	r3, r3, #2
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	d11b      	bne.n	8005dfc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f06f 0202 	mvn.w	r2, #2
 8005dcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	699b      	ldr	r3, [r3, #24]
 8005dda:	f003 0303 	and.w	r3, r3, #3
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d003      	beq.n	8005dea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 f9b1 	bl	800614a <HAL_TIM_IC_CaptureCallback>
 8005de8:	e005      	b.n	8005df6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 f9a4 	bl	8006138 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 f9b3 	bl	800615c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	f003 0304 	and.w	r3, r3, #4
 8005e06:	2b04      	cmp	r3, #4
 8005e08:	d122      	bne.n	8005e50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	f003 0304 	and.w	r3, r3, #4
 8005e14:	2b04      	cmp	r3, #4
 8005e16:	d11b      	bne.n	8005e50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f06f 0204 	mvn.w	r2, #4
 8005e20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2202      	movs	r2, #2
 8005e26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	699b      	ldr	r3, [r3, #24]
 8005e2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d003      	beq.n	8005e3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 f987 	bl	800614a <HAL_TIM_IC_CaptureCallback>
 8005e3c:	e005      	b.n	8005e4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 f97a 	bl	8006138 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 f989 	bl	800615c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	f003 0308 	and.w	r3, r3, #8
 8005e5a:	2b08      	cmp	r3, #8
 8005e5c:	d122      	bne.n	8005ea4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	f003 0308 	and.w	r3, r3, #8
 8005e68:	2b08      	cmp	r3, #8
 8005e6a:	d11b      	bne.n	8005ea4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f06f 0208 	mvn.w	r2, #8
 8005e74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2204      	movs	r2, #4
 8005e7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	69db      	ldr	r3, [r3, #28]
 8005e82:	f003 0303 	and.w	r3, r3, #3
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d003      	beq.n	8005e92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 f95d 	bl	800614a <HAL_TIM_IC_CaptureCallback>
 8005e90:	e005      	b.n	8005e9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 f950 	bl	8006138 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 f95f 	bl	800615c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	f003 0310 	and.w	r3, r3, #16
 8005eae:	2b10      	cmp	r3, #16
 8005eb0:	d122      	bne.n	8005ef8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	f003 0310 	and.w	r3, r3, #16
 8005ebc:	2b10      	cmp	r3, #16
 8005ebe:	d11b      	bne.n	8005ef8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f06f 0210 	mvn.w	r2, #16
 8005ec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2208      	movs	r2, #8
 8005ece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	69db      	ldr	r3, [r3, #28]
 8005ed6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d003      	beq.n	8005ee6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 f933 	bl	800614a <HAL_TIM_IC_CaptureCallback>
 8005ee4:	e005      	b.n	8005ef2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 f926 	bl	8006138 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 f935 	bl	800615c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	f003 0301 	and.w	r3, r3, #1
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d10e      	bne.n	8005f24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	f003 0301 	and.w	r3, r3, #1
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d107      	bne.n	8005f24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f06f 0201 	mvn.w	r2, #1
 8005f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f7fa ff76 	bl	8000e10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f2e:	2b80      	cmp	r3, #128	; 0x80
 8005f30:	d10e      	bne.n	8005f50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f3c:	2b80      	cmp	r3, #128	; 0x80
 8005f3e:	d107      	bne.n	8005f50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 fa9d 	bl	800648a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f5a:	2b40      	cmp	r3, #64	; 0x40
 8005f5c:	d10e      	bne.n	8005f7c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f68:	2b40      	cmp	r3, #64	; 0x40
 8005f6a:	d107      	bne.n	8005f7c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 f8f9 	bl	800616e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	f003 0320 	and.w	r3, r3, #32
 8005f86:	2b20      	cmp	r3, #32
 8005f88:	d10e      	bne.n	8005fa8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	f003 0320 	and.w	r3, r3, #32
 8005f94:	2b20      	cmp	r3, #32
 8005f96:	d107      	bne.n	8005fa8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f06f 0220 	mvn.w	r2, #32
 8005fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 fa68 	bl	8006478 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005fa8:	bf00      	nop
 8005faa:	3708      	adds	r7, #8
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d101      	bne.n	8005fc8 <HAL_TIM_ConfigClockSource+0x18>
 8005fc4:	2302      	movs	r3, #2
 8005fc6:	e0b3      	b.n	8006130 <HAL_TIM_ConfigClockSource+0x180>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2202      	movs	r2, #2
 8005fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005fe6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006000:	d03e      	beq.n	8006080 <HAL_TIM_ConfigClockSource+0xd0>
 8006002:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006006:	f200 8087 	bhi.w	8006118 <HAL_TIM_ConfigClockSource+0x168>
 800600a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800600e:	f000 8085 	beq.w	800611c <HAL_TIM_ConfigClockSource+0x16c>
 8006012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006016:	d87f      	bhi.n	8006118 <HAL_TIM_ConfigClockSource+0x168>
 8006018:	2b70      	cmp	r3, #112	; 0x70
 800601a:	d01a      	beq.n	8006052 <HAL_TIM_ConfigClockSource+0xa2>
 800601c:	2b70      	cmp	r3, #112	; 0x70
 800601e:	d87b      	bhi.n	8006118 <HAL_TIM_ConfigClockSource+0x168>
 8006020:	2b60      	cmp	r3, #96	; 0x60
 8006022:	d050      	beq.n	80060c6 <HAL_TIM_ConfigClockSource+0x116>
 8006024:	2b60      	cmp	r3, #96	; 0x60
 8006026:	d877      	bhi.n	8006118 <HAL_TIM_ConfigClockSource+0x168>
 8006028:	2b50      	cmp	r3, #80	; 0x50
 800602a:	d03c      	beq.n	80060a6 <HAL_TIM_ConfigClockSource+0xf6>
 800602c:	2b50      	cmp	r3, #80	; 0x50
 800602e:	d873      	bhi.n	8006118 <HAL_TIM_ConfigClockSource+0x168>
 8006030:	2b40      	cmp	r3, #64	; 0x40
 8006032:	d058      	beq.n	80060e6 <HAL_TIM_ConfigClockSource+0x136>
 8006034:	2b40      	cmp	r3, #64	; 0x40
 8006036:	d86f      	bhi.n	8006118 <HAL_TIM_ConfigClockSource+0x168>
 8006038:	2b30      	cmp	r3, #48	; 0x30
 800603a:	d064      	beq.n	8006106 <HAL_TIM_ConfigClockSource+0x156>
 800603c:	2b30      	cmp	r3, #48	; 0x30
 800603e:	d86b      	bhi.n	8006118 <HAL_TIM_ConfigClockSource+0x168>
 8006040:	2b20      	cmp	r3, #32
 8006042:	d060      	beq.n	8006106 <HAL_TIM_ConfigClockSource+0x156>
 8006044:	2b20      	cmp	r3, #32
 8006046:	d867      	bhi.n	8006118 <HAL_TIM_ConfigClockSource+0x168>
 8006048:	2b00      	cmp	r3, #0
 800604a:	d05c      	beq.n	8006106 <HAL_TIM_ConfigClockSource+0x156>
 800604c:	2b10      	cmp	r3, #16
 800604e:	d05a      	beq.n	8006106 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006050:	e062      	b.n	8006118 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6818      	ldr	r0, [r3, #0]
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	6899      	ldr	r1, [r3, #8]
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	685a      	ldr	r2, [r3, #4]
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	f000 f97e 	bl	8006362 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006074:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	609a      	str	r2, [r3, #8]
      break;
 800607e:	e04e      	b.n	800611e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6818      	ldr	r0, [r3, #0]
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	6899      	ldr	r1, [r3, #8]
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	685a      	ldr	r2, [r3, #4]
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	f000 f967 	bl	8006362 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	689a      	ldr	r2, [r3, #8]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80060a2:	609a      	str	r2, [r3, #8]
      break;
 80060a4:	e03b      	b.n	800611e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6818      	ldr	r0, [r3, #0]
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	6859      	ldr	r1, [r3, #4]
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	461a      	mov	r2, r3
 80060b4:	f000 f8de 	bl	8006274 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2150      	movs	r1, #80	; 0x50
 80060be:	4618      	mov	r0, r3
 80060c0:	f000 f935 	bl	800632e <TIM_ITRx_SetConfig>
      break;
 80060c4:	e02b      	b.n	800611e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6818      	ldr	r0, [r3, #0]
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	6859      	ldr	r1, [r3, #4]
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	461a      	mov	r2, r3
 80060d4:	f000 f8fc 	bl	80062d0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2160      	movs	r1, #96	; 0x60
 80060de:	4618      	mov	r0, r3
 80060e0:	f000 f925 	bl	800632e <TIM_ITRx_SetConfig>
      break;
 80060e4:	e01b      	b.n	800611e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6818      	ldr	r0, [r3, #0]
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	6859      	ldr	r1, [r3, #4]
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	461a      	mov	r2, r3
 80060f4:	f000 f8be 	bl	8006274 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2140      	movs	r1, #64	; 0x40
 80060fe:	4618      	mov	r0, r3
 8006100:	f000 f915 	bl	800632e <TIM_ITRx_SetConfig>
      break;
 8006104:	e00b      	b.n	800611e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4619      	mov	r1, r3
 8006110:	4610      	mov	r0, r2
 8006112:	f000 f90c 	bl	800632e <TIM_ITRx_SetConfig>
        break;
 8006116:	e002      	b.n	800611e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006118:	bf00      	nop
 800611a:	e000      	b.n	800611e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800611c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2201      	movs	r2, #1
 8006122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800612e:	2300      	movs	r3, #0
}
 8006130:	4618      	mov	r0, r3
 8006132:	3710      	adds	r7, #16
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006138:	b480      	push	{r7}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006140:	bf00      	nop
 8006142:	370c      	adds	r7, #12
 8006144:	46bd      	mov	sp, r7
 8006146:	bc80      	pop	{r7}
 8006148:	4770      	bx	lr

0800614a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800614a:	b480      	push	{r7}
 800614c:	b083      	sub	sp, #12
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006152:	bf00      	nop
 8006154:	370c      	adds	r7, #12
 8006156:	46bd      	mov	sp, r7
 8006158:	bc80      	pop	{r7}
 800615a:	4770      	bx	lr

0800615c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006164:	bf00      	nop
 8006166:	370c      	adds	r7, #12
 8006168:	46bd      	mov	sp, r7
 800616a:	bc80      	pop	{r7}
 800616c:	4770      	bx	lr

0800616e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800616e:	b480      	push	{r7}
 8006170:	b083      	sub	sp, #12
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006176:	bf00      	nop
 8006178:	370c      	adds	r7, #12
 800617a:	46bd      	mov	sp, r7
 800617c:	bc80      	pop	{r7}
 800617e:	4770      	bx	lr

08006180 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006180:	b480      	push	{r7}
 8006182:	b085      	sub	sp, #20
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a33      	ldr	r2, [pc, #204]	; (8006260 <TIM_Base_SetConfig+0xe0>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d013      	beq.n	80061c0 <TIM_Base_SetConfig+0x40>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4a32      	ldr	r2, [pc, #200]	; (8006264 <TIM_Base_SetConfig+0xe4>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d00f      	beq.n	80061c0 <TIM_Base_SetConfig+0x40>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061a6:	d00b      	beq.n	80061c0 <TIM_Base_SetConfig+0x40>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a2f      	ldr	r2, [pc, #188]	; (8006268 <TIM_Base_SetConfig+0xe8>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d007      	beq.n	80061c0 <TIM_Base_SetConfig+0x40>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4a2e      	ldr	r2, [pc, #184]	; (800626c <TIM_Base_SetConfig+0xec>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d003      	beq.n	80061c0 <TIM_Base_SetConfig+0x40>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4a2d      	ldr	r2, [pc, #180]	; (8006270 <TIM_Base_SetConfig+0xf0>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d108      	bne.n	80061d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a22      	ldr	r2, [pc, #136]	; (8006260 <TIM_Base_SetConfig+0xe0>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d013      	beq.n	8006202 <TIM_Base_SetConfig+0x82>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a21      	ldr	r2, [pc, #132]	; (8006264 <TIM_Base_SetConfig+0xe4>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d00f      	beq.n	8006202 <TIM_Base_SetConfig+0x82>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061e8:	d00b      	beq.n	8006202 <TIM_Base_SetConfig+0x82>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a1e      	ldr	r2, [pc, #120]	; (8006268 <TIM_Base_SetConfig+0xe8>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d007      	beq.n	8006202 <TIM_Base_SetConfig+0x82>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a1d      	ldr	r2, [pc, #116]	; (800626c <TIM_Base_SetConfig+0xec>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d003      	beq.n	8006202 <TIM_Base_SetConfig+0x82>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a1c      	ldr	r2, [pc, #112]	; (8006270 <TIM_Base_SetConfig+0xf0>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d108      	bne.n	8006214 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006208:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	4313      	orrs	r3, r2
 8006212:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	695b      	ldr	r3, [r3, #20]
 800621e:	4313      	orrs	r3, r2
 8006220:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	689a      	ldr	r2, [r3, #8]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a09      	ldr	r2, [pc, #36]	; (8006260 <TIM_Base_SetConfig+0xe0>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d003      	beq.n	8006248 <TIM_Base_SetConfig+0xc8>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a08      	ldr	r2, [pc, #32]	; (8006264 <TIM_Base_SetConfig+0xe4>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d103      	bne.n	8006250 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	691a      	ldr	r2, [r3, #16]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	615a      	str	r2, [r3, #20]
}
 8006256:	bf00      	nop
 8006258:	3714      	adds	r7, #20
 800625a:	46bd      	mov	sp, r7
 800625c:	bc80      	pop	{r7}
 800625e:	4770      	bx	lr
 8006260:	40012c00 	.word	0x40012c00
 8006264:	40013400 	.word	0x40013400
 8006268:	40000400 	.word	0x40000400
 800626c:	40000800 	.word	0x40000800
 8006270:	40000c00 	.word	0x40000c00

08006274 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006274:	b480      	push	{r7}
 8006276:	b087      	sub	sp, #28
 8006278:	af00      	add	r7, sp, #0
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	60b9      	str	r1, [r7, #8]
 800627e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6a1b      	ldr	r3, [r3, #32]
 8006284:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6a1b      	ldr	r3, [r3, #32]
 800628a:	f023 0201 	bic.w	r2, r3, #1
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	699b      	ldr	r3, [r3, #24]
 8006296:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800629e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	011b      	lsls	r3, r3, #4
 80062a4:	693a      	ldr	r2, [r7, #16]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	f023 030a 	bic.w	r3, r3, #10
 80062b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062b2:	697a      	ldr	r2, [r7, #20]
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	693a      	ldr	r2, [r7, #16]
 80062be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	697a      	ldr	r2, [r7, #20]
 80062c4:	621a      	str	r2, [r3, #32]
}
 80062c6:	bf00      	nop
 80062c8:	371c      	adds	r7, #28
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bc80      	pop	{r7}
 80062ce:	4770      	bx	lr

080062d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b087      	sub	sp, #28
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6a1b      	ldr	r3, [r3, #32]
 80062e0:	f023 0210 	bic.w	r2, r3, #16
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	699b      	ldr	r3, [r3, #24]
 80062ec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	6a1b      	ldr	r3, [r3, #32]
 80062f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80062fa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	031b      	lsls	r3, r3, #12
 8006300:	697a      	ldr	r2, [r7, #20]
 8006302:	4313      	orrs	r3, r2
 8006304:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800630c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	011b      	lsls	r3, r3, #4
 8006312:	693a      	ldr	r2, [r7, #16]
 8006314:	4313      	orrs	r3, r2
 8006316:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	697a      	ldr	r2, [r7, #20]
 800631c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	693a      	ldr	r2, [r7, #16]
 8006322:	621a      	str	r2, [r3, #32]
}
 8006324:	bf00      	nop
 8006326:	371c      	adds	r7, #28
 8006328:	46bd      	mov	sp, r7
 800632a:	bc80      	pop	{r7}
 800632c:	4770      	bx	lr

0800632e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800632e:	b480      	push	{r7}
 8006330:	b085      	sub	sp, #20
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
 8006336:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006344:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006346:	683a      	ldr	r2, [r7, #0]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	4313      	orrs	r3, r2
 800634c:	f043 0307 	orr.w	r3, r3, #7
 8006350:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	68fa      	ldr	r2, [r7, #12]
 8006356:	609a      	str	r2, [r3, #8]
}
 8006358:	bf00      	nop
 800635a:	3714      	adds	r7, #20
 800635c:	46bd      	mov	sp, r7
 800635e:	bc80      	pop	{r7}
 8006360:	4770      	bx	lr

08006362 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006362:	b480      	push	{r7}
 8006364:	b087      	sub	sp, #28
 8006366:	af00      	add	r7, sp, #0
 8006368:	60f8      	str	r0, [r7, #12]
 800636a:	60b9      	str	r1, [r7, #8]
 800636c:	607a      	str	r2, [r7, #4]
 800636e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800637c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	021a      	lsls	r2, r3, #8
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	431a      	orrs	r2, r3
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	4313      	orrs	r3, r2
 800638a:	697a      	ldr	r2, [r7, #20]
 800638c:	4313      	orrs	r3, r2
 800638e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	697a      	ldr	r2, [r7, #20]
 8006394:	609a      	str	r2, [r3, #8]
}
 8006396:	bf00      	nop
 8006398:	371c      	adds	r7, #28
 800639a:	46bd      	mov	sp, r7
 800639c:	bc80      	pop	{r7}
 800639e:	4770      	bx	lr

080063a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b085      	sub	sp, #20
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d101      	bne.n	80063b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063b4:	2302      	movs	r3, #2
 80063b6:	e050      	b.n	800645a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2202      	movs	r2, #2
 80063c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	68fa      	ldr	r2, [r7, #12]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68fa      	ldr	r2, [r7, #12]
 80063f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a1b      	ldr	r2, [pc, #108]	; (8006464 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d018      	beq.n	800642e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a19      	ldr	r2, [pc, #100]	; (8006468 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d013      	beq.n	800642e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800640e:	d00e      	beq.n	800642e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a15      	ldr	r2, [pc, #84]	; (800646c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d009      	beq.n	800642e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a14      	ldr	r2, [pc, #80]	; (8006470 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d004      	beq.n	800642e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a12      	ldr	r2, [pc, #72]	; (8006474 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d10c      	bne.n	8006448 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006434:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	68ba      	ldr	r2, [r7, #8]
 800643c:	4313      	orrs	r3, r2
 800643e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	68ba      	ldr	r2, [r7, #8]
 8006446:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2201      	movs	r2, #1
 800644c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006458:	2300      	movs	r3, #0
}
 800645a:	4618      	mov	r0, r3
 800645c:	3714      	adds	r7, #20
 800645e:	46bd      	mov	sp, r7
 8006460:	bc80      	pop	{r7}
 8006462:	4770      	bx	lr
 8006464:	40012c00 	.word	0x40012c00
 8006468:	40013400 	.word	0x40013400
 800646c:	40000400 	.word	0x40000400
 8006470:	40000800 	.word	0x40000800
 8006474:	40000c00 	.word	0x40000c00

08006478 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006480:	bf00      	nop
 8006482:	370c      	adds	r7, #12
 8006484:	46bd      	mov	sp, r7
 8006486:	bc80      	pop	{r7}
 8006488:	4770      	bx	lr

0800648a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800648a:	b480      	push	{r7}
 800648c:	b083      	sub	sp, #12
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006492:	bf00      	nop
 8006494:	370c      	adds	r7, #12
 8006496:	46bd      	mov	sp, r7
 8006498:	bc80      	pop	{r7}
 800649a:	4770      	bx	lr

0800649c <calloc>:
 800649c:	4b02      	ldr	r3, [pc, #8]	; (80064a8 <calloc+0xc>)
 800649e:	460a      	mov	r2, r1
 80064a0:	4601      	mov	r1, r0
 80064a2:	6818      	ldr	r0, [r3, #0]
 80064a4:	f000 b842 	b.w	800652c <_calloc_r>
 80064a8:	200000b4 	.word	0x200000b4

080064ac <__errno>:
 80064ac:	4b01      	ldr	r3, [pc, #4]	; (80064b4 <__errno+0x8>)
 80064ae:	6818      	ldr	r0, [r3, #0]
 80064b0:	4770      	bx	lr
 80064b2:	bf00      	nop
 80064b4:	200000b4 	.word	0x200000b4

080064b8 <__libc_init_array>:
 80064b8:	b570      	push	{r4, r5, r6, lr}
 80064ba:	2600      	movs	r6, #0
 80064bc:	4d0c      	ldr	r5, [pc, #48]	; (80064f0 <__libc_init_array+0x38>)
 80064be:	4c0d      	ldr	r4, [pc, #52]	; (80064f4 <__libc_init_array+0x3c>)
 80064c0:	1b64      	subs	r4, r4, r5
 80064c2:	10a4      	asrs	r4, r4, #2
 80064c4:	42a6      	cmp	r6, r4
 80064c6:	d109      	bne.n	80064dc <__libc_init_array+0x24>
 80064c8:	f000 fe20 	bl	800710c <_init>
 80064cc:	2600      	movs	r6, #0
 80064ce:	4d0a      	ldr	r5, [pc, #40]	; (80064f8 <__libc_init_array+0x40>)
 80064d0:	4c0a      	ldr	r4, [pc, #40]	; (80064fc <__libc_init_array+0x44>)
 80064d2:	1b64      	subs	r4, r4, r5
 80064d4:	10a4      	asrs	r4, r4, #2
 80064d6:	42a6      	cmp	r6, r4
 80064d8:	d105      	bne.n	80064e6 <__libc_init_array+0x2e>
 80064da:	bd70      	pop	{r4, r5, r6, pc}
 80064dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80064e0:	4798      	blx	r3
 80064e2:	3601      	adds	r6, #1
 80064e4:	e7ee      	b.n	80064c4 <__libc_init_array+0xc>
 80064e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80064ea:	4798      	blx	r3
 80064ec:	3601      	adds	r6, #1
 80064ee:	e7f2      	b.n	80064d6 <__libc_init_array+0x1e>
 80064f0:	080073a0 	.word	0x080073a0
 80064f4:	080073a0 	.word	0x080073a0
 80064f8:	080073a0 	.word	0x080073a0
 80064fc:	080073a4 	.word	0x080073a4

08006500 <memcpy>:
 8006500:	440a      	add	r2, r1
 8006502:	4291      	cmp	r1, r2
 8006504:	f100 33ff 	add.w	r3, r0, #4294967295
 8006508:	d100      	bne.n	800650c <memcpy+0xc>
 800650a:	4770      	bx	lr
 800650c:	b510      	push	{r4, lr}
 800650e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006512:	4291      	cmp	r1, r2
 8006514:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006518:	d1f9      	bne.n	800650e <memcpy+0xe>
 800651a:	bd10      	pop	{r4, pc}

0800651c <memset>:
 800651c:	4603      	mov	r3, r0
 800651e:	4402      	add	r2, r0
 8006520:	4293      	cmp	r3, r2
 8006522:	d100      	bne.n	8006526 <memset+0xa>
 8006524:	4770      	bx	lr
 8006526:	f803 1b01 	strb.w	r1, [r3], #1
 800652a:	e7f9      	b.n	8006520 <memset+0x4>

0800652c <_calloc_r>:
 800652c:	b538      	push	{r3, r4, r5, lr}
 800652e:	fb02 f501 	mul.w	r5, r2, r1
 8006532:	4629      	mov	r1, r5
 8006534:	f000 f808 	bl	8006548 <_malloc_r>
 8006538:	4604      	mov	r4, r0
 800653a:	b118      	cbz	r0, 8006544 <_calloc_r+0x18>
 800653c:	462a      	mov	r2, r5
 800653e:	2100      	movs	r1, #0
 8006540:	f7ff ffec 	bl	800651c <memset>
 8006544:	4620      	mov	r0, r4
 8006546:	bd38      	pop	{r3, r4, r5, pc}

08006548 <_malloc_r>:
 8006548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800654a:	1ccd      	adds	r5, r1, #3
 800654c:	f025 0503 	bic.w	r5, r5, #3
 8006550:	3508      	adds	r5, #8
 8006552:	2d0c      	cmp	r5, #12
 8006554:	bf38      	it	cc
 8006556:	250c      	movcc	r5, #12
 8006558:	2d00      	cmp	r5, #0
 800655a:	4606      	mov	r6, r0
 800655c:	db01      	blt.n	8006562 <_malloc_r+0x1a>
 800655e:	42a9      	cmp	r1, r5
 8006560:	d903      	bls.n	800656a <_malloc_r+0x22>
 8006562:	230c      	movs	r3, #12
 8006564:	6033      	str	r3, [r6, #0]
 8006566:	2000      	movs	r0, #0
 8006568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800656a:	f000 f8a3 	bl	80066b4 <__malloc_lock>
 800656e:	4921      	ldr	r1, [pc, #132]	; (80065f4 <_malloc_r+0xac>)
 8006570:	680a      	ldr	r2, [r1, #0]
 8006572:	4614      	mov	r4, r2
 8006574:	b99c      	cbnz	r4, 800659e <_malloc_r+0x56>
 8006576:	4f20      	ldr	r7, [pc, #128]	; (80065f8 <_malloc_r+0xb0>)
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	b923      	cbnz	r3, 8006586 <_malloc_r+0x3e>
 800657c:	4621      	mov	r1, r4
 800657e:	4630      	mov	r0, r6
 8006580:	f000 f83c 	bl	80065fc <_sbrk_r>
 8006584:	6038      	str	r0, [r7, #0]
 8006586:	4629      	mov	r1, r5
 8006588:	4630      	mov	r0, r6
 800658a:	f000 f837 	bl	80065fc <_sbrk_r>
 800658e:	1c43      	adds	r3, r0, #1
 8006590:	d123      	bne.n	80065da <_malloc_r+0x92>
 8006592:	230c      	movs	r3, #12
 8006594:	4630      	mov	r0, r6
 8006596:	6033      	str	r3, [r6, #0]
 8006598:	f000 f892 	bl	80066c0 <__malloc_unlock>
 800659c:	e7e3      	b.n	8006566 <_malloc_r+0x1e>
 800659e:	6823      	ldr	r3, [r4, #0]
 80065a0:	1b5b      	subs	r3, r3, r5
 80065a2:	d417      	bmi.n	80065d4 <_malloc_r+0x8c>
 80065a4:	2b0b      	cmp	r3, #11
 80065a6:	d903      	bls.n	80065b0 <_malloc_r+0x68>
 80065a8:	6023      	str	r3, [r4, #0]
 80065aa:	441c      	add	r4, r3
 80065ac:	6025      	str	r5, [r4, #0]
 80065ae:	e004      	b.n	80065ba <_malloc_r+0x72>
 80065b0:	6863      	ldr	r3, [r4, #4]
 80065b2:	42a2      	cmp	r2, r4
 80065b4:	bf0c      	ite	eq
 80065b6:	600b      	streq	r3, [r1, #0]
 80065b8:	6053      	strne	r3, [r2, #4]
 80065ba:	4630      	mov	r0, r6
 80065bc:	f000 f880 	bl	80066c0 <__malloc_unlock>
 80065c0:	f104 000b 	add.w	r0, r4, #11
 80065c4:	1d23      	adds	r3, r4, #4
 80065c6:	f020 0007 	bic.w	r0, r0, #7
 80065ca:	1ac2      	subs	r2, r0, r3
 80065cc:	d0cc      	beq.n	8006568 <_malloc_r+0x20>
 80065ce:	1a1b      	subs	r3, r3, r0
 80065d0:	50a3      	str	r3, [r4, r2]
 80065d2:	e7c9      	b.n	8006568 <_malloc_r+0x20>
 80065d4:	4622      	mov	r2, r4
 80065d6:	6864      	ldr	r4, [r4, #4]
 80065d8:	e7cc      	b.n	8006574 <_malloc_r+0x2c>
 80065da:	1cc4      	adds	r4, r0, #3
 80065dc:	f024 0403 	bic.w	r4, r4, #3
 80065e0:	42a0      	cmp	r0, r4
 80065e2:	d0e3      	beq.n	80065ac <_malloc_r+0x64>
 80065e4:	1a21      	subs	r1, r4, r0
 80065e6:	4630      	mov	r0, r6
 80065e8:	f000 f808 	bl	80065fc <_sbrk_r>
 80065ec:	3001      	adds	r0, #1
 80065ee:	d1dd      	bne.n	80065ac <_malloc_r+0x64>
 80065f0:	e7cf      	b.n	8006592 <_malloc_r+0x4a>
 80065f2:	bf00      	nop
 80065f4:	20000288 	.word	0x20000288
 80065f8:	2000028c 	.word	0x2000028c

080065fc <_sbrk_r>:
 80065fc:	b538      	push	{r3, r4, r5, lr}
 80065fe:	2300      	movs	r3, #0
 8006600:	4d05      	ldr	r5, [pc, #20]	; (8006618 <_sbrk_r+0x1c>)
 8006602:	4604      	mov	r4, r0
 8006604:	4608      	mov	r0, r1
 8006606:	602b      	str	r3, [r5, #0]
 8006608:	f7fa fee4 	bl	80013d4 <_sbrk>
 800660c:	1c43      	adds	r3, r0, #1
 800660e:	d102      	bne.n	8006616 <_sbrk_r+0x1a>
 8006610:	682b      	ldr	r3, [r5, #0]
 8006612:	b103      	cbz	r3, 8006616 <_sbrk_r+0x1a>
 8006614:	6023      	str	r3, [r4, #0]
 8006616:	bd38      	pop	{r3, r4, r5, pc}
 8006618:	20001e5c 	.word	0x20001e5c

0800661c <strncmp>:
 800661c:	b510      	push	{r4, lr}
 800661e:	b16a      	cbz	r2, 800663c <strncmp+0x20>
 8006620:	3901      	subs	r1, #1
 8006622:	1884      	adds	r4, r0, r2
 8006624:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006628:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800662c:	4293      	cmp	r3, r2
 800662e:	d103      	bne.n	8006638 <strncmp+0x1c>
 8006630:	42a0      	cmp	r0, r4
 8006632:	d001      	beq.n	8006638 <strncmp+0x1c>
 8006634:	2b00      	cmp	r3, #0
 8006636:	d1f5      	bne.n	8006624 <strncmp+0x8>
 8006638:	1a98      	subs	r0, r3, r2
 800663a:	bd10      	pop	{r4, pc}
 800663c:	4610      	mov	r0, r2
 800663e:	e7fc      	b.n	800663a <strncmp+0x1e>

08006640 <_vsniprintf_r>:
 8006640:	b530      	push	{r4, r5, lr}
 8006642:	1e14      	subs	r4, r2, #0
 8006644:	4605      	mov	r5, r0
 8006646:	b09b      	sub	sp, #108	; 0x6c
 8006648:	4618      	mov	r0, r3
 800664a:	da05      	bge.n	8006658 <_vsniprintf_r+0x18>
 800664c:	238b      	movs	r3, #139	; 0x8b
 800664e:	f04f 30ff 	mov.w	r0, #4294967295
 8006652:	602b      	str	r3, [r5, #0]
 8006654:	b01b      	add	sp, #108	; 0x6c
 8006656:	bd30      	pop	{r4, r5, pc}
 8006658:	f44f 7302 	mov.w	r3, #520	; 0x208
 800665c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8006660:	bf0c      	ite	eq
 8006662:	4623      	moveq	r3, r4
 8006664:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006668:	9302      	str	r3, [sp, #8]
 800666a:	9305      	str	r3, [sp, #20]
 800666c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006670:	4602      	mov	r2, r0
 8006672:	9100      	str	r1, [sp, #0]
 8006674:	9104      	str	r1, [sp, #16]
 8006676:	f8ad 300e 	strh.w	r3, [sp, #14]
 800667a:	4669      	mov	r1, sp
 800667c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800667e:	4628      	mov	r0, r5
 8006680:	f000 f880 	bl	8006784 <_svfiprintf_r>
 8006684:	1c43      	adds	r3, r0, #1
 8006686:	bfbc      	itt	lt
 8006688:	238b      	movlt	r3, #139	; 0x8b
 800668a:	602b      	strlt	r3, [r5, #0]
 800668c:	2c00      	cmp	r4, #0
 800668e:	d0e1      	beq.n	8006654 <_vsniprintf_r+0x14>
 8006690:	2200      	movs	r2, #0
 8006692:	9b00      	ldr	r3, [sp, #0]
 8006694:	701a      	strb	r2, [r3, #0]
 8006696:	e7dd      	b.n	8006654 <_vsniprintf_r+0x14>

08006698 <vsniprintf>:
 8006698:	b507      	push	{r0, r1, r2, lr}
 800669a:	9300      	str	r3, [sp, #0]
 800669c:	4613      	mov	r3, r2
 800669e:	460a      	mov	r2, r1
 80066a0:	4601      	mov	r1, r0
 80066a2:	4803      	ldr	r0, [pc, #12]	; (80066b0 <vsniprintf+0x18>)
 80066a4:	6800      	ldr	r0, [r0, #0]
 80066a6:	f7ff ffcb 	bl	8006640 <_vsniprintf_r>
 80066aa:	b003      	add	sp, #12
 80066ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80066b0:	200000b4 	.word	0x200000b4

080066b4 <__malloc_lock>:
 80066b4:	4801      	ldr	r0, [pc, #4]	; (80066bc <__malloc_lock+0x8>)
 80066b6:	f000 bafb 	b.w	8006cb0 <__retarget_lock_acquire_recursive>
 80066ba:	bf00      	nop
 80066bc:	20001e64 	.word	0x20001e64

080066c0 <__malloc_unlock>:
 80066c0:	4801      	ldr	r0, [pc, #4]	; (80066c8 <__malloc_unlock+0x8>)
 80066c2:	f000 baf6 	b.w	8006cb2 <__retarget_lock_release_recursive>
 80066c6:	bf00      	nop
 80066c8:	20001e64 	.word	0x20001e64

080066cc <__ssputs_r>:
 80066cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066d0:	688e      	ldr	r6, [r1, #8]
 80066d2:	4682      	mov	sl, r0
 80066d4:	429e      	cmp	r6, r3
 80066d6:	460c      	mov	r4, r1
 80066d8:	4690      	mov	r8, r2
 80066da:	461f      	mov	r7, r3
 80066dc:	d838      	bhi.n	8006750 <__ssputs_r+0x84>
 80066de:	898a      	ldrh	r2, [r1, #12]
 80066e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80066e4:	d032      	beq.n	800674c <__ssputs_r+0x80>
 80066e6:	6825      	ldr	r5, [r4, #0]
 80066e8:	6909      	ldr	r1, [r1, #16]
 80066ea:	3301      	adds	r3, #1
 80066ec:	eba5 0901 	sub.w	r9, r5, r1
 80066f0:	6965      	ldr	r5, [r4, #20]
 80066f2:	444b      	add	r3, r9
 80066f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80066f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80066fc:	106d      	asrs	r5, r5, #1
 80066fe:	429d      	cmp	r5, r3
 8006700:	bf38      	it	cc
 8006702:	461d      	movcc	r5, r3
 8006704:	0553      	lsls	r3, r2, #21
 8006706:	d531      	bpl.n	800676c <__ssputs_r+0xa0>
 8006708:	4629      	mov	r1, r5
 800670a:	f7ff ff1d 	bl	8006548 <_malloc_r>
 800670e:	4606      	mov	r6, r0
 8006710:	b950      	cbnz	r0, 8006728 <__ssputs_r+0x5c>
 8006712:	230c      	movs	r3, #12
 8006714:	f04f 30ff 	mov.w	r0, #4294967295
 8006718:	f8ca 3000 	str.w	r3, [sl]
 800671c:	89a3      	ldrh	r3, [r4, #12]
 800671e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006722:	81a3      	strh	r3, [r4, #12]
 8006724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006728:	464a      	mov	r2, r9
 800672a:	6921      	ldr	r1, [r4, #16]
 800672c:	f7ff fee8 	bl	8006500 <memcpy>
 8006730:	89a3      	ldrh	r3, [r4, #12]
 8006732:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006736:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800673a:	81a3      	strh	r3, [r4, #12]
 800673c:	6126      	str	r6, [r4, #16]
 800673e:	444e      	add	r6, r9
 8006740:	6026      	str	r6, [r4, #0]
 8006742:	463e      	mov	r6, r7
 8006744:	6165      	str	r5, [r4, #20]
 8006746:	eba5 0509 	sub.w	r5, r5, r9
 800674a:	60a5      	str	r5, [r4, #8]
 800674c:	42be      	cmp	r6, r7
 800674e:	d900      	bls.n	8006752 <__ssputs_r+0x86>
 8006750:	463e      	mov	r6, r7
 8006752:	4632      	mov	r2, r6
 8006754:	4641      	mov	r1, r8
 8006756:	6820      	ldr	r0, [r4, #0]
 8006758:	f000 faba 	bl	8006cd0 <memmove>
 800675c:	68a3      	ldr	r3, [r4, #8]
 800675e:	6822      	ldr	r2, [r4, #0]
 8006760:	1b9b      	subs	r3, r3, r6
 8006762:	4432      	add	r2, r6
 8006764:	2000      	movs	r0, #0
 8006766:	60a3      	str	r3, [r4, #8]
 8006768:	6022      	str	r2, [r4, #0]
 800676a:	e7db      	b.n	8006724 <__ssputs_r+0x58>
 800676c:	462a      	mov	r2, r5
 800676e:	f000 fb15 	bl	8006d9c <_realloc_r>
 8006772:	4606      	mov	r6, r0
 8006774:	2800      	cmp	r0, #0
 8006776:	d1e1      	bne.n	800673c <__ssputs_r+0x70>
 8006778:	4650      	mov	r0, sl
 800677a:	6921      	ldr	r1, [r4, #16]
 800677c:	f000 fac2 	bl	8006d04 <_free_r>
 8006780:	e7c7      	b.n	8006712 <__ssputs_r+0x46>
	...

08006784 <_svfiprintf_r>:
 8006784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006788:	4698      	mov	r8, r3
 800678a:	898b      	ldrh	r3, [r1, #12]
 800678c:	4607      	mov	r7, r0
 800678e:	061b      	lsls	r3, r3, #24
 8006790:	460d      	mov	r5, r1
 8006792:	4614      	mov	r4, r2
 8006794:	b09d      	sub	sp, #116	; 0x74
 8006796:	d50e      	bpl.n	80067b6 <_svfiprintf_r+0x32>
 8006798:	690b      	ldr	r3, [r1, #16]
 800679a:	b963      	cbnz	r3, 80067b6 <_svfiprintf_r+0x32>
 800679c:	2140      	movs	r1, #64	; 0x40
 800679e:	f7ff fed3 	bl	8006548 <_malloc_r>
 80067a2:	6028      	str	r0, [r5, #0]
 80067a4:	6128      	str	r0, [r5, #16]
 80067a6:	b920      	cbnz	r0, 80067b2 <_svfiprintf_r+0x2e>
 80067a8:	230c      	movs	r3, #12
 80067aa:	603b      	str	r3, [r7, #0]
 80067ac:	f04f 30ff 	mov.w	r0, #4294967295
 80067b0:	e0d1      	b.n	8006956 <_svfiprintf_r+0x1d2>
 80067b2:	2340      	movs	r3, #64	; 0x40
 80067b4:	616b      	str	r3, [r5, #20]
 80067b6:	2300      	movs	r3, #0
 80067b8:	9309      	str	r3, [sp, #36]	; 0x24
 80067ba:	2320      	movs	r3, #32
 80067bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80067c0:	2330      	movs	r3, #48	; 0x30
 80067c2:	f04f 0901 	mov.w	r9, #1
 80067c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80067ca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006970 <_svfiprintf_r+0x1ec>
 80067ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80067d2:	4623      	mov	r3, r4
 80067d4:	469a      	mov	sl, r3
 80067d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80067da:	b10a      	cbz	r2, 80067e0 <_svfiprintf_r+0x5c>
 80067dc:	2a25      	cmp	r2, #37	; 0x25
 80067de:	d1f9      	bne.n	80067d4 <_svfiprintf_r+0x50>
 80067e0:	ebba 0b04 	subs.w	fp, sl, r4
 80067e4:	d00b      	beq.n	80067fe <_svfiprintf_r+0x7a>
 80067e6:	465b      	mov	r3, fp
 80067e8:	4622      	mov	r2, r4
 80067ea:	4629      	mov	r1, r5
 80067ec:	4638      	mov	r0, r7
 80067ee:	f7ff ff6d 	bl	80066cc <__ssputs_r>
 80067f2:	3001      	adds	r0, #1
 80067f4:	f000 80aa 	beq.w	800694c <_svfiprintf_r+0x1c8>
 80067f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80067fa:	445a      	add	r2, fp
 80067fc:	9209      	str	r2, [sp, #36]	; 0x24
 80067fe:	f89a 3000 	ldrb.w	r3, [sl]
 8006802:	2b00      	cmp	r3, #0
 8006804:	f000 80a2 	beq.w	800694c <_svfiprintf_r+0x1c8>
 8006808:	2300      	movs	r3, #0
 800680a:	f04f 32ff 	mov.w	r2, #4294967295
 800680e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006812:	f10a 0a01 	add.w	sl, sl, #1
 8006816:	9304      	str	r3, [sp, #16]
 8006818:	9307      	str	r3, [sp, #28]
 800681a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800681e:	931a      	str	r3, [sp, #104]	; 0x68
 8006820:	4654      	mov	r4, sl
 8006822:	2205      	movs	r2, #5
 8006824:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006828:	4851      	ldr	r0, [pc, #324]	; (8006970 <_svfiprintf_r+0x1ec>)
 800682a:	f000 fa43 	bl	8006cb4 <memchr>
 800682e:	9a04      	ldr	r2, [sp, #16]
 8006830:	b9d8      	cbnz	r0, 800686a <_svfiprintf_r+0xe6>
 8006832:	06d0      	lsls	r0, r2, #27
 8006834:	bf44      	itt	mi
 8006836:	2320      	movmi	r3, #32
 8006838:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800683c:	0711      	lsls	r1, r2, #28
 800683e:	bf44      	itt	mi
 8006840:	232b      	movmi	r3, #43	; 0x2b
 8006842:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006846:	f89a 3000 	ldrb.w	r3, [sl]
 800684a:	2b2a      	cmp	r3, #42	; 0x2a
 800684c:	d015      	beq.n	800687a <_svfiprintf_r+0xf6>
 800684e:	4654      	mov	r4, sl
 8006850:	2000      	movs	r0, #0
 8006852:	f04f 0c0a 	mov.w	ip, #10
 8006856:	9a07      	ldr	r2, [sp, #28]
 8006858:	4621      	mov	r1, r4
 800685a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800685e:	3b30      	subs	r3, #48	; 0x30
 8006860:	2b09      	cmp	r3, #9
 8006862:	d94e      	bls.n	8006902 <_svfiprintf_r+0x17e>
 8006864:	b1b0      	cbz	r0, 8006894 <_svfiprintf_r+0x110>
 8006866:	9207      	str	r2, [sp, #28]
 8006868:	e014      	b.n	8006894 <_svfiprintf_r+0x110>
 800686a:	eba0 0308 	sub.w	r3, r0, r8
 800686e:	fa09 f303 	lsl.w	r3, r9, r3
 8006872:	4313      	orrs	r3, r2
 8006874:	46a2      	mov	sl, r4
 8006876:	9304      	str	r3, [sp, #16]
 8006878:	e7d2      	b.n	8006820 <_svfiprintf_r+0x9c>
 800687a:	9b03      	ldr	r3, [sp, #12]
 800687c:	1d19      	adds	r1, r3, #4
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	9103      	str	r1, [sp, #12]
 8006882:	2b00      	cmp	r3, #0
 8006884:	bfbb      	ittet	lt
 8006886:	425b      	neglt	r3, r3
 8006888:	f042 0202 	orrlt.w	r2, r2, #2
 800688c:	9307      	strge	r3, [sp, #28]
 800688e:	9307      	strlt	r3, [sp, #28]
 8006890:	bfb8      	it	lt
 8006892:	9204      	strlt	r2, [sp, #16]
 8006894:	7823      	ldrb	r3, [r4, #0]
 8006896:	2b2e      	cmp	r3, #46	; 0x2e
 8006898:	d10c      	bne.n	80068b4 <_svfiprintf_r+0x130>
 800689a:	7863      	ldrb	r3, [r4, #1]
 800689c:	2b2a      	cmp	r3, #42	; 0x2a
 800689e:	d135      	bne.n	800690c <_svfiprintf_r+0x188>
 80068a0:	9b03      	ldr	r3, [sp, #12]
 80068a2:	3402      	adds	r4, #2
 80068a4:	1d1a      	adds	r2, r3, #4
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	9203      	str	r2, [sp, #12]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	bfb8      	it	lt
 80068ae:	f04f 33ff 	movlt.w	r3, #4294967295
 80068b2:	9305      	str	r3, [sp, #20]
 80068b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006980 <_svfiprintf_r+0x1fc>
 80068b8:	2203      	movs	r2, #3
 80068ba:	4650      	mov	r0, sl
 80068bc:	7821      	ldrb	r1, [r4, #0]
 80068be:	f000 f9f9 	bl	8006cb4 <memchr>
 80068c2:	b140      	cbz	r0, 80068d6 <_svfiprintf_r+0x152>
 80068c4:	2340      	movs	r3, #64	; 0x40
 80068c6:	eba0 000a 	sub.w	r0, r0, sl
 80068ca:	fa03 f000 	lsl.w	r0, r3, r0
 80068ce:	9b04      	ldr	r3, [sp, #16]
 80068d0:	3401      	adds	r4, #1
 80068d2:	4303      	orrs	r3, r0
 80068d4:	9304      	str	r3, [sp, #16]
 80068d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068da:	2206      	movs	r2, #6
 80068dc:	4825      	ldr	r0, [pc, #148]	; (8006974 <_svfiprintf_r+0x1f0>)
 80068de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80068e2:	f000 f9e7 	bl	8006cb4 <memchr>
 80068e6:	2800      	cmp	r0, #0
 80068e8:	d038      	beq.n	800695c <_svfiprintf_r+0x1d8>
 80068ea:	4b23      	ldr	r3, [pc, #140]	; (8006978 <_svfiprintf_r+0x1f4>)
 80068ec:	bb1b      	cbnz	r3, 8006936 <_svfiprintf_r+0x1b2>
 80068ee:	9b03      	ldr	r3, [sp, #12]
 80068f0:	3307      	adds	r3, #7
 80068f2:	f023 0307 	bic.w	r3, r3, #7
 80068f6:	3308      	adds	r3, #8
 80068f8:	9303      	str	r3, [sp, #12]
 80068fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068fc:	4433      	add	r3, r6
 80068fe:	9309      	str	r3, [sp, #36]	; 0x24
 8006900:	e767      	b.n	80067d2 <_svfiprintf_r+0x4e>
 8006902:	460c      	mov	r4, r1
 8006904:	2001      	movs	r0, #1
 8006906:	fb0c 3202 	mla	r2, ip, r2, r3
 800690a:	e7a5      	b.n	8006858 <_svfiprintf_r+0xd4>
 800690c:	2300      	movs	r3, #0
 800690e:	f04f 0c0a 	mov.w	ip, #10
 8006912:	4619      	mov	r1, r3
 8006914:	3401      	adds	r4, #1
 8006916:	9305      	str	r3, [sp, #20]
 8006918:	4620      	mov	r0, r4
 800691a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800691e:	3a30      	subs	r2, #48	; 0x30
 8006920:	2a09      	cmp	r2, #9
 8006922:	d903      	bls.n	800692c <_svfiprintf_r+0x1a8>
 8006924:	2b00      	cmp	r3, #0
 8006926:	d0c5      	beq.n	80068b4 <_svfiprintf_r+0x130>
 8006928:	9105      	str	r1, [sp, #20]
 800692a:	e7c3      	b.n	80068b4 <_svfiprintf_r+0x130>
 800692c:	4604      	mov	r4, r0
 800692e:	2301      	movs	r3, #1
 8006930:	fb0c 2101 	mla	r1, ip, r1, r2
 8006934:	e7f0      	b.n	8006918 <_svfiprintf_r+0x194>
 8006936:	ab03      	add	r3, sp, #12
 8006938:	9300      	str	r3, [sp, #0]
 800693a:	462a      	mov	r2, r5
 800693c:	4638      	mov	r0, r7
 800693e:	4b0f      	ldr	r3, [pc, #60]	; (800697c <_svfiprintf_r+0x1f8>)
 8006940:	a904      	add	r1, sp, #16
 8006942:	f3af 8000 	nop.w
 8006946:	1c42      	adds	r2, r0, #1
 8006948:	4606      	mov	r6, r0
 800694a:	d1d6      	bne.n	80068fa <_svfiprintf_r+0x176>
 800694c:	89ab      	ldrh	r3, [r5, #12]
 800694e:	065b      	lsls	r3, r3, #25
 8006950:	f53f af2c 	bmi.w	80067ac <_svfiprintf_r+0x28>
 8006954:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006956:	b01d      	add	sp, #116	; 0x74
 8006958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800695c:	ab03      	add	r3, sp, #12
 800695e:	9300      	str	r3, [sp, #0]
 8006960:	462a      	mov	r2, r5
 8006962:	4638      	mov	r0, r7
 8006964:	4b05      	ldr	r3, [pc, #20]	; (800697c <_svfiprintf_r+0x1f8>)
 8006966:	a904      	add	r1, sp, #16
 8006968:	f000 f87c 	bl	8006a64 <_printf_i>
 800696c:	e7eb      	b.n	8006946 <_svfiprintf_r+0x1c2>
 800696e:	bf00      	nop
 8006970:	0800735c 	.word	0x0800735c
 8006974:	08007366 	.word	0x08007366
 8006978:	00000000 	.word	0x00000000
 800697c:	080066cd 	.word	0x080066cd
 8006980:	08007362 	.word	0x08007362

08006984 <_printf_common>:
 8006984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006988:	4616      	mov	r6, r2
 800698a:	4699      	mov	r9, r3
 800698c:	688a      	ldr	r2, [r1, #8]
 800698e:	690b      	ldr	r3, [r1, #16]
 8006990:	4607      	mov	r7, r0
 8006992:	4293      	cmp	r3, r2
 8006994:	bfb8      	it	lt
 8006996:	4613      	movlt	r3, r2
 8006998:	6033      	str	r3, [r6, #0]
 800699a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800699e:	460c      	mov	r4, r1
 80069a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80069a4:	b10a      	cbz	r2, 80069aa <_printf_common+0x26>
 80069a6:	3301      	adds	r3, #1
 80069a8:	6033      	str	r3, [r6, #0]
 80069aa:	6823      	ldr	r3, [r4, #0]
 80069ac:	0699      	lsls	r1, r3, #26
 80069ae:	bf42      	ittt	mi
 80069b0:	6833      	ldrmi	r3, [r6, #0]
 80069b2:	3302      	addmi	r3, #2
 80069b4:	6033      	strmi	r3, [r6, #0]
 80069b6:	6825      	ldr	r5, [r4, #0]
 80069b8:	f015 0506 	ands.w	r5, r5, #6
 80069bc:	d106      	bne.n	80069cc <_printf_common+0x48>
 80069be:	f104 0a19 	add.w	sl, r4, #25
 80069c2:	68e3      	ldr	r3, [r4, #12]
 80069c4:	6832      	ldr	r2, [r6, #0]
 80069c6:	1a9b      	subs	r3, r3, r2
 80069c8:	42ab      	cmp	r3, r5
 80069ca:	dc28      	bgt.n	8006a1e <_printf_common+0x9a>
 80069cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80069d0:	1e13      	subs	r3, r2, #0
 80069d2:	6822      	ldr	r2, [r4, #0]
 80069d4:	bf18      	it	ne
 80069d6:	2301      	movne	r3, #1
 80069d8:	0692      	lsls	r2, r2, #26
 80069da:	d42d      	bmi.n	8006a38 <_printf_common+0xb4>
 80069dc:	4649      	mov	r1, r9
 80069de:	4638      	mov	r0, r7
 80069e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80069e4:	47c0      	blx	r8
 80069e6:	3001      	adds	r0, #1
 80069e8:	d020      	beq.n	8006a2c <_printf_common+0xa8>
 80069ea:	6823      	ldr	r3, [r4, #0]
 80069ec:	68e5      	ldr	r5, [r4, #12]
 80069ee:	f003 0306 	and.w	r3, r3, #6
 80069f2:	2b04      	cmp	r3, #4
 80069f4:	bf18      	it	ne
 80069f6:	2500      	movne	r5, #0
 80069f8:	6832      	ldr	r2, [r6, #0]
 80069fa:	f04f 0600 	mov.w	r6, #0
 80069fe:	68a3      	ldr	r3, [r4, #8]
 8006a00:	bf08      	it	eq
 8006a02:	1aad      	subeq	r5, r5, r2
 8006a04:	6922      	ldr	r2, [r4, #16]
 8006a06:	bf08      	it	eq
 8006a08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	bfc4      	itt	gt
 8006a10:	1a9b      	subgt	r3, r3, r2
 8006a12:	18ed      	addgt	r5, r5, r3
 8006a14:	341a      	adds	r4, #26
 8006a16:	42b5      	cmp	r5, r6
 8006a18:	d11a      	bne.n	8006a50 <_printf_common+0xcc>
 8006a1a:	2000      	movs	r0, #0
 8006a1c:	e008      	b.n	8006a30 <_printf_common+0xac>
 8006a1e:	2301      	movs	r3, #1
 8006a20:	4652      	mov	r2, sl
 8006a22:	4649      	mov	r1, r9
 8006a24:	4638      	mov	r0, r7
 8006a26:	47c0      	blx	r8
 8006a28:	3001      	adds	r0, #1
 8006a2a:	d103      	bne.n	8006a34 <_printf_common+0xb0>
 8006a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a34:	3501      	adds	r5, #1
 8006a36:	e7c4      	b.n	80069c2 <_printf_common+0x3e>
 8006a38:	2030      	movs	r0, #48	; 0x30
 8006a3a:	18e1      	adds	r1, r4, r3
 8006a3c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a40:	1c5a      	adds	r2, r3, #1
 8006a42:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a46:	4422      	add	r2, r4
 8006a48:	3302      	adds	r3, #2
 8006a4a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a4e:	e7c5      	b.n	80069dc <_printf_common+0x58>
 8006a50:	2301      	movs	r3, #1
 8006a52:	4622      	mov	r2, r4
 8006a54:	4649      	mov	r1, r9
 8006a56:	4638      	mov	r0, r7
 8006a58:	47c0      	blx	r8
 8006a5a:	3001      	adds	r0, #1
 8006a5c:	d0e6      	beq.n	8006a2c <_printf_common+0xa8>
 8006a5e:	3601      	adds	r6, #1
 8006a60:	e7d9      	b.n	8006a16 <_printf_common+0x92>
	...

08006a64 <_printf_i>:
 8006a64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a68:	460c      	mov	r4, r1
 8006a6a:	7e27      	ldrb	r7, [r4, #24]
 8006a6c:	4691      	mov	r9, r2
 8006a6e:	2f78      	cmp	r7, #120	; 0x78
 8006a70:	4680      	mov	r8, r0
 8006a72:	469a      	mov	sl, r3
 8006a74:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006a76:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a7a:	d807      	bhi.n	8006a8c <_printf_i+0x28>
 8006a7c:	2f62      	cmp	r7, #98	; 0x62
 8006a7e:	d80a      	bhi.n	8006a96 <_printf_i+0x32>
 8006a80:	2f00      	cmp	r7, #0
 8006a82:	f000 80d9 	beq.w	8006c38 <_printf_i+0x1d4>
 8006a86:	2f58      	cmp	r7, #88	; 0x58
 8006a88:	f000 80a4 	beq.w	8006bd4 <_printf_i+0x170>
 8006a8c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006a90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006a94:	e03a      	b.n	8006b0c <_printf_i+0xa8>
 8006a96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006a9a:	2b15      	cmp	r3, #21
 8006a9c:	d8f6      	bhi.n	8006a8c <_printf_i+0x28>
 8006a9e:	a001      	add	r0, pc, #4	; (adr r0, 8006aa4 <_printf_i+0x40>)
 8006aa0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006aa4:	08006afd 	.word	0x08006afd
 8006aa8:	08006b11 	.word	0x08006b11
 8006aac:	08006a8d 	.word	0x08006a8d
 8006ab0:	08006a8d 	.word	0x08006a8d
 8006ab4:	08006a8d 	.word	0x08006a8d
 8006ab8:	08006a8d 	.word	0x08006a8d
 8006abc:	08006b11 	.word	0x08006b11
 8006ac0:	08006a8d 	.word	0x08006a8d
 8006ac4:	08006a8d 	.word	0x08006a8d
 8006ac8:	08006a8d 	.word	0x08006a8d
 8006acc:	08006a8d 	.word	0x08006a8d
 8006ad0:	08006c1f 	.word	0x08006c1f
 8006ad4:	08006b41 	.word	0x08006b41
 8006ad8:	08006c01 	.word	0x08006c01
 8006adc:	08006a8d 	.word	0x08006a8d
 8006ae0:	08006a8d 	.word	0x08006a8d
 8006ae4:	08006c41 	.word	0x08006c41
 8006ae8:	08006a8d 	.word	0x08006a8d
 8006aec:	08006b41 	.word	0x08006b41
 8006af0:	08006a8d 	.word	0x08006a8d
 8006af4:	08006a8d 	.word	0x08006a8d
 8006af8:	08006c09 	.word	0x08006c09
 8006afc:	680b      	ldr	r3, [r1, #0]
 8006afe:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006b02:	1d1a      	adds	r2, r3, #4
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	600a      	str	r2, [r1, #0]
 8006b08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e0a4      	b.n	8006c5a <_printf_i+0x1f6>
 8006b10:	6825      	ldr	r5, [r4, #0]
 8006b12:	6808      	ldr	r0, [r1, #0]
 8006b14:	062e      	lsls	r6, r5, #24
 8006b16:	f100 0304 	add.w	r3, r0, #4
 8006b1a:	d50a      	bpl.n	8006b32 <_printf_i+0xce>
 8006b1c:	6805      	ldr	r5, [r0, #0]
 8006b1e:	600b      	str	r3, [r1, #0]
 8006b20:	2d00      	cmp	r5, #0
 8006b22:	da03      	bge.n	8006b2c <_printf_i+0xc8>
 8006b24:	232d      	movs	r3, #45	; 0x2d
 8006b26:	426d      	negs	r5, r5
 8006b28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b2c:	230a      	movs	r3, #10
 8006b2e:	485e      	ldr	r0, [pc, #376]	; (8006ca8 <_printf_i+0x244>)
 8006b30:	e019      	b.n	8006b66 <_printf_i+0x102>
 8006b32:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006b36:	6805      	ldr	r5, [r0, #0]
 8006b38:	600b      	str	r3, [r1, #0]
 8006b3a:	bf18      	it	ne
 8006b3c:	b22d      	sxthne	r5, r5
 8006b3e:	e7ef      	b.n	8006b20 <_printf_i+0xbc>
 8006b40:	680b      	ldr	r3, [r1, #0]
 8006b42:	6825      	ldr	r5, [r4, #0]
 8006b44:	1d18      	adds	r0, r3, #4
 8006b46:	6008      	str	r0, [r1, #0]
 8006b48:	0628      	lsls	r0, r5, #24
 8006b4a:	d501      	bpl.n	8006b50 <_printf_i+0xec>
 8006b4c:	681d      	ldr	r5, [r3, #0]
 8006b4e:	e002      	b.n	8006b56 <_printf_i+0xf2>
 8006b50:	0669      	lsls	r1, r5, #25
 8006b52:	d5fb      	bpl.n	8006b4c <_printf_i+0xe8>
 8006b54:	881d      	ldrh	r5, [r3, #0]
 8006b56:	2f6f      	cmp	r7, #111	; 0x6f
 8006b58:	bf0c      	ite	eq
 8006b5a:	2308      	moveq	r3, #8
 8006b5c:	230a      	movne	r3, #10
 8006b5e:	4852      	ldr	r0, [pc, #328]	; (8006ca8 <_printf_i+0x244>)
 8006b60:	2100      	movs	r1, #0
 8006b62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006b66:	6866      	ldr	r6, [r4, #4]
 8006b68:	2e00      	cmp	r6, #0
 8006b6a:	bfa8      	it	ge
 8006b6c:	6821      	ldrge	r1, [r4, #0]
 8006b6e:	60a6      	str	r6, [r4, #8]
 8006b70:	bfa4      	itt	ge
 8006b72:	f021 0104 	bicge.w	r1, r1, #4
 8006b76:	6021      	strge	r1, [r4, #0]
 8006b78:	b90d      	cbnz	r5, 8006b7e <_printf_i+0x11a>
 8006b7a:	2e00      	cmp	r6, #0
 8006b7c:	d04d      	beq.n	8006c1a <_printf_i+0x1b6>
 8006b7e:	4616      	mov	r6, r2
 8006b80:	fbb5 f1f3 	udiv	r1, r5, r3
 8006b84:	fb03 5711 	mls	r7, r3, r1, r5
 8006b88:	5dc7      	ldrb	r7, [r0, r7]
 8006b8a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006b8e:	462f      	mov	r7, r5
 8006b90:	42bb      	cmp	r3, r7
 8006b92:	460d      	mov	r5, r1
 8006b94:	d9f4      	bls.n	8006b80 <_printf_i+0x11c>
 8006b96:	2b08      	cmp	r3, #8
 8006b98:	d10b      	bne.n	8006bb2 <_printf_i+0x14e>
 8006b9a:	6823      	ldr	r3, [r4, #0]
 8006b9c:	07df      	lsls	r7, r3, #31
 8006b9e:	d508      	bpl.n	8006bb2 <_printf_i+0x14e>
 8006ba0:	6923      	ldr	r3, [r4, #16]
 8006ba2:	6861      	ldr	r1, [r4, #4]
 8006ba4:	4299      	cmp	r1, r3
 8006ba6:	bfde      	ittt	le
 8006ba8:	2330      	movle	r3, #48	; 0x30
 8006baa:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006bae:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006bb2:	1b92      	subs	r2, r2, r6
 8006bb4:	6122      	str	r2, [r4, #16]
 8006bb6:	464b      	mov	r3, r9
 8006bb8:	4621      	mov	r1, r4
 8006bba:	4640      	mov	r0, r8
 8006bbc:	f8cd a000 	str.w	sl, [sp]
 8006bc0:	aa03      	add	r2, sp, #12
 8006bc2:	f7ff fedf 	bl	8006984 <_printf_common>
 8006bc6:	3001      	adds	r0, #1
 8006bc8:	d14c      	bne.n	8006c64 <_printf_i+0x200>
 8006bca:	f04f 30ff 	mov.w	r0, #4294967295
 8006bce:	b004      	add	sp, #16
 8006bd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bd4:	4834      	ldr	r0, [pc, #208]	; (8006ca8 <_printf_i+0x244>)
 8006bd6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006bda:	680e      	ldr	r6, [r1, #0]
 8006bdc:	6823      	ldr	r3, [r4, #0]
 8006bde:	f856 5b04 	ldr.w	r5, [r6], #4
 8006be2:	061f      	lsls	r7, r3, #24
 8006be4:	600e      	str	r6, [r1, #0]
 8006be6:	d514      	bpl.n	8006c12 <_printf_i+0x1ae>
 8006be8:	07d9      	lsls	r1, r3, #31
 8006bea:	bf44      	itt	mi
 8006bec:	f043 0320 	orrmi.w	r3, r3, #32
 8006bf0:	6023      	strmi	r3, [r4, #0]
 8006bf2:	b91d      	cbnz	r5, 8006bfc <_printf_i+0x198>
 8006bf4:	6823      	ldr	r3, [r4, #0]
 8006bf6:	f023 0320 	bic.w	r3, r3, #32
 8006bfa:	6023      	str	r3, [r4, #0]
 8006bfc:	2310      	movs	r3, #16
 8006bfe:	e7af      	b.n	8006b60 <_printf_i+0xfc>
 8006c00:	6823      	ldr	r3, [r4, #0]
 8006c02:	f043 0320 	orr.w	r3, r3, #32
 8006c06:	6023      	str	r3, [r4, #0]
 8006c08:	2378      	movs	r3, #120	; 0x78
 8006c0a:	4828      	ldr	r0, [pc, #160]	; (8006cac <_printf_i+0x248>)
 8006c0c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006c10:	e7e3      	b.n	8006bda <_printf_i+0x176>
 8006c12:	065e      	lsls	r6, r3, #25
 8006c14:	bf48      	it	mi
 8006c16:	b2ad      	uxthmi	r5, r5
 8006c18:	e7e6      	b.n	8006be8 <_printf_i+0x184>
 8006c1a:	4616      	mov	r6, r2
 8006c1c:	e7bb      	b.n	8006b96 <_printf_i+0x132>
 8006c1e:	680b      	ldr	r3, [r1, #0]
 8006c20:	6826      	ldr	r6, [r4, #0]
 8006c22:	1d1d      	adds	r5, r3, #4
 8006c24:	6960      	ldr	r0, [r4, #20]
 8006c26:	600d      	str	r5, [r1, #0]
 8006c28:	0635      	lsls	r5, r6, #24
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	d501      	bpl.n	8006c32 <_printf_i+0x1ce>
 8006c2e:	6018      	str	r0, [r3, #0]
 8006c30:	e002      	b.n	8006c38 <_printf_i+0x1d4>
 8006c32:	0671      	lsls	r1, r6, #25
 8006c34:	d5fb      	bpl.n	8006c2e <_printf_i+0x1ca>
 8006c36:	8018      	strh	r0, [r3, #0]
 8006c38:	2300      	movs	r3, #0
 8006c3a:	4616      	mov	r6, r2
 8006c3c:	6123      	str	r3, [r4, #16]
 8006c3e:	e7ba      	b.n	8006bb6 <_printf_i+0x152>
 8006c40:	680b      	ldr	r3, [r1, #0]
 8006c42:	1d1a      	adds	r2, r3, #4
 8006c44:	600a      	str	r2, [r1, #0]
 8006c46:	681e      	ldr	r6, [r3, #0]
 8006c48:	2100      	movs	r1, #0
 8006c4a:	4630      	mov	r0, r6
 8006c4c:	6862      	ldr	r2, [r4, #4]
 8006c4e:	f000 f831 	bl	8006cb4 <memchr>
 8006c52:	b108      	cbz	r0, 8006c58 <_printf_i+0x1f4>
 8006c54:	1b80      	subs	r0, r0, r6
 8006c56:	6060      	str	r0, [r4, #4]
 8006c58:	6863      	ldr	r3, [r4, #4]
 8006c5a:	6123      	str	r3, [r4, #16]
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c62:	e7a8      	b.n	8006bb6 <_printf_i+0x152>
 8006c64:	4632      	mov	r2, r6
 8006c66:	4649      	mov	r1, r9
 8006c68:	4640      	mov	r0, r8
 8006c6a:	6923      	ldr	r3, [r4, #16]
 8006c6c:	47d0      	blx	sl
 8006c6e:	3001      	adds	r0, #1
 8006c70:	d0ab      	beq.n	8006bca <_printf_i+0x166>
 8006c72:	6823      	ldr	r3, [r4, #0]
 8006c74:	079b      	lsls	r3, r3, #30
 8006c76:	d413      	bmi.n	8006ca0 <_printf_i+0x23c>
 8006c78:	68e0      	ldr	r0, [r4, #12]
 8006c7a:	9b03      	ldr	r3, [sp, #12]
 8006c7c:	4298      	cmp	r0, r3
 8006c7e:	bfb8      	it	lt
 8006c80:	4618      	movlt	r0, r3
 8006c82:	e7a4      	b.n	8006bce <_printf_i+0x16a>
 8006c84:	2301      	movs	r3, #1
 8006c86:	4632      	mov	r2, r6
 8006c88:	4649      	mov	r1, r9
 8006c8a:	4640      	mov	r0, r8
 8006c8c:	47d0      	blx	sl
 8006c8e:	3001      	adds	r0, #1
 8006c90:	d09b      	beq.n	8006bca <_printf_i+0x166>
 8006c92:	3501      	adds	r5, #1
 8006c94:	68e3      	ldr	r3, [r4, #12]
 8006c96:	9903      	ldr	r1, [sp, #12]
 8006c98:	1a5b      	subs	r3, r3, r1
 8006c9a:	42ab      	cmp	r3, r5
 8006c9c:	dcf2      	bgt.n	8006c84 <_printf_i+0x220>
 8006c9e:	e7eb      	b.n	8006c78 <_printf_i+0x214>
 8006ca0:	2500      	movs	r5, #0
 8006ca2:	f104 0619 	add.w	r6, r4, #25
 8006ca6:	e7f5      	b.n	8006c94 <_printf_i+0x230>
 8006ca8:	0800736d 	.word	0x0800736d
 8006cac:	0800737e 	.word	0x0800737e

08006cb0 <__retarget_lock_acquire_recursive>:
 8006cb0:	4770      	bx	lr

08006cb2 <__retarget_lock_release_recursive>:
 8006cb2:	4770      	bx	lr

08006cb4 <memchr>:
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	b510      	push	{r4, lr}
 8006cb8:	b2c9      	uxtb	r1, r1
 8006cba:	4402      	add	r2, r0
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	d101      	bne.n	8006cc6 <memchr+0x12>
 8006cc2:	2000      	movs	r0, #0
 8006cc4:	e003      	b.n	8006cce <memchr+0x1a>
 8006cc6:	7804      	ldrb	r4, [r0, #0]
 8006cc8:	3301      	adds	r3, #1
 8006cca:	428c      	cmp	r4, r1
 8006ccc:	d1f6      	bne.n	8006cbc <memchr+0x8>
 8006cce:	bd10      	pop	{r4, pc}

08006cd0 <memmove>:
 8006cd0:	4288      	cmp	r0, r1
 8006cd2:	b510      	push	{r4, lr}
 8006cd4:	eb01 0402 	add.w	r4, r1, r2
 8006cd8:	d902      	bls.n	8006ce0 <memmove+0x10>
 8006cda:	4284      	cmp	r4, r0
 8006cdc:	4623      	mov	r3, r4
 8006cde:	d807      	bhi.n	8006cf0 <memmove+0x20>
 8006ce0:	1e43      	subs	r3, r0, #1
 8006ce2:	42a1      	cmp	r1, r4
 8006ce4:	d008      	beq.n	8006cf8 <memmove+0x28>
 8006ce6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006cea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006cee:	e7f8      	b.n	8006ce2 <memmove+0x12>
 8006cf0:	4601      	mov	r1, r0
 8006cf2:	4402      	add	r2, r0
 8006cf4:	428a      	cmp	r2, r1
 8006cf6:	d100      	bne.n	8006cfa <memmove+0x2a>
 8006cf8:	bd10      	pop	{r4, pc}
 8006cfa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006cfe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006d02:	e7f7      	b.n	8006cf4 <memmove+0x24>

08006d04 <_free_r>:
 8006d04:	b538      	push	{r3, r4, r5, lr}
 8006d06:	4605      	mov	r5, r0
 8006d08:	2900      	cmp	r1, #0
 8006d0a:	d043      	beq.n	8006d94 <_free_r+0x90>
 8006d0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d10:	1f0c      	subs	r4, r1, #4
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	bfb8      	it	lt
 8006d16:	18e4      	addlt	r4, r4, r3
 8006d18:	f7ff fccc 	bl	80066b4 <__malloc_lock>
 8006d1c:	4a1e      	ldr	r2, [pc, #120]	; (8006d98 <_free_r+0x94>)
 8006d1e:	6813      	ldr	r3, [r2, #0]
 8006d20:	4610      	mov	r0, r2
 8006d22:	b933      	cbnz	r3, 8006d32 <_free_r+0x2e>
 8006d24:	6063      	str	r3, [r4, #4]
 8006d26:	6014      	str	r4, [r2, #0]
 8006d28:	4628      	mov	r0, r5
 8006d2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d2e:	f7ff bcc7 	b.w	80066c0 <__malloc_unlock>
 8006d32:	42a3      	cmp	r3, r4
 8006d34:	d90a      	bls.n	8006d4c <_free_r+0x48>
 8006d36:	6821      	ldr	r1, [r4, #0]
 8006d38:	1862      	adds	r2, r4, r1
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	bf01      	itttt	eq
 8006d3e:	681a      	ldreq	r2, [r3, #0]
 8006d40:	685b      	ldreq	r3, [r3, #4]
 8006d42:	1852      	addeq	r2, r2, r1
 8006d44:	6022      	streq	r2, [r4, #0]
 8006d46:	6063      	str	r3, [r4, #4]
 8006d48:	6004      	str	r4, [r0, #0]
 8006d4a:	e7ed      	b.n	8006d28 <_free_r+0x24>
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	b10b      	cbz	r3, 8006d56 <_free_r+0x52>
 8006d52:	42a3      	cmp	r3, r4
 8006d54:	d9fa      	bls.n	8006d4c <_free_r+0x48>
 8006d56:	6811      	ldr	r1, [r2, #0]
 8006d58:	1850      	adds	r0, r2, r1
 8006d5a:	42a0      	cmp	r0, r4
 8006d5c:	d10b      	bne.n	8006d76 <_free_r+0x72>
 8006d5e:	6820      	ldr	r0, [r4, #0]
 8006d60:	4401      	add	r1, r0
 8006d62:	1850      	adds	r0, r2, r1
 8006d64:	4283      	cmp	r3, r0
 8006d66:	6011      	str	r1, [r2, #0]
 8006d68:	d1de      	bne.n	8006d28 <_free_r+0x24>
 8006d6a:	6818      	ldr	r0, [r3, #0]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	4401      	add	r1, r0
 8006d70:	6011      	str	r1, [r2, #0]
 8006d72:	6053      	str	r3, [r2, #4]
 8006d74:	e7d8      	b.n	8006d28 <_free_r+0x24>
 8006d76:	d902      	bls.n	8006d7e <_free_r+0x7a>
 8006d78:	230c      	movs	r3, #12
 8006d7a:	602b      	str	r3, [r5, #0]
 8006d7c:	e7d4      	b.n	8006d28 <_free_r+0x24>
 8006d7e:	6820      	ldr	r0, [r4, #0]
 8006d80:	1821      	adds	r1, r4, r0
 8006d82:	428b      	cmp	r3, r1
 8006d84:	bf01      	itttt	eq
 8006d86:	6819      	ldreq	r1, [r3, #0]
 8006d88:	685b      	ldreq	r3, [r3, #4]
 8006d8a:	1809      	addeq	r1, r1, r0
 8006d8c:	6021      	streq	r1, [r4, #0]
 8006d8e:	6063      	str	r3, [r4, #4]
 8006d90:	6054      	str	r4, [r2, #4]
 8006d92:	e7c9      	b.n	8006d28 <_free_r+0x24>
 8006d94:	bd38      	pop	{r3, r4, r5, pc}
 8006d96:	bf00      	nop
 8006d98:	20000288 	.word	0x20000288

08006d9c <_realloc_r>:
 8006d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d9e:	4607      	mov	r7, r0
 8006da0:	4614      	mov	r4, r2
 8006da2:	460e      	mov	r6, r1
 8006da4:	b921      	cbnz	r1, 8006db0 <_realloc_r+0x14>
 8006da6:	4611      	mov	r1, r2
 8006da8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006dac:	f7ff bbcc 	b.w	8006548 <_malloc_r>
 8006db0:	b922      	cbnz	r2, 8006dbc <_realloc_r+0x20>
 8006db2:	f7ff ffa7 	bl	8006d04 <_free_r>
 8006db6:	4625      	mov	r5, r4
 8006db8:	4628      	mov	r0, r5
 8006dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dbc:	f000 f814 	bl	8006de8 <_malloc_usable_size_r>
 8006dc0:	42a0      	cmp	r0, r4
 8006dc2:	d20f      	bcs.n	8006de4 <_realloc_r+0x48>
 8006dc4:	4621      	mov	r1, r4
 8006dc6:	4638      	mov	r0, r7
 8006dc8:	f7ff fbbe 	bl	8006548 <_malloc_r>
 8006dcc:	4605      	mov	r5, r0
 8006dce:	2800      	cmp	r0, #0
 8006dd0:	d0f2      	beq.n	8006db8 <_realloc_r+0x1c>
 8006dd2:	4631      	mov	r1, r6
 8006dd4:	4622      	mov	r2, r4
 8006dd6:	f7ff fb93 	bl	8006500 <memcpy>
 8006dda:	4631      	mov	r1, r6
 8006ddc:	4638      	mov	r0, r7
 8006dde:	f7ff ff91 	bl	8006d04 <_free_r>
 8006de2:	e7e9      	b.n	8006db8 <_realloc_r+0x1c>
 8006de4:	4635      	mov	r5, r6
 8006de6:	e7e7      	b.n	8006db8 <_realloc_r+0x1c>

08006de8 <_malloc_usable_size_r>:
 8006de8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dec:	1f18      	subs	r0, r3, #4
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	bfbc      	itt	lt
 8006df2:	580b      	ldrlt	r3, [r1, r0]
 8006df4:	18c0      	addlt	r0, r0, r3
 8006df6:	4770      	bx	lr

08006df8 <ceil>:
 8006df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006dfc:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8006e00:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8006e04:	2e13      	cmp	r6, #19
 8006e06:	4602      	mov	r2, r0
 8006e08:	460b      	mov	r3, r1
 8006e0a:	4607      	mov	r7, r0
 8006e0c:	460c      	mov	r4, r1
 8006e0e:	4605      	mov	r5, r0
 8006e10:	dc31      	bgt.n	8006e76 <ceil+0x7e>
 8006e12:	2e00      	cmp	r6, #0
 8006e14:	da12      	bge.n	8006e3c <ceil+0x44>
 8006e16:	a334      	add	r3, pc, #208	; (adr r3, 8006ee8 <ceil+0xf0>)
 8006e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e1c:	f7f9 fa0a 	bl	8000234 <__adddf3>
 8006e20:	2200      	movs	r2, #0
 8006e22:	2300      	movs	r3, #0
 8006e24:	f7f9 fe4c 	bl	8000ac0 <__aeabi_dcmpgt>
 8006e28:	b128      	cbz	r0, 8006e36 <ceil+0x3e>
 8006e2a:	2c00      	cmp	r4, #0
 8006e2c:	db56      	blt.n	8006edc <ceil+0xe4>
 8006e2e:	433c      	orrs	r4, r7
 8006e30:	d058      	beq.n	8006ee4 <ceil+0xec>
 8006e32:	2500      	movs	r5, #0
 8006e34:	4c2e      	ldr	r4, [pc, #184]	; (8006ef0 <ceil+0xf8>)
 8006e36:	4623      	mov	r3, r4
 8006e38:	462f      	mov	r7, r5
 8006e3a:	e025      	b.n	8006e88 <ceil+0x90>
 8006e3c:	4a2d      	ldr	r2, [pc, #180]	; (8006ef4 <ceil+0xfc>)
 8006e3e:	fa42 f806 	asr.w	r8, r2, r6
 8006e42:	ea01 0208 	and.w	r2, r1, r8
 8006e46:	4302      	orrs	r2, r0
 8006e48:	d01e      	beq.n	8006e88 <ceil+0x90>
 8006e4a:	a327      	add	r3, pc, #156	; (adr r3, 8006ee8 <ceil+0xf0>)
 8006e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e50:	f7f9 f9f0 	bl	8000234 <__adddf3>
 8006e54:	2200      	movs	r2, #0
 8006e56:	2300      	movs	r3, #0
 8006e58:	f7f9 fe32 	bl	8000ac0 <__aeabi_dcmpgt>
 8006e5c:	2800      	cmp	r0, #0
 8006e5e:	d0ea      	beq.n	8006e36 <ceil+0x3e>
 8006e60:	2c00      	cmp	r4, #0
 8006e62:	bfc2      	ittt	gt
 8006e64:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8006e68:	fa43 f606 	asrgt.w	r6, r3, r6
 8006e6c:	19a4      	addgt	r4, r4, r6
 8006e6e:	2500      	movs	r5, #0
 8006e70:	ea24 0408 	bic.w	r4, r4, r8
 8006e74:	e7df      	b.n	8006e36 <ceil+0x3e>
 8006e76:	2e33      	cmp	r6, #51	; 0x33
 8006e78:	dd0a      	ble.n	8006e90 <ceil+0x98>
 8006e7a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006e7e:	d103      	bne.n	8006e88 <ceil+0x90>
 8006e80:	f7f9 f9d8 	bl	8000234 <__adddf3>
 8006e84:	4607      	mov	r7, r0
 8006e86:	460b      	mov	r3, r1
 8006e88:	4638      	mov	r0, r7
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e90:	f04f 32ff 	mov.w	r2, #4294967295
 8006e94:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8006e98:	fa22 f808 	lsr.w	r8, r2, r8
 8006e9c:	ea18 0f00 	tst.w	r8, r0
 8006ea0:	d0f2      	beq.n	8006e88 <ceil+0x90>
 8006ea2:	a311      	add	r3, pc, #68	; (adr r3, 8006ee8 <ceil+0xf0>)
 8006ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea8:	f7f9 f9c4 	bl	8000234 <__adddf3>
 8006eac:	2200      	movs	r2, #0
 8006eae:	2300      	movs	r3, #0
 8006eb0:	f7f9 fe06 	bl	8000ac0 <__aeabi_dcmpgt>
 8006eb4:	2800      	cmp	r0, #0
 8006eb6:	d0be      	beq.n	8006e36 <ceil+0x3e>
 8006eb8:	2c00      	cmp	r4, #0
 8006eba:	dd02      	ble.n	8006ec2 <ceil+0xca>
 8006ebc:	2e14      	cmp	r6, #20
 8006ebe:	d103      	bne.n	8006ec8 <ceil+0xd0>
 8006ec0:	3401      	adds	r4, #1
 8006ec2:	ea25 0508 	bic.w	r5, r5, r8
 8006ec6:	e7b6      	b.n	8006e36 <ceil+0x3e>
 8006ec8:	2301      	movs	r3, #1
 8006eca:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006ece:	fa03 f606 	lsl.w	r6, r3, r6
 8006ed2:	4435      	add	r5, r6
 8006ed4:	42bd      	cmp	r5, r7
 8006ed6:	bf38      	it	cc
 8006ed8:	18e4      	addcc	r4, r4, r3
 8006eda:	e7f2      	b.n	8006ec2 <ceil+0xca>
 8006edc:	2500      	movs	r5, #0
 8006ede:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8006ee2:	e7a8      	b.n	8006e36 <ceil+0x3e>
 8006ee4:	4625      	mov	r5, r4
 8006ee6:	e7a6      	b.n	8006e36 <ceil+0x3e>
 8006ee8:	8800759c 	.word	0x8800759c
 8006eec:	7e37e43c 	.word	0x7e37e43c
 8006ef0:	3ff00000 	.word	0x3ff00000
 8006ef4:	000fffff 	.word	0x000fffff

08006ef8 <floor>:
 8006ef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006efc:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8006f00:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8006f04:	2e13      	cmp	r6, #19
 8006f06:	4602      	mov	r2, r0
 8006f08:	460b      	mov	r3, r1
 8006f0a:	4607      	mov	r7, r0
 8006f0c:	460c      	mov	r4, r1
 8006f0e:	4605      	mov	r5, r0
 8006f10:	dc34      	bgt.n	8006f7c <floor+0x84>
 8006f12:	2e00      	cmp	r6, #0
 8006f14:	da15      	bge.n	8006f42 <floor+0x4a>
 8006f16:	a334      	add	r3, pc, #208	; (adr r3, 8006fe8 <floor+0xf0>)
 8006f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f1c:	f7f9 f98a 	bl	8000234 <__adddf3>
 8006f20:	2200      	movs	r2, #0
 8006f22:	2300      	movs	r3, #0
 8006f24:	f7f9 fdcc 	bl	8000ac0 <__aeabi_dcmpgt>
 8006f28:	b140      	cbz	r0, 8006f3c <floor+0x44>
 8006f2a:	2c00      	cmp	r4, #0
 8006f2c:	da59      	bge.n	8006fe2 <floor+0xea>
 8006f2e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8006f32:	ea57 0503 	orrs.w	r5, r7, r3
 8006f36:	d001      	beq.n	8006f3c <floor+0x44>
 8006f38:	2500      	movs	r5, #0
 8006f3a:	4c2d      	ldr	r4, [pc, #180]	; (8006ff0 <floor+0xf8>)
 8006f3c:	4623      	mov	r3, r4
 8006f3e:	462f      	mov	r7, r5
 8006f40:	e025      	b.n	8006f8e <floor+0x96>
 8006f42:	4a2c      	ldr	r2, [pc, #176]	; (8006ff4 <floor+0xfc>)
 8006f44:	fa42 f806 	asr.w	r8, r2, r6
 8006f48:	ea01 0208 	and.w	r2, r1, r8
 8006f4c:	4302      	orrs	r2, r0
 8006f4e:	d01e      	beq.n	8006f8e <floor+0x96>
 8006f50:	a325      	add	r3, pc, #148	; (adr r3, 8006fe8 <floor+0xf0>)
 8006f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f56:	f7f9 f96d 	bl	8000234 <__adddf3>
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	f7f9 fdaf 	bl	8000ac0 <__aeabi_dcmpgt>
 8006f62:	2800      	cmp	r0, #0
 8006f64:	d0ea      	beq.n	8006f3c <floor+0x44>
 8006f66:	2c00      	cmp	r4, #0
 8006f68:	bfbe      	ittt	lt
 8006f6a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8006f6e:	fa43 f606 	asrlt.w	r6, r3, r6
 8006f72:	19a4      	addlt	r4, r4, r6
 8006f74:	2500      	movs	r5, #0
 8006f76:	ea24 0408 	bic.w	r4, r4, r8
 8006f7a:	e7df      	b.n	8006f3c <floor+0x44>
 8006f7c:	2e33      	cmp	r6, #51	; 0x33
 8006f7e:	dd0a      	ble.n	8006f96 <floor+0x9e>
 8006f80:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006f84:	d103      	bne.n	8006f8e <floor+0x96>
 8006f86:	f7f9 f955 	bl	8000234 <__adddf3>
 8006f8a:	4607      	mov	r7, r0
 8006f8c:	460b      	mov	r3, r1
 8006f8e:	4638      	mov	r0, r7
 8006f90:	4619      	mov	r1, r3
 8006f92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f96:	f04f 32ff 	mov.w	r2, #4294967295
 8006f9a:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8006f9e:	fa22 f808 	lsr.w	r8, r2, r8
 8006fa2:	ea18 0f00 	tst.w	r8, r0
 8006fa6:	d0f2      	beq.n	8006f8e <floor+0x96>
 8006fa8:	a30f      	add	r3, pc, #60	; (adr r3, 8006fe8 <floor+0xf0>)
 8006faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fae:	f7f9 f941 	bl	8000234 <__adddf3>
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	f7f9 fd83 	bl	8000ac0 <__aeabi_dcmpgt>
 8006fba:	2800      	cmp	r0, #0
 8006fbc:	d0be      	beq.n	8006f3c <floor+0x44>
 8006fbe:	2c00      	cmp	r4, #0
 8006fc0:	da02      	bge.n	8006fc8 <floor+0xd0>
 8006fc2:	2e14      	cmp	r6, #20
 8006fc4:	d103      	bne.n	8006fce <floor+0xd6>
 8006fc6:	3401      	adds	r4, #1
 8006fc8:	ea25 0508 	bic.w	r5, r5, r8
 8006fcc:	e7b6      	b.n	8006f3c <floor+0x44>
 8006fce:	2301      	movs	r3, #1
 8006fd0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006fd4:	fa03 f606 	lsl.w	r6, r3, r6
 8006fd8:	4435      	add	r5, r6
 8006fda:	42bd      	cmp	r5, r7
 8006fdc:	bf38      	it	cc
 8006fde:	18e4      	addcc	r4, r4, r3
 8006fe0:	e7f2      	b.n	8006fc8 <floor+0xd0>
 8006fe2:	2500      	movs	r5, #0
 8006fe4:	462c      	mov	r4, r5
 8006fe6:	e7a9      	b.n	8006f3c <floor+0x44>
 8006fe8:	8800759c 	.word	0x8800759c
 8006fec:	7e37e43c 	.word	0x7e37e43c
 8006ff0:	bff00000 	.word	0xbff00000
 8006ff4:	000fffff 	.word	0x000fffff

08006ff8 <rint>:
 8006ff8:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 8006ffc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ffe:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 8007002:	2f13      	cmp	r7, #19
 8007004:	4602      	mov	r2, r0
 8007006:	460b      	mov	r3, r1
 8007008:	460c      	mov	r4, r1
 800700a:	4605      	mov	r5, r0
 800700c:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 8007010:	dc59      	bgt.n	80070c6 <rint+0xce>
 8007012:	2f00      	cmp	r7, #0
 8007014:	da2a      	bge.n	800706c <rint+0x74>
 8007016:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800701a:	4301      	orrs	r1, r0
 800701c:	d022      	beq.n	8007064 <rint+0x6c>
 800701e:	f3c3 0113 	ubfx	r1, r3, #0, #20
 8007022:	4301      	orrs	r1, r0
 8007024:	424d      	negs	r5, r1
 8007026:	430d      	orrs	r5, r1
 8007028:	4936      	ldr	r1, [pc, #216]	; (8007104 <rint+0x10c>)
 800702a:	0c5c      	lsrs	r4, r3, #17
 800702c:	0b2d      	lsrs	r5, r5, #12
 800702e:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 8007032:	0464      	lsls	r4, r4, #17
 8007034:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007038:	ea45 0304 	orr.w	r3, r5, r4
 800703c:	e9d1 4500 	ldrd	r4, r5, [r1]
 8007040:	4620      	mov	r0, r4
 8007042:	4629      	mov	r1, r5
 8007044:	f7f9 f8f6 	bl	8000234 <__adddf3>
 8007048:	e9cd 0100 	strd	r0, r1, [sp]
 800704c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007050:	462b      	mov	r3, r5
 8007052:	4622      	mov	r2, r4
 8007054:	f7f9 f8ec 	bl	8000230 <__aeabi_dsub>
 8007058:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800705c:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 8007060:	4602      	mov	r2, r0
 8007062:	460b      	mov	r3, r1
 8007064:	4610      	mov	r0, r2
 8007066:	4619      	mov	r1, r3
 8007068:	b003      	add	sp, #12
 800706a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800706c:	4926      	ldr	r1, [pc, #152]	; (8007108 <rint+0x110>)
 800706e:	4139      	asrs	r1, r7
 8007070:	ea03 0001 	and.w	r0, r3, r1
 8007074:	4310      	orrs	r0, r2
 8007076:	d0f5      	beq.n	8007064 <rint+0x6c>
 8007078:	084b      	lsrs	r3, r1, #1
 800707a:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 800707e:	ea52 0501 	orrs.w	r5, r2, r1
 8007082:	d00c      	beq.n	800709e <rint+0xa6>
 8007084:	ea24 0303 	bic.w	r3, r4, r3
 8007088:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800708c:	2f13      	cmp	r7, #19
 800708e:	bf0c      	ite	eq
 8007090:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 8007094:	2500      	movne	r5, #0
 8007096:	fa44 f707 	asr.w	r7, r4, r7
 800709a:	ea43 0407 	orr.w	r4, r3, r7
 800709e:	4919      	ldr	r1, [pc, #100]	; (8007104 <rint+0x10c>)
 80070a0:	4623      	mov	r3, r4
 80070a2:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 80070a6:	462a      	mov	r2, r5
 80070a8:	e9d6 4500 	ldrd	r4, r5, [r6]
 80070ac:	4620      	mov	r0, r4
 80070ae:	4629      	mov	r1, r5
 80070b0:	f7f9 f8c0 	bl	8000234 <__adddf3>
 80070b4:	e9cd 0100 	strd	r0, r1, [sp]
 80070b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80070bc:	4622      	mov	r2, r4
 80070be:	462b      	mov	r3, r5
 80070c0:	f7f9 f8b6 	bl	8000230 <__aeabi_dsub>
 80070c4:	e7cc      	b.n	8007060 <rint+0x68>
 80070c6:	2f33      	cmp	r7, #51	; 0x33
 80070c8:	dd05      	ble.n	80070d6 <rint+0xde>
 80070ca:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 80070ce:	d1c9      	bne.n	8007064 <rint+0x6c>
 80070d0:	f7f9 f8b0 	bl	8000234 <__adddf3>
 80070d4:	e7c4      	b.n	8007060 <rint+0x68>
 80070d6:	f04f 31ff 	mov.w	r1, #4294967295
 80070da:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 80070de:	fa21 f10c 	lsr.w	r1, r1, ip
 80070e2:	4208      	tst	r0, r1
 80070e4:	d0be      	beq.n	8007064 <rint+0x6c>
 80070e6:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 80070ea:	bf18      	it	ne
 80070ec:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 80070f0:	ea4f 0351 	mov.w	r3, r1, lsr #1
 80070f4:	bf1e      	ittt	ne
 80070f6:	ea20 0303 	bicne.w	r3, r0, r3
 80070fa:	fa45 fc0c 	asrne.w	ip, r5, ip
 80070fe:	ea43 050c 	orrne.w	r5, r3, ip
 8007102:	e7cc      	b.n	800709e <rint+0xa6>
 8007104:	08007390 	.word	0x08007390
 8007108:	000fffff 	.word	0x000fffff

0800710c <_init>:
 800710c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800710e:	bf00      	nop
 8007110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007112:	bc08      	pop	{r3}
 8007114:	469e      	mov	lr, r3
 8007116:	4770      	bx	lr

08007118 <_fini>:
 8007118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800711a:	bf00      	nop
 800711c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800711e:	bc08      	pop	{r3}
 8007120:	469e      	mov	lr, r3
 8007122:	4770      	bx	lr
